{
  "nav": [
    {
      "title": "Experiment Introduction",
      "file": "experiment-intro.md",
      "children": []
    },
    {
      "title": "The Rust Programming Language",
      "file": "title-page.md",
      "children": []
    },
    {
      "title": "Foreword",
      "file": "foreword.md",
      "children": []
    },
    {
      "title": "Introduction",
      "file": "ch00-00-introduction.md",
      "children": []
    },
    {
      "title": "Getting Started",
      "file": "ch01-00-getting-started.md",
      "children": [
        {
          "title": "Installation",
          "file": "ch01-01-installation.md",
          "children": []
        },
        {
          "title": "Hello, World!",
          "file": "ch01-02-hello-world.md",
          "children": []
        },
        {
          "title": "Hello, Cargo!",
          "file": "ch01-03-hello-cargo.md",
          "children": []
        }
      ]
    },
    {
      "title": "Programming a Guessing Game",
      "file": "ch02-00-guessing-game-tutorial.md",
      "children": []
    },
    {
      "title": "Common Programming Concepts",
      "file": "ch03-00-common-programming-concepts.md",
      "children": [
        {
          "title": "Variables and Mutability",
          "file": "ch03-01-variables-and-mutability.md",
          "children": []
        },
        {
          "title": "Data Types",
          "file": "ch03-02-data-types.md",
          "children": []
        },
        {
          "title": "Functions",
          "file": "ch03-03-how-functions-work.md",
          "children": []
        },
        {
          "title": "Comments",
          "file": "ch03-04-comments.md",
          "children": []
        },
        {
          "title": "Control Flow",
          "file": "ch03-05-control-flow.md",
          "children": []
        }
      ]
    },
    {
      "title": "Understanding Ownership",
      "file": "ch04-00-understanding-ownership.md",
      "children": [
        {
          "title": "What is Ownership?",
          "file": "ch04-01-what-is-ownership.md",
          "children": []
        },
        {
          "title": "References and Borrowing",
          "file": "ch04-02-references-and-borrowing.md",
          "children": []
        },
        {
          "title": "Fixing Ownership Errors",
          "file": "ch04-03-fixing-ownership-errors.md",
          "children": []
        },
        {
          "title": "The Slice Type",
          "file": "ch04-04-slices.md",
          "children": []
        },
        {
          "title": "Ownership Recap",
          "file": "ch04-05-ownership-recap.md",
          "children": []
        }
      ]
    },
    {
      "title": "Using Structs to Structure Related Data",
      "file": "ch05-00-structs.md",
      "children": [
        {
          "title": "Defining and Instantiating Structs",
          "file": "ch05-01-defining-structs.md",
          "children": []
        },
        {
          "title": "An Example Program Using Structs",
          "file": "ch05-02-example-structs.md",
          "children": []
        },
        {
          "title": "Method Syntax",
          "file": "ch05-03-method-syntax.md",
          "children": []
        }
      ]
    },
    {
      "title": "Enums and Pattern Matching",
      "file": "ch06-00-enums.md",
      "children": [
        {
          "title": "Defining an Enum",
          "file": "ch06-01-defining-an-enum.md",
          "children": []
        },
        {
          "title": "The `match` Control Flow Construct",
          "file": "ch06-02-match.md",
          "children": []
        },
        {
          "title": "Concise Control Flow with `if let` and `let else`",
          "file": "ch06-03-if-let.md",
          "children": []
        },
        {
          "title": "Ownership Inventory #1",
          "file": "ch06-04-inventory.md",
          "children": []
        }
      ]
    },
    {
      "title": "Managing Growing Projects with Packages, Crates, and Modules",
      "file": "ch07-00-managing-growing-projects-with-packages-crates-and-modules.md",
      "children": [
        {
          "title": "Packages and Crates",
          "file": "ch07-01-packages-and-crates.md",
          "children": []
        },
        {
          "title": "Defining Modules to Control Scope and Privacy",
          "file": "ch07-02-defining-modules-to-control-scope-and-privacy.md",
          "children": []
        },
        {
          "title": "Paths for Referring to an Item in the Module Tree",
          "file": "ch07-03-paths-for-referring-to-an-item-in-the-module-tree.md",
          "children": []
        },
        {
          "title": "Bringing Paths Into Scope with the `use` Keyword",
          "file": "ch07-04-bringing-paths-into-scope-with-the-use-keyword.md",
          "children": []
        },
        {
          "title": "Separating Modules into Different Files",
          "file": "ch07-05-separating-modules-into-different-files.md",
          "children": []
        }
      ]
    },
    {
      "title": "Common Collections",
      "file": "ch08-00-common-collections.md",
      "children": [
        {
          "title": "Storing Lists of Values with Vectors",
          "file": "ch08-01-vectors.md",
          "children": []
        },
        {
          "title": "Storing UTF-8 Encoded Text with Strings",
          "file": "ch08-02-strings.md",
          "children": []
        },
        {
          "title": "Storing Keys with Associated Values in Hash Maps",
          "file": "ch08-03-hash-maps.md",
          "children": []
        },
        {
          "title": "Ownership Inventory #2",
          "file": "ch08-04-inventory.md",
          "children": []
        }
      ]
    },
    {
      "title": "Error Handling",
      "file": "ch09-00-error-handling.md",
      "children": [
        {
          "title": "Unrecoverable Errors with `panic!`",
          "file": "ch09-01-unrecoverable-errors-with-panic.md",
          "children": []
        },
        {
          "title": "Recoverable Errors with `Result`",
          "file": "ch09-02-recoverable-errors-with-result.md",
          "children": []
        },
        {
          "title": "To `panic!` or Not to `panic!`",
          "file": "ch09-03-to-panic-or-not-to-panic.md",
          "children": []
        }
      ]
    },
    {
      "title": "Generic Types, Traits, and Lifetimes",
      "file": "ch10-00-generics.md",
      "children": [
        {
          "title": "Generic Data Types",
          "file": "ch10-01-syntax.md",
          "children": []
        },
        {
          "title": "Traits: Defining Shared Behavior",
          "file": "ch10-02-traits.md",
          "children": []
        },
        {
          "title": "Validating References with Lifetimes",
          "file": "ch10-03-lifetime-syntax.md",
          "children": []
        },
        {
          "title": "Ownership Inventory #3",
          "file": "ch10-04-inventory.md",
          "children": []
        }
      ]
    },
    {
      "title": "Writing Automated Tests",
      "file": "ch11-00-testing.md",
      "children": [
        {
          "title": "How to Write Tests",
          "file": "ch11-01-writing-tests.md",
          "children": []
        },
        {
          "title": "Controlling How Tests Are Run",
          "file": "ch11-02-running-tests.md",
          "children": []
        },
        {
          "title": "Test Organization",
          "file": "ch11-03-test-organization.md",
          "children": []
        }
      ]
    },
    {
      "title": "An I/O Project: Building a Command Line Program",
      "file": "ch12-00-an-io-project.md",
      "children": [
        {
          "title": "Accepting Command Line Arguments",
          "file": "ch12-01-accepting-command-line-arguments.md",
          "children": []
        },
        {
          "title": "Reading a File",
          "file": "ch12-02-reading-a-file.md",
          "children": []
        },
        {
          "title": "Refactoring to Improve Modularity and Error Handling",
          "file": "ch12-03-improving-error-handling-and-modularity.md",
          "children": []
        },
        {
          "title": "Developing the Library’s Functionality with Test Driven Development",
          "file": "ch12-04-testing-the-librarys-functionality.md",
          "children": []
        },
        {
          "title": "Working with Environment Variables",
          "file": "ch12-05-working-with-environment-variables.md",
          "children": []
        },
        {
          "title": "Writing Error Messages to Standard Error Instead of Standard Output",
          "file": "ch12-06-writing-to-stderr-instead-of-stdout.md",
          "children": []
        }
      ]
    },
    {
      "title": "Functional Language Features: Iterators and Closures",
      "file": "ch13-00-functional-features.md",
      "children": [
        {
          "title": "Closures: Anonymous Functions that Capture Their Environment",
          "file": "ch13-01-closures.md",
          "children": []
        },
        {
          "title": "Processing a Series of Items with Iterators",
          "file": "ch13-02-iterators.md",
          "children": []
        },
        {
          "title": "Improving Our I/O Project",
          "file": "ch13-03-improving-our-io-project.md",
          "children": []
        },
        {
          "title": "Comparing Performance: Loops vs. Iterators",
          "file": "ch13-04-performance.md",
          "children": []
        }
      ]
    },
    {
      "title": "More about Cargo and Crates.io",
      "file": "ch14-00-more-about-cargo.md",
      "children": [
        {
          "title": "Customizing Builds with Release Profiles",
          "file": "ch14-01-release-profiles.md",
          "children": []
        },
        {
          "title": "Publishing a Crate to Crates.io",
          "file": "ch14-02-publishing-to-crates-io.md",
          "children": []
        },
        {
          "title": "Cargo Workspaces",
          "file": "ch14-03-cargo-workspaces.md",
          "children": []
        },
        {
          "title": "Installing Binaries from Crates.io with `cargo install`",
          "file": "ch14-04-installing-binaries.md",
          "children": []
        },
        {
          "title": "Extending Cargo with Custom Commands",
          "file": "ch14-05-extending-cargo.md",
          "children": []
        }
      ]
    },
    {
      "title": "Smart Pointers",
      "file": "ch15-00-smart-pointers.md",
      "children": [
        {
          "title": "Using `Box<T>` to Point to Data on the Heap",
          "file": "ch15-01-box.md",
          "children": []
        },
        {
          "title": "Treating Smart Pointers Like Regular References with `Deref`",
          "file": "ch15-02-deref.md",
          "children": []
        },
        {
          "title": "Running Code on Cleanup with the `Drop` Trait",
          "file": "ch15-03-drop.md",
          "children": []
        },
        {
          "title": "`Rc<T>`, the Reference Counted Smart Pointer",
          "file": "ch15-04-rc.md",
          "children": []
        },
        {
          "title": "`RefCell<T>` and the Interior Mutability Pattern",
          "file": "ch15-05-interior-mutability.md",
          "children": []
        },
        {
          "title": "Reference Cycles Can Leak Memory",
          "file": "ch15-06-reference-cycles.md",
          "children": []
        }
      ]
    },
    {
      "title": "Fearless Concurrency",
      "file": "ch16-00-concurrency.md",
      "children": [
        {
          "title": "Using Threads to Run Code Simultaneously",
          "file": "ch16-01-threads.md",
          "children": []
        },
        {
          "title": "Using Message Passing to Transfer Data Between Threads",
          "file": "ch16-02-message-passing.md",
          "children": []
        },
        {
          "title": "Shared-State Concurrency",
          "file": "ch16-03-shared-state.md",
          "children": []
        },
        {
          "title": "Extensible Concurrency with the `Send` and `Sync` Traits",
          "file": "ch16-04-extensible-concurrency-sync-and-send.md",
          "children": []
        }
      ]
    },
    {
      "title": "Fundamentals of Asynchronous Programming: Async, Await, Futures, and Streams",
      "file": "ch17-00-async-await.md",
      "children": [
        {
          "title": "Futures and the Async Syntax",
          "file": "ch17-01-futures-and-syntax.md",
          "children": []
        },
        {
          "title": "Applying Concurrency with Async",
          "file": "ch17-02-concurrency-with-async.md",
          "children": []
        },
        {
          "title": "Working With Any Number of Futures",
          "file": "ch17-03-more-futures.md",
          "children": []
        },
        {
          "title": "Streams: Futures in Sequence",
          "file": "ch17-04-streams.md",
          "children": []
        },
        {
          "title": "A Closer Look at the Traits for Async",
          "file": "ch17-05-traits-for-async.md",
          "children": []
        },
        {
          "title": "Futures, Tasks, and Threads",
          "file": "ch17-06-futures-tasks-threads.md",
          "children": []
        }
      ]
    },
    {
      "title": "Object Oriented Programming Features of Rust",
      "file": "ch18-00-oop.md",
      "children": [
        {
          "title": "Characteristics of Object-Oriented Languages",
          "file": "ch18-01-what-is-oo.md",
          "children": []
        },
        {
          "title": "Using Trait Objects That Allow for Values of Different Types",
          "file": "ch18-02-trait-objects.md",
          "children": []
        },
        {
          "title": "Implementing an Object-Oriented Design Pattern",
          "file": "ch18-03-oo-design-patterns.md",
          "children": []
        },
        {
          "title": "Ownership Inventory #4",
          "file": "ch18-04-inventory.md",
          "children": []
        },
        {
          "title": "Design Trade-offs",
          "file": "ch18-05-design-challenge.md",
          "children": []
        }
      ]
    },
    {
      "title": "Patterns and Matching",
      "file": "ch19-00-patterns.md",
      "children": [
        {
          "title": "All the Places Patterns Can Be Used",
          "file": "ch19-01-all-the-places-for-patterns.md",
          "children": []
        },
        {
          "title": "Refutability: Whether a Pattern Might Fail to Match",
          "file": "ch19-02-refutability.md",
          "children": []
        },
        {
          "title": "Pattern Syntax",
          "file": "ch19-03-pattern-syntax.md",
          "children": []
        }
      ]
    },
    {
      "title": "Advanced Features",
      "file": "ch20-00-advanced-features.md",
      "children": [
        {
          "title": "Unsafe Rust",
          "file": "ch20-01-unsafe-rust.md",
          "children": []
        },
        {
          "title": "Advanced Traits",
          "file": "ch20-02-advanced-traits.md",
          "children": []
        },
        {
          "title": "Advanced Types",
          "file": "ch20-03-advanced-types.md",
          "children": []
        },
        {
          "title": "Advanced Functions and Closures",
          "file": "ch20-04-advanced-functions-and-closures.md",
          "children": []
        },
        {
          "title": "Macros",
          "file": "ch20-05-macros.md",
          "children": []
        }
      ]
    },
    {
      "title": "Final Project: Building a Multithreaded Web Server",
      "file": "ch21-00-final-project-a-web-server.md",
      "children": [
        {
          "title": "Building a Single-Threaded Web Server",
          "file": "ch21-01-single-threaded.md",
          "children": []
        },
        {
          "title": "Turning Our Single-Threaded Server into a Multithreaded Server",
          "file": "ch21-02-multithreaded.md",
          "children": []
        },
        {
          "title": "Graceful Shutdown and Cleanup",
          "file": "ch21-03-graceful-shutdown-and-cleanup.md",
          "children": []
        }
      ]
    },
    {
      "title": "End of Experiment",
      "file": "end-of-experiment.md",
      "children": []
    },
    {
      "title": "Appendix",
      "file": "appendix-00.md",
      "children": [
        {
          "title": "A - Keywords",
          "file": "appendix-01-keywords.md",
          "children": []
        },
        {
          "title": "B - Operators and Symbols",
          "file": "appendix-02-operators.md",
          "children": []
        },
        {
          "title": "C - Derivable Traits",
          "file": "appendix-03-derivable-traits.md",
          "children": []
        },
        {
          "title": "D - Useful Development Tools",
          "file": "appendix-04-useful-development-tools.md",
          "children": []
        },
        {
          "title": "E - Editions",
          "file": "appendix-05-editions.md",
          "children": []
        },
        {
          "title": "F - Translations of the Book",
          "file": "appendix-06-translation.md",
          "children": []
        },
        {
          "title": "G - How Rust is Made and “Nightly Rust”",
          "file": "appendix-07-nightly-rust.md",
          "children": []
        }
      ]
    }
  ],
  "chapters": [
    {
      "title": "Experiment Introduction",
      "file": "experiment-intro.md",
      "elements": [
        {
          "kind": "text",
          "content": "Welcome to the Rust Book experiment, and thank you for your participation! This book is an experimental fork of [*The Rust Programming Language*](http://doc.rust-lang.org/book/) which introduces several mechanics to make learning Rust more interactive. We'll briefly walk through each mechanic:"
        },
        {
          "kind": "text",
          "content": "## 1. Quizzes"
        },
        {
          "kind": "text",
          "content": "The main mechanic is **quizzes**: each page has a few quizzes about the page's content. We have two rules about quizzes for this experiment:"
        },
        {
          "kind": "text",
          "content": "1. **Take a quiz as soon as you get to it.**\n2. **Do not skip a quiz.**"
        },
        {
          "kind": "text",
          "content": "(We don't enforce these rules, but please follow them!)"
        },
        {
          "kind": "text",
          "content": "Every quiz looks like the one below. Try it out by clicking \"Start\"."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "d172fc53-0220-4ff4-83c9-9c0a6834dd8e",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "What is 1 + 1? (Try clicking a wrong answer.)",
                  "distractors": [
                    "0",
                    "-999",
                    "11"
                  ]
                },
                "answer": {
                  "answer": "2"
                },
                "context": "See *Principia Mathematica* for an explanation of this fact.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "If you get a question incorrect, you can choose to either retry the quiz, or see the correct answers. We encourage you to retry the quiz until you get 100% &mdash; feel free to review the content before retrying the quiz. Note that once you see the correct answers, you cannot retry the quiz."
        },
        {
          "kind": "text",
          "content": "If you spot an issue in a quiz or other part of the book, you can file an issue on our Github repository: <https://github.com/cognitive-engineering-lab/rust-book>"
        },
        {
          "kind": "text",
          "content": "## 2. Highlighting"
        },
        {
          "kind": "text",
          "content": "Another mechanic is **highlighting**: you can select any piece of text, and either highlight it or leave a comment about it. Once you select some text, click the ✏️ button, and leave an optional comment."
        },
        {
          "kind": "text",
          "content": "👉 Try highlighting this text! 👈"
        },
        {
          "kind": "text",
          "content": "You can use highlights to save information for yourself. You can also use highlights to give us feedback &mdash; for example, if you think a section of content is confusing, you can let us know."
        },
        {
          "kind": "text",
          "content": "> **Note:** your highlights will disappear if we change the content that you've highlighted. Also, your highlights are stored as a cookie. If you block cookies or change browsers, then you won't see your previous highlights."
        },
        {
          "kind": "text",
          "content": "## 3. ...and more!"
        },
        {
          "kind": "text",
          "content": "The book's content may change as you go through the experiment. We will update this page as we add new features. Here's the changelog:"
        },
        {
          "kind": "text",
          "content": "* September 26, 2024\n* Chris Krycho's chapter on async Rust has been added, along with new quiz questions.\n* February 16, 2023\n* A new chapter on ownership has replaced the previous Chapter 4.\n* January 18, 2023\n* Questions have been added for the remaining chapters of the book.\n* December 15, 2022\n* New sections called \"Ownership Inventory\" have been added throughout the book\nwith challenging ownership-related questions.\n* November 7, 2022\n* Only questions with incorrect answers will be shown on a retry.\n* Most multiple-choice questions will have their choices randomized.\n* Some questions will now prompt for your reasoning.\n* Many questions have been updated based on your feedback. Keep it coming!"
        },
        {
          "kind": "text",
          "content": "_Interested in participating in other experiments about making Rust easier to learn? Please sign up here:_ <https://forms.gle/U3jEUkb2fGXykp1DA>"
        },
        {
          "kind": "text",
          "content": "## 4. Publications"
        },
        {
          "kind": "text",
          "content": "Thus far, this experiment has led to two open-access publications. Check them out if you're interested to see the academic research behind this book:"
        },
        {
          "kind": "text",
          "content": "* [Profiling Programming Language Learning](https://dl.acm.org/doi/10.1145/3649812) <br />\nWill Crichton and Shriram Krishnamurthi. OOPSLA 2024. (Distinguished Paper!)"
        },
        {
          "kind": "text",
          "content": "* [A Grounded Conceptual Model for Ownership Types in Rust](https://dl.acm.org/doi/10.1145/3622841) <br />\nWill Crichton, Gavin Gray, and Shriram Krishnamurthi. OOPSLA 2023."
        },
        {
          "kind": "text",
          "content": "## 5. Acknowledgments"
        },
        {
          "kind": "text",
          "content": "Niko Matsakis and Amazon Web Services provided funding for this experiment. Carol Nichols and the Rust Foundation helped publicize the experiment. TRPL is the product of many people's hard work before we started this experiment."
        }
      ]
    },
    {
      "title": "The Rust Programming Language",
      "file": "title-page.md",
      "elements": [
        {
          "kind": "text",
          "content": "*by Steve Klabnik, Carol Nichols, and Chris Krycho, with contributions from the Rust Community*"
        },
        {
          "kind": "text",
          "content": "*(and with experimental modifications!)*"
        },
        {
          "kind": "text",
          "content": "This version of the text assumes you’re using Rust 1.85.0 (released 2025-02-17)\nor later with `edition = \"2024\"` in the Cargo.toml file of all projects to\nconfigure them to use Rust 2024 edition idioms. See the [“Installation” section\nof Chapter 1][install]<!-- ignore --> to install or update Rust."
        },
        {
          "kind": "text",
          "content": "The experimental version is only available online and in English.\nThe non-experimental version is available offline with installations of Rust made with `rustup`; run `rustup doc\n--book` to open."
        },
        {
          "kind": "text",
          "content": "Several community [translations] of the non-experimental version are also available.\nThe non-experimental text is available in [paperback and ebook format from No Starch\nPress][nsprust]."
        },
        {
          "kind": "text",
          "content": "[install]: ch01-01-installation.html\n[nsprust]: https://nostarch.com/rust-programming-language-2nd-edition\n[translations]: appendix-06-translation.html"
        }
      ]
    },
    {
      "title": "Foreword",
      "file": "foreword.md",
      "elements": [
        {
          "kind": "text",
          "content": "It wasn’t always so clear, but the Rust programming language is fundamentally\nabout _empowerment_: no matter what kind of code you are writing now, Rust\nempowers you to reach farther, to program with confidence in a wider variety of\ndomains than you did before."
        },
        {
          "kind": "text",
          "content": "Take, for example, “systems-level” work that deals with low-level details of\nmemory management, data representation, and concurrency. Traditionally, this\nrealm of programming is seen as arcane, accessible only to a select few who\nhave devoted the necessary years learning to avoid its infamous pitfalls. And\neven those who practice it do so with caution, lest their code be open to\nexploits, crashes, or corruption."
        },
        {
          "kind": "text",
          "content": "Rust breaks down these barriers by eliminating the old pitfalls and providing a\nfriendly, polished set of tools to help you along the way. Programmers who need\nto “dip down” into lower-level control can do so with Rust, without taking on\nthe customary risk of crashes or security holes, and without having to learn\nthe fine points of a fickle toolchain. Better yet, the language is designed to\nguide you naturally towards reliable code that is efficient in terms of speed\nand memory usage."
        },
        {
          "kind": "text",
          "content": "Programmers who are already working with low-level code can use Rust to raise\ntheir ambitions. For example, introducing parallelism in Rust is a relatively\nlow-risk operation: the compiler will catch the classical mistakes for you. And\nyou can tackle more aggressive optimizations in your code with the confidence\nthat you won’t accidentally introduce crashes or vulnerabilities."
        },
        {
          "kind": "text",
          "content": "But Rust isn’t limited to low-level systems programming. It’s expressive and\nergonomic enough to make CLI apps, web servers, and many other kinds of code\nquite pleasant to write — you’ll find simple examples of both later in the\nbook. Working with Rust allows you to build skills that transfer from one\ndomain to another; you can learn Rust by writing a web app, then apply those\nsame skills to target your Raspberry Pi."
        },
        {
          "kind": "text",
          "content": "This book fully embraces the potential of Rust to empower its users. It’s a\nfriendly and approachable text intended to help you level up not just your\nknowledge of Rust, but also your reach and confidence as a programmer in\ngeneral. So dive in, get ready to learn—and welcome to the Rust community!"
        },
        {
          "kind": "text",
          "content": "— Nicholas Matsakis and Aaron Turon"
        }
      ]
    },
    {
      "title": "Introduction",
      "file": "ch00-00-introduction.md",
      "elements": [
        {
          "kind": "text",
          "content": "> Note: This edition of the book is the same as [The Rust Programming\n> Language][nsprust] available in print and ebook format from [No Starch\n> Press][nsp]."
        },
        {
          "kind": "text",
          "content": "[nsprust]: https://nostarch.com/rust-programming-language-2nd-edition\n[nsp]: https://nostarch.com/"
        },
        {
          "kind": "text",
          "content": "Welcome to _The Rust Programming Language_, an introductory book about Rust.\nThe Rust programming language helps you write faster, more reliable software.\nHigh-level ergonomics and low-level control are often at odds in programming\nlanguage design; Rust challenges that conflict. Through balancing powerful\ntechnical capacity and a great developer experience, Rust gives you the option\nto control low-level details (such as memory usage) without all the hassle\ntraditionally associated with such control."
        },
        {
          "kind": "text",
          "content": "## Who Rust Is For"
        },
        {
          "kind": "text",
          "content": "Rust is ideal for many people for a variety of reasons. Let’s look at a few of\nthe most important groups."
        },
        {
          "kind": "text",
          "content": "### Teams of Developers"
        },
        {
          "kind": "text",
          "content": "Rust is proving to be a productive tool for collaborating among large teams of\ndevelopers with varying levels of systems programming knowledge. Low-level code\nis prone to various subtle bugs, which in most other languages can be caught\nonly through extensive testing and careful code review by experienced\ndevelopers. In Rust, the compiler plays a gatekeeper role by refusing to\ncompile code with these elusive bugs, including concurrency bugs. By working\nalongside the compiler, the team can spend their time focusing on the program’s\nlogic rather than chasing down bugs."
        },
        {
          "kind": "text",
          "content": "Rust also brings contemporary developer tools to the systems programming world:"
        },
        {
          "kind": "text",
          "content": "- Cargo, the included dependency manager and build tool, makes adding,\ncompiling, and managing dependencies painless and consistent across the Rust\necosystem.\n- The Rustfmt formatting tool ensures a consistent coding style across\ndevelopers.\n- The rust-analyzer powers Integrated Development Environment (IDE)\nintegration for code completion and inline error messages."
        },
        {
          "kind": "text",
          "content": "By using these and other tools in the Rust ecosystem, developers can be\nproductive while writing systems-level code."
        },
        {
          "kind": "text",
          "content": "### Students"
        },
        {
          "kind": "text",
          "content": "Rust is for students and those who are interested in learning about systems\nconcepts. Using Rust, many people have learned about topics like operating\nsystems development. The community is very welcoming and happy to answer\nstudent questions. Through efforts such as this book, the Rust teams want to\nmake systems concepts more accessible to more people, especially those new to\nprogramming."
        },
        {
          "kind": "text",
          "content": "### Companies"
        },
        {
          "kind": "text",
          "content": "Hundreds of companies, large and small, use Rust in production for a variety of\ntasks, including command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser."
        },
        {
          "kind": "text",
          "content": "### Open Source Developers"
        },
        {
          "kind": "text",
          "content": "Rust is for people who want to build the Rust programming language, community,\ndeveloper tools, and libraries. We’d love to have you contribute to the Rust\nlanguage."
        },
        {
          "kind": "text",
          "content": "### People Who Value Speed and Stability"
        },
        {
          "kind": "text",
          "content": "Rust is for people who crave speed and stability in a language. By speed, we\nmean both how quickly Rust code can run and the speed at which Rust lets you\nwrite programs. The Rust compiler’s checks ensure stability through feature\nadditions and refactoring. This is in contrast to the brittle legacy code in\nlanguages without these checks, which developers are often afraid to modify. By\nstriving for zero-cost abstractions—higher-level features that compile to\nlower-level code as fast as code written manually—Rust endeavors to make safe\ncode be fast code as well."
        },
        {
          "kind": "text",
          "content": "The Rust language hopes to support many other users as well; those mentioned\nhere are merely some of the biggest stakeholders. Overall, Rust’s greatest\nambition is to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety _and_ productivity, speed _and_ ergonomics. Give\nRust a try and see if its choices work for you."
        },
        {
          "kind": "text",
          "content": "## Who This Book Is For"
        },
        {
          "kind": "text",
          "content": "This book assumes that you’ve written code in another programming language but\ndoesn’t make any assumptions about which one. We’ve tried to make the material\nbroadly accessible to those from a wide variety of programming backgrounds. We\ndon’t spend a lot of time talking about what programming _is_ or how to think\nabout it. If you’re entirely new to programming, you would be better served by\nreading a book that specifically provides an introduction to programming."
        },
        {
          "kind": "text",
          "content": "## How to Use This Book"
        },
        {
          "kind": "text",
          "content": "In general, this book assumes that you’re reading it in sequence from front to\nback. Later chapters build on concepts in earlier chapters, and earlier\nchapters might not delve into details on a particular topic but will revisit\nthe topic in a later chapter."
        },
        {
          "kind": "text",
          "content": "You’ll find two kinds of chapters in this book: concept chapters and project\nchapters. In concept chapters, you’ll learn about an aspect of Rust. In project\nchapters, we’ll build small programs together, applying what you’ve learned so\nfar. Chapters 2, 12, and 21 are project chapters; the rest are concept chapters."
        },
        {
          "kind": "text",
          "content": "Chapter 1 explains how to install Rust, how to write a “Hello, world!” program,\nand how to use Cargo, Rust’s package manager and build tool. Chapter 2 is a\nhands-on introduction to writing a program in Rust, having you build up a\nnumber guessing game. Here we cover concepts at a high level, and later\nchapters will provide additional detail. If you want to get your hands dirty\nright away, Chapter 2 is the place for that. Chapter 3 covers Rust features\nthat are similar to those of other programming languages, and in Chapter 4\nyou’ll learn about Rust’s ownership system. If you’re a particularly meticulous\nlearner who prefers to learn every detail before moving on to the next, you\nmight want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter\n2 when you’d like to work on a project applying the details you’ve learned."
        },
        {
          "kind": "text",
          "content": "Chapter 5 discusses structs and methods, and Chapter 6 covers enums, `match`\nexpressions, and the `if let` control flow construct. You’ll use structs and\nenums to make custom types in Rust."
        },
        {
          "kind": "text",
          "content": "In Chapter 7, you’ll learn about Rust’s module system and about privacy rules\nfor organizing your code and its public Application Programming Interface\n(API). Chapter 8 discusses some common collection data structures that the\nstandard library provides, such as vectors, strings, and hash maps. Chapter 9\nexplores Rust’s error-handling philosophy and techniques."
        },
        {
          "kind": "text",
          "content": "Chapter 10 digs into generics, traits, and lifetimes, which give you the power\nto define code that applies to multiple types. Chapter 11 is all about testing,\nwhich even with Rust’s safety guarantees is necessary to ensure your program’s\nlogic is correct. In Chapter 12, we’ll build our own implementation of a subset\nof functionality from the `grep` command line tool that searches for text\nwithin files. For this, we’ll use many of the concepts we discussed in the\nprevious chapters."
        },
        {
          "kind": "text",
          "content": "Chapter 13 explores closures and iterators: features of Rust that come from\nfunctional programming languages. In Chapter 14, we’ll examine Cargo in more\ndepth and talk about best practices for sharing your libraries with others.\nChapter 15 discusses smart pointers that the standard library provides and the\ntraits that enable their functionality."
        },
        {
          "kind": "text",
          "content": "In Chapter 16, we’ll walk through different models of concurrent programming and\ntalk about how Rust helps you to program in multiple threads fearlessly. In\nChapter 17, we build on that by exploring Rust’s async and await syntax, along\nwith tasks, futures, and streams, and the lightweight concurrency model they\nenable."
        },
        {
          "kind": "text",
          "content": "Chapter 18 looks at how Rust idioms compare to object-oriented programming\nprinciples you might be familiar with. Chapter 19 is a reference on patterns and\npattern matching, which are powerful ways of expressing ideas throughout Rust\nprograms. Chapter 20 contains a smorgasbord of advanced topics of interest,\nincluding unsafe Rust, macros, and more about lifetimes, traits, types,\nfunctions, and closures."
        },
        {
          "kind": "text",
          "content": "In Chapter 21, we’ll complete a project in which we’ll implement a low-level\nmultithreaded web server!"
        },
        {
          "kind": "text",
          "content": "Finally, some appendixes contain useful information about the language in a more\nreference-like format. **Appendix A** covers Rust’s keywords, **Appendix B**\ncovers Rust’s operators and symbols, **Appendix C** covers derivable traits\nprovided by the standard library, **Appendix D** covers some useful development\ntools, and **Appendix E** explains Rust editions. In **Appendix F**, you can\nfind translations of the book, and in **Appendix G** we’ll cover how Rust is\nmade and what nightly Rust is."
        },
        {
          "kind": "text",
          "content": "There is no wrong way to read this book: if you want to skip ahead, go for it!\nYou might have to jump back to earlier chapters if you experience any\nconfusion. But do whatever works for you."
        },
        {
          "kind": "text",
          "content": "<span id=\"ferris\"></span>"
        },
        {
          "kind": "text",
          "content": "An important part of the process of learning Rust is learning how to read the\nerror messages the compiler displays: these will guide you toward working code.\nAs such, we’ll provide many examples that don’t compile along with the error\nmessage the compiler will show you in each situation. Know that if you enter\nand run a random example, it may not compile! Make sure you read the\nsurrounding text to see whether the example you’re trying to run is meant to\nerror. Ferris will also help you distinguish code that isn’t meant to work:"
        },
        {
          "kind": "text",
          "content": "| Ferris                                                                                                           | Meaning                                          |\n| ---------------------------------------------------------------------------------------------------------------- | ------------------------------------------------ |\n| <img src=\"img/ferris/does_not_compile.svg\" class=\"ferris-explain\" alt=\"Ferris with a question mark\"/>            | This code does not compile!                      |\n| <img src=\"img/ferris/panics.svg\" class=\"ferris-explain\" alt=\"Ferris throwing up their hands\"/>                   | This code panics!                                |\n| <img src=\"img/ferris/not_desired_behavior.svg\" class=\"ferris-explain\" alt=\"Ferris with one claw up, shrugging\"/> | This code does not produce the desired behavior. |"
        },
        {
          "kind": "text",
          "content": "In most situations, we’ll lead you to the correct version of any code that\ndoesn’t compile."
        },
        {
          "kind": "text",
          "content": "## Source Code"
        },
        {
          "kind": "text",
          "content": "The source files from which this book is generated can be found on\n[GitHub][book]."
        },
        {
          "kind": "text",
          "content": "[book]: https://github.com/rust-lang/book/tree/main/src"
        }
      ]
    },
    {
      "title": "Getting Started",
      "file": "ch01-00-getting-started.md",
      "elements": [
        {
          "kind": "text",
          "content": "Let’s start your Rust journey! There’s a lot to learn, but every journey starts\nsomewhere. In this chapter, we’ll discuss:"
        },
        {
          "kind": "text",
          "content": "- Installing Rust on Linux, macOS, and Windows\n- Writing a program that prints `Hello, world!`\n- Using `cargo`, Rust’s package manager and build system"
        }
      ]
    },
    {
      "title": "Installation",
      "file": "ch01-01-installation.md",
      "elements": [
        {
          "kind": "text",
          "content": "The first step is to install Rust. We’ll download Rust through `rustup`, a\ncommand line tool for managing Rust versions and associated tools. You’ll need\nan internet connection for the download."
        },
        {
          "kind": "text",
          "content": "> Note: If you prefer not to use `rustup` for some reason, please see the\n> [Other Rust Installation Methods page][otherinstall] for more options."
        },
        {
          "kind": "text",
          "content": "The following steps install the latest stable version of the Rust compiler.\nRust’s stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions because Rust often improves error messages and\nwarnings. In other words, any newer, stable version of Rust you install using\nthese steps should work as expected with the content of this book."
        },
        {
          "kind": "text",
          "content": "> ### Command Line Notation\n>\n> In this chapter and throughout the book, we’ll show some commands used in the\n> terminal. Lines that you should enter in a terminal all start with `$`. You\n> don’t need to type the `$` character; it’s the command line prompt shown to\n> indicate the start of each command. Lines that don’t start with `$` typically\n> show the output of the previous command. Additionally, PowerShell-specific\n> examples will use `>` rather than `$`."
        },
        {
          "kind": "text",
          "content": "### Installing `rustup` on Linux or macOS"
        },
        {
          "kind": "text",
          "content": "If you’re using Linux or macOS, open a terminal and enter the following command:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh"
          }
        },
        {
          "kind": "text",
          "content": "The command downloads a script and starts the installation of the `rustup`\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Rust is installed now. Great!"
          }
        },
        {
          "kind": "text",
          "content": "You will also need a _linker_, which is a program that Rust uses to join its\ncompiled outputs into one file. It is likely you already have one. If you get\nlinker errors, you should install a C compiler, which will typically include a\nlinker. A C compiler is also useful because some common Rust packages depend on\nC code and will need a C compiler."
        },
        {
          "kind": "text",
          "content": "On macOS, you can get a C compiler by running:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ xcode-select --install"
          }
        },
        {
          "kind": "text",
          "content": "Linux users should generally install GCC or Clang, according to their\ndistribution’s documentation. For example, if you use Ubuntu, you can install\nthe `build-essential` package."
        },
        {
          "kind": "text",
          "content": "### Installing `rustup` on Windows"
        },
        {
          "kind": "text",
          "content": "On Windows, go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions for installing Rust. At some point in the installation, you’ll\nbe prompted to install Visual Studio. This provides a linker and the native\nlibraries needed to compile programs. If you need more help with this step, see\n[https://rust-lang.github.io/rustup/installation/windows-msvc.html][msvc]"
        },
        {
          "kind": "text",
          "content": "The rest of this book uses commands that work in both _cmd.exe_ and PowerShell.\nIf there are specific differences, we’ll explain which to use."
        },
        {
          "kind": "text",
          "content": "### Troubleshooting"
        },
        {
          "kind": "text",
          "content": "To check whether you have Rust installed correctly, open a shell and enter this\nline:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ rustc --version"
          }
        },
        {
          "kind": "text",
          "content": "You should see the version number, commit hash, and commit date for the latest\nstable version that has been released, in the following format:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "rustc x.y.z (abcabcabc yyyy-mm-dd)"
          }
        },
        {
          "kind": "text",
          "content": "If you see this information, you have installed Rust successfully! If you don’t\nsee this information, check that Rust is in your `PATH`\nsystem variable as follows."
        },
        {
          "kind": "text",
          "content": "In Windows CMD, use:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "> echo %PATH%"
          }
        },
        {
          "kind": "text",
          "content": "In PowerShell, use:"
        },
        {
          "kind": "code",
          "content": {
            "language": "powershell",
            "flags": [],
            "code": "> echo $env:Path"
          }
        },
        {
          "kind": "text",
          "content": "In Linux and macOS, use:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ echo $PATH"
          }
        },
        {
          "kind": "text",
          "content": "If that’s all correct and Rust still isn’t working, there are a number of\nplaces you can get help. Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community]."
        },
        {
          "kind": "text",
          "content": "### Updating and Uninstalling"
        },
        {
          "kind": "text",
          "content": "Once Rust is installed via `rustup`, updating to a newly released version is\neasy. From your shell, run the following update script:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ rustup update"
          }
        },
        {
          "kind": "text",
          "content": "To uninstall Rust and `rustup`, run the following uninstall script from your\nshell:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ rustup self uninstall"
          }
        },
        {
          "kind": "text",
          "content": "### Local Documentation"
        },
        {
          "kind": "text",
          "content": "The installation of Rust also includes a local copy of the documentation so\nthat you can read it offline. Run `rustup doc` to open the local documentation\nin your browser."
        },
        {
          "kind": "text",
          "content": "Any time a type or function is provided by the standard library and you’re not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!"
        },
        {
          "kind": "text",
          "content": "### Text Editors and Integrated Development Environments"
        },
        {
          "kind": "text",
          "content": "This book makes no assumptions about what tools you use to author Rust code.\nJust about any text editor will get the job done! However, many text editors and\nintegrated development environments (IDEs) have built-in support for Rust. You\ncan always find a fairly current list of many editors and IDEs on [the tools\npage][tools] on the Rust website."
        },
        {
          "kind": "text",
          "content": "### Working Offline with This Book"
        },
        {
          "kind": "text",
          "content": "In several examples, we will use Rust packages beyond the standard library. To\nwork through those examples, you will either need to have an internet connection\nor to have downloaded those dependencies ahead of time. To download the\ndependencies ahead of time, you can run the following commands. (We’ll explain\nwhat `cargo` is and what each of these commands does in detail later.)"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new get-dependencies\n$ cd get-dependencies\n$ cargo add rand@0.8.5 trpl@0.2.0"
          }
        },
        {
          "kind": "text",
          "content": "This will cache the downloads for these packages so you will not need to\ndownload them later. Once you have run this command, you do not need to keep the\n`get-dependencies` folder. If you have run this command, you can use the\n`--offline` flag with all `cargo` commands in the rest of the book to use these\ncached versions instead of attempting to use the network."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "6286342a-84c1-47c5-bfd2-f34b51df813c",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "What is the name of the command-line tool for managing the version of Rust on your machine?"
                },
                "answer": {
                  "answer": "rustup"
                },
                "context": "For example, you can write `rustup update` to get the latest version of Rust.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[otherinstall]: https://forge.rust-lang.org/infra/other-installation-methods.html\n[install]: https://www.rust-lang.org/tools/install\n[msvc]: https://rust-lang.github.io/rustup/installation/windows-msvc.html\n[community]: https://www.rust-lang.org/community\n[tools]: https://www.rust-lang.org/tools"
        }
      ]
    },
    {
      "title": "Hello, World!",
      "file": "ch01-02-hello-world.md",
      "elements": [
        {
          "kind": "text",
          "content": "Now that you’ve installed Rust, it’s time to write your first Rust program.\nIt’s traditional when learning a new language to write a little program that\nprints the text `Hello, world!` to the screen, so we’ll do the same here!"
        },
        {
          "kind": "text",
          "content": "> Note: This book assumes basic familiarity with the command line. Rust makes\n> no specific demands about your editing or tooling or where your code lives, so\n> if you prefer to use an integrated development environment (IDE) instead of\n> the command line, feel free to use your favorite IDE. Many IDEs now have some\n> degree of Rust support; check the IDE’s documentation for details. The Rust\n> team has been focusing on enabling great IDE support via `rust-analyzer`. See\n> [Appendix D][devtools]<!-- ignore --> for more details."
        },
        {
          "kind": "text",
          "content": "### Creating a Project Directory"
        },
        {
          "kind": "text",
          "content": "You’ll start by making a directory to store your Rust code. It doesn’t matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a _projects_ directory in your home directory and keeping all\nyour projects there."
        },
        {
          "kind": "text",
          "content": "Open a terminal and enter the following commands to make a _projects_ directory\nand a directory for the “Hello, world!” project within the _projects_ directory."
        },
        {
          "kind": "text",
          "content": "For Linux, macOS, and PowerShell on Windows, enter this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world"
          }
        },
        {
          "kind": "text",
          "content": "For Windows CMD, enter this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "cmd",
            "flags": [],
            "code": "> mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world"
          }
        },
        {
          "kind": "text",
          "content": "### Writing and Running a Rust Program"
        },
        {
          "kind": "text",
          "content": "Next, make a new source file and call it _main.rs_. Rust files always end with\nthe _.rs_ extension. If you’re using more than one word in your filename, the\nconvention is to use an underscore to separate them. For example, use\n_hello_world.rs_ rather than _helloworld.rs_."
        },
        {
          "kind": "text",
          "content": "Now open the _main.rs_ file you just created and enter the code in Listing 1-1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"1-1\" file-name=\"main.rs\" caption=\"A program that prints `Hello, world!`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    println!(\"Hello, world!\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Save the file and go back to your terminal window in the\n_~/projects/hello_world_ directory. On Linux or macOS, enter the following\ncommands to compile and run the file:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ rustc main.rs\n$ ./main\nHello, world!"
          }
        },
        {
          "kind": "text",
          "content": "On Windows, enter the command `.\\main` instead of `./main`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "powershell",
            "flags": [],
            "code": "> rustc main.rs\n> .\\main\nHello, world!"
          }
        },
        {
          "kind": "text",
          "content": "Regardless of your operating system, the string `Hello, world!` should print to\nthe terminal. If you don’t see this output, refer back to the\n[“Troubleshooting”][troubleshooting]<!-- ignore --> part of the Installation\nsection for ways to get help."
        },
        {
          "kind": "text",
          "content": "If `Hello, world!` did print, congratulations! You’ve officially written a Rust\nprogram. That makes you a Rust programmer—welcome!"
        },
        {
          "kind": "text",
          "content": "### Anatomy of a Rust Program"
        },
        {
          "kind": "text",
          "content": "Let’s review this “Hello, world!” program in detail. Here’s the first piece of\nthe puzzle:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n\n}"
          }
        },
        {
          "kind": "text",
          "content": "These lines define a function named `main`. The `main` function is special: it\nis always the first code that runs in every executable Rust program. Here, the\nfirst line declares a function named `main` that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses `()`."
        },
        {
          "kind": "text",
          "content": "The function body is wrapped in `{}`. Rust requires curly brackets around all\nfunction bodies. It’s good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between."
        },
        {
          "kind": "text",
          "content": "> Note: If you want to stick to a standard style across Rust projects, you can\n> use an automatic formatter tool called `rustfmt` to format your code in a\n> particular style (more on `rustfmt` in\n> [Appendix D][devtools]<!-- ignore -->). The Rust team has included this tool\n> with the standard Rust distribution, as `rustc` is, so it should already be\n> installed on your computer!"
        },
        {
          "kind": "text",
          "content": "The body of the `main` function holds the following code:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "println!(\"Hello, world!\");"
          }
        },
        {
          "kind": "text",
          "content": "This line does all the work in this little program: it prints text to the\nscreen. There are three important details to notice here."
        },
        {
          "kind": "text",
          "content": "First, `println!` calls a Rust macro. If it had called a function instead, it\nwould be entered as `println` (without the `!`). Rust macros are a way to write\ncode that generates code to extend Rust syntax, and we’ll discuss them in more\ndetail in [Chapter 20][ch20-macros]<!-- ignore -->. For now, you just need to\nknow that using a `!` means that you’re calling a macro instead of a normal\nfunction and that macros don’t always follow the same rules as functions."
        },
        {
          "kind": "text",
          "content": "Second, you see the `\"Hello, world!\"` string. We pass this string as an argument\nto `println!`, and the string is printed to the screen."
        },
        {
          "kind": "text",
          "content": "Third, we end the line with a semicolon (`;`), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon."
        },
        {
          "kind": "text",
          "content": "### Compiling and Running Are Separate Steps"
        },
        {
          "kind": "text",
          "content": "You’ve just run a newly created program, so let’s examine each step in the\nprocess."
        },
        {
          "kind": "text",
          "content": "Before running a Rust program, you must compile it using the Rust compiler by\nentering the `rustc` command and passing it the name of your source file, like\nthis:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ rustc main.rs"
          }
        },
        {
          "kind": "text",
          "content": "If you have a C or C++ background, you’ll notice that this is similar to `gcc`\nor `clang`. After compiling successfully, Rust outputs a binary executable."
        },
        {
          "kind": "text",
          "content": "On Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the `ls` command in your shell:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ ls\nmain  main.rs"
          }
        },
        {
          "kind": "text",
          "content": "On Linux and macOS, you’ll see two files. With PowerShell on Windows, you’ll\nsee the same three files that you would see using CMD. With CMD on Windows, you\nwould enter the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "cmd",
            "flags": [],
            "code": "> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs"
          }
        },
        {
          "kind": "text",
          "content": "This shows the source code file with the _.rs_ extension, the executable file\n(_main.exe_ on Windows, but _main_ on all other platforms), and, when using\nWindows, a file containing debugging information with the _.pdb_ extension.\nFrom here, you run the _main_ or _main.exe_ file, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ ./main # or .\\main on Windows"
          }
        },
        {
          "kind": "text",
          "content": "If your _main.rs_ is your “Hello, world!” program, this line prints `Hello,\nworld!` to your terminal."
        },
        {
          "kind": "text",
          "content": "If you’re more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an _ahead-of-time compiled_ language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a _.rb_, _.py_, or\n_.js_ file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design."
        },
        {
          "kind": "text",
          "content": "Just compiling with `rustc` is fine for simple programs, but as your project\ngrows, you’ll want to manage all the options and make it easy to share your\ncode. Next, we’ll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "87c3b09e-84d3-49d7-8680-0b2d068a7fc5",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Every executable Rust program must contain a function with the name:"
                },
                "answer": {
                  "answer": "main"
                },
                "context": "In your program, you add a main function like this:\n\n```\nfn main() {\n  // your code here\n}\n```\n"
              },
              {
                "id": "0d78d302-eb3d-4ac7-a1ac-f2d661810744",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Let's say you have the following program in a file `hello.rs`:\n\n```\nfn main() {\n  println!(\"Hello world!\");\n}\n```\n\nSay you then run the command `rustc hello.rs` from the command-line. Which statement best describes what happens next?\n",
                  "distractors": [
                    "`rustc` will print an error because this is an invalid program",
                    "`rustc` executes the program and prints out `Hello world!`",
                    "`rustc` reformats `hello.rs` according to the Rust style guide"
                  ]
                },
                "answer": {
                  "answer": "`rustc` generates a binary executable named `hello`"
                },
                "context": "Running `rustc` checks and compiles your program, but does not execute it.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[troubleshooting]: ch01-01-installation.html#troubleshooting\n[devtools]: appendix-04-useful-development-tools.html\n[ch20-macros]: ch20-05-macros.html"
        }
      ]
    },
    {
      "title": "Hello, Cargo!",
      "file": "ch01-03-hello-cargo.md",
      "elements": [
        {
          "kind": "text",
          "content": "Cargo is Rust’s build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call the libraries that your code needs\n_dependencies_.)"
        },
        {
          "kind": "text",
          "content": "The simplest Rust programs, like the one we’ve written so far, don’t have any\ndependencies. If we had built the “Hello, world!” project with Cargo, it would\nonly use the part of Cargo that handles building your code. As you write more\ncomplex Rust programs, you’ll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do."
        },
        {
          "kind": "text",
          "content": "Because the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you’re using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n[“Installation”][installation]<!-- ignore --> section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing in your terminal:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo --version"
          }
        },
        {
          "kind": "text",
          "content": "If you see a version number, you have it! If you see an error, such as `command\nnot found`, look at the documentation for your method of installation to\ndetermine how to install Cargo separately."
        },
        {
          "kind": "text",
          "content": "### Creating a Project with Cargo"
        },
        {
          "kind": "text",
          "content": "Let’s create a new project using Cargo and look at how it differs from our\noriginal “Hello, world!” project. Navigate back to your _projects_ directory\n(or wherever you decided to store your code). Then, on any operating system,\nrun the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new hello_cargo\n$ cd hello_cargo"
          }
        },
        {
          "kind": "text",
          "content": "The first command creates a new directory and project called _hello_cargo_.\nWe’ve named our project _hello_cargo_, and Cargo creates its files in a\ndirectory of the same name."
        },
        {
          "kind": "text",
          "content": "Go into the _hello_cargo_ directory and list the files. You’ll see that Cargo\nhas generated two files and one directory for us: a _Cargo.toml_ file and a\n_src_ directory with a _main.rs_ file inside."
        },
        {
          "kind": "text",
          "content": "It has also initialized a new Git repository along with a _.gitignore_ file.\nGit files won’t be generated if you run `cargo new` within an existing Git\nrepository; you can override this behavior by using `cargo new --vcs=git`."
        },
        {
          "kind": "text",
          "content": "> Note: Git is a common version control system. You can change `cargo new` to\n> use a different version control system or no version control system by using\n> the `--vcs` flag. Run `cargo new --help` to see the available options."
        },
        {
          "kind": "text",
          "content": "Open _Cargo.toml_ in your text editor of choice. It should look similar to the\ncode in Listing 1-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"1-2\" file-name=\"Cargo.toml\" caption=\"Contents of *Cargo.toml* generated by `cargo new`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This file is in the [_TOML_][toml]<!-- ignore --> (_Tom’s Obvious, Minimal\nLanguage_) format, which is Cargo’s configuration format."
        },
        {
          "kind": "text",
          "content": "The first line, `[package]`, is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we’ll add other sections."
        },
        {
          "kind": "text",
          "content": "The next three lines set the configuration information Cargo needs to compile\nyour program: the name, the version, and the edition of Rust to use. We’ll talk\nabout the `edition` key in [Appendix E][appendix-e]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "The last line, `[dependencies]`, is the start of a section for you to list any\nof your project’s dependencies. In Rust, packages of code are referred to as\n_crates_. We won’t need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we’ll use this dependencies section then."
        },
        {
          "kind": "text",
          "content": "Now open _src/main.rs_ and take a look:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    println!(\"Hello, world!\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "Cargo has generated a “Hello, world!” program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our project and the\nproject Cargo generated are that Cargo placed the code in the _src_ directory\nand we have a _Cargo.toml_ configuration file in the top directory."
        },
        {
          "kind": "text",
          "content": "Cargo expects your source files to live inside the _src_ directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There’s a place for everything, and\neverything is in its place."
        },
        {
          "kind": "text",
          "content": "If you started a project that doesn’t use Cargo, as we did with the “Hello,\nworld!” project, you can convert it to a project that does use Cargo. Move the\nproject code into the _src_ directory and create an appropriate _Cargo.toml_\nfile. One easy way to get that _Cargo.toml_ file is to run `cargo init`, which\nwill create it for you automatically."
        },
        {
          "kind": "text",
          "content": "### Building and Running a Cargo Project"
        },
        {
          "kind": "text",
          "content": "Now let’s look at what’s different when we build and run the “Hello, world!”\nprogram with Cargo! From your _hello_cargo_ directory, build your project by\nentering the following command:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs"
          }
        },
        {
          "kind": "text",
          "content": "This command creates an executable file in _target/debug/hello_cargo_ (or\n_target\\debug\\hello_cargo.exe_ on Windows) rather than in your current\ndirectory. Because the default build is a debug build, Cargo puts the binary in\na directory named _debug_. You can run the executable with this command:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!"
          }
        },
        {
          "kind": "text",
          "content": "If all goes well, `Hello, world!` should print to the terminal. Running `cargo\nbuild` for the first time also causes Cargo to create a new file at the top\nlevel: _Cargo.lock_. This file keeps track of the exact versions of\ndependencies in your project. This project doesn’t have dependencies, so the\nfile is a bit sparse. You won’t ever need to change this file manually; Cargo\nmanages its contents for you."
        },
        {
          "kind": "text",
          "content": "We just built a project with `cargo build` and ran it with\n`./target/debug/hello_cargo`, but we can also use `cargo run` to compile the\ncode and then run the resultant executable all in one command:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!"
          }
        },
        {
          "kind": "text",
          "content": "Using `cargo run` is more convenient than having to remember to run `cargo\nbuild` and then use the whole path to the binary, so most developers use `cargo\nrun`."
        },
        {
          "kind": "text",
          "content": "Notice that this time we didn’t see output indicating that Cargo was compiling\n`hello_cargo`. Cargo figured out that the files hadn’t changed, so it didn’t\nrebuild but just ran the binary. If you had modified your source code, Cargo\nwould have rebuilt the project before running it, and you would have seen this\noutput:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!"
          }
        },
        {
          "kind": "text",
          "content": "Cargo also provides a command called `cargo check`. This command quickly checks\nyour code to make sure it compiles but doesn’t produce an executable:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs"
          }
        },
        {
          "kind": "text",
          "content": "Why would you not want an executable? Often, `cargo check` is much faster than\n`cargo build` because it skips the step of producing an executable. If you’re\ncontinually checking your work while writing the code, using `cargo check` will\nspeed up the process of letting you know if your project is still compiling! As\nsuch, many Rustaceans run `cargo check` periodically as they write their\nprogram to make sure it compiles. Then they run `cargo build` when they’re\nready to use the executable."
        },
        {
          "kind": "text",
          "content": "Let’s recap what we’ve learned so far about Cargo:"
        },
        {
          "kind": "text",
          "content": "- We can create a project using `cargo new`.\n- We can build a project using `cargo build`.\n- We can build and run a project in one step using `cargo run`.\n- We can build a project without producing a binary to check for errors using\n`cargo check`.\n- Instead of saving the result of the build in the same directory as our code,\nCargo stores it in the _target/debug_ directory."
        },
        {
          "kind": "text",
          "content": "An additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you’re working on. So, at this point, we’ll no\nlonger provide specific instructions for Linux and macOS versus Windows."
        },
        {
          "kind": "text",
          "content": "### Building for Release"
        },
        {
          "kind": "text",
          "content": "When your project is finally ready for release, you can use `cargo build\n--release` to compile it with optimizations. This command will create an\nexecutable in _target/release_ instead of _target/debug_. The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you’ll give to a user that won’t be rebuilt\nrepeatedly and that will run as fast as possible. If you’re benchmarking your\ncode’s running time, be sure to run `cargo build --release` and benchmark with\nthe executable in _target/release_."
        },
        {
          "kind": "text",
          "content": "### Cargo as Convention"
        },
        {
          "kind": "text",
          "content": "With simple projects, Cargo doesn’t provide a lot of value over just using\n`rustc`, but it will prove its worth as your programs become more intricate.\nOnce programs grow to multiple files or need a dependency, it’s much easier to\nlet Cargo coordinate the build."
        },
        {
          "kind": "text",
          "content": "Even though the `hello_cargo` project is simple, it now uses much of the real\ntooling you’ll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project’s directory, and build:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ git clone example.org/someproject\n$ cd someproject\n$ cargo build"
          }
        },
        {
          "kind": "text",
          "content": "For more information about Cargo, check out [its documentation][cargo]."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "c1b7cc2e-b5fb-4b67-b0bb-600d82931f08",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you just downloaded a Cargo project, and then you run `cargo run` at the command-line. Which statement is NOT true about what happens next?\n",
                  "distractors": [
                    "Cargo downloads and builds any dependencies of the project",
                    "Cargo builds the project into a binary in the `target/debug` directory",
                    "Cargo executes the project's binary"
                  ]
                },
                "answer": {
                  "answer": "Cargo watches for file changes and re-executes the binary on a change"
                },
                "context": "Cargo does not watch your files by default. But you can use plugins like [cargo-watch](https://crates.io/crates/cargo-watch) for this\npurpose.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "You’re already off to a great start on your Rust journey! In this chapter,\nyou’ve learned how to:"
        },
        {
          "kind": "text",
          "content": "- Install the latest stable version of Rust using `rustup`\n- Update to a newer Rust version\n- Open locally installed documentation\n- Write and run a “Hello, world!” program using `rustc` directly\n- Create and run a new project using the conventions of Cargo"
        },
        {
          "kind": "text",
          "content": "This is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we’ll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2."
        },
        {
          "kind": "text",
          "content": "[installation]: ch01-01-installation.html#installation\n[toml]: https://toml.io\n[appendix-e]: appendix-05-editions.html\n[cargo]: https://doc.rust-lang.org/cargo/"
        }
      ]
    },
    {
      "title": "Programming a Guessing Game",
      "file": "ch02-00-guessing-game-tutorial.md",
      "elements": [
        {
          "kind": "text",
          "content": "Let’s jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You’ll learn about `let`, `match`, methods, associated\nfunctions, external crates, and more! In the following chapters, we’ll explore\nthese ideas in more detail. In this chapter, you’ll just practice the\nfundamentals."
        },
        {
          "kind": "text",
          "content": "We’ll implement a classic beginner programming problem: a guessing game. Here’s\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit."
        },
        {
          "kind": "text",
          "content": "> **Note:** there are no quizzes in this chapter, since it is just supposed to give you a feel for the language."
        },
        {
          "kind": "text",
          "content": "## Setting Up a New Project"
        },
        {
          "kind": "text",
          "content": "To set up a new project, go to the _projects_ directory that you created in\nChapter 1 and make a new project using Cargo, like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new guessing_game\n$ cd guessing_game"
          }
        },
        {
          "kind": "text",
          "content": "The first command, `cargo new`, takes the name of the project (`guessing_game`)\nas the first argument. The second command changes to the new project’s\ndirectory."
        },
        {
          "kind": "text",
          "content": "Look at the generated _Cargo.toml_ file:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial\nrm -rf no-listing-01-cargo-new\ncargo new no-listing-01-cargo-new --name guessing_game\ncd no-listing-01-cargo-new\ncargo run > output.txt 2>&1\ncd ../../..\n-->"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/Cargo.toml}}"
          }
        },
        {
          "kind": "text",
          "content": "As you saw in Chapter 1, `cargo new` generates a “Hello, world!” program for\nyou. Check out the _src/main.rs_ file:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Now let’s compile this “Hello, world!” program and run it in the same step\nusing the `cargo run` command:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The `run` command comes in handy when you need to rapidly iterate on a project,\nas we’ll do in this game, quickly testing each iteration before moving on to\nthe next one."
        },
        {
          "kind": "text",
          "content": "Reopen the _src/main.rs_ file. You’ll be writing all the code in this file."
        },
        {
          "kind": "text",
          "content": "## Processing a Guess"
        },
        {
          "kind": "text",
          "content": "The first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we’ll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n_src/main.rs_."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"2-1\" file-name=\"src/main.rs\" caption=\"Code that gets a guess from the user and prints it\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code contains a lot of information, so let’s go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n`io` input/output library into scope. The `io` library comes from the standard\nlibrary, known as `std`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:io}}"
          }
        },
        {
          "kind": "text",
          "content": "By default, Rust has a set of items defined in the standard library that it\nbrings into the scope of every program. This set is called the _prelude_, and\nyou can see everything in it [in the standard library documentation][prelude]."
        },
        {
          "kind": "text",
          "content": "If a type you want to use isn’t in the prelude, you have to bring that type\ninto scope explicitly with a `use` statement. Using the `std::io` library\nprovides you with a number of useful features, including the ability to accept\nuser input."
        },
        {
          "kind": "text",
          "content": "As you saw in Chapter 1, the `main` function is the entry point into the\nprogram:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:main}}"
          }
        },
        {
          "kind": "text",
          "content": "The `fn` syntax declares a new function; the parentheses, `()`, indicate there\nare no parameters; and the curly bracket, `{`, starts the body of the function."
        },
        {
          "kind": "text",
          "content": "As you also learned in Chapter 1, `println!` is a macro that prints a string to\nthe screen:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print}}"
          }
        },
        {
          "kind": "text",
          "content": "This code is printing a prompt stating what the game is and requesting input\nfrom the user."
        },
        {
          "kind": "text",
          "content": "### Storing Values with Variables"
        },
        {
          "kind": "text",
          "content": "Next, we’ll create a _variable_ to store the user input, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:string}}"
          }
        },
        {
          "kind": "text",
          "content": "Now the program is getting interesting! There’s a lot going on in this little\nline. We use the `let` statement to create the variable. Here’s another example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let apples = 5;"
          }
        },
        {
          "kind": "text",
          "content": "This line creates a new variable named `apples` and binds it to the value 5. In\nRust, variables are immutable by default, meaning once we give the variable a\nvalue, the value won’t change. We’ll be discussing this concept in detail in\nthe [“Variables and Mutability”][variables-and-mutability]<!-- ignore -->\nsection in Chapter 3. To make a variable mutable, we add `mut` before the\nvariable name:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let apples = 5; // immutable\nlet mut bananas = 5; // mutable"
          }
        },
        {
          "kind": "text",
          "content": "> Note: The `//` syntax starts a comment that continues until the end of the\n> line. Rust ignores everything in comments. We’ll discuss comments in more\n> detail in [Chapter 3][comments]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "Returning to the guessing game program, you now know that `let mut guess` will\nintroduce a mutable variable named `guess`. The equal sign (`=`) tells Rust we\nwant to bind something to the variable now. On the right of the equal sign is\nthe value that `guess` is bound to, which is the result of calling\n`String::new`, a function that returns a new instance of a `String`.\n[`String`][string]<!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text."
        },
        {
          "kind": "text",
          "content": "The `::` syntax in the `::new` line indicates that `new` is an associated\nfunction of the `String` type. An _associated function_ is a function that’s\nimplemented on a type, in this case `String`. This `new` function creates a\nnew, empty string. You’ll find a `new` function on many types because it’s a\ncommon name for a function that makes a new value of some kind."
        },
        {
          "kind": "text",
          "content": "In full, the `let mut guess = String::new();` line has created a mutable\nvariable that is currently bound to a new, empty instance of a `String`. Whew!"
        },
        {
          "kind": "text",
          "content": "### Receiving User Input"
        },
        {
          "kind": "text",
          "content": "Recall that we included the input/output functionality from the standard\nlibrary with `use std::io;` on the first line of the program. Now we’ll call\nthe `stdin` function from the `io` module, which will allow us to handle user\ninput:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:read}}"
          }
        },
        {
          "kind": "text",
          "content": "If we hadn’t imported the `io` module with `use std::io;` at the beginning of\nthe program, we could still use the function by writing this function call as\n`std::io::stdin`. The `stdin` function returns an instance of\n[`std::io::Stdin`][iostdin]<!-- ignore -->, which is a type that represents a\nhandle to the standard input for your terminal."
        },
        {
          "kind": "text",
          "content": "Next, the line `.read_line(&mut guess)` calls the [`read_line`][read_line]<!--\nignore --> method on the standard input handle to get input from the user.\nWe’re also passing `&mut guess` as the argument to `read_line` to tell it what\nstring to store the user input in. The full job of `read_line` is to take\nwhatever the user types into standard input and append that into a string\n(without overwriting its contents), so we therefore pass that string as an\nargument. The string argument needs to be mutable so the method can change the\nstring’s content."
        },
        {
          "kind": "text",
          "content": "The `&` indicates that this argument is a _reference_, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust’s major advantages is how safe and easy it is to use\nreferences. You don’t need to know a lot of those details to finish this\nprogram. For now, all you need to know is that, like variables, references are\nimmutable by default. Hence, you need to write `&mut guess` rather than\n`&guess` to make it mutable. (Chapter 4 will explain references more\nthoroughly.)"
        },
        {
          "kind": "text",
          "content": "<!-- Old heading. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"handling-potential-failure-with-the-result-type\"></a>"
        },
        {
          "kind": "text",
          "content": "### Handling Potential Failure with `Result`"
        },
        {
          "kind": "text",
          "content": "We’re still working on this line of code. We’re now discussing a third line of\ntext, but note that it’s still part of a single logical line of code. The next\npart is this method:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:expect}}"
          }
        },
        {
          "kind": "text",
          "content": "We could have written this code as:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "io::stdin().read_line(&mut guess).expect(\"Failed to read line\");"
          }
        },
        {
          "kind": "text",
          "content": "However, one long line is difficult to read, so it’s best to divide it. It’s\noften wise to introduce a newline and other whitespace to help break up long\nlines when you call a method with the `.method_name()` syntax. Now let’s\ndiscuss what this line does."
        },
        {
          "kind": "text",
          "content": "As mentioned earlier, `read_line` puts whatever the user enters into the string\nwe pass to it, but it also returns a `Result` value. [`Result`][result]<!--\nignore --> is an [_enumeration_][enums]<!-- ignore -->, often called an _enum_,\nwhich is a type that can be in one of multiple possible states. We call each\npossible state a _variant_."
        },
        {
          "kind": "text",
          "content": "[Chapter 6][enums]<!-- ignore --> will cover enums in more detail. The purpose\nof these `Result` types is to encode error-handling information."
        },
        {
          "kind": "text",
          "content": "`Result`’s variants are `Ok` and `Err`. The `Ok` variant indicates the\noperation was successful, and it contains the successfully generated value.\nThe `Err` variant means the operation failed, and it contains information\nabout how or why the operation failed."
        },
        {
          "kind": "text",
          "content": "Values of the `Result` type, like values of any type, have methods defined on\nthem. An instance of `Result` has an [`expect` method][expect]<!-- ignore -->\nthat you can call. If this instance of `Result` is an `Err` value, `expect`\nwill cause the program to crash and display the message that you passed as an\nargument to `expect`. If the `read_line` method returns an `Err`, it would\nlikely be the result of an error coming from the underlying operating system.\nIf this instance of `Result` is an `Ok` value, `expect` will take the return\nvalue that `Ok` is holding and return just that value to you so you can use it.\nIn this case, that value is the number of bytes in the user’s input."
        },
        {
          "kind": "text",
          "content": "If you don’t call `expect`, the program will compile, but you’ll get a warning:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch02-guessing-game-tutorial/no-listing-02-without-expect/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust warns that you haven’t used the `Result` value returned from `read_line`,\nindicating that the program hasn’t handled a possible error."
        },
        {
          "kind": "text",
          "content": "The right way to suppress the warning is to actually write error-handling code,\nbut in our case we just want to crash this program when a problem occurs, so we\ncan use `expect`. You’ll learn about recovering from errors in [Chapter\n9][recover]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "### Printing Values with `println!` Placeholders"
        },
        {
          "kind": "text",
          "content": "Aside from the closing curly bracket, there’s only one more line to discuss in\nthe code so far:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print_guess}}"
          }
        },
        {
          "kind": "text",
          "content": "This line prints the string that now contains the user’s input. The `{}` set of\ncurly brackets is a placeholder: think of `{}` as little crab pincers that hold\na value in place. When printing the value of a variable, the variable name can\ngo inside the curly brackets. When printing the result of evaluating an\nexpression, place empty curly brackets in the format string, then follow the\nformat string with a comma-separated list of expressions to print in each empty\ncurly bracket placeholder in the same order. Printing a variable and the result\nof an expression in one call to `println!` would look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);"
          }
        },
        {
          "kind": "text",
          "content": "This code would print `x = 5 and y + 2 = 12`."
        },
        {
          "kind": "text",
          "content": "### Testing the First Part"
        },
        {
          "kind": "text",
          "content": "Let’s test the first part of the guessing game. Run it using `cargo run`:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6"
          }
        },
        {
          "kind": "text",
          "content": "At this point, the first part of the game is done: we’re getting input from the\nkeyboard and then printing it."
        },
        {
          "kind": "text",
          "content": "## Generating a Secret Number"
        },
        {
          "kind": "text",
          "content": "Next, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. We’ll use a random number between 1 and 100 so the game isn’t too\ndifficult. Rust doesn’t yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a [`rand` crate][randcrate] with\nsaid functionality."
        },
        {
          "kind": "text",
          "content": "### Using a Crate to Get More Functionality"
        },
        {
          "kind": "text",
          "content": "Remember that a crate is a collection of Rust source code files. The project\nwe’ve been building is a _binary crate_, which is an executable. The `rand`\ncrate is a _library crate_, which contains code that is intended to be used in\nother programs and can’t be executed on its own."
        },
        {
          "kind": "text",
          "content": "Cargo’s coordination of external crates is where Cargo really shines. Before we\ncan write code that uses `rand`, we need to modify the _Cargo.toml_ file to\ninclude the `rand` crate as a dependency. Open that file now and add the\nfollowing line to the bottom, beneath the `[dependencies]` section header that\nCargo created for you. Be sure to specify `rand` exactly as we have here, with\nthis version number, or the code examples in this tutorial may not work:"
        },
        {
          "kind": "text",
          "content": "<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:8:}}"
          }
        },
        {
          "kind": "text",
          "content": "In the _Cargo.toml_ file, everything that follows a header is part of that\nsection that continues until another section starts. In `[dependencies]` you\ntell Cargo which external crates your project depends on and which versions of\nthose crates you require. In this case, we specify the `rand` crate with the\nsemantic version specifier `0.8.5`. Cargo understands [Semantic\nVersioning][semver]<!-- ignore --> (sometimes called _SemVer_), which is a\nstandard for writing version numbers. The specifier `0.8.5` is actually\nshorthand for `^0.8.5`, which means any version that is at least 0.8.5 but\nbelow 0.9.0."
        },
        {
          "kind": "text",
          "content": "Cargo considers these versions to have public APIs compatible with version\n0.8.5, and this specification ensures you’ll get the latest patch release that\nwill still compile with the code in this chapter. Any version 0.9.0 or greater\nis not guaranteed to have the same API as what the following examples use."
        },
        {
          "kind": "text",
          "content": "Now, without changing any of the code, let’s build the project, as shown in\nListing 2-2."
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\nrm Cargo.lock\ncargo clean\ncargo build -->"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"2-2\" caption=\"The output from running `cargo build` after adding the rand crate as a dependency\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n  Updating crates.io index\n   Locking 15 packages to latest Rust 1.85.0 compatible versions\n    Adding rand v0.8.5 (available: v0.9.0)\n Compiling proc-macro2 v1.0.93\n Compiling unicode-ident v1.0.17\n Compiling libc v0.2.170\n Compiling cfg-if v1.0.0\n Compiling byteorder v1.5.0\n Compiling getrandom v0.2.15\n Compiling rand_core v0.6.4\n Compiling quote v1.0.38\n Compiling syn v2.0.98\n Compiling zerocopy-derive v0.7.35\n Compiling zerocopy v0.7.35\n Compiling ppv-lite86 v0.2.20\n Compiling rand_chacha v0.3.1\n Compiling rand v0.8.5\n Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n  Finished `dev` profile [unoptimized + debuginfo] target(s) in 2.48s"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "You may see different version numbers (but they will all be compatible with the\ncode, thanks to SemVer!) and different lines (depending on the operating\nsystem), and the lines may be in a different order."
        },
        {
          "kind": "text",
          "content": "When we include an external dependency, Cargo fetches the latest versions of\neverything that dependency needs from the _registry_, which is a copy of data\nfrom [Crates.io][cratesio]. Crates.io is where people in the Rust ecosystem\npost their open source Rust projects for others to use."
        },
        {
          "kind": "text",
          "content": "After updating the registry, Cargo checks the `[dependencies]` section and\ndownloads any crates listed that aren’t already downloaded. In this case,\nalthough we only listed `rand` as a dependency, Cargo also grabbed other crates\nthat `rand` depends on to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available."
        },
        {
          "kind": "text",
          "content": "If you immediately run `cargo build` again without making any changes, you\nwon’t get any output aside from the `Finished` line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven’t changed anything\nabout them in your _Cargo.toml_ file. Cargo also knows that you haven’t changed\nanything about your code, so it doesn’t recompile that either. With nothing to\ndo, it simply exits."
        },
        {
          "kind": "text",
          "content": "If you open the _src/main.rs_ file, make a trivial change, and then save it and\nbuild again, you’ll only see two lines of output:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.13s"
          }
        },
        {
          "kind": "text",
          "content": "These lines show that Cargo only updates the build with your tiny change to the\n_src/main.rs_ file. Your dependencies haven’t changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those."
        },
        {
          "kind": "text",
          "content": "#### Ensuring Reproducible Builds with the _Cargo.lock_ File"
        },
        {
          "kind": "text",
          "content": "Cargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, say that\nnext week version 0.8.6 of the `rand` crate comes out, and that version\ncontains an important bug fix, but it also contains a regression that will\nbreak your code. To handle this, Rust creates the _Cargo.lock_ file the first\ntime you run `cargo build`, so we now have this in the _guessing_game_\ndirectory."
        },
        {
          "kind": "text",
          "content": "When you build a project for the first time, Cargo figures out all the versions\nof the dependencies that fit the criteria and then writes them to the\n_Cargo.lock_ file. When you build your project in the future, Cargo will see\nthat the _Cargo.lock_ file exists and will use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at 0.8.5 until you explicitly upgrade, thanks to the _Cargo.lock_ file.\nBecause the _Cargo.lock_ file is important for reproducible builds, it’s often\nchecked into source control with the rest of the code in your project."
        },
        {
          "kind": "text",
          "content": "#### Updating a Crate to Get a New Version"
        },
        {
          "kind": "text",
          "content": "When you _do_ want to update a crate, Cargo provides the command `update`,\nwhich will ignore the _Cargo.lock_ file and figure out all the latest versions\nthat fit your specifications in _Cargo.toml_. Cargo will then write those\nversions to the _Cargo.lock_ file. In this case, Cargo will only look for\nversions greater than 0.8.5 and less than 0.9.0. If the `rand` crate has\nreleased the two new versions 0.8.6 and 0.9.0, you would see the following if\nyou ran `cargo update`:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.8.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo update\n    Updating crates.io index\n     Locking 1 package to latest Rust 1.85.0 compatible version\n    Updating rand v0.8.5 -> v0.8.6 (available: v0.9.0)"
          }
        },
        {
          "kind": "text",
          "content": "Cargo ignores the 0.9.0 release. At this point, you would also notice a change\nin your _Cargo.lock_ file noting that the version of the `rand` crate you are\nnow using is 0.8.6. To use `rand` version 0.9.0 or any version in the 0.9._x_\nseries, you’d have to update the _Cargo.toml_ file to look like this instead:"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[dependencies]\nrand = \"0.9.0\""
          }
        },
        {
          "kind": "text",
          "content": "The next time you run `cargo build`, Cargo will update the registry of crates\navailable and reevaluate your `rand` requirements according to the new version\nyou have specified."
        },
        {
          "kind": "text",
          "content": "There’s a lot more to say about [Cargo][doccargo]<!-- ignore --> and [its\necosystem][doccratesio]<!-- ignore -->, which we’ll discuss in Chapter 14, but\nfor now, that’s all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages."
        },
        {
          "kind": "text",
          "content": "### Generating a Random Number"
        },
        {
          "kind": "text",
          "content": "Let’s start using `rand` to generate a number to guess. The next step is to\nupdate _src/main.rs_, as shown in Listing 2-3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"2-3\" file-name=\"src/main.rs\" caption=\"Adding code to generate a random number\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First we add the line `use rand::Rng;`. The `Rng` trait defines methods that\nrandom number generators implement, and this trait must be in scope for us to\nuse those methods. Chapter 10 will cover traits in detail."
        },
        {
          "kind": "text",
          "content": "Next, we’re adding two lines in the middle. In the first line, we call the\n`rand::thread_rng` function that gives us the particular random number\ngenerator we’re going to use: one that is local to the current thread of\nexecution and is seeded by the operating system. Then we call the `gen_range`\nmethod on the random number generator. This method is defined by the `Rng`\ntrait that we brought into scope with the `use rand::Rng;` statement. The\n`gen_range` method takes a range expression as an argument and generates a\nrandom number in the range. The kind of range expression we’re using here takes\nthe form `start..=end` and is inclusive on the lower and upper bounds, so we\nneed to specify `1..=100` to request a number between 1 and 100."
        },
        {
          "kind": "text",
          "content": "> Note: You won’t just know which traits to use and which methods and functions\n> to call from a crate, so each crate has documentation with instructions for\n> using it. Another neat feature of Cargo is that running the `cargo doc\n> --open` command will build documentation provided by all your dependencies\n> locally and open it in your browser. If you’re interested in other\n> functionality in the `rand` crate, for example, run `cargo doc --open` and\n> click `rand` in the sidebar on the left."
        },
        {
          "kind": "text",
          "content": "The second new line prints the secret number. This is useful while we’re\ndeveloping the program to be able to test it, but we’ll delete it from the\nfinal version. It’s not much of a game if the program prints the answer as soon\nas it starts!"
        },
        {
          "kind": "text",
          "content": "Try running the program a few times:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5"
          }
        },
        {
          "kind": "text",
          "content": "You should get different random numbers, and they should all be numbers between\n1 and 100. Great job!"
        },
        {
          "kind": "text",
          "content": "## Comparing the Guess to the Secret Number"
        },
        {
          "kind": "text",
          "content": "Now that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won’t compile just yet, as we will\nexplain."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"2-4\" file-name=\"src/main.rs\" caption=\"Handling the possible return values of comparing two numbers\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First we add another `use` statement, bringing a type called\n`std::cmp::Ordering` into scope from the standard library. The `Ordering` type\nis another enum and has the variants `Less`, `Greater`, and `Equal`. These are\nthe three outcomes that are possible when you compare two values."
        },
        {
          "kind": "text",
          "content": "Then we add five new lines at the bottom that use the `Ordering` type. The\n`cmp` method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it’s\ncomparing `guess` to `secret_number`. Then it returns a variant of the\n`Ordering` enum we brought into scope with the `use` statement. We use a\n[`match`][match]<!-- ignore --> expression to decide what to do next based on\nwhich variant of `Ordering` was returned from the call to `cmp` with the values\nin `guess` and `secret_number`."
        },
        {
          "kind": "text",
          "content": "A `match` expression is made up of _arms_. An arm consists of a _pattern_ to\nmatch against, and the code that should be run if the value given to `match`\nfits that arm’s pattern. Rust takes the value given to `match` and looks\nthrough each arm’s pattern in turn. Patterns and the `match` construct are\npowerful Rust features: they let you express a variety of situations your code\nmight encounter and they make sure you handle them all. These features will be\ncovered in detail in Chapter 6 and Chapter 19, respectively."
        },
        {
          "kind": "text",
          "content": "Let’s walk through an example with the `match` expression we use here. Say that\nthe user has guessed 50 and the randomly generated secret number this time is\n38."
        },
        {
          "kind": "text",
          "content": "When the code compares 50 to 38, the `cmp` method will return\n`Ordering::Greater` because 50 is greater than 38. The `match` expression gets\nthe `Ordering::Greater` value and starts checking each arm’s pattern. It looks\nat the first arm’s pattern, `Ordering::Less`, and sees that the value\n`Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in\nthat arm and moves to the next arm. The next arm’s pattern is\n`Ordering::Greater`, which _does_ match `Ordering::Greater`! The associated\ncode in that arm will execute and print `Too big!` to the screen. The `match`\nexpression ends after the first successful match, so it won’t look at the last\narm in this scenario."
        },
        {
          "kind": "text",
          "content": "However, the code in Listing 2-4 won’t compile yet. Let’s try it:"
        },
        {
          "kind": "text",
          "content": "<!--\nThe error numbers in this output should be that of the code **WITHOUT** the\nanchor or snip comments\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch02-guessing-game-tutorial/listing-02-04/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The core of the error states that there are _mismatched types_. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n`let mut guess = String::new()`, Rust was able to infer that `guess` should be\na `String` and didn’t make us write the type. The `secret_number`, on the other\nhand, is a number type. A few of Rust’s number types can have a value between 1\nand 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a\n64-bit number; as well as others. Unless otherwise specified, Rust defaults to\nan `i32`, which is the type of `secret_number` unless you add type information\nelsewhere that would cause Rust to infer a different numerical type. The reason\nfor the error is that Rust cannot compare a string and a number type."
        },
        {
          "kind": "text",
          "content": "Ultimately, we want to convert the `String` the program reads as input into a\nnumber type so we can compare it numerically to the secret number. We do so by\nadding this line to the `main` function body:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The line is:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");"
          }
        },
        {
          "kind": "text",
          "content": "We create a variable named `guess`. But wait, doesn’t the program already have\na variable named `guess`? It does, but helpfully Rust allows us to shadow the\nprevious value of `guess` with a new one. _Shadowing_ lets us reuse the `guess`\nvariable name rather than forcing us to create two unique variables, such as\n`guess_str` and `guess`, for example. We’ll cover this in more detail in\n[Chapter 3][shadowing]<!-- ignore -->, but for now, know that this feature is\noften used when you want to convert a value from one type to another type."
        },
        {
          "kind": "text",
          "content": "We bind this new variable to the expression `guess.trim().parse()`. The `guess`\nin the expression refers to the original `guess` variable that contained the\ninput as a string. The `trim` method on a `String` instance will eliminate any\nwhitespace at the beginning and end, which we must do before we can convert the\nstring to a `u32`, which can only contain numerical data. The user must press\n<kbd>enter</kbd> to satisfy `read_line` and input their guess, which adds a\nnewline character to the string. For example, if the user types <kbd>5</kbd> and\npresses <kbd>enter</kbd>, `guess` looks like this: `5\\n`. The `\\n` represents\n“newline.” (On Windows, pressing <kbd>enter</kbd> results in a carriage return\nand a newline, `\\r\\n`.) The `trim` method eliminates `\\n` or `\\r\\n`, resulting\nin just `5`."
        },
        {
          "kind": "text",
          "content": "The [`parse` method on strings][parse]<!-- ignore --> converts a string to\nanother type. Here, we use it to convert from a string to a number. We need to\ntell Rust the exact number type we want by using `let guess: u32`. The colon\n(`:`) after `guess` tells Rust we’ll annotate the variable’s type. Rust has a\nfew built-in number types; the `u32` seen here is an unsigned, 32-bit integer.\nIt’s a good default choice for a small positive number. You’ll learn about\nother number types in [Chapter 3][integers]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "Additionally, the `u32` annotation in this example program and the comparison\nwith `secret_number` means Rust will infer that `secret_number` should be a\n`u32` as well. So now the comparison will be between two values of the same\ntype!"
        },
        {
          "kind": "text",
          "content": "The `parse` method will only work on characters that can logically be converted\ninto numbers and so can easily cause errors. If, for example, the string\ncontained `A👍%`, there would be no way to convert that to a number. Because it\nmight fail, the `parse` method returns a `Result` type, much as the `read_line`\nmethod does (discussed earlier in [“Handling Potential Failure with\n`Result`”](#handling-potential-failure-with-result)<!-- ignore-->). We’ll treat\nthis `Result` the same way by using the `expect` method again. If `parse`\nreturns an `Err` `Result` variant because it couldn’t create a number from the\nstring, the `expect` call will crash the game and print the message we give it.\nIf `parse` can successfully convert the string to a number, it will return the\n`Ok` variant of `Result`, and `expect` will return the number that we want from\nthe `Ok` value."
        },
        {
          "kind": "text",
          "content": "Let’s run the program now:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ntouch src/main.rs\ncargo run\n76\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.26s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!"
          }
        },
        {
          "kind": "text",
          "content": "Nice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low."
        },
        {
          "kind": "text",
          "content": "We have most of the game working now, but the user can make only one guess.\nLet’s change that by adding a loop!"
        },
        {
          "kind": "text",
          "content": "## Allowing Multiple Guesses with Looping"
        },
        {
          "kind": "text",
          "content": "The `loop` keyword creates an infinite loop. We’ll add a loop to give users\nmore chances at guessing the number:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-04-looping/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "As you can see, we’ve moved everything from the guess input prompt onward into\na loop. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. The program will now ask for another guess forever,\nwhich actually introduces a new problem. It doesn’t seem like the user can quit!"
        },
        {
          "kind": "text",
          "content": "The user could always interrupt the program by using the keyboard shortcut\n<kbd>ctrl</kbd>-<kbd>c</kbd>. But there’s another way to escape this insatiable\nmonster, as mentioned in the `parse` discussion in [“Comparing the Guess to the\nSecret Number”](#comparing-the-guess-to-the-secret-number)<!-- ignore -->: if\nthe user enters a non-number answer, the program will crash. We can take\nadvantage of that to allow the user to quit, as shown here:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ntouch src/main.rs\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\n\nthread 'main' panicked at src/main.rs:28:47:\nPlease type a number!: ParseIntError { kind: InvalidDigit }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"
          }
        },
        {
          "kind": "text",
          "content": "Typing `quit` will quit the game, but as you’ll notice, so will entering any\nother non-number input. This is suboptimal, to say the least; we want the game\nto also stop when the correct number is guessed."
        },
        {
          "kind": "text",
          "content": "### Quitting After a Correct Guess"
        },
        {
          "kind": "text",
          "content": "Let’s program the game to quit when the user wins by adding a `break` statement:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-05-quitting/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Adding the `break` line after `You win!` makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of `main`."
        },
        {
          "kind": "text",
          "content": "### Handling Invalid Input"
        },
        {
          "kind": "text",
          "content": "To further refine the game’s behavior, rather than crashing the program when\nthe user inputs a non-number, let’s make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where `guess`\nis converted from a `String` to a `u32`, as shown in Listing 2-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"2-5\" file-name=\"src/main.rs\" caption=\"Ignoring a non-number guess and asking for another guess instead of crashing the program\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We switch from an `expect` call to a `match` expression to move from crashing\non an error to handling the error. Remember that `parse` returns a `Result`\ntype and `Result` is an enum that has the variants `Ok` and `Err`. We’re using\na `match` expression here, as we did with the `Ordering` result of the `cmp`\nmethod."
        },
        {
          "kind": "text",
          "content": "If `parse` is able to successfully turn the string into a number, it will\nreturn an `Ok` value that contains the resultant number. That `Ok` value will\nmatch the first arm’s pattern, and the `match` expression will just return the\n`num` value that `parse` produced and put inside the `Ok` value. That number\nwill end up right where we want it in the new `guess` variable we’re creating."
        },
        {
          "kind": "text",
          "content": "If `parse` is _not_ able to turn the string into a number, it will return an\n`Err` value that contains more information about the error. The `Err` value\ndoes not match the `Ok(num)` pattern in the first `match` arm, but it does\nmatch the `Err(_)` pattern in the second arm. The underscore, `_`, is a\ncatch-all value; in this example, we’re saying we want to match all `Err`\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm’s code, `continue`, which tells the program to go to the\nnext iteration of the `loop` and ask for another guess. So, effectively, the\nprogram ignores all errors that `parse` might encounter!"
        },
        {
          "kind": "text",
          "content": "Now everything in the program should work as expected. Let’s try it:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.13s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!"
          }
        },
        {
          "kind": "text",
          "content": "Awesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let’s delete the `println!` that outputs the\nsecret number. Listing 2-6 shows the final code."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"2-6\" file-name=\"src/main.rs\" caption=\"Complete guessing game code\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-06/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "At this point, you’ve successfully built the guessing game. Congratulations!"
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "This project was a hands-on way to introduce you to many new Rust concepts:\n`let`, `match`, functions, the use of external crates, and more. In the next\nfew chapters, you’ll learn about these concepts in more detail. Chapter 3\ncovers concepts that most programming languages have, such as variables, data\ntypes, and functions, and shows how to use them in Rust. Chapter 4 explores\nownership, a feature that makes Rust different from other languages. Chapter 5\ndiscusses structs and method syntax, and Chapter 6 explains how enums work."
        },
        {
          "kind": "text",
          "content": "[prelude]: https://doc.rust-lang.org/std/prelude/index.html\n[variables-and-mutability]: ch03-01-variables-and-mutability.html#variables-and-mutability\n[comments]: ch03-04-comments.html\n[string]: https://doc.rust-lang.org/std/string/struct.String.html\n[iostdin]: https://doc.rust-lang.org/std/io/struct.Stdin.html\n[read_line]: https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line\n[result]: https://doc.rust-lang.org/std/result/enum.Result.html\n[enums]: ch06-00-enums.html\n[expect]: https://doc.rust-lang.org/std/result/enum.Result.html#method.expect\n[recover]: ch09-02-recoverable-errors-with-result.html\n[randcrate]: https://crates.io/crates/rand\n[semver]: http://semver.org\n[cratesio]: https://crates.io/\n[doccargo]: https://doc.rust-lang.org/cargo/\n[doccratesio]: https://doc.rust-lang.org/cargo/reference/publishing.html\n[match]: ch06-02-match.html\n[shadowing]: ch03-01-variables-and-mutability.html#shadowing\n[parse]: https://doc.rust-lang.org/std/primitive.str.html#method.parse\n[integers]: ch03-02-data-types.html#integer-types"
        }
      ]
    },
    {
      "title": "Common Programming Concepts",
      "file": "ch03-00-common-programming-concepts.md",
      "elements": [
        {
          "kind": "text",
          "content": "This chapter covers concepts that appear in almost every programming language\nand how they work in Rust. Many programming languages have much in common at\ntheir core. None of the concepts presented in this chapter are unique to Rust,\nbut we’ll discuss them in the context of Rust and explain the conventions\naround using these concepts."
        },
        {
          "kind": "text",
          "content": "Specifically, you’ll learn about variables, basic types, functions, comments,\nand control flow. These foundations will be in every Rust program, and learning\nthem early will give you a strong core to start from."
        },
        {
          "kind": "text",
          "content": "> #### Keywords\n>\n> The Rust language has a set of _keywords_ that are reserved for use by the\n> language only, much as in other languages. Keep in mind that you cannot use\n> these words as names of variables or functions. Most of the keywords have\n> special meanings, and you’ll be using them to do various tasks in your Rust\n> programs; a few have no current functionality associated with them but have\n> been reserved for functionality that might be added to Rust in the future. You\n> can find a list of the keywords in [Appendix A][appendix_a]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "[appendix_a]: appendix-01-keywords.md"
        }
      ]
    },
    {
      "title": "Variables and Mutability",
      "file": "ch03-01-variables-and-mutability.md",
      "elements": [
        {
          "kind": "text",
          "content": "As mentioned in the [“Storing Values with\nVariables”][storing-values-with-variables]<!-- ignore --> section, by default,\nvariables are immutable. This is one of many nudges Rust gives you to write\nyour code in a way that takes advantage of the safety and easy concurrency that\nRust offers. However, you still have the option to make your variables mutable.\nLet’s explore how and why Rust encourages you to favor immutability and why\nsometimes you might want to opt out."
        },
        {
          "kind": "text",
          "content": "When a variable is immutable, once a value is bound to a name, you can’t change\nthat value. To illustrate this, generate a new project called _variables_ in\nyour _projects_ directory by using `cargo new variables`."
        },
        {
          "kind": "text",
          "content": "Then, in your new _variables_ directory, open _src/main.rs_ and replace its\ncode with the following code, which won’t compile just yet:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Save and run the program using `cargo run`. You should receive an error message\nregarding an immutability error, as shown in this output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-01-variables-are-immutable/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This example shows how the compiler helps you find errors in your programs.\nCompiler errors can be frustrating, but really they only mean your program\nisn’t safely doing what you want it to do yet; they do _not_ mean that you’re\nnot a good programmer! Experienced Rustaceans still get compiler errors."
        },
        {
          "kind": "text",
          "content": "You received the error message `` cannot assign twice to immutable variable `x` `` because you tried to assign a second value to the immutable `x` variable."
        },
        {
          "kind": "text",
          "content": "It’s important that we get compile-time errors when we attempt to change a\nvalue that’s designated as immutable because this very situation can lead to\nbugs. If one part of our code operates on the assumption that a value will\nnever change and another part of our code changes that value, it’s possible\nthat the first part of the code won’t do what it was designed to do. The cause\nof this kind of bug can be difficult to track down after the fact, especially\nwhen the second piece of code changes the value only _sometimes_. The Rust\ncompiler guarantees that when you state that a value won’t change, it really\nwon’t change, so you don’t have to keep track of it yourself. Your code is thus\neasier to reason through."
        },
        {
          "kind": "text",
          "content": "But mutability can be very useful, and can make code more convenient to write.\nAlthough variables are immutable by default, you can make them mutable by\nadding `mut` in front of the variable name as you did in [Chapter\n2][storing-values-with-variables]<!-- ignore -->. Adding `mut` also conveys\nintent to future readers of the code by indicating that other parts of the code\nwill be changing this variable’s value."
        },
        {
          "kind": "text",
          "content": "For example, let’s change _src/main.rs_ to the following:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "When we run the program now, we get this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We’re allowed to change the value bound to `x` from `5` to `6` when `mut` is\nused. Ultimately, deciding whether to use mutability or not is up to you and\ndepends on what you think is clearest in that particular situation."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8bd8d8bc-e61e-48c7-ba78-0c89339e5995",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which statement best describes what it means if a variable `x` is immutable?",
                  "distractors": [
                    "`x` is stored in the immutable region of memory.",
                    "After being defined, `x` can be changed at most once.",
                    "You cannot create a reference to `x`."
                  ]
                },
                "answer": {
                  "answer": "`x` cannot be changed after being assigned a value."
                },
                "context": "Immutable means \"not mutable\", or not changeable.\n"
              },
              {
                "id": "dcf53c67-b3c9-4c54-8da0-90749cc669e8",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "What is the keyword used after `let` to indicate that a variable can be mutated?"
                },
                "answer": {
                  "answer": "mut"
                },
                "context": "For example, you can make a mutable variable `x` by writing: `let mut x = 1`.\n"
              },
              {
                "id": "77f9f143-45a6-4f08-bd87-72bc50c00693",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let x = 1;\n  println!(\"{x}\");\n  x += 1;\n  println!(\"{x}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 4
                },
                "context": "This is a compiler error because line 4 tries to mutate `x` when `x` is not marked as `mut`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Constants"
        },
        {
          "kind": "text",
          "content": "Like immutable variables, _constants_ are values that are bound to a name and\nare not allowed to change, but there are a few differences between constants\nand variables."
        },
        {
          "kind": "text",
          "content": "First, you aren’t allowed to use `mut` with constants. Constants aren’t just\nimmutable by default—they’re always immutable. You declare constants using the\n`const` keyword instead of the `let` keyword, and the type of the value _must_\nbe annotated. We’ll cover types and type annotations in the next section,\n[“Data Types”][data-types]<!-- ignore -->, so don’t worry about the details\nright now. Just know that you must always annotate the type."
        },
        {
          "kind": "text",
          "content": "Constants can be declared in any scope, including the global scope, which makes\nthem useful for values that many parts of code need to know about."
        },
        {
          "kind": "text",
          "content": "The last difference is that constants may be set only to a constant expression,\nnot the result of a value that could only be computed at runtime."
        },
        {
          "kind": "text",
          "content": "Here’s an example of a constant declaration:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;"
          }
        },
        {
          "kind": "text",
          "content": "The constant’s name is `THREE_HOURS_IN_SECONDS` and its value is set to the\nresult of multiplying 60 (the number of seconds in a minute) by 60 (the number\nof minutes in an hour) by 3 (the number of hours we want to count in this\nprogram). Rust’s naming convention for constants is to use all uppercase with\nunderscores between words. The compiler is able to evaluate a limited set of\noperations at compile time, which lets us choose to write out this value in a\nway that’s easier to understand and verify, rather than setting this constant\nto the value 10,800. See the [Rust Reference’s section on constant\nevaluation][const-eval] for more information on what operations can be used\nwhen declaring constants."
        },
        {
          "kind": "text",
          "content": "Constants are valid for the entire time a program runs, within the scope in\nwhich they were declared. This property makes constants useful for values in\nyour application domain that multiple parts of the program might need to know\nabout, such as the maximum number of points any player of a game is allowed to\nearn, or the speed of light."
        },
        {
          "kind": "text",
          "content": "Naming hardcoded values used throughout your program as constants is useful in\nconveying the meaning of that value to future maintainers of the code. It also\nhelps to have only one place in your code you would need to change if the\nhardcoded value needed to be updated in the future."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "a48e524e-852c-400c-ae68-5c76a6761596",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following statements is correct about the difference between using `let` and `const` to declare a variable?",
                  "distractors": [
                    "They are just different syntaxes for declaring variables with the same semantics",
                    "The compiler will error if a `const` variable's name is not using `UPPER_SNAKE_CASE`",
                    "A `const` can only be assigned to a literal, not an expression involving computation"
                  ]
                },
                "answer": {
                  "answer": "`const` can be used in the global scope, and `let` can only be used in a function"
                }
              },
              {
                "id": "d209784f-cc52-4451-8049-ad204e89d587",
                "type": "Tracing",
                "prompt": {
                  "program": "const TWO: u32 = 1 + 1;\nfn main() {\n  println!(\"{TWO}\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "2"
                },
                "context": "`const` variables are allowed to be defined outside of a function and to do limited forms of computation.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Shadowing"
        },
        {
          "kind": "text",
          "content": "As you saw in the guessing game tutorial in [Chapter\n2][comparing-the-guess-to-the-secret-number]<!-- ignore -->, you can declare a\nnew variable with the same name as a previous variable. Rustaceans say that the\nfirst variable is _shadowed_ by the second, which means that the second\nvariable is what the compiler will see when you use the name of the variable.\nIn effect, the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends.\nWe can shadow a variable by using the same variable’s name and repeating the\nuse of the `let` keyword as follows:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This program first binds `x` to a value of `5`. Then it creates a new variable\n`x` by repeating `let x =`, taking the original value and adding `1` so the\nvalue of `x` is then `6`. Then, within an inner scope created with the curly\nbrackets, the third `let` statement also shadows `x` and creates a new\nvariable, multiplying the previous value by `2` to give `x` a value of `12`.\nWhen that scope is over, the inner shadowing ends and `x` returns to being `6`.\nWhen we run this program, it will output the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Shadowing is different from marking a variable as `mut` because we’ll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the `let` keyword. By using `let`, we can perform a few transformations\non a value but have the variable be immutable after those transformations have\nbeen completed."
        },
        {
          "kind": "text",
          "content": "The other difference between `mut` and shadowing is that because we’re\neffectively creating a new variable when we use the `let` keyword again, we can\nchange the type of the value but reuse the same name. For example, say our\nprogram asks a user to show how many spaces they want between some text by\ninputting space characters, and then we want to store that input as a number:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-04-shadowing-can-change-types/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The first `spaces` variable is a string type and the second `spaces` variable\nis a number type. Shadowing thus spares us from having to come up with\ndifferent names, such as `spaces_str` and `spaces_num`; instead, we can reuse\nthe simpler `spaces` name. However, if we try to use `mut` for this, as shown\nhere, we’ll get a compile-time error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The error says we’re not allowed to mutate a variable’s type:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Now that we’ve explored how variables work, let’s look at more data types they\ncan have."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "dca33d34-6294-43f4-9267-fd62d7dce993",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let mut x: u32 = 1;\n  {\n    let mut x = x;\n    x += 2;\n  }\n  println!(\"{x}\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "1"
                },
                "context": "The statement `x += 2` only affects the shadowed `x` inside the inner curly braces, not the outer `x` on line 2.\n"
              },
              {
                "id": "15b9d091-3b09-49fe-a472-ba6c0f69e4e0",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let mut x: u32 = 1;\n  x = \"Hello world\";\n  println!(\"{x}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 3
                },
                "context": "A variable cannot be assigned to a value of a different type than its original type.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[comparing-the-guess-to-the-secret-number]: ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[data-types]: ch03-02-data-types.html#data-types\n[storing-values-with-variables]: ch02-00-guessing-game-tutorial.html#storing-values-with-variables\n[const-eval]: https://doc.rust-lang.org/reference/const_eval.html"
        }
      ]
    },
    {
      "title": "Data Types",
      "file": "ch03-02-data-types.md",
      "elements": [
        {
          "kind": "text",
          "content": "Every value in Rust is of a certain _data type_, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We’ll look at\ntwo data type subsets: scalar and compound."
        },
        {
          "kind": "text",
          "content": "Keep in mind that Rust is a _statically typed_ language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a `String` to a numeric\ntype using `parse` in the [“Comparing the Guess to the Secret\nNumber”][comparing-the-guess-to-the-secret-number]<!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let guess: u32 = \"42\".parse().expect(\"Not a number!\");"
          }
        },
        {
          "kind": "text",
          "content": "If we don’t add the `: u32` type annotation shown in the preceding code, Rust\nwill display the following error, which means the compiler needs more\ninformation from us to know which type we want to use:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/output-only-01-no-type-annotations/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "You’ll see different type annotations for other data types."
        },
        {
          "kind": "text",
          "content": "### Scalar Types"
        },
        {
          "kind": "text",
          "content": "A _scalar_ type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let’s jump into how they work in Rust."
        },
        {
          "kind": "text",
          "content": "#### Integer Types"
        },
        {
          "kind": "text",
          "content": "An _integer_ is a number without a fractional component. We used one integer\ntype in Chapter 2, the `u32` type. This type declaration indicates that the\nvalue it’s associated with should be an unsigned integer (signed integer types\nstart with `i` instead of `u`) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. We can use any of these variants to declare\nthe type of an integer value."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table 3-1: Integer Types in Rust</span>"
        },
        {
          "kind": "text",
          "content": "| Length  | Signed  | Unsigned |\n| ------- | ------- | -------- |\n| 8-bit   | `i8`    | `u8`     |\n| 16-bit  | `i16`   | `u16`    |\n| 32-bit  | `i32`   | `u32`    |\n| 64-bit  | `i64`   | `u64`    |\n| 128-bit | `i128`  | `u128`   |\n| architecture dependent | `isize` | `usize`  |"
        },
        {
          "kind": "text",
          "content": "Each variant can be either signed or unsigned and has an explicit size.\n_Signed_ and _unsigned_ refer to whether it’s possible for the number to be\nnegative—in other words, whether the number needs to have a sign with it\n(signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It’s like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it’s safe to assume the number is positive, it’s shown with no sign.\nSigned numbers are stored using [two’s complement][twos-complement]<!-- ignore\n--> representation."
        },
        {
          "kind": "text",
          "content": "Each signed variant can store numbers from −(2<sup>n − 1</sup>) to 2<sup>n −\n1</sup> − 1 inclusive, where _n_ is the number of bits that variant uses. So an\n`i8` can store numbers from −(2<sup>7</sup>) to 2<sup>7</sup> − 1, which equals\n−128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> − 1,\nso a `u8` can store numbers from 0 to 2<sup>8</sup> − 1, which equals 0 to 255."
        },
        {
          "kind": "text",
          "content": "Additionally, the `isize` and `usize` types depend on the architecture of the\ncomputer your program is running on: 64 bits if you’re on a 64-bit architecture\nand 32 bits if you’re on a 32-bit architecture."
        },
        {
          "kind": "text",
          "content": "You can write integer literals in any of the forms shown in Table 3-2. Note\nthat number literals that can be multiple numeric types allow a type suffix,\nsuch as `57u8`, to designate the type. Number literals can also use `_` as a\nvisual separator to make the number easier to read, such as `1_000`, which will\nhave the same value as if you had specified `1000`."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table 3-2: Integer Literals in Rust</span>"
        },
        {
          "kind": "text",
          "content": "| Number literals  | Example       |\n| ---------------- | ------------- |\n| Decimal          | `98_222`      |\n| Hex              | `0xff`        |\n| Octal            | `0o77`        |\n| Binary           | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'`        |"
        },
        {
          "kind": "text",
          "content": "So how do you know which type of integer to use? If you’re unsure, Rust’s\ndefaults are generally good places to start: integer types default to `i32`.\nThe primary situation in which you’d use `isize` or `usize` is when indexing\nsome sort of collection."
        },
        {
          "kind": "text",
          "content": "> ##### Integer Overflow\n>\n> Let’s say you have a variable of type `u8` that can hold values between 0 and\n> 255. If you try to change the variable to a value outside that range, such as\n> 256, _integer overflow_ will occur, which can result in one of two behaviors.\n> When you’re compiling in debug mode, Rust includes checks for integer overflow\n> that cause your program to _panic_ at runtime if this behavior occurs. Rust\n> uses the term _panicking_ when a program exits with an error; we’ll discuss\n> panics in more depth in the [“Unrecoverable Errors with\n> `panic!`”][unrecoverable-errors-with-panic]<!-- ignore --> section in Chapter\n> 9.\n>\n> When you’re compiling in release mode with the `--release` flag, Rust does\n> _not_ include checks for integer overflow that cause panics. Instead, if\n> overflow occurs, Rust performs _two’s complement wrapping_. In short, values\n> greater than the maximum value the type can hold “wrap around” to the minimum\n> of the values the type can hold. In the case of a `u8`, the value 256 becomes\n> 0, the value 257 becomes 1, and so on. The program won’t panic, but the\n> variable will have a value that probably isn’t what you were expecting it to\n> have. Relying on integer overflow’s wrapping behavior is considered an error.\n>\n> To explicitly handle the possibility of overflow, you can use these families\n> of methods provided by the standard library for primitive numeric types:\n>\n> - Wrap in all modes with the `wrapping_*` methods, such as `wrapping_add`.\n> - Return the `None` value if there is overflow with the `checked_*` methods.\n> - Return the value and a Boolean indicating whether there was overflow with\n>   the `overflowing_*` methods.\n> - Saturate at the value’s minimum or maximum values with the `saturating_*`\n>   methods."
        },
        {
          "kind": "text",
          "content": "#### Floating-Point Types"
        },
        {
          "kind": "text",
          "content": "Rust also has two primitive types for _floating-point numbers_, which are\nnumbers with decimal points. Rust’s floating-point types are `f32` and `f64`,\nwhich are 32 bits and 64 bits in size, respectively. The default type is `f64`\nbecause on modern CPUs, it’s roughly the same speed as `f32` but is capable of\nmore precision. All floating-point types are signed."
        },
        {
          "kind": "text",
          "content": "Here’s an example that shows floating-point numbers in action:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-06-floating-point/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Floating-point numbers are represented according to the IEEE-754 standard."
        },
        {
          "kind": "text",
          "content": "#### Numeric Operations"
        },
        {
          "kind": "text",
          "content": "Rust supports the basic mathematical operations you’d expect for all the number\ntypes: addition, subtraction, multiplication, division, and remainder. Integer\ndivision truncates toward zero to the nearest integer. The following code shows\nhow you’d use each numeric operation in a `let` statement:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-07-numeric-operations/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Each expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. [Appendix\nB][appendix_b]<!-- ignore --> contains a list of all operators that Rust\nprovides."
        },
        {
          "kind": "text",
          "content": "#### The Boolean Type"
        },
        {
          "kind": "text",
          "content": "As in most other programming languages, a Boolean type in Rust has two possible\nvalues: `true` and `false`. Booleans are one byte in size. The Boolean type in\nRust is specified using `bool`. For example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-08-boolean/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "The main way to use Boolean values is through conditionals, such as an `if`\nexpression. We’ll cover how `if` expressions work in Rust in the [“Control\nFlow”][control-flow]<!-- ignore --> section."
        },
        {
          "kind": "text",
          "content": "#### The Character Type"
        },
        {
          "kind": "text",
          "content": "Rust’s `char` type is the language’s most primitive alphabetic type. Here are\nsome examples of declaring `char` values:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-09-char/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Note that we specify `char` literals with single quotes, as opposed to string\nliterals, which use double quotes. Rust’s `char` type is four bytes in size and\nrepresents a Unicode scalar value, which means it can represent a lot more than\njust ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji;\nand zero-width spaces are all valid `char` values in Rust. Unicode scalar\nvalues range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive.\nHowever, a “character” isn’t really a concept in Unicode, so your human\nintuition for what a “character” is may not match up with what a `char` is in\nRust. We’ll discuss this topic in detail in [“Storing UTF-8 Encoded Text with\nStrings”][strings]<!-- ignore --> in Chapter 8."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "e582f00a-2f28-46e4-ae1b-77fd223cca4f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The largest number representable by the type `i128` is:",
                  "distractors": [
                    "2<sup>128</sup>",
                    "2<sup>128</sup> - 1",
                    "2<sup>127</sup>"
                  ],
                  "answerIndex": 3
                },
                "answer": {
                  "answer": "2<sup>127</sup> - 1"
                },
                "context": "In general, a signed number with *n* bits can represent numbers between -(2<sup>n - 1</sup>) and 2<sup>n - 1</sup> - 1.\n"
              },
              {
                "id": "3a92246b-a43c-4658-980b-335d7632ddcb",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "If `x : u8 = 0`, what will happen when computing `x - 1`?",
                  "distractors": [
                    "It will always panic.",
                    "It will always return 255."
                  ]
                },
                "answer": {
                  "answer": "It depends on the compiler mode."
                },
                "context": "This expression will panic in debug mode and return 255 in release mode.\n"
              },
              {
                "id": "9bcac1a1-d2df-4a51-b399-7fd8a6042cc2",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let x: fsize = 2.0;\n  println!(\"{x}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 2
                },
                "context": "The type `fsize` does not exist. Floats must be either `f32` or `f64`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Compound Types"
        },
        {
          "kind": "text",
          "content": "_Compound types_ can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays."
        },
        {
          "kind": "text",
          "content": "#### The Tuple Type"
        },
        {
          "kind": "text",
          "content": "A _tuple_ is a general way of grouping together a number of values with a\nvariety of types into one compound type. Tuples have a fixed length: once\ndeclared, they cannot grow or shrink in size."
        },
        {
          "kind": "text",
          "content": "We create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don’t have to be the same. We’ve added optional\ntype annotations in this example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-10-tuples/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "The variable `tup` binds to the entire tuple because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-11-destructuring-tuples/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This program first creates a tuple and binds it to the variable `tup`. It then\nuses a pattern with `let` to take `tup` and turn it into three separate\nvariables, `x`, `y`, and `z`. This is called _destructuring_ because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n`y`, which is `6.4`."
        },
        {
          "kind": "text",
          "content": "We can also access a tuple element directly by using a period (`.`) followed by\nthe index of the value we want to access. For example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-12-tuple-indexing/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This program creates the tuple `x` and then accesses each element of the tuple\nusing their respective indices. As with most programming languages, the first\nindex in a tuple is 0."
        },
        {
          "kind": "text",
          "content": "The tuple without any values has a special name, _unit_. This value and its\ncorresponding type are both written `()` and represent an empty value or an\nempty return type. Expressions implicitly return the unit value if they don’t\nreturn any other value."
        },
        {
          "kind": "text",
          "content": "Additionally, we can modify individual elements of a mutable tuple. For example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    let mut x: (i32, i32) = (1, 2);\n    x.0 = 0;\n    x.1 += 5;\n}"
          }
        },
        {
          "kind": "text",
          "content": "This program sets the first element to zero and adds five to the second element.\nThe final value of `x` is `(0, 7)`."
        },
        {
          "kind": "text",
          "content": "#### The Array Type"
        },
        {
          "kind": "text",
          "content": "Another way to have a collection of multiple values is with an _array_. Unlike\na tuple, every element of an array must have the same type. Unlike arrays in\nsome other languages, arrays in Rust have a fixed length."
        },
        {
          "kind": "text",
          "content": "We write the values in an array as a comma-separated list inside square\nbrackets:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-13-arrays/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Arrays are useful when you want your data allocated on the stack, the same as\nthe other types we have seen so far, rather than the heap (we will discuss the\nstack and the heap more in [Chapter 4][stack-and-heap]<!-- ignore -->) or when\nyou want to ensure you always have a fixed number of elements. An array isn’t\nas flexible as the vector type, though. A _vector_ is a similar collection type\nprovided by the standard library that _is_ allowed to grow or shrink in size\nbecause its contents live on the heap. If you’re unsure whether to use an array\nor a vector, chances are you should use a vector. [Chapter 8][vectors]<!--\nignore --> discusses vectors in more detail."
        },
        {
          "kind": "text",
          "content": "However, arrays are more useful when you know the number of elements will not\nneed to change. For example, if you were using the names of the month in a\nprogram, you would probably use an array rather than a vector because you know\nit will always contain 12 elements:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];"
          }
        },
        {
          "kind": "text",
          "content": "You write an array’s type using square brackets with the type of each element,\na semicolon, and then the number of elements in the array, like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let a: [i32; 5] = [1, 2, 3, 4, 5];"
          }
        },
        {
          "kind": "text",
          "content": "Here, `i32` is the type of each element. After the semicolon, the number `5`\nindicates the array contains five elements."
        },
        {
          "kind": "text",
          "content": "You can also initialize an array to contain the same value for each element by\nspecifying the initial value, followed by a semicolon, and then the length of\nthe array in square brackets, as shown here:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let a = [3; 5];"
          }
        },
        {
          "kind": "text",
          "content": "The array named `a` will contain `5` elements that will all be set to the value\n`3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a\nmore concise way."
        },
        {
          "kind": "text",
          "content": "##### Accessing Array Elements"
        },
        {
          "kind": "text",
          "content": "An array is a single chunk of memory of a known, fixed size that can be\nallocated on the stack. You can access elements of an array using indexing,\nlike this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-14-array-indexing/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "In this example, the variable named `first` will get the value `1` because that\nis the value at index `[0]` in the array. The variable named `second` will get\nthe value `2` from index `[1]` in the array."
        },
        {
          "kind": "text",
          "content": "##### Invalid Array Element Access"
        },
        {
          "kind": "text",
          "content": "Let’s see what happens if you try to access an element of an array that is past\nthe end of the array. Say you run this code, similar to the guessing game in\nChapter 2, to get an array index from the user:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "panics"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This code compiles successfully. If you run this code using `cargo run` and\nenter `0`, `1`, `2`, `3`, or `4`, the program will print out the corresponding\nvalue at that index in the array. If you instead enter a number past the end of\nthe array, such as `10`, you’ll see output like this:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access\ncargo run\n10\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "thread 'main' panicked at src/main.rs:19:19:\nindex out of bounds: the len is 5 but the index is 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"
          }
        },
        {
          "kind": "text",
          "content": "The program resulted in a _runtime_ error at the point of using an invalid\nvalue in the indexing operation. The program exited with an error message and\ndidn’t execute the final `println!` statement. When you attempt to access an\nelement using indexing, Rust will check that the index you’ve specified is less\nthan the array length. If the index is greater than or equal to the length,\nRust will panic. This check has to happen at runtime, especially in this case,\nbecause the compiler can’t possibly know what value a user will enter when they\nrun the code later."
        },
        {
          "kind": "text",
          "content": "This is an example of Rust’s memory safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust’s error handling and how you can\nwrite readable, safe code that neither panics nor allows invalid memory access."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "30212501-00d5-4ef6-838f-3df5112ee7ed",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let message = \"The temperature today is:\";\n  let x = [message, 100];\n  println!(\"{} {}\", x[0], x[1]);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 3
                },
                "context": "An array can only contain elements of a single type. The syntax `[message, 100]` creates an array with two elements.\nThe variable `message` is a string, and the constant `100` is a number.\n"
              },
              {
                "id": "4e632a23-24cc-4c29-8935-cf6b62c3764b",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let t = ([1; 2], [3; 4]);\n  let (a, b) = t;\n  println!(\"{}\", a[0] + t.1[0]); \n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "4"
                },
                "context": "The syntax `[x; y]` declares an array with `y` copies of the value `x`. The syntax `(a, b)` destructures `t` and binds `a` to `[1; 2]`. \nThe syntax `t.1` refers to the second element of `t`, which is `[3; 4]`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[comparing-the-guess-to-the-secret-number]: ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[twos-complement]: https://en.wikipedia.org/wiki/Two%27s_complement\n[control-flow]: ch03-05-control-flow.html#control-flow\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[stack-and-heap]: ch04-01-what-is-ownership.html#the-stack-and-the-heap\n[vectors]: ch08-01-vectors.html\n[unrecoverable-errors-with-panic]: ch09-01-unrecoverable-errors-with-panic.html\n[wrapping]: https://doc.rust-lang.org/std/num/struct.Wrapping.html\n[appendix_b]: appendix-02-operators.md"
        }
      ]
    },
    {
      "title": "Functions",
      "file": "ch03-03-how-functions-work.md",
      "elements": [
        {
          "kind": "text",
          "content": "Functions are prevalent in Rust code. You’ve already seen one of the most\nimportant functions in the language: the `main` function, which is the entry\npoint of many programs. You’ve also seen the `fn` keyword, which allows you to\ndeclare new functions."
        },
        {
          "kind": "text",
          "content": "Rust code uses _snake case_ as the conventional style for function and variable\nnames, in which all letters are lowercase and underscores separate words.\nHere’s a program that contains an example function definition:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-16-functions/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "We define a function in Rust by entering `fn` followed by a function name and a\nset of parentheses. The curly brackets tell the compiler where the function\nbody begins and ends."
        },
        {
          "kind": "text",
          "content": "We can call any function we’ve defined by entering its name followed by a set\nof parentheses. Because `another_function` is defined in the program, it can be\ncalled from inside the `main` function. Note that we defined `another_function`\n_after_ the `main` function in the source code; we could have defined it before\nas well. Rust doesn’t care where you define your functions, only that they’re\ndefined somewhere in a scope that can be seen by the caller."
        },
        {
          "kind": "text",
          "content": "Let’s start a new binary project named _functions_ to explore functions\nfurther. Place the `another_function` example in _src/main.rs_ and run it. You\nshould see the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-16-functions/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The lines execute in the order in which they appear in the `main` function.\nFirst the “Hello, world!” message prints, and then `another_function` is called\nand its message is printed."
        },
        {
          "kind": "text",
          "content": "### Parameters"
        },
        {
          "kind": "text",
          "content": "We can define functions to have _parameters_, which are special variables that\nare part of a function’s signature. When a function has parameters, you can\nprovide it with concrete values for those parameters. Technically, the concrete\nvalues are called _arguments_, but in casual conversation, people tend to use\nthe words _parameter_ and _argument_ interchangeably for either the variables\nin a function’s definition or the concrete values passed in when you call a\nfunction."
        },
        {
          "kind": "text",
          "content": "In this version of `another_function` we add a parameter:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Try running this program; you should get the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The declaration of `another_function` has one parameter named `x`. The type of\n`x` is specified as `i32`. When we pass `5` in to `another_function`, the\n`println!` macro puts `5` where the pair of curly brackets containing `x` was\nin the format string."
        },
        {
          "kind": "text",
          "content": "In function signatures, you _must_ declare the type of each parameter. This is\na deliberate decision in Rust’s design: requiring type annotations in function\ndefinitions means the compiler almost never needs you to use them elsewhere in\nthe code to figure out what type you mean. The compiler is also able to give\nmore helpful error messages if it knows what types the function expects."
        },
        {
          "kind": "text",
          "content": "When defining multiple parameters, separate the parameter declarations with\ncommas, like this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This example creates a function named `print_labeled_measurement` with two\nparameters. The first parameter is named `value` and is an `i32`. The second is\nnamed `unit_label` and is type `char`. The function then prints text containing\nboth the `value` and the `unit_label`."
        },
        {
          "kind": "text",
          "content": "Let’s try running this code. Replace the program currently in your _functions_\nproject’s _src/main.rs_ file with the preceding example and run it using `cargo\nrun`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Because we called the function with `5` as the value for `value` and `'h'` as\nthe value for `unit_label`, the program output contains those values."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8e2d2cd0-48d4-4901-a8c5-c994fb318014",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "The keyword for declaring a new function in Rust is:"
                },
                "answer": {
                  "answer": "fn"
                }
              },
              {
                "id": "bbcac2a0-dec8-4b3b-88fd-37880e804259",
                "type": "Tracing",
                "prompt": {
                  "program": "fn f(x) { \n  println!(\"{x}\");\n}\n\nfn main() {\n  f(0);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 1
                },
                "context": "A function must declare the types of its parameters.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Statements and Expressions"
        },
        {
          "kind": "text",
          "content": "Function bodies are made up of a series of statements optionally ending in an\nexpression. So far, the functions we’ve covered haven’t included an ending\nexpression, but you have seen an expression as part of a statement. Because\nRust is an expression-based language, this is an important distinction to\nunderstand. Other languages don’t have the same distinctions, so let’s look at\nwhat statements and expressions are and how their differences affect the bodies\nof functions."
        },
        {
          "kind": "text",
          "content": "- Statements are instructions that perform some action and do not return\na value.\n- Expressions evaluate to a resultant value."
        },
        {
          "kind": "text",
          "content": "Let’s look at some examples."
        },
        {
          "kind": "text",
          "content": "Let’s look at some examples.\nWe’ve actually already used statements and expressions. Creating a variable and\nassigning a value to it with the `let` keyword is a statement. In Listing 3-1,\n`let y = 6;` is a statement."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"3-1\" file-name=\"src/main.rs\" caption=\"A `main` function declaration containing one statement\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Function definitions are also statements; the entire preceding example is a\nstatement in itself. (As we’ll see below, _calling_ a function is not a\nstatement, though.)"
        },
        {
          "kind": "text",
          "content": "Statements do not return values. Therefore, you can’t assign a `let` statement\nto another variable, as the following code tries to do; you’ll get an error:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "When you run this program, the error you’ll get looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The `let y = 6` statement does not return a value, so there isn’t anything for\n`x` to bind to. This is different from what happens in other languages, such as\nC and Ruby, where the assignment returns the value of the assignment. In those\nlanguages, you can write `x = y = 6` and have both `x` and `y` have the value\n`6`; that is not the case in Rust."
        },
        {
          "kind": "text",
          "content": "Expressions evaluate to a value and make up most of the rest of the code that\nyou’ll write in Rust. Consider a math operation, such as `5 + 6`, which is an\nexpression that evaluates to the value `11`. Expressions can be part of\nstatements: in Listing 3-1, the `6` in the statement `let y = 6;` is an\nexpression that evaluates to the value `6`. Calling a function is an\nexpression. Calling a macro is an expression. A new scope block created with\ncurly brackets is an expression, for example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-20-blocks-are-expressions/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This expression:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{\n    let x = 3;\n    x + 1\n}"
          }
        },
        {
          "kind": "text",
          "content": "is a block that, in this case, evaluates to `4`. That value gets bound to `y`\nas part of the `let` statement. Note that the `x + 1` line doesn’t have a\nsemicolon at the end, which is unlike most of the lines you’ve seen so far.\nExpressions do not include ending semicolons. If you add a semicolon to the end\nof an expression, you turn it into a statement, and it will then not return a\nvalue. Keep this in mind as you explore function return values and expressions\nnext."
        },
        {
          "kind": "text",
          "content": "### Functions with Return Values"
        },
        {
          "kind": "text",
          "content": "Functions can return values to the code that calls them. We don’t name return\nvalues, but we must declare their type after an arrow (`->`). In Rust, the\nreturn value of the function is synonymous with the value of the final\nexpression in the block of the body of a function. You can return early from a\nfunction by using the `return` keyword and specifying a value, but most\nfunctions return the last expression implicitly. Here’s an example of a\nfunction that returns a value:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "There are no function calls, macros, or even `let` statements in the `five`\nfunction—just the number `5` by itself. That’s a perfectly valid function in\nRust. Note that the function’s return type is specified too, as `-> i32`. Try\nrunning this code; the output should look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The `5` in `five` is the function’s return value, which is why the return type\nis `i32`. Let’s examine this in more detail. There are two important bits:\nfirst, the line `let x = five();` shows that we’re using the return value of a\nfunction to initialize a variable. Because the function `five` returns a `5`,\nthat line is the same as the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let x = 5;"
          }
        },
        {
          "kind": "text",
          "content": "Second, the `five` function has no parameters and defines the type of the\nreturn value. The body of the function is a lonely `5` with no semicolon\nbecause it’s an expression whose value we want to return."
        },
        {
          "kind": "text",
          "content": "Let’s look at another example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-22-function-parameter-and-return/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Running this code will print `The value of x is: 6`. But if we place a\nsemicolon at the end of the line containing `x + 1`, changing it from an\nexpression to a statement, we’ll get an error:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Compiling this code produces an error, as follows:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The main error message, `mismatched types`, reveals the core issue with this\ncode. The definition of the function `plus_one` says that it will return an\n`i32`, but statements don’t evaluate to a value, which is expressed by `()`,\nthe unit type. Therefore, nothing is returned, which contradicts the function\ndefinition and results in an error. In this output, Rust provides a message to\npossibly help rectify this issue: it suggests removing the semicolon, which\nwould fix the error."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "e816708d-b0eb-4506-8c33-6ea0df69f14f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "In Rust, a curly-brace block like `{ /* ... */ }` is:\n1. An expression\n2. A statement\n3. A syntactic scope\n",
                  "distractors": [
                    "1 only",
                    "2 only",
                    "2 and 3"
                  ]
                },
                "answer": {
                  "answer": "1 and 3"
                },
                "context": "A block is an expression (#1) that is allowed to contain statements. It also defines a syntactic scope for let-bindings inside it (#3).\n"
              },
              {
                "id": "42671602-ada3-4943-aa73-28aebcfe5011",
                "type": "Tracing",
                "prompt": {
                  "program": "fn f(x: i32) -> i32 { x + 1 }\nfn main() {\n  println!(\"{}\", f({\n    let y = 1;\n    y + 1\n  }));\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "3"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Comments",
      "file": "ch03-04-comments.md",
      "elements": [
        {
          "kind": "text",
          "content": "All programmers strive to make their code easy to understand, but sometimes\nextra explanation is warranted. In these cases, programmers leave _comments_ in\ntheir source code that the compiler will ignore but people reading the source\ncode may find useful."
        },
        {
          "kind": "text",
          "content": "Here’s a simple comment:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "// hello, world"
          }
        },
        {
          "kind": "text",
          "content": "In Rust, the idiomatic comment style starts a comment with two slashes, and the\ncomment continues until the end of the line. For comments that extend beyond a\nsingle line, you’ll need to include `//` on each line, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "// So we're doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what's going on."
          }
        },
        {
          "kind": "text",
          "content": "Or you can use the multiline comment syntax with `/*` and `*/`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "/* So we’re doing something complicated here, long enough that we need\n   multiple lines of comments to do it! Whew! Hopefully, this comment will\n   explain what’s going on. */"
          }
        },
        {
          "kind": "text",
          "content": "Comments can also be placed at the end of lines containing code:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-24-comments-end-of-line/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "But you’ll more often see them used in this format, with the comment on a\nseparate line above the code it’s annotating:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-25-comments-above-line/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust also has another kind of comment, documentation comments, which we’ll\ndiscuss in the [“Publishing a Crate to Crates.io”][publishing]<!-- ignore -->\nsection of Chapter 14."
        },
        {
          "kind": "text",
          "content": "[publishing]: ch14-02-publishing-to-crates-io.html"
        }
      ]
    },
    {
      "title": "Control Flow",
      "file": "ch03-05-control-flow.md",
      "elements": [
        {
          "kind": "text",
          "content": "The ability to run some code depending on whether a condition is `true` and to\nrun some code repeatedly while a condition is `true` are basic building blocks\nin most programming languages. The most common constructs that let you control\nthe flow of execution of Rust code are `if` expressions and loops."
        },
        {
          "kind": "text",
          "content": "### `if` Expressions"
        },
        {
          "kind": "text",
          "content": "An `if` expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, “If this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.”"
        },
        {
          "kind": "text",
          "content": "Create a new project called _branches_ in your _projects_ directory to explore\nthe `if` expression. In the _src/main.rs_ file, input the following:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "All `if` expressions start with the keyword `if`, followed by a condition. In\nthis case, the condition checks whether or not the variable `number` has a\nvalue less than 5. We place the block of code to execute if the condition is\n`true` immediately after the condition inside curly brackets. Blocks of code\nassociated with the conditions in `if` expressions are sometimes called _arms_,\njust like the arms in `match` expressions that we discussed in the [“Comparing\nthe Guess to the Secret Number”][comparing-the-guess-to-the-secret-number]<!--\nignore --> section of Chapter 2."
        },
        {
          "kind": "text",
          "content": "Optionally, we can also include an `else` expression, which we chose to do\nhere, to give the program an alternative block of code to execute should the\ncondition evaluate to `false`. If you don’t provide an `else` expression and\nthe condition is `false`, the program will just skip the `if` block and move on\nto the next bit of code."
        },
        {
          "kind": "text",
          "content": "Try running this code; you should see the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Let’s try changing the value of `number` to a value that makes the condition\n`false` to see what happens:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Run the program again, and look at the output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "It’s also worth noting that the condition in this code _must_ be a `bool`. If\nthe condition isn’t a `bool`, we’ll get an error. For example, try running the\nfollowing code:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "The `if` condition evaluates to a value of `3` this time, and Rust throws an\nerror:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error indicates that Rust expected a `bool` but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n`if` with a Boolean as its condition. If we want the `if` code block to run\nonly when a number is not equal to `0`, for example, we can change the `if`\nexpression to the following:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-29-if-not-equal-0/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Running this code will print `number was something other than zero`."
        },
        {
          "kind": "text",
          "content": "#### Handling Multiple Conditions with `else if`"
        },
        {
          "kind": "text",
          "content": "You can use multiple conditions by combining `if` and `else` in an `else if`\nexpression. For example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This program has four possible paths it can take. After running it, you should\nsee the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "When this program executes, it checks each `if` expression in turn and executes\nthe first body for which the condition evaluates to `true`. Note that even\nthough 6 is divisible by 2, we don’t see the output `number is divisible by 2`,\nnor do we see the `number is not divisible by 4, 3, or 2` text from the `else`\nblock. That’s because Rust only executes the block for the first `true`\ncondition, and once it finds one, it doesn’t even check the rest."
        },
        {
          "kind": "text",
          "content": "Using too many `else if` expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called `match` for these cases."
        },
        {
          "kind": "text",
          "content": "#### Using `if` in a `let` Statement"
        },
        {
          "kind": "text",
          "content": "Because `if` is an expression, we can use it on the right side of a `let`\nstatement to assign the outcome to a variable, as in Listing 3-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"3-2\" file-name=\"src/main.rs\" caption=\"Assigning the result of an `if` expression to a variable\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-02/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `number` variable will be bound to a value based on the outcome of the `if`\nexpression. Run this code to see what happens:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/listing-03-02/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Remember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole `if` expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the `if` must be\nthe same type; in Listing 3-2, the results of both the `if` arm and the `else`\narm were `i32` integers. If the types are mismatched, as in the following\nexample, we’ll get an error:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "When we try to compile this code, we’ll get an error. The `if` and `else` arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The expression in the `if` block evaluates to an integer, and the expression in\nthe `else` block evaluates to a string. This won’t work because variables must\nhave a single type, and Rust needs to know at compile time what type the\n`number` variable is, definitively. Knowing the type of `number` lets the\ncompiler verify the type is valid everywhere we use `number`. Rust wouldn’t be\nable to do that if the type of `number` was only determined at runtime; the\ncompiler would be more complex and would make fewer guarantees about the code\nif it had to keep track of multiple hypothetical types for any variable."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5ae11501-25d9-4b94-8e88-aa1c2122779f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "True/false: executing these two pieces of code results in the same value for `x`.\n\nSnippet 1:\n```\nlet x = if cond { 1 } else { 2 };\n```\n\nSnippet 2:\n```\nlet x;\nif cond {\n  x = 1;\n} else {\n  x = 2;\n}\n```\n\n(Note: both of these snippets compile!)\n",
                  "distractors": [
                    "False"
                  ]
                },
                "answer": {
                  "answer": "True"
                },
                "context": "The first if-expression is a more concise way of representing the behavior of the second if-statement.\n\nNote that Rust **does not** require `x` to be initially declared with `let mut` in the second snippet.\nThis is because Rust can determine that `x` is only ever assigned once, since only one branch of the \nif-statement will ever execute.\n"
              },
              {
                "id": "4e07358c-b318-49cb-8210-fbed7ed50e23",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let x = 1;\n  let y = if x { 0 } else { 1 }; \n  println!(\"{y}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 3
                },
                "context": "The condition to an if-expression must be a boolean. Rust does not have a concept of \"truthy\" or \"falsy\" values.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Repetition with Loops"
        },
        {
          "kind": "text",
          "content": "It’s often useful to execute a block of code more than once. For this task,\nRust provides several _loops_, which will run through the code inside the loop\nbody to the end and then start immediately back at the beginning. To experiment\nwith loops, let’s make a new project called _loops_."
        },
        {
          "kind": "text",
          "content": "Rust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one."
        },
        {
          "kind": "text",
          "content": "#### Repeating Code with `loop`"
        },
        {
          "kind": "text",
          "content": "The `loop` keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop."
        },
        {
          "kind": "text",
          "content": "As an example, change the _src/main.rs_ file in your _loops_ directory to look\nlike this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-loop/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "When we run this program, we’ll see `again!` printed over and over continuously\nuntil we stop the program manually. Most terminals support the keyboard shortcut\n<kbd>ctrl</kbd>-<kbd>c</kbd> to interrupt a program that is stuck in a continual\nloop. Give it a try:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!"
          }
        },
        {
          "kind": "text",
          "content": "The symbol `^C` represents where you pressed <kbd>ctrl</kbd>-<kbd>c</kbd>."
        },
        {
          "kind": "text",
          "content": "You may or may not see the word `again!` printed after the `^C`, depending on\nwhere the code was in the loop when it received the interrupt signal."
        },
        {
          "kind": "text",
          "content": "Fortunately, Rust also provides a way to break out of a loop using code. You\ncan place the `break` keyword within the loop to tell the program when to stop\nexecuting the loop. Recall that we did this in the guessing game in the\n[“Quitting After a Correct Guess”][quitting-after-a-correct-guess]<!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number."
        },
        {
          "kind": "text",
          "content": "We also used `continue` in the guessing game, which in a loop tells the program\nto skip over any remaining code in this iteration of the loop and go to the\nnext iteration."
        },
        {
          "kind": "text",
          "content": "#### Returning Values from Loops"
        },
        {
          "kind": "text",
          "content": "One of the uses of a `loop` is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. You might also need to pass\nthe result of that operation out of the loop to the rest of your code. To do\nthis, you can add the value you want returned after the `break` expression you\nuse to stop the loop; that value will be returned out of the loop so you can\nuse it, as shown here:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-33-return-value-from-loop/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Before the loop, we declare a variable named `counter` and initialize it to\n`0`. Then we declare a variable named `result` to hold the value returned from\nthe loop. On every iteration of the loop, we add `1` to the `counter` variable,\nand then check whether the `counter` is equal to `10`.\nWhen it is, we use the `break` keyword with the value `counter * 2`.\nAfter the loop, we use a semicolon to end the statement that assigns the value to `result`. Finally, we\nprint the value in `result`, which in this case is `20`."
        },
        {
          "kind": "text",
          "content": "You can also `return` from inside a loop. While `break` only exits the current\nloop, `return` always exits the current function."
        },
        {
          "kind": "text",
          "content": "> *Note:* the semicolon after `break counter * 2` is technically optional. `break` is very similar to `return`,\n> in that both can optionally take an expression as an argument, both cause a change in control flow.\n> Code after a `break` or `return` is never executed, so the Rust compiler treats a `break` expression and\n> a `return` expression as having the value unit, or `()`."
        },
        {
          "kind": "text",
          "content": "#### Loop Labels to Disambiguate Between Multiple Loops"
        },
        {
          "kind": "text",
          "content": "If you have loops within loops, `break` and `continue` apply to the innermost\nloop at that point. You can optionally specify a _loop label_ on a loop that\nyou can then use with `break` or `continue` to specify that those keywords\napply to the labeled loop instead of the innermost loop. Loop labels must begin\nwith a single quote. Here’s an example with two nested loops:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "The outer loop has the label `'counting_up`, and it will count up from 0 to 2.\nThe inner loop without a label counts down from 10 to 9. The first `break` that\ndoesn’t specify a label will exit the inner loop only. The `break\n'counting_up;` statement will exit the outer loop. This code prints:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "#### Conditional Loops with `while`"
        },
        {
          "kind": "text",
          "content": "A program will often need to evaluate a condition within a loop. While the\ncondition is `true`, the loop runs. When the condition ceases to be `true`, the\nprogram calls `break`, stopping the loop. It’s possible to implement behavior\nlike this using a combination of `loop`, `if`, `else`, and `break`; you could\ntry that now in a program, if you’d like. However, this pattern is so common\nthat Rust has a built-in language construct for it, called a `while` loop. In\nListing 3-3, we use `while` to loop the program three times, counting down each\ntime, and then, after the loop, print a message and exit."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"3-3\" file-name=\"src/main.rs\" caption=\"Using a `while` loop to run code while a condition evaluates to `true`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-03/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This construct eliminates a lot of nesting that would be necessary if you used\n`loop`, `if`, `else`, and `break`, and it’s clearer. While a condition\nevaluates to `true`, the code runs; otherwise, it exits the loop."
        },
        {
          "kind": "text",
          "content": "#### Looping Through a Collection with `for`"
        },
        {
          "kind": "text",
          "content": "You can also use the `while` construct to loop over the elements of a\ncollection, such as an array. For example, the loop in Listing 3-4 prints each\nelement in the array `a`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"3-4\" file-name=\"src/main.rs\" caption=\"Looping through each element of a collection using a `while` loop\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-04/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, the code counts up through the elements in the array. It starts at index\n`0`, and then loops until it reaches the final index in the array (that is,\nwhen `index < 5` is no longer `true`). Running this code will print every\nelement in the array:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch03-common-programming-concepts/listing-03-04/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "All five array values appear in the terminal, as expected. Even though `index`\nwill reach a value of `5` at some point, the loop stops executing before trying\nto fetch a sixth value from the array."
        },
        {
          "kind": "text",
          "content": "However, this approach is error prone; we could cause the program to panic if\nthe index value or test condition is incorrect. For example, if you changed the\ndefinition of the `a` array to have four elements but forgot to update the\ncondition to `while index < 4`, the code would panic. It’s also slow, because\nthe compiler adds runtime code to perform the conditional check of whether the\nindex is within the bounds of the array on every iteration through the loop."
        },
        {
          "kind": "text",
          "content": "As a more concise alternative, you can use a `for` loop and execute some code\nfor each item in a collection. A `for` loop looks like the code in Listing 3-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"3-5\" file-name=\"src/main.rs\" caption=\"Looping through each element of a collection using a `for` loop\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-05/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we run this code, we’ll see the same output as in Listing 3-4. More\nimportantly, we’ve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items. Machine code generated from `for`\nloops can be more efficient as well, because the index doesn’t need to be\ncompared to the length of the array at every iteration."
        },
        {
          "kind": "text",
          "content": "Using the `for` loop, you wouldn’t need to remember to change any other code if\nyou changed the number of values in the array, as you would with the method\nused in Listing 3-4."
        },
        {
          "kind": "text",
          "content": "The safety and conciseness of `for` loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a `while` loop\nin Listing 3-3, most Rustaceans would use a `for` loop. The way to do that\nwould be to use a `Range`, provided by the standard library, which generates\nall numbers in sequence starting from one number and ending before another\nnumber."
        },
        {
          "kind": "text",
          "content": "Here’s what the countdown would look like using a `for` loop and another method\nwe’ve not yet talked about, `rev`, to reverse the range:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-34-for-range/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This code is a bit nicer, isn’t it?"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "c5b27431-c318-4243-9621-cadacb737f5a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "True/false: this code will terminate (that is, it will not loop forever).\n\n```\nfn main() {\n    let mut x = 0;\n    'a: loop {\n        x += 1;\n        'b: loop {\n            if x > 10 {\n                continue 'a;\n            } else {\n                break 'b;\n            }      \n        }\n        break;       \n    }\n}\n```\n",
                  "distractors": [
                    "False"
                  ]
                },
                "answer": {
                  "answer": "True"
                },
                "context": "It will in fact terminate after the first iteration of the loop.\n"
              },
              {
                "id": "46a52842-d4eb-4dc9-8885-f31a2f2f59b4",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let a = [5; 10];\n    let mut sum = 0;\n    for x in a {\n        sum += x;\n    }\n    println!(\"{sum}\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "50"
                },
                "context": "The array `a` has the element `5` repeated 10 times, therefore its sum is `50`. The answer is not `15` --- note that the syntax `[5; 10]` is different from `[5, 10]`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "You made it! This was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, `if` expressions, and loops! To\npractice with the concepts discussed in this chapter, try building programs to\ndo the following:"
        },
        {
          "kind": "text",
          "content": "- Convert temperatures between Fahrenheit and Celsius.\n- Generate the *n*th Fibonacci number.\n- Print the lyrics to the Christmas carol “The Twelve Days of Christmas,”\ntaking advantage of the repetition in the song."
        },
        {
          "kind": "text",
          "content": "When you’re ready to move on, we’ll talk about a concept in Rust that _doesn’t_\ncommonly exist in other programming languages: ownership."
        },
        {
          "kind": "text",
          "content": "[comparing-the-guess-to-the-secret-number]: ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\n[quitting-after-a-correct-guess]: ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess"
        }
      ]
    },
    {
      "title": "Understanding Ownership",
      "file": "ch04-00-understanding-ownership.md",
      "elements": [
        {
          "kind": "text",
          "content": "Ownership is Rust’s most unique feature and has deep implications for the rest\nof the language. It enables Rust to make memory safety guarantees without\nneeding a garbage collector, so it’s important to understand how ownership\nworks. In this chapter, we’ll talk about ownership as well as several related\nfeatures: borrowing, slices, and how Rust lays data out in memory."
        }
      ]
    },
    {
      "title": "What Is Ownership?",
      "file": "ch04-01-what-is-ownership.md",
      "elements": [
        {
          "kind": "text",
          "content": "Ownership is a discipline for ensuring the **safety** of Rust programs. To understand ownership, we first need to understand what makes a Rust program safe (or unsafe)."
        },
        {
          "kind": "text",
          "content": "### Safety is the Absence of Undefined Behavior"
        },
        {
          "kind": "text",
          "content": "Let's start with an example. This program is safe to execute:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn read(y: bool) {\n    if y {\n        println!(\"y is true!\");\n    }\n}\n\nfn main() {\n    let x = true;\n    read(x);\n}"
          }
        },
        {
          "kind": "text",
          "content": "We can make this program unsafe to execute by moving the call to `read` before the definition of `x`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "fn read(y: bool) {\n    if y {\n        println!(\"y is true!\");\n    }\n}\n\nfn main() {\n    read(x); // oh no! x isn't defined!\n    let x = true;\n}"
          }
        },
        {
          "kind": "text",
          "content": "> *Note*: in this chapter, we will use many code examples that do not compile. Make sure to look for the question mark crab if you are not sure whether a program should compile or not."
        },
        {
          "kind": "text",
          "content": "This second program is unsafe because `read(x)` expects `x` to have a value of type `bool`, but `x` doesn't have a value yet."
        },
        {
          "kind": "text",
          "content": "When a program like this is executed by an interpreter, then reading `x` before it's defined would raise an exception such as Python's [`NameError`] or Javascript's [`ReferenceError`]. But exceptions come at a cost. Each time an interpreted program reads a variable, then the interpreter must check whether that variable is defined."
        },
        {
          "kind": "text",
          "content": "Rust's goal is to compile programs into efficient binaries that require as few runtime checks as possible. Therefore Rust does not check at *runtime* whether a variable is defined before being used. Instead, Rust checks at *compile-time*. If you try to compile the unsafe program, you will get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0425]: cannot find value `x` in this scope\n --> src/main.rs:8:10\n  |\n8 |     read(x); // oh no! x isn't defined!\n  |          ^ not found in this scope"
          }
        },
        {
          "kind": "text",
          "content": "You probably have the intuition that it's good for Rust to ensure that variables are defined before they are used. But why? To justify the rule, we have to ask: **what would happen if Rust allowed a rejected program to compile?**"
        },
        {
          "kind": "text",
          "content": "Let's first consider how the safe program compiles and executes. On a computer with a processor using an [x86](https://en.wikipedia.org/wiki/X86) architecture, Rust generates the following assembly code for the `main` function in the safe program ([see the full assembly code here](https://rust.godbolt.org/z/xnT1fzsqv)):"
        },
        {
          "kind": "code",
          "content": {
            "language": "x86asm",
            "flags": [],
            "code": "main:\n    ; ...\n    mov     edi, 1\n    call    read\n    ; ..."
          }
        },
        {
          "kind": "text",
          "content": "> _Note_: if you aren't familiar with assembly code, that's ok! This section contains a few examples of assembly just to show you how Rust actually works under the hood. You don't generally need to know assembly to understand Rust."
        },
        {
          "kind": "text",
          "content": "This assembly code will:"
        },
        {
          "kind": "text",
          "content": "- Move the number 1, representing `true`, into a \"register\" (a kind of assembly variable) called `edi`.\n- Call the `read` function, which expects its first argument `y` to be in the `edi` register."
        },
        {
          "kind": "text",
          "content": "If the unsafe function was allowed to compile, its assembly might look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "x86asm",
            "flags": [],
            "code": "main:\n    ; ...\n    call    read\n    mov     edi, 1    ; mov is after call\n    ; ..."
          }
        },
        {
          "kind": "text",
          "content": "This program is unsafe because `read` will expect `edi` to be a boolean, which is either the number `0` or `1`. But `edi` could be anything: `2`, `100`, `0x1337BEEF`. When `read` wants to use its argument `y` for any purpose, it will immediately cause _**UNDEFINED BEHAVIOR!**_"
        },
        {
          "kind": "text",
          "content": "Rust doesn't specify what happens if you try to run `if y { .. }` when `y` isn't `true` or `false`. That *behavior*, or what happens after executing the instruction, is *undefined*. Something will happen, for example:"
        },
        {
          "kind": "text",
          "content": "- The code executes without crashing, and no one notices a problem.\n- The code immediately crashes due to a [segmentation fault](https://en.wikipedia.org/wiki/Segmentation_fault) or another kind of operating system error.\n- The code executes without crashing, until a malicious actor creates the right input to delete your production database, overwrite your backups, and steal your lunch money."
        },
        {
          "kind": "text",
          "content": "**A foundational goal of Rust is to ensure that your programs never have undefined behavior.** That is the meaning of \"safety.\" Undefined behavior is especially dangerous for low-level programs with direct access to memory. About [70% of reported security vulnerabilities](https://msrc.microsoft.com/blog/2019/07/a-proactive-approach-to-more-secure-code/) in low-level systems are caused by memory corruption, which is one form of undefined behavior."
        },
        {
          "kind": "text",
          "content": "A secondary goal of Rust is to prevent undefined behavior at _compile-time_ instead of _run-time_. This goal has two motivations:"
        },
        {
          "kind": "text",
          "content": "1. Catching bugs at compile-time means avoiding those bugs in production, improving the reliability of your software.\n2. Catching bugs at compile-time means fewer runtime checks for those bugs, improving the performance of your software."
        },
        {
          "kind": "text",
          "content": "Rust cannot prevent all bugs. If an application exposes a public and unauthenticated `/delete-production-database` endpoint, then a malicious actor doesn't need a suspicious if-statement to delete the database. But Rust's protections are still likely to make programs safer versus using a language with fewer protections, e.g. as found by [Google's Android team](https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html)."
        },
        {
          "kind": "text",
          "content": "### Ownership as a Discipline for Memory Safety"
        },
        {
          "kind": "text",
          "content": "Since safety is the absence of undefined behavior, and since ownership is about safety, then we need to understand ownership in terms of the undefined behaviors it prevents. The Rust Reference maintains a large list of [\"Behavior considered undefined\"](https://doc.rust-lang.org/reference/behavior-considered-undefined.html). For now, we will focus on one category: operations on memory."
        },
        {
          "kind": "text",
          "content": "Memory is the space where data is stored during the execution of a program. There are many ways to think about memory:"
        },
        {
          "kind": "text",
          "content": "- If you are unfamiliar with systems programming, you might think of memory at a high level like \"memory is the RAM in my computer\" or \"memory is the thing that runs out if I load too much data\".\n- If you are familiar with systems programming, you might think of memory at a low level like \"memory is an array of bytes\" or \"memory is the pointers I get back from `malloc`\"."
        },
        {
          "kind": "text",
          "content": "Both of these memory models are _valid_, but they are not _useful_ ways to think about how Rust works. The high-level model is too abstract to explain how Rust works. You will need to understand the concept of a pointer, for instance. The low-level model is too concrete to explain how Rust works. Rust does not allow you to interpret memory as an array of bytes, for instance."
        },
        {
          "kind": "text",
          "content": "Rust provides a particular way to think about memory. Ownership is a discipline for safely using memory within that way of thinking. The rest of this chapter will explain the Rust model of memory."
        },
        {
          "kind": "text",
          "content": "### Variables Live in the Stack"
        },
        {
          "kind": "text",
          "content": "Here's a program like the one you saw in Section 3.3 that defines a number `n` and calls a function `plus_one` on `n`. Beneath the program is a new kind of diagram. This diagram visualizes the contents of memory during the program's execution at the three marked points."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "fn main() {\n    let n = 5;`[]`\n    let y = plus_one(n);`[]`\n    println!(\"The value of y is: {y}\");\n}\n\nfn plus_one(x: i32) -> i32 {\n    `[]`x + 1\n}"
          }
        },
        {
          "kind": "text",
          "content": "Variables live in **frames**. A frame is a mapping from variables to values within a single scope, such as a function. For example:"
        },
        {
          "kind": "text",
          "content": "- The frame for `main` at location L1 holds `n = 5`.\n- The frame for `plus_one` at L2 holds `x = 5`.\n- The frame for `main` at location L3 holds `n = 5; y = 6`."
        },
        {
          "kind": "text",
          "content": "Frames are organized into a **stack** of currently-called-functions. For example, at L2 the frame for `main` sits above the frame for the called function `plus_one`. After a function returns, Rust deallocates the function's frame. (Deallocation is also called **freeing** or **dropping**, and we use those terms interchangeably.) This sequence of frames is called a stack because the most recent frame added is always the next frame freed."
        },
        {
          "kind": "text",
          "content": "> _Note:_ this memory model does not fully describe how Rust actually works! As we saw earlier with the assembly code, the Rust compiler might put `n` or `x` into a register rather than a stack frame. But that distinction is an implementation detail. It shouldn't change your understanding of safety in Rust, so we can focus on the simpler case of frame-only variables."
        },
        {
          "kind": "text",
          "content": "When an expression reads a variable, the variable's value is copied from its slot in the stack frame. For example, if we run this program:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "#fn main() {\nlet a = 5;`[]`\nlet mut b = a;`[]`\nb += 1;`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The value of `a` is copied into `b`, and `a` is left unchanged, even after changing `b`."
        },
        {
          "kind": "text",
          "content": "### Boxes Live in the Heap"
        },
        {
          "kind": "text",
          "content": "However, copying data can take up a lot of memory. For example, here's a slightly different program. This program copies an array with 1 million elements:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {\nlet a = [0; 1_000_000];`[]`\nlet b = a;`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Observe that copying `a` into `b` causes the `main` frame to contain 2 million elements."
        },
        {
          "kind": "text",
          "content": "To transfer access to data without copying it, Rust uses **pointers**. A pointer is a value that describes a location in memory. The value that a pointer points-to is called its **pointee.** One common way to make a pointer is to allocate memory in the **heap**.  The heap is a separate region of memory where data can live indefinitely. Heap data is not tied to a specific stack frame. Rust provides a construct called [`Box`](https://doc.rust-lang.org/std/boxed/index.html) for putting data on the heap. For example, we can wrap the million-element array in `Box::new` like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {\nlet a = Box::new([0; 1_000_000]);`[]`\nlet b = a;`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Observe that now, there is only ever a single array at a time. At L1, the value of `a` is a pointer (represented by dot with an arrow) to the array inside the heap. The statement `let b = a` copies the pointer from `a` into `b`, but the pointed-to data is not copied. Note that `a` is now grayed out because it has been *moved* &mdash; we will see what that means in a moment."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5d774a01-8604-4386-8d81-498496ccd96c",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following best describes the difference between the stack and the heap?\n",
                  "distractors": [
                    "The stack can hold pointers to data stored on the heap, while the heap only holds data without pointers",
                    "The stack holds immutable data, while the heap holds mutable data.",
                    "The stack holds copyable data, while the heap holds uncopyable data."
                  ]
                },
                "answer": {
                  "answer": "The stack holds data associated with a specific function, while the heap holds data that can outlive a function"
                },
                "context": "Frames in the stack are associated with a specific function, and are deallocated when the function returns.\nData on the heap can live indefinitely. Note that both stack and heap data can be mutable and can be copyable. The heap is allowed to\ncontain pointers (even to the stack, as we will see later).\n"
              },
              {
                "id": "4c953b2d-65bf-4dab-bbbb-14c9b15a690e",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Consider the execution of the following snippet, with the final state shown:\n\n```aquascope,interpreter\n#fn main() {\nlet a = Box::new(15);\nlet b = a;\nlet c = Box::new(15);`[]`\n#}\n```\n\nIn the final state, how many copies of the number `15` live anywhere in memory? Write your answer as a digit, such as 0 or 1.\n"
                },
                "answer": {
                  "answer": "2"
                },
                "context": "The two boxes contain the two copies of the number 15. The assignment `let b = a` copies the heap pointer, but not the number on the heap.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Rust Does Not Permit Manual Memory Management"
        },
        {
          "kind": "text",
          "content": "Memory management is the process of allocating memory and deallocating memory. In other words, it's the process of finding unused memory and later returning that memory when it is no longer used. Stack frames are automatically managed by Rust. When a function is called, Rust allocates a stack frame for the called function. When the call ends, Rust deallocates the stack frame."
        },
        {
          "kind": "text",
          "content": "As we saw above, heap data is allocated when calling `Box::new(..)`. But when is heap data deallocated? Imagine that Rust had a `free()` function that frees a heap allocation. Imagine that Rust let a programmer call `free` whenever they wanted. This kind of \"manual\" memory management easily leads to bugs. For example, we could read a pointer to freed memory:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail"
            ],
            "code": "#fn free<T>(_t: T) {}\n#fn main() {\nlet b = Box::new([0; 100]);`[]`\nfree(b);`[]`\nassert!(b[0] == 0);`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "> *Note:* you may wonder how we are executing this Rust program that doesn't compile. We use [special tools](https://github.com/cognitive-engineering-lab/aquascope) to simulate Rust as if the borrow checker were disabled, for educational purposes. That way we can answer what-if questions, like: what if Rust let this unsafe program compile?"
        },
        {
          "kind": "text",
          "content": "Here, we allocate an array on the heap. Then we call `free(b)`, which deallocates the heap memory of `b`. Therefore the value of `b` is a pointer to invalid memory, which we represent as the \"⦻\" icon. No undefined behavior has happened yet! The program is still safe at L2. It's not necessarily a problem to have an invalid pointer."
        },
        {
          "kind": "text",
          "content": "The undefined behavior happens when we try to *use* the pointer by reading `b[0]`. That would attempt to access invalid memory, which could cause the program to crash. Or worse, it could not crash and return arbitrary data. Therefore this program is **unsafe**."
        },
        {
          "kind": "text",
          "content": "Rust does not allow programs to manually deallocate memory. That policy avoids the kinds of undefined behaviors shown above."
        },
        {
          "kind": "text",
          "content": "### A Box's Owner Manages Deallocation"
        },
        {
          "kind": "text",
          "content": "Instead, Rust _automatically_ frees a box's heap memory. Here is an _almost_ correct description of Rust's policy for freeing boxes:"
        },
        {
          "kind": "text",
          "content": "> **Box deallocation principle (almost correct):** If a variable is bound to a box, when Rust deallocates the variable's frame, then Rust deallocates the box's heap memory."
        },
        {
          "kind": "text",
          "content": "For example, let's trace through a program that allocates and frees a box:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "fn main() {\n    let a_num = 4;`[]`\n    make_and_drop();`[]`\n}\n\nfn make_and_drop() {\n    let a_box = Box::new(5);`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "At L1, before calling `make_and_drop`, the state of memory is just the stack frame for `main`. Then at L2, while calling `make_and_drop`, `a_box` points to `5` on the heap. Once `make_and_drop` is finished, Rust deallocates its stack frame. `make_and_drop` contains the variable `a_box`, so Rust also deallocates the heap data in `a_box`. Therefore the heap is empty at L3."
        },
        {
          "kind": "text",
          "content": "The box's heap memory has been successfully managed. But what if we abused this system? Returning to our earlier example, what happens when we bind two variables to a box?"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet a = Box::new([0; 1_000_000]);\nlet b = a;\n# }"
          }
        },
        {
          "kind": "text",
          "content": "The boxed array has now been bound to both `a` and `b`. By our \"almost correct\" principle, Rust would try to free the box's heap memory *twice* on behalf of both variables. That's undefined behavior too!"
        },
        {
          "kind": "text",
          "content": "To avoid this situation, we finally arrive at ownership. When `a` is bound to `Box::new([0; 1_000_000])`, we say that `a` **owns** the box. The statement `let b = a` **moves** ownership of the box from `a` to `b`. Given these concepts, Rust's policy for freeing boxes is more accurately described as:"
        },
        {
          "kind": "text",
          "content": "> **Box deallocation principle (fully correct):** If a variable owns a box, when Rust deallocates the variable's frame, then Rust deallocates the box's heap memory."
        },
        {
          "kind": "text",
          "content": "In the example above, `b` owns the boxed array. Therefore when the scope ends, Rust deallocates the box only once on behalf of `b`, not `a`."
        },
        {
          "kind": "text",
          "content": "### Collections Use Boxes"
        },
        {
          "kind": "text",
          "content": "Boxes are used by Rust data structures[^boxed-data-structures] like [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html), [`String`](https://doc.rust-lang.org/std/string/struct.String.html), and [`HashMap`](https://doc.rust-lang.org/std/collections/struct.HashMap.html) to hold a variable number of elements. For example, here's a program that creates, moves, and mutates a string:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "fn main() {\n    let first = String::from(\"Ferris\");`[]`\n    let full = add_suffix(first);`[]`\n    println!(\"{full}\");\n}\n\nfn add_suffix(mut name: String) -> String {\n    `[]`name.push_str(\" Jr.\");`[]`\n    name\n}"
          }
        },
        {
          "kind": "text",
          "content": "This program is more involved, so make sure you follow each step:"
        },
        {
          "kind": "text",
          "content": "1. At L1, the string \"Ferris\" has been allocated on the heap. It is owned by `first`.\n2. At L2, the function `add_suffix(first)` has been called. This moves ownership of the string from `first` to `name`. The string data is not copied, but the pointer to the data is copied.\n3. At L3, the function `name.push_str(\" Jr.\")` resizes the string's heap allocation. This does three things. First, it creates a new larger allocation. Second, it writes \"Ferris Jr.\" into the new allocation. Third, it frees the original heap memory. `first` now points to deallocated memory.\n4. At L4, the frame for `add_suffix` is gone. This function returned `name`, transferring ownership of the string to `full`."
        },
        {
          "kind": "text",
          "content": "### Variables Cannot Be Used After Being Moved"
        },
        {
          "kind": "text",
          "content": "The string program helps illustrate a key safety principle for ownership. Imagine that `first` were used in `main` after calling `add_suffix`. We can simulate such a program and see the undefined behavior that results:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail"
            ],
            "code": "fn main() {\n    let first = String::from(\"Ferris\");\n    let full = add_suffix(first);\n    println!(\"{full}, originally {first}\");`[]` // first is now used here\n}\n\nfn add_suffix(mut name: String) -> String {\n    name.push_str(\" Jr.\");\n    name\n}"
          }
        },
        {
          "kind": "text",
          "content": "`first` points to deallocated memory after calling `add_suffix`. Reading `first` in `println!` would therefore be a violation of memory safety (undefined behavior). Remember: it's not a problem that `first` points to deallocated memory. It's a problem that we tried to *use* `first` after it became invalid."
        },
        {
          "kind": "text",
          "content": "Thankfully, Rust will refuse to compile this program, giving the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0382]: borrow of moved value: `first`\n --> test.rs:4:35\n  |\n2 |     let first = String::from(\"Ferris\");\n  |         ----- move occurs because `first` has type `String`, which does not implement the `Copy` trait\n3 |     let full = add_suffix(first);\n  |                           ----- value moved here\n4 |     println!(\"{full}, originally {first}\"); // first is now used here\n  |                                   ^^^^^ value borrowed here after move"
          }
        },
        {
          "kind": "text",
          "content": "Let's walk through the steps of this error. Rust says that `first` is moved when we called `add_suffix(first)` on line 3. The error clarifies that `first` is moved because it has type `String`, which does not implement `Copy`. We will discuss `Copy` soon &mdash; in brief, you would not get this error if you used an `i32` instead of `String`. Finally, the error says that we use `first` after being moved (it's \"borrowed\", which we discuss next section)."
        },
        {
          "kind": "text",
          "content": "So if you move a variable, Rust will stop you from using that variable later. More generally, the compiler will enforce this principle:"
        },
        {
          "kind": "text",
          "content": "> **Moved heap data principle:** if a variable `x` moves ownership of heap data to another variable `y`, then `x` cannot be used after the move."
        },
        {
          "kind": "text",
          "content": "Now you should start to see the relationship between ownership, moves, and safety. Moving ownership of heap data avoids undefined behavior from reading deallocated memory."
        },
        {
          "kind": "text",
          "content": "### Cloning Avoids Moves"
        },
        {
          "kind": "text",
          "content": "One way to avoid moving data is to *clone* it using the `.clone()` method. For example, we can fix the safety issue in the previous program with a clone:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "fn main() {\n    let first = String::from(\"Ferris\");\n    let first_clone = first.clone();`[]`\n    let full = add_suffix(first_clone);`[]`\n    println!(\"{full}, originally {first}\");\n}\n\nfn add_suffix(mut name: String) -> String {\n    name.push_str(\" Jr.\");\n    name\n}"
          }
        },
        {
          "kind": "text",
          "content": "Observe that at L1, `first_clone` did not \"shallow\" copy the pointer in `first`, but instead \"deep\" copied the string data into a new heap allocation. Therefore at L2, while `first_clone` has been moved and invalidated by `add_suffix`, the original `first` variable is unchanged. It is safe to continue using `first`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "889ca9ac-0f4b-4abf-82c4-be9cd4d4f7ad",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following is NOT a kind of undefined behavior?",
                  "distractors": [
                    "Using a pointer that points to freed memory",
                    "Freeing the same memory a second time",
                    "Using a non-boolean value as an `if` condition"
                  ]
                },
                "answer": {
                  "answer": "Having a pointer to freed memory in a stack frame"
                },
                "context": "It can be perfectly safe to have a pointer to freed memory in a stack frame. \nThe important thing is to not *use* that pointer again, e.g. by reading it or freeing it.\n"
              },
              {
                "id": "94425a4e-043e-47f8-9fba-c5b09fb60aa3",
                "type": "Tracing",
                "prompt": {
                  "program": "fn add_suffix(mut s: String) -> String {\n  s.push_str(\" world\");\n  s\n}\n\nfn main() {\n  let s = String::from(\"hello\");\n  let s2 = add_suffix(s);\n  println!(\"{}\", s2);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "hello world"
                },
                "context": "This program is valid because `s` is not used after moving it into `add_suffix`.\n"
              },
              {
                "id": "c00e3638-861b-4f9e-a55c-bfb67af79280",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let s = String::from(\"hello\");\n  let s2;\n  let b = false;\n  if b {\n    s2 = s;\n  }\n  println!(\"{}\", s);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 8
                },
                "context": "Because `s` could be moved inside of the if-statement, it is illegal to use it on line 8.\nWhile the if-statement will never execute in this program because `b` is always `false`,\nRust does not in general try to determine whether if-statements will or won't execute. Rust just\nassumes that it *might* be executed, and therefore `s` *might* be moved.\n"
              },
              {
                "id": "f7d67c11-60bb-4d92-8cc2-8ce82cf4c974",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say we have a function that moves a box, like this:\n```\nfn move_a_box(b: Box<i32>) {\n  // This space intentionally left blank\n}\n```\n\nBelow are four snippets which are rejected by the Rust compiler. \nImagine that Rust instead allowed these snippets to compile and run. \nSelect each snippet that would cause undefined behavior, or select \n\"None of these snippets\" if none of these snippets would cause undefined behavior.\n",
                  "distractors": [
                    "```\nlet b = Box::new(0);\nlet b2 = b;\nprintln!(\"{}\", b);\nmove_a_box(b2);\n```\n",
                    "None of these snippets"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet b = Box::new(0);\nlet b2 = b;\nmove_a_box(b);\n```\n",
                    "```\nlet b = Box::new(0);\nmove_a_box(b);\nprintln!(\"{}\", b);\n```\n",
                    "```\nlet b = Box::new(0);\nmove_a_box(b);\nlet b2 = b;\n```\n"
                  ]
                },
                "context": "The key idea is that when a box is passed to `move_a_box`, its memory is deallocated after `move_a_box` ends.\nTherefore:\n* Reading `b` via `println` after `move_a_box` is undefined behavior, as it reads freed memory.\n* Giving `b` a second owner is undefined behavior, as it would cause Rust to free the box a second time on behalf of `b2`. It doesn't matter whether the `let b2 = b` binding happens\n  before or after `move_a_box`.\n\nHowever, doing `let b2 = b` and then `println` is not undefined behavior. Although `b` is moved, its data is not deallocated until `move_a_box` is called at the end. Therefore \nthis program is technically safe, although still rejected by Rust.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Summary"
        },
        {
          "kind": "text",
          "content": "Ownership is primarily a discipline of heap management:[^pointer-management]"
        },
        {
          "kind": "text",
          "content": "- All heap data must be owned by exactly one variable.\n- Rust deallocates heap data once its owner goes out of scope.\n- Ownership can be transferred by moves, which happen on assignments and function calls.\n- Heap data can only be accessed through its current owner, not a previous owner."
        },
        {
          "kind": "text",
          "content": "We have emphasized not just _how_ Rust's safeguards work, but _why_ they avoid undefined behavior. When you get an error message from the Rust compiler, it's easy to get frustrated if you don't understand why Rust is complaining. These conceptual foundations should help you with interpreting Rust's error messages.  They should also help you design more Rustic APIs."
        },
        {
          "kind": "text",
          "content": "[^boxed-data-structures]: These data structures don't use the literal `Box` type. For example, `String` is implemented with `Vec`, and `Vec` is implemented with [`RawVec`](https://doc.rust-lang.org/nomicon/vec/vec-raw.html) rather than `Box`. But types like `RawVec` are still box-like: they own memory in the heap."
        },
        {
          "kind": "text",
          "content": "[^pointer-management]: In another sense, ownership is a discipline of *pointer* management. But we haven't described yet about how to create pointers to anywhere other than the heap. We'll get there in the next section."
        },
        {
          "kind": "text",
          "content": "[`NameError`]: https://docs.python.org/3/library/exceptions.html#NameError\n[`ReferenceError`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError"
        }
      ]
    },
    {
      "title": "References and Borrowing",
      "file": "ch04-02-references-and-borrowing.md",
      "elements": [
        {
          "kind": "text",
          "content": "Ownership, boxes, and moves provide a foundation for safely programming with the heap. However, move-only APIs can be inconvenient to use. For example, say you want to read some strings twice:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "fn main() {\n    let m1 = String::from(\"Hello\");\n    let m2 = String::from(\"world\");\n    greet(m1, m2);`[]`\n    let s = format!(\"{} {}\", m1, m2);`[]` // Error: m1 and m2 are moved\n}\n\nfn greet(g1: String, g2: String) {\n    println!(\"{} {}!\", g1, g2);`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "In this example, calling `greet` moves the data from `m1` and `m2` into the parameters of `greet`. Both strings are dropped at the end of `greet`, and therefore cannot be used within `main`. If we try to read them like in the operation `format!(..)`, then that would be undefined behavior. The Rust compiler therefore rejects this program with the same error we saw last section:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0382]: borrow of moved value: `m1`\n --> test.rs:5:30\n (...rest of the error...)"
          }
        },
        {
          "kind": "text",
          "content": "This move behavior is extremely inconvenient. Programs often need to use a string more than once. An alternative `greet` could return ownership of the strings, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "fn main() {\n    let m1 = String::from(\"Hello\");\n    let m2 = String::from(\"world\");`[]`\n    let (m1_again, m2_again) = greet(m1, m2);\n    let s = format!(\"{} {}\", m1_again, m2_again);`[]`\n}\n\nfn greet(g1: String, g2: String) -> (String, String) {\n    println!(\"{} {}!\", g1, g2);\n    (g1, g2)\n}"
          }
        },
        {
          "kind": "text",
          "content": "However, this style of program is quite verbose. Rust provides a concise style of reading and writing without moves through references."
        },
        {
          "kind": "text",
          "content": "### References Are Non-Owning Pointers"
        },
        {
          "kind": "text",
          "content": "A **reference** is a kind of pointer. Here's an example of a reference that rewrites our `greet` program in a more convenient manner:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "fn main() {\n    let m1 = String::from(\"Hello\");\n    let m2 = String::from(\"world\");`[]`\n    greet(&m1, &m2);`[]` // note the ampersands\n    let s = format!(\"{} {}\", m1, m2);\n}\n\nfn greet(g1: &String, g2: &String) { // note the ampersands\n    `[]`println!(\"{} {}!\", g1, g2);\n}"
          }
        },
        {
          "kind": "text",
          "content": "The expression `&m1` uses the ampersand operator to create a reference to (or \"borrow\") `m1`. The type of the `greet` parameter `g1` is changed to `&String`, meaning \"a reference to a `String`\"."
        },
        {
          "kind": "text",
          "content": "<!-- At runtime, the references look like this:"
        },
        {
          "kind": "text",
          "content": "<img src=\"img/experiment/ch04-02-stack1.jpg\" class=\"center\" width=\"350\" /> -->"
        },
        {
          "kind": "text",
          "content": "Observe at L2 that there are two steps from `g1` to the string \"Hello\". `g1` is a reference that points to `m1` on the stack, and `m1` is a String containing a box that points to \"Hello\" on the heap."
        },
        {
          "kind": "text",
          "content": "While `m1` owns the heap data \"Hello\", `g1` does _not_ own either `m1` or \"Hello\". Therefore after `greet` ends and the program reaches L3, no heap data has been deallocated. Only the stack frame for `greet` disappears. This fact is consistent with our *Box Deallocation Principle*. Because `g1` did not own \"Hello\", Rust did not deallocate \"Hello\" on behalf of `g1`."
        },
        {
          "kind": "text",
          "content": "References are **non-owning pointers**, because they do not own the data they point to."
        },
        {
          "kind": "text",
          "content": "### Dereferencing a Pointer Accesses Its Data"
        },
        {
          "kind": "text",
          "content": "The previous examples using boxes and strings have not shown how Rust \"follows\" a pointer to its data. For example, the `println!` macro has mysteriously worked for both owned strings of type `String`, and for string references of type `&String`. The underlying mechanism is the **dereference** operator, written with an asterisk (`*`). For example, here's a program that uses dereferences in a few different ways:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "# fn main() {\nlet mut x: Box<i32> = Box::new(1);\nlet a: i32 = *x;         // *x reads the heap value, so a = 1\n*x += 1;                 // *x on the left-side modifies the heap value,\n                         //     so x points to the value 2\n\nlet r1: &Box<i32> = &x;  // r1 points to x on the stack\nlet b: i32 = **r1;       // two dereferences get us to the heap value\n\nlet r2: &i32 = &*x;      // r2 points to the heap value directly\nlet c: i32 = *r2;`[]`    // so only one dereference is needed to read it\n# }"
          }
        },
        {
          "kind": "text",
          "content": "Observe the difference between `r1` pointing to `x` on the stack, and `r2` pointing to the heap value `2`."
        },
        {
          "kind": "text",
          "content": "You probably won't see the dereference operator very often when you read Rust code. Rust implicitly inserts dereferences and references in certain cases, such as calling a method with the dot operator. For example, this program shows two equivalent ways of calling the [`i32::abs`](https://doc.rust-lang.org/std/primitive.i32.html#method.abs) (absolute value) and [`str::len`](https://doc.rust-lang.org/std/primitive.str.html#method.len) (string length) functions:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main()  {\nlet x: Box<i32> = Box::new(-1);\nlet x_abs1 = i32::abs(*x); // explicit dereference\nlet x_abs2 = x.abs();      // implicit dereference\nassert_eq!(x_abs1, x_abs2);\n\nlet r: &Box<i32> = &x;\nlet r_abs1 = i32::abs(**r); // explicit dereference (twice)\nlet r_abs2 = r.abs();       // implicit dereference (twice)\nassert_eq!(r_abs1, r_abs2);\n\nlet s = String::from(\"Hello\");\nlet s_len1 = str::len(&s); // explicit reference\nlet s_len2 = s.len();      // implicit reference\nassert_eq!(s_len1, s_len2);\n# }"
          }
        },
        {
          "kind": "text",
          "content": "This example shows implicit conversions in three ways:\n1. The `i32::abs` function expects an input of type `i32`. To call `abs` with a `Box<i32>`, you can explicitly dereference the box like `i32::abs(*x)`. You can also implicitly dereference the box using method-call syntax like `x.abs()`. The dot syntax is syntactic sugar for the function-call syntax."
        },
        {
          "kind": "text",
          "content": "2. This implicit conversion works for multiple layers of pointers. For example, calling `abs` on a reference to a box `r: &Box<i32>` will insert two dereferences."
        },
        {
          "kind": "text",
          "content": "3. This conversion also works the opposite direction. The function `str::len` expects a reference `&str`. If you call `len` on an owned `String`, then Rust will insert a single borrowing operator. (In fact, there is a further conversion from `String` to `str`!)"
        },
        {
          "kind": "text",
          "content": "We will say more about method calls and implicit conversions in later chapters. For now, the important takeaway is that these conversions are happening with method calls and some macros like `println`. We want to unravel all the \"magic\" of Rust so you can have a clear mental model of how Rust works."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "0b8dbb4f-7c56-4b6e-8358-95c7b46f90c3",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Consider the following program, showing the state of memory after the last line:\n```aquascope,interpreter\n#fn main() {\nlet x = Box::new(0);\nlet y = Box::new(&x);`[]`\n#}\n```\n\nIf you wanted to copy out the number `0` through `y`, how many dereferences would you need to use? \nWrite your answer as a digit. For example, if the correct expression is `*y`, then the answer is 1. \n"
                },
                "answer": {
                  "answer": "3"
                },
                "context": "`***y` is the correct expression. `y` has the type `Box<&Box<i32>>`. It is a heap pointer to a stack reference \nto a heap pointer. Therefore `y` must be dereferenced three times, once for each layer of indirection.\n"
              },
              {
                "id": "7cf19153-3647-4afc-953a-f9392ddb96fb",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following program, showing the state of memory after the last line:\n \n```aquascope,interpreter\nfn get_first(vr: &Vec<i32>) -> i32 {\n  vr[0]\n}\n\nfn main() {\n  let mut v = vec![0, 1, 2];\n  let n = get_first(&v);\n  println!(\"{} {}\", n, v[1]);`[]` \n}\n```\n\nWhich of the following best explains why `v` is not deallocated after calling `get_first`?\n",
                  "distractors": [
                    "`vr` is not mutated within `get_first`",
                    "`get_first` returns a value of type `i32`, not the vector itself",
                    "`v` is used after calling `get_first` in the `println`"
                  ]
                },
                "answer": {
                  "answer": "`vr` is a reference which does not own the vector it points to"
                },
                "context": "References are non-owning pointers. Therefore passing `&v` to `get_first` does not move ownership of `v` into `get_first`,\nand subsequently `v` is not deallocated after `get_first` ends.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Rust Avoids Simultaneous Aliasing and Mutation"
        },
        {
          "kind": "text",
          "content": "Pointers are a powerful and dangerous feature because they enable **aliasing**. Aliasing is accessing the same data through different variables. On its own, aliasing is harmless. But combined with **mutation**, we have a recipe for disaster. One variable can \"pull the rug out\" from another variable in many ways, for example:"
        },
        {
          "kind": "text",
          "content": "- By deallocating the aliased data, leaving the other variable to point to deallocated memory.\n- By mutating the aliased data, invalidating runtime properties expected by the other variable.\n- By _concurrently_ mutating the aliased data, causing a data race with nondeterministic behavior for the other variable."
        },
        {
          "kind": "text",
          "content": "As a running example, we are going to look at programs using the vector data structure, [`Vec`]. Unlike arrays which have a fixed length, vectors have a variable length by storing their elements in the heap. For example, [`Vec::push`] adds an element to the end of a vector, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];`[]`\nv.push(4);`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The macro `vec!` creates a vector with the elements between the brackets. The vector `v` has type `Vec<i32>`. The syntax `<i32>` means the elements of the vector have type `i32`."
        },
        {
          "kind": "text",
          "content": "One important implementation detail is that `v` allocates a heap array of a certain *capacity*. We can peek into `Vec`'s internals and see this detail for ourselves:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal",
              "concreteTypes"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "> *Note:* click the binocular icon in the top right of the diagram to toggle this detailed view in any runtime diagram."
        },
        {
          "kind": "text",
          "content": "Notice that the vector has a length (`len`) of 3 and a capacity (`cap`) of 3. The vector is at capacity. So when we do a `push`, the vector has to create a new allocation with larger capacity, copy all the elements over, and deallocate the original heap array. In the diagram above, the array `1 2 3 4` is in a (potentially) different memory location than the original array `1 2 3`."
        },
        {
          "kind": "text",
          "content": "To tie this back to memory safety, let's bring references into the mix. Say we created a reference to a vector's heap data. Then that reference can be invalidated by a push, as simulated below:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];\nlet num: &i32 = &v[2];`[]`\nv.push(4);`[]`\nprintln!(\"Third element is {}\", *num);`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Initially, `v` points to an array with 3 elements on the heap. Then `num` is created as a reference to the third element, as seen at L1. However, the operation `v.push(4)` resizes `v`. The resize will deallocate the previous array and allocate a new, bigger array. In the process, `num` is left pointing to invalid memory. Therefore at L3, dereferencing `*num` reads invalid memory, causing undefined behavior."
        },
        {
          "kind": "text",
          "content": "In more abstract terms, the issue is that the vector `v` is both aliased (by the reference `num`) and mutated (by the operation `v.push(4)`). So to avoid these kinds of issues, Rust follows a basic principle:"
        },
        {
          "kind": "text",
          "content": "> **Pointer Safety Principle**: data should never be aliased and mutated at the same time."
        },
        {
          "kind": "text",
          "content": "Data can be aliased. Data can be mutated. But data cannot be _both_ aliased _and_ mutated. For example, Rust enforces this principle for boxes (owned pointers) by disallowing aliasing. Assigning a box from one variable to another will move ownership, invalidating the previous variable. Owned data can only be accessed through the owner &mdash; no aliases."
        },
        {
          "kind": "text",
          "content": "However, because references are non-owning pointers, they need different rules than boxes to ensure the *Pointer Safety Principle*. By design, references are meant to temporarily create aliases. In the rest of this section, we will explain the basics of how Rust ensures the safety of references through the **borrow checker.**"
        },
        {
          "kind": "text",
          "content": "### References Change Permissions on Places"
        },
        {
          "kind": "text",
          "content": "The core idea behind the borrow checker is that variables have three kinds of **permissions** on their data:"
        },
        {
          "kind": "text",
          "content": "- **Read** (@Perm{read}): data can be copied to another location.\n- **Write** (@Perm{write}): data can be mutated.\n- **Own** (@Perm{own}): data can be moved or dropped."
        },
        {
          "kind": "text",
          "content": "These permissions don't exist at runtime, only within the compiler. They describe how the compiler \"thinks\" about your program before the program is executed."
        },
        {
          "kind": "text",
          "content": "By default, a variable has read/own permissions (@Perm{read}@Perm{own}) on its data. If a variable is annotated with `let mut`, then it also has the write permission (@Perm{write}). The key idea is\nthat **references can temporarily remove these permissions.**"
        },
        {
          "kind": "text",
          "content": "To illustrate this idea, let's look at the permissions on a variation of the program above that is actually safe. The `push` has been moved after the `println!`. The permissions in this program are visualized with a new kind of diagram. The diagram shows the changes in permissions on each line."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];\nlet num: &i32 = &v[2];\nprintln!(\"Third element is {}\", *num);\nv.push(4);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Let's walk through each line:"
        },
        {
          "kind": "text",
          "content": "1. After `let mut v = (...)`, the variable `v` has been initialized (indicated by <i class=\"fa fa-level-up\"></i>). It gains @Perm[gained]{read}@Perm[gained]{write}@Perm[gained]{own} permissions (the plus sign indicates gain).\n2. After `let num = &v[2]`, the data in `v` has been **borrowed** by `num` (indicated by <i class=\"fa fa-arrow-right\"></i>). Three things happen:\n- The borrow removes @Perm[lost]{write}@Perm[lost]{own} permissions from `v` (the slash indicates loss). `v` cannot be written or owned, but it can still be read.\n- The variable `num` has gained @Perm{read}@Perm{own} permissions. `num` is not writable (the missing @Perm{write} permission is shown as a dash <span class=\"perm write\">‒</span>) because it was not marked `let mut`.\n- The **place** `*num` has gained the @Perm{read} permission.\n3. After `println!(...)`, then `num` is no longer in use, so `v` is no longer borrowed. Therefore:\n- `v` regains its @Perm{write}@Perm{own} permissions (indicated by <i class=\"fa fa-rotate-left\"></i>).\n- `num` and `*num` have lost all of their permissions (indicated by <i class=\"fa fa-level-down\"></i>).\n4. After `v.push(4)`, then `v` is no longer in use, and it loses all of its permissions."
        },
        {
          "kind": "text",
          "content": "Next, let's explore a few nuances of the diagram. First, why do you see both `num` and `*num`? Because accessing data through a reference is not the same as manipulating the reference itself. For example, say we declared a reference to a number with `let mut`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper"
            ],
            "code": "#fn main() {\nlet x = 0;\nlet mut x_ref = &x;\n# println!(\"{x_ref} {x}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Notice that `x_ref` has the @Perm{write} permission, while `*x_ref` does not. That means we can assign a different reference to the `x_ref` variable (e.g. `x_ref = &y`), but we cannot mutate the data it points to (e.g. `*x_ref += 1`)."
        },
        {
          "kind": "text",
          "content": "More generally, permissions are defined on **places** and not just variables. A place is anything you can put on the left-hand side of an assignment. Places include:"
        },
        {
          "kind": "text",
          "content": "- Variables, like `a`.\n- Dereferences of places, like `*a`.\n- Array accesses of places, like `a[0]`.\n- Fields of places, like `a.0` for tuples or `a.field` for structs (discussed next chapter).\n- Any combination of the above, like `*((*a)[0].1)`."
        },
        {
          "kind": "text",
          "content": "Second, why do places lose permissions when they become unused? Because some permissions are mutually exclusive. If you write `num = &v[2]`, then `v` cannot be mutated or dropped while `num` is in use. But that doesn't mean it's invalid to use `num` again. For example, if we add another `println!` to the above program, then `num` simply loses its permissions one line later:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];\nlet num: &i32 = &v[2];\nprintln!(\"Third element is {}\", *num);\nprintln!(\"Again, the third element is {}\", *num);\nv.push(4);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "It's only a problem if you attempt to use `num` again *after* mutating `v`. Let's look at this in more detail."
        },
        {
          "kind": "text",
          "content": "### The Borrow Checker Finds Permission Violations"
        },
        {
          "kind": "text",
          "content": "Recall the *Pointer Safety Principle*: data should not be aliased and mutated. The goal of these permissions is to ensure that data cannot be mutated if it is aliased. Creating a reference to data (\"borrowing\" it) causes that data to be temporarily read-only until the reference is no longer in use."
        },
        {
          "kind": "text",
          "content": "Rust uses these permissions in its **borrow checker**. The borrow checker looks for potentially unsafe operations involving references. Let's return to the unsafe program we saw earlier, where `push` invalidates a reference. This time we'll add another aspect to the permissions diagram:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];\nlet num: &i32 = &v[2];`{}`\nv.push(4);`{}`\nprintln!(\"Third element is {}\", *num);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Any time a place is used, Rust expects that place to have certain permissions depending on the operation. For example, the borrow `&v[2]` requires that `v` is readable. Therefore the @Perm{read} permission is shown between the operation `&` and the place `v`. The letter is filled-in because `v` has the read permission at that line."
        },
        {
          "kind": "text",
          "content": "By contrast, the mutating operation `v.push(4)` requires that `v` is readable and writable. Both @Perm{read} and @Perm{write} are shown. However, `v` does not have write permissions (it is borrowed by `num`). So the letter @Perm[missing]{write} is hollow, indicating that the write permission is *expected* but `v` does not have it."
        },
        {
          "kind": "text",
          "content": "If you try to compile this program, then the Rust compiler will return the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n --> test.rs:4:1\n  |\n3 | let num: &i32 = &v[2];\n  |                  - immutable borrow occurs here\n4 | v.push(4);\n  | ^^^^^^^^^ mutable borrow occurs here\n5 | println!(\"Third element is {}\", *num);\n  |                                 ---- immutable borrow later used here"
          }
        },
        {
          "kind": "text",
          "content": "The error message explains that `v` cannot be mutated while the reference `num` is in use. That's the surface-level reason &mdash; the underlying issue is that `num` could be invalidated by `push`. Rust catches that potential violation of memory safety."
        },
        {
          "kind": "text",
          "content": "### Mutable References Provide Unique and Non-Owning Access to Data"
        },
        {
          "kind": "text",
          "content": "The references we have seen so far are read-only **immutable references** (also called **shared references**). Immutable references permit aliasing but disallow mutation. However, it is also useful to temporarily provide mutable access to data without moving it."
        },
        {
          "kind": "text",
          "content": "The mechanism for this is **mutable references** (also called **unique references**). Here's a simple example of a mutable reference with the accompanying permissions changes:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];\nlet num: &mut i32 = &mut v[2];\n*num += 1;\nprintln!(\"Third element is {}\", *num);\nprintln!(\"Vector is now {:?}\", v);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "<blockquote><div style=\"margin-block-start: 1em; margin-block-end: 1em\"><i>Note:</i> when the expected permissions are not strictly relevant to an example, we will abbreviate them as dots like <div class=\"permission-stack stack-size-2\"><div class=\"perm read\"><div class=\"small\">•</div><div class=\"big\">R</div></div><div class=\"perm write\"><div class=\"small\">•</div><div class=\"big\">W</div></div></div>. You can hover your mouse over the circles (or tap on a touchscreen) to see the corresponding permission letters.</div></blockquote>"
        },
        {
          "kind": "text",
          "content": "A mutable reference is created with the `&mut` operator. The type of `num` is written as `&mut i32`. Compared to immutable references, you can see two important differences in the permissions:"
        },
        {
          "kind": "text",
          "content": "1. When `num` was an immutable reference, `v` still had the @Perm{read} permission. Now that `num` is a mutable reference, `v` has lost _all_ permissions while `num` is in use.\n2. When `num` was an immutable reference, the place `*num` only had the @Perm{read} permission. Now that `num` is a mutable reference, `*num` has also gained the @Perm{write} permission."
        },
        {
          "kind": "text",
          "content": "The first observation is what makes mutable references *safe*. Mutable references allow mutation but prevent aliasing. The borrowed place `v` becomes temporarily unusable, so effectively not an alias."
        },
        {
          "kind": "text",
          "content": "The second observation is what makes mutable references *useful*. `v[2]` can be mutated through `*num`. For example, `*num += 1` mutates `v[2]`. Note that `*num` has the @Perm{write} permission, but `num` does not. `num` refers to the mutable reference itself, e.g. `num` cannot be reassigned to a *different* mutable reference."
        },
        {
          "kind": "text",
          "content": "Mutable references can also be temporarily \"downgraded\" to read-only references. For example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut v: Vec<i32> = vec![1, 2, 3];\nlet num: &mut i32 = &mut v[2];`(focus,paths:*num)`\nlet num2: &i32 = &*num;`(focus,paths:*num)`\nprintln!(\"{} {}\", *num, *num2);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "> *Note:* when permission changes are not relevant to an example, we will hide them. You can view hidden steps by clicking \"»\", and you can view hidden permissions within a step by clicking \"● ● ●\"."
        },
        {
          "kind": "text",
          "content": "In this program, the borrow `&*num` removes the @Perm{write} permission from `*num` but _not_ the @Perm{read} permission, so `println!(..)` can read both `*num` and `*num2`."
        },
        {
          "kind": "text",
          "content": "### Permissions Are Returned At The End of a Reference's Lifetime"
        },
        {
          "kind": "text",
          "content": "We said above that a reference changes permissions while it is \"in use\". The phrase \"in use\" is describing a reference's **lifetime**, or the range of code spanning from its birth (where the reference is created) to its death (the last time(s) the reference is used)."
        },
        {
          "kind": "text",
          "content": "For example, in this program, the lifetime of `y` starts with `let y = &x`, and ends with `let z = *y`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut x = 1;\nlet y = &x;`(focus,paths:x)`\nlet z = *y;`(focus,paths:x)`\nx += z;\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The @Perm{write} permission on `x` is returned to `x` after the lifetime of `y` has ended, like we have seen before."
        },
        {
          "kind": "text",
          "content": "In the previous examples, a lifetime has been a contiguous region of code. However, once we introduce control flow, this is not necessarily the case. For example, here is a function that capitalizes the first character in a vector of ASCII characters:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "fn ascii_capitalize(v: &mut Vec<char>) {\n    let c = &v[0];`(focus,paths:*v)`\n    if c.is_ascii_lowercase() {\n        let up = c.to_ascii_uppercase();`(focus,paths:*v)`\n        v[0] = up;\n    } else {`(focus,paths:*v)`\n        println!(\"Already capitalized: {:?}\", v);\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "The variable `c` has a different lifetime in each branch of the if-statement. In the then-block, `c` is used in the expression `c.to_ascii_uppercase()`. Therefore `*v` does not regain the @Perm{write} permission until after that line."
        },
        {
          "kind": "text",
          "content": "However, in the else-block, `c` is not used. `*v` immediately regains the @Perm{write} permission on entry to the else-block."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "2e273ac2-6f06-4c19-a831-1d44eed89323",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the permissions in the following program:\n\n```aquascope,permissions,stepper\n#fn main() {\nlet mut s = String::from(\"Hello\");\nlet t = &mut s;\n/* here */\nt.push_str(\" world\");\nprintln!(\"{}\", s);\n#}\n```\n\nAt the point marked `/* here */`, what are the permissions on the path `s`? Select each permission below, or select \"no permissions\" \nif the path has no permissions.\n",
                  "distractors": [
                    "R",
                    "W",
                    "O"
                  ],
                  "answerIndex": 3
                },
                "answer": {
                  "answer": [
                    "No permissions"
                  ]
                },
                "context": "The mutable borrow `t = &mut s` removes all permissions on `s` while `t` is live.\n"
              },
              {
                "id": "b431f43e-9a6f-4715-ae88-8896fca6ff3b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the permissions in the following program:\n\n```aquascope,permissions,stepper,boundaries\nfn get_first(v: &Vec<String>) -> &String {\n    &v[0]\n}\n\nfn main() {\n    let mut strs = vec![\n        String::from(\"A\"), String::from(\"B\")\n    ];\n    let first = get_first(&strs);\n    if first.len() > 0 {\n        strs.push(String::from(\"C\"));\n    }\n}\n```\n\nWhich of the following best explains why `strs` loses and regains write permissions?\n",
                  "distractors": [
                    "`strs` is not writable while the immutable reference `&strs` passed to `get_first` is live",
                    "`strs` does not need write permissions until the `strs.push(..)` operation, so it only regains write permissions at that statement",
                    "Because `first` refers to `strs`, then `strs` can only be mutated within a nested scope like the if-statement"
                  ]
                },
                "answer": {
                  "answer": "`get_first` returns an immutable reference to data within `strs`, so `strs` is not writable while `first` is live"
                },
                "context": "When `get_first` is called, Rust recognizes that the returned string `first` could point to data within `strs`, so `strs` loses \nwrite permissions. Once the `first` variable is no longer used (after the if-condition), then `strs` regains write permissions.\n"
              },
              {
                "id": "652e596c-7cc9-42e6-a7f8-701879cd9a2b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider this unsafe program:\n```aquascope,interpreter,shouldFail\n#fn main() {\nlet v1 = vec![1, 2, 3];\nlet mut v2 = v1;\nv2.push(4);\nprintln!(\"{}\", v1[0]);`[]`    \n#}\n```\n\nWhich of the following best describes the point at which undefined behavior occurs in this program?\n",
                  "distractors": [
                    "`v2` owns the vector data on the heap, while `v1` does not",
                    "`v1` has been moved into `v2` on line 2",
                    "`v1` has its pointer invalidated by the `push` on line 3"
                  ]
                },
                "answer": {
                  "answer": "`v1[0]` reads `v1`, which points to deallocated memory"
                },
                "context": "The undefined behavior arises because `v1` is read after being freed. Note that the other three options are correct statements\nabout the program, but they do not explain why the undefined behavior actually occurs. For example, if the `println` were deleted,\nthen the other three options are still true, but the program no longer has undefined behavior.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Data Must Outlive All Of Its References"
        },
        {
          "kind": "text",
          "content": "As a part of the *Pointer Safety Principle*, the borrow checker enforces that **data must outlive any references to it.** Rust enforces this property in two ways. The first way deals with references that are created and dropped within the scope of a single function. For example, say we tried to drop a string while holding a reference to it:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet s = String::from(\"Hello world\");\nlet s_ref = &s;`(focus,rxpaths:s$)`\ndrop(s);`{}`\nprintln!(\"{}\", s_ref);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "To catch these kinds of errors, Rust uses the permissions we've already discussed. The borrow `&s` removes the @Perm{own} permission from `s`. However, `drop` expects the @Perm{own} permission, leading to a permission mismatch."
        },
        {
          "kind": "text",
          "content": "The key idea is that in this example, Rust knows how long `s_ref` lives. But Rust needs a different enforcement mechanism when it doesn't know how long a reference lives. Specifically, when references are either input to a function, or output from a function. For example, here is a safe function that returns a reference to the first element in a vector:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "showFlows"
            ],
            "code": "fn first(strings: &Vec<String>) -> &String {\n    let s_ref = &strings[0];\n    s_ref`{}`\n}"
          }
        },
        {
          "kind": "text",
          "content": "This snippet introduces a new kind of permission, the flow permission @Perm{flow}. The @Perm{flow} permission is expected whenever an expression uses an input reference (like `&strings[0]`), or returns an output reference (like `return s_ref`)."
        },
        {
          "kind": "text",
          "content": "Unlike the @Perm{read}@Perm{write}@Perm{own} permissions, @Perm{flow} does not change throughout the body of a function. A reference has the @Perm{flow} permission if it's allowed to be used (that is, to *flow*) in a particular expression. For example, let's say we change `first` to a new function `first_or` that includes a `default` parameter:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "showFlows",
              "shouldFail"
            ],
            "code": "fn first_or<'a, 'b, 'c>(strings: &'a Vec<String>, default: &'b String) -> &'c String {\n    if strings.len() > 0 {\n        &strings[0]`{}`\n    } else {\n        default`{}`\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "This function no longer compiles, because the expressions `&strings[0]` and `default` lack the necessary @Perm{flow} permission to be returned. But why? Rust gives the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0106]: missing lifetime specifier\n --> test.rs:1:57\n  |\n1 | fn first_or(strings: &Vec<String>, default: &String) -> &String {\n  |                      ------------           -------     ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `strings` or `default`"
          }
        },
        {
          "kind": "text",
          "content": "The message \"missing lifetime specifier\" is a bit mysterious, but the help message provides some useful context. If Rust *just* looks at the function signature, it doesn't know whether the output `&String` is a reference to either `strings` or `default`. To understand why that matters, let's say we used `first_or` like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn main() {\n    let strings = vec![];\n    let default = String::from(\"default\");\n    let s = first_or(&strings, &default);\n    drop(default);\n    println!(\"{}\", s);\n}"
          }
        },
        {
          "kind": "text",
          "content": "This program is unsafe if `first_or` allows `default` to *flow* into the return value. Like the previous example, `drop` could invalidate `s`. Rust would only allow this program to compile if it was *certain* that `default` cannot flow into the return value."
        },
        {
          "kind": "text",
          "content": "To specify whether `default` can be returned, Rust provides a mechanism called *lifetime parameters*. We will explain that feature later in Chapter 10.3, [\"Validating References with Lifetimes\"](ch10-03-lifetime-syntax.html). For now, it's enough to know that: (1) input/output references are treated differently than references within a function body, and (2) Rust uses a different mechanism, the @Perm{flow} permission, to check the safety of those references."
        },
        {
          "kind": "text",
          "content": "To see the @Perm{flow} permission in another context, say you tried to return a reference to a variable on the stack like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "showFlows",
              "shouldFail"
            ],
            "code": "fn return_a_string() -> &String {\n    let s = String::from(\"Hello world\");\n    let s_ref = &s;\n    s_ref`{}`\n}"
          }
        },
        {
          "kind": "text",
          "content": "This program is unsafe because the reference `&s` will be invalidated when `return_a_string` returns. And Rust will reject this program with a similar `missing lifetime specifier` error. Now you can understand that error means that `s_ref` is missing the appropriate flow permissions."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5080616f-6f4c-43f7-aa3a-8b23f2798937",
                "type": "Tracing",
                "prompt": {
                  "program": "fn incr(n: &mut i32) {\n  *n += 1;\n}\n\nfn main() {\n  let mut n = 1;\n  incr(&n);\n  println!(\"{n}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 7
                },
                "context": "Although `n` is marked as `mut`, the reference to `n` must also be marked as `mut`. \nSo a valid version of this program would say `incr(&mut n)`.\n"
              },
              {
                "id": "e9846c5d-1254-4420-9986-dae4af86b9af",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let mut s = String::from(\"hello\");\n  let s2 = &s;\n  let s3 = &mut s;\n  s3.push_str(\" world\");\n  println!(\"{s2}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 6
                },
                "context": "It is illegal to use a mutable reference to a value (`s3`) while an immutable reference \nis live (`s2`).\n"
              },
              {
                "id": "80f6bcd6-b74a-4da3-a014-d423c82ce405",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider this Rust function that pushes a number onto the end of a vector, and then removes and returns the number from the front of the vector:\n\n```\nfn give_and_take(v: &Vec<i32>, n: i32) -> i32 {\n    v.push(n);\n    v.remove(0)\n}\n```\n\nNormally, if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0596]: cannot borrow `*v` as mutable, as it is behind a `&` reference\n --> test.rs:2:5\n  |\n1 | fn give_and_take(v: &Vec<i32>, n: i32) -> i32 {\n  |                     --------- help: consider changing this to be a mutable reference: `&mut Vec<i32>`\n2 |     v.push(n);\n  |     ^^^^^^^^^ `v` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n```\n\nAssume that the compiler did NOT reject this function. Select each (if any) of the following programs that could\npossibly cause undefined behavior if executed. If none of these programs could cause undefined behavior, \nthen check \"None of these programs\" .\n",
                  "distractors": [
                    "```\nlet v = vec![1, 2, 3];\nlet v2 = &v;\ngive_and_take(&v, 4);\nprintln!(\"{}\", v2[0]);\n```\n",
                    "```\nlet v = vec![1, 2, 3];\nlet n = &v[0];\nlet k = give_and_take(&v, 4);\nprintln!(\"{}\", k);\n```\n",
                    "None of these programs"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet v = vec![1, 2, 3];\nlet n = &v[0];\ngive_and_take(&v, 4);\nprintln!(\"{}\", n);\n```\n"
                  ]
                },
                "context": "As we saw earlier in the section, `v.push(n)` can cause `v` to reallocate its internal contents, invalidating any references to the elements of `v` on the heap.\nTherefore calling `give_and_take(&v, 4)` will cause previously-created element references to point to invalid memory. The two programs that bind `let n = &v[0]`\nbefore `give_and_take` are candidates for undefined behavior. `let v2 = &v` is not a candidate because a reference to the container `v` is not actually invalidated \nby mutating `v`.\n\nThe program that does `println!(\"{}\", n)` will cause undefined behavior by reading the invalid memory. The program that does `println!(\"{}\", k)` will not cause undefined\nbehavior, because it does not use the invalidated reference.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Summary"
        },
        {
          "kind": "text",
          "content": "References provide the ability to read and write data without consuming ownership of it. References are created with borrows (`&` and `&mut`) and used with dereferences (`*`), often implicitly."
        },
        {
          "kind": "text",
          "content": "However, references can be easily misused. Rust's borrow checker enforces a system of permissions that ensures references are used safely:"
        },
        {
          "kind": "text",
          "content": "- All variables can read, own, and (optionally) write their data.\n- Creating a reference will transfer permissions from the borrowed place to the reference.\n- Permissions are returned once the reference's lifetime has ended.\n- Data must outlive all references that point to it."
        },
        {
          "kind": "text",
          "content": "In this section, it probably feels like we've described more of what Rust _cannot_ do than what Rust _can_ do. That is intentional! One of Rust's core features is allowing you to use pointers without garbage collection, while also avoiding undefined behavior. Understanding these safety rules now will help you avoid frustration with the compiler later."
        },
        {
          "kind": "text",
          "content": "[`String::push_str`]: https://doc.rust-lang.org/std/string/struct.String.html#method.push_str\n[`Vec`]: https://doc.rust-lang.org/std/vec/struct.Vec.html\n[`Vec::push`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.push"
        }
      ]
    },
    {
      "title": "Fixing Ownership Errors",
      "file": "ch04-03-fixing-ownership-errors.md",
      "elements": [
        {
          "kind": "text",
          "content": "Learning how to fix an ownership error is a core Rust skill. When the borrow checker rejects your code, how should you respond? In this section, we will discuss several case studies of common ownership errors. Each case study will present a function rejected by the compiler. Then we will explain why Rust rejects the function, and show several ways to fix it."
        },
        {
          "kind": "text",
          "content": "A common theme will be understanding whether a function is *actually* safe or unsafe. Rust will always reject an unsafe program[^safe-subset]. But sometimes, Rust will also reject a safe program. These case studies will show how to respond to errors in both situations."
        },
        {
          "kind": "text",
          "content": "<!-- The last two sections have shown how a Rust program can be **unsafe** if it triggers undefined behavior. The ownership guarantee is that Rust will reject all unsafe programs. However, Rust will also reject *some* safe programs. Fixing an ownership error will depend on whether your program is *actually* safe or unsafe. -->"
        },
        {
          "kind": "text",
          "content": "### Fixing an Unsafe Program: Returning a Reference to the Stack"
        },
        {
          "kind": "text",
          "content": "Our first case study is about returning a reference to the stack, just like we discussed last section in [\"Data Must Outlive All Of Its References\"](ch04-02-references-and-borrowing.html#data-must-outlive-all-of-its-references). Here's the function we looked at:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "fn return_a_string() -> &String {\n    let s = String::from(\"Hello world\");\n    &s\n}"
          }
        },
        {
          "kind": "text",
          "content": "When thinking about how to fix this function, we need to ask: **why is this program unsafe?** Here, the issue is with the lifetime of the referred data. If you want to pass around a reference to a string, you have to make sure that the underlying string lives long enough."
        },
        {
          "kind": "text",
          "content": "Depending on the situation, here are four ways you can extend the lifetime of the string. One is to move ownership of the string out of the function, changing `&String` to `String`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn return_a_string() -> String {\n    let s = String::from(\"Hello world\");\n    s\n}"
          }
        },
        {
          "kind": "text",
          "content": "Another possibility is to return a string literal, which lives forever (indicated by `'static`). This solution applies if we never intend to change the string, and then a heap allocation is unnecessary:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn return_a_string() -> &'static str {\n    \"Hello world\"    \n}"
          }
        },
        {
          "kind": "text",
          "content": "Another possibility is to defer borrow-checking to runtime by using garbage collection. For example, you can use a [reference-counted pointer][rc]:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "use std::rc::Rc;\nfn return_a_string() -> Rc<String> {\n    let s = Rc::new(String::from(\"Hello world\"));\n    Rc::clone(&s)\n}"
          }
        },
        {
          "kind": "text",
          "content": "We will discuss reference-counting more in Chapter 15.4 [\"`Rc<T>`, the Reference Counted Smart Pointer\"](ch15-04-rc.html). In short, `Rc::clone` only clones a pointer to `s` and not the data itself. At runtime, the `Rc` checks when the last `Rc` pointing to data has been dropped, and then deallocates the data."
        },
        {
          "kind": "text",
          "content": "Yet another possibility is to have the caller provide a \"slot\" to put the string using a mutable reference:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn return_a_string(output: &mut String) {\n    output.replace_range(.., \"Hello world\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "With this strategy, the caller is responsible for creating space for the string. This style can be verbose, but it can also be more memory-efficient if the caller needs to carefully control when allocations occur."
        },
        {
          "kind": "text",
          "content": "Which strategy is most appropriate will depend on your application. But the key idea is to recognize the root issue underlying the surface-level ownership error. How long should my string live? Who should be in charge of deallocating it? Once you have a clear answer to those questions, then it's a matter of changing your API to match."
        },
        {
          "kind": "text",
          "content": "### Fixing an Unsafe Program: Not Enough Permissions"
        },
        {
          "kind": "text",
          "content": "Another common issue is trying to mutate read-only data, or trying to drop data behind a reference. For example, let's say we tried to write a function `stringify_name_with_title`. This function is supposed to create a person's full name from a vector of name parts, including an extra title."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "fn stringify_name_with_title(name: &Vec<String>) -> String {\n    name.push(String::from(\"Esq.\"));`{}`\n    let full = name.join(\" \");\n    full\n}\n\n// ideally: [\"Ferris\", \"Jr.\"] => \"Ferris Jr. Esq.\""
          }
        },
        {
          "kind": "text",
          "content": "This program is rejected by the borrow checker because `name` is an immutable reference, but `name.push(..)` requires the @Perm{write} permission. This program is unsafe because `push` could invalidate other references to `name` outside of `stringify_name_with_title`, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "#fn stringify_name_with_title(name: &Vec<String>) -> String {\n#    name.push(String::from(\"Esq.\"));\n#    let full = name.join(\" \");\n#    full\n#}\nfn main() {\n    let name = vec![String::from(\"Ferris\")];\n    let first = &name[0];`[]`\n    stringify_name_with_title(&name);`[]`\n    println!(\"{}\", first);`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "In this example, a reference `first` to `name[0]` is created before calling `stringify_name_with_title`. The function `name.push(..)` reallocates the contents of `name`, which invalidates `first`, causing the `println` to read deallocated memory."
        },
        {
          "kind": "text",
          "content": "So how do we fix this API? One straightforward solution is to change the type of name from `&Vec<String>` to `&mut Vec<String>`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn stringify_name_with_title(name: &mut Vec<String>) -> String {\n    name.push(String::from(\"Esq.\"));\n    let full = name.join(\" \");\n    full\n}"
          }
        },
        {
          "kind": "text",
          "content": "But this is not a good solution! **Functions should not mutate their inputs if the caller would not expect it.** A person calling `stringify_name_with_title` probably does not expect their vector to be modified by this function. Another function like `add_title_to_name` might be expected to mutate its input, but not our function."
        },
        {
          "kind": "text",
          "content": "Another option is to take ownership of the name, by changing `&Vec<String>` to `Vec<String>`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn stringify_name_with_title(mut name: Vec<String>) -> String {\n    name.push(String::from(\"Esq.\"));\n    let full = name.join(\" \");\n    full\n}"
          }
        },
        {
          "kind": "text",
          "content": "But this is also not a good solution! **It is very rare for Rust functions to take ownership of heap-owning data structures like `Vec` and `String`.**  This version of `stringify_name_with_title` would make the input `name` unusable, which is very annoying to a caller as we discussed at the beginning of [\"References and Borrowing\"](ch04-02-references-and-borrowing.html)."
        },
        {
          "kind": "text",
          "content": "So the choice of `&Vec` is actually a good one, which we do *not* want to change. Instead, we can change the body of the function. There are many possible fixes which vary in how much memory they use. One possibility is to clone the input `name`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn stringify_name_with_title(name: &Vec<String>) -> String {\n    let mut name_clone = name.clone();\n    name_clone.push(String::from(\"Esq.\"));\n    let full = name_clone.join(\" \");\n    full\n}"
          }
        },
        {
          "kind": "text",
          "content": "By cloning `name`, we are allowed to mutate the local copy of the vector. However, the clone copies every string in the input. We can avoid unnecessary copies by adding the suffix later:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn stringify_name_with_title(name: &Vec<String>) -> String {\n    let mut full = name.join(\" \");\n    full.push_str(\" Esq.\");\n    full\n}"
          }
        },
        {
          "kind": "text",
          "content": "This solution works because [`slice::join`] already copies the data in `name` into the string `full`."
        },
        {
          "kind": "text",
          "content": "In general, writing Rust functions is a careful balance of asking for the *right* level of permissions. For this example, it's most idiomatic to only expect the read permission on `name`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8c9f9173-c5ba-4914-9cfa-e3432f8414e1",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following is NOT a valid kind of fix to the issue of returning a stack reference from a function?\n",
                  "distractors": [
                    "Use a reference-counted pointer",
                    "Take ownership of the returned value",
                    "Expect a mutable slot from the caller"
                  ]
                },
                "answer": {
                  "answer": "Extend the lifetime of the stack frame"
                },
                "context": "A stack frame cannot have its lifetime extended, so that is not a valid solution.\n"
              },
              {
                "id": "e6bc84ef-069c-4d1d-99ec-69b13492569c",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Let's say a programmer tried writing the following function:\n\n```\n/// Returns a person's name with \"Ph.D.\" added as a title\nfn award_phd(name: &String) -> String {\n    let mut name = *name;\n    name.push_str(\", Ph.D.\");\n    name\n}\n```\n\nThe Rust compiler rejects their code with the following error:\n\n```text\nerror[E0507]: cannot move out of `*name` which is behind a shared reference\n --> test.rs:3:20\n  |\n3 |     let mut name = *name;\n  |                    ^^^^^\n  |                    |\n  |                    move occurs because `*name` has type `String`, which does not implement the `Copy` trait\n  |                    help: consider borrowing here: `&*name`\n```\n\nGiven the stated purpose of the function, which of the following would be the most idiomatic fix to the program? \nThe differences from the function above are highlighted.\n",
                  "distractors": [
                    "```\nfn award_phd(name: &String) -> String {\n    let mut name = `[&*name]`;\n    name.push_str(\", Ph.D.\");\n    name\n}\n```\n",
                    "```\nfn award_phd(`[mut name: String]`) -> String {\n    name.push_str(\", Ph.D.\");\n    name\n}\n```\n",
                    "```\nfn award_phd(`[name: &mut String]`) {\n    name.push_str(\", Ph.D.\");\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```\nfn award_phd(name: &String) -> String {\n    let mut name = `[name.clone()]`;\n    name.push_str(\", Ph.D.\");\n    name\n}\n```\n"
                },
                "context": "The function is not intended to change someone's original name, so changing the type of `name` to either `&mut String` or `String` \nwould be inappropriate. The solution proposed by the compiler of `&*name` is not sufficient --- an acceptable solution is to \nclone the data with `name.clone()` and mutate the local copy.\n"
              },
              {
                "id": "8020e4a2-f0b4-4eae-90ac-a87712d9d00b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Let's say a programmer tried writing the following function:\n\n```\n/// Rounds all the floats in a vector to the nearest integer, in-place\nfn round_in_place(v: &Vec<f32>) {\n    for n in v {\n        *n = n.round();\n    }\n}\n```\n\nThe Rust compiler rejects their code with the following error:\n\n```text\nerror[E0594]: cannot assign to `*n`, which is behind a `&` reference\n --> test.rs:4:9\n  |\n3 |     for n in v {\n  |              - this iterator yields `&` references\n4 |         *n = n.round();\n  |         ^^^^^^^^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n```\n\nGiven the stated purpose of the function, which of the following would be the most idiomatic fix to the program? \nThe differences from the function above are highlighted.\n",
                  "distractors": [
                    "```\nfn round_in_place(v: &Vec<f32>) `[-> Vec<f32>]` {\n    `[let mut v2 = Vec::new();]`\n    for n in v {\n        `[v2.push(n.round());]`\n    }\n    `[v2]`\n}\n```\n",
                    "```\nfn round_in_place(`[mut v: Vec<f32>]`) {\n    for n in v {\n        *n = n.round();\n    }    \n}\n```\n",
                    "```\nfn round_in_place(v: &Vec<f32>) {\n    for `[mut n]` in `[&mut v.clone()]` {\n        n = n.round();\n    }    \n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```\nfn round_in_place(v: `[&mut Vec<f32>]`) {\n    for n in v {\n        *n = n.round();\n    }\n}\n```\n"
                },
                "context": "Because this function is supposed to round a vector in-place, it would not be\nidiomatic to return a new copy of the same vector (`-> Vec<f32>`) or to consume\nownership of the vector (`mut v: Vec<f32>`). The best solution is to change \nthe type signature from `&Vec<f32>` to `&mut Vec<f32>`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Fixing an Unsafe Program: Aliasing and Mutating a Data Structure"
        },
        {
          "kind": "text",
          "content": "Another unsafe operation is using a reference to heap data that gets deallocated by another alias. For example, here's a function that gets a reference to the largest string in a vector, and then uses it while mutating the vector:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "fn add_big_strings(dst: &mut Vec<String>, src: &[String]) {`(focus,paths:*dst)`\n    let largest: &String = \n      dst.iter().max_by_key(|s| s.len()).unwrap();`(focus,paths:*dst)`\n    for s in src {\n        if s.len() > largest.len() {\n            dst.push(s.clone());`{}`\n        }\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "> *Note:* this example uses [iterators] and [closures] to succinctly find a reference to the largest string. We will discuss those features in later chapters, and for now we will provide an intuitive sense of how the features work here."
        },
        {
          "kind": "text",
          "content": "This program is rejected by the borrow checker because `let largest = ..` removes the @Perm{write} permissions on `dst`. However, `dst.push(..)` requires the @Perm{write} permission. Again, we should ask: **why is this program unsafe?** Because `dst.push(..)` could deallocate the contents of `dst`, invalidating the reference `largest`."
        },
        {
          "kind": "text",
          "content": "To fix the program, the key insight is that we need to shorten the lifetime of `largest` to not overlap with `dst.push(..)`. One possibility is to clone `largest`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn add_big_strings(dst: &mut Vec<String>, src: &[String]) {\n    let largest: String = dst.iter().max_by_key(|s| s.len()).unwrap().clone();\n    for s in src {\n        if s.len() > largest.len() {\n            dst.push(s.clone());\n        }\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "However, this may cause a performance hit for allocating and copying the string data."
        },
        {
          "kind": "text",
          "content": "Another possibility is to perform all the length comparisons first, and then mutate `dst` afterwards:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn add_big_strings(dst: &mut Vec<String>, src: &[String]) {\n    let largest: &String = dst.iter().max_by_key(|s| s.len()).unwrap();\n    let to_add: Vec<String> = \n        src.iter().filter(|s| s.len() > largest.len()).cloned().collect();\n    dst.extend(to_add);\n}"
          }
        },
        {
          "kind": "text",
          "content": "However, this also causes a performance hit for allocating the vector `to_add`."
        },
        {
          "kind": "text",
          "content": "A final possibility is to copy out the length of `largest`, since we don't actually need the contents of `largest`, just its length.\nThis solution is arguably the most idiomatic and the most performant:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn add_big_strings(dst: &mut Vec<String>, src: &[String]) {\n    let largest_len: usize = dst.iter().max_by_key(|s| s.len()).unwrap().len();\n    for s in src {\n        if s.len() > largest_len {\n            dst.push(s.clone());\n        }\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "These solutions all share in common the key idea: shortening the lifetime of borrows on `dst` to not overlap with a mutation to `dst`."
        },
        {
          "kind": "text",
          "content": "### Fixing an Unsafe Program: Copying vs. Moving Out of a Collection"
        },
        {
          "kind": "text",
          "content": "A common confusion for Rust learners happens when copying data out of a collection, like a vector. For example, here's a safe program that copies a number out of a vector:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet v: Vec<i32> = vec![0, 1, 2];\nlet n_ref: &i32 = &v[0];`(focus,paths:*n_ref)`\nlet n: i32 = *n_ref;`{}`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The dereference operation `*n_ref` expects just the @Perm{read} permission, which the path `*n_ref` has. But what happens if we change the type of elements in the vector from `i32` to `String`? Then it turns out we no longer have the necessary permissions:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet v: Vec<String> = \n  vec![String::from(\"Hello world\")];\nlet s_ref: &String = &v[0];`(focus,paths:*s_ref)`\nlet s: String = *s_ref;`[]``{}`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The first program will compile, but the second program will not compile. Rust gives the following error message:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0507]: cannot move out of `*s_ref` which is behind a shared reference\n --> test.rs:4:9\n  |\n4 | let s = *s_ref;\n  |         ^^^^^^\n  |         |\n  |         move occurs because `*s_ref` has type `String`, which does not implement the `Copy` trait"
          }
        },
        {
          "kind": "text",
          "content": "The issue is that the vector `v` owns the string \"Hello world\". When we dereference `s_ref`, that tries to take ownership of the string from the vector. But references are non-owning pointers &mdash; we can't take ownership *through* a reference. Therefore Rust complains that we \"cannot move out of \\[...\\] a shared reference\"."
        },
        {
          "kind": "text",
          "content": "But why is this unsafe? We can illustrate the problem by simulating the rejected program:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "#fn main() {\nlet v: Vec<String> = \n  vec![String::from(\"Hello world\")];\nlet s_ref: &String = &v[0];`(focus,paths:*s_ref)`\nlet s: String = *s_ref;`[]``{}`\n\n// These drops are normally implicit, but we've added them for clarity.\ndrop(s);`[]`\ndrop(v);`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "What happens here is a **double-free.** After executing `let s = *s_ref`, both `v` and `s` think they own \"Hello world\". After `s` is dropped, \"Hello world\" is deallocated. Then `v` is dropped, and undefined behavior happens when the string is freed a second time."
        },
        {
          "kind": "text",
          "content": "> *Note:* after executing `s = *s_ref`, we don't even have to use `v` or `s` to cause undefined behavior through the double-free. As soon as we move the string out from `s_ref`, undefined behavior will happen once the elements are dropped."
        },
        {
          "kind": "text",
          "content": "However, this undefined behavior does not happen when the vector contains `i32` elements. The difference is that copying a `String` copies a pointer to heap data. Copying an `i32` does not.\nIn technical terms, Rust says that the type `i32` implements the `Copy` trait, while `String` does not implement `Copy` (we will discuss traits in a later chapter)."
        },
        {
          "kind": "text",
          "content": "In sum, **if a value does not own heap data, then it can be copied without a move.** For example:"
        },
        {
          "kind": "text",
          "content": "* An `i32` **does not** own heap data, so it **can** be copied without a move.\n* A `String` **does** own heap data, so it **can not** be copied without a move.\n* An `&String` **does not** own heap data, so it **can** be copied without a move."
        },
        {
          "kind": "text",
          "content": "> *Note:* One exception to this rule is mutable references. For example, `&mut i32` is not a copyable type. So if you do something like:\n> ```rust,ignore\n> let mut n = 0;\n> let a = &mut n;\n> let b = a;\n> ```\n> Then `a` cannot be used after being assigned to `b`. That prevents two mutable references to the same data from being used at the same time."
        },
        {
          "kind": "text",
          "content": "So if we have a vector of non-`Copy` types like `String`, then how do we safely get access to an element of the vector? Here's a few different ways to safely do so. First, you can avoid taking ownership of the string and just use an immutable reference:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet v: Vec<String> = vec![String::from(\"Hello world\")];\nlet s_ref: &String = &v[0];\nprintln!(\"{s_ref}!\");\n# }"
          }
        },
        {
          "kind": "text",
          "content": "Second, you can clone the data if you want to get ownership of the string while leaving the vector alone:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet v: Vec<String> = vec![String::from(\"Hello world\")];\nlet mut s: String = v[0].clone();\ns.push('!');\nprintln!(\"{s}\");\n# }"
          }
        },
        {
          "kind": "text",
          "content": "Finally, you can use a method like [`Vec::remove`] to move the string out of the vector:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet mut v: Vec<String> = vec![String::from(\"Hello world\")];\nlet mut s: String = v.remove(0);\ns.push('!');\nprintln!(\"{s}\");\nassert!(v.len() == 0);\n# }"
          }
        },
        {
          "kind": "text",
          "content": "### Fixing a Safe Program: Mutating Different Tuple Fields"
        },
        {
          "kind": "text",
          "content": "The above examples are cases where a program is unsafe. Rust may also reject safe programs. One common issue is that Rust tries to track permissions at a fine-grained level. However, Rust may conflate two different places as the same place."
        },
        {
          "kind": "text",
          "content": "Let's first look at an example of fine-grained permission tracking that passes the borrow checker. This program shows how you can borrow one field of a tuple, and write to a different field of the same tuple:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut name = (\n    String::from(\"Ferris\"), \n    String::from(\"Rustacean\")\n);`(focus,paths:name)`\nlet first = &name.0;`(focus,paths:name)`\nname.1.push_str(\", Esq.\");`{}`\nprintln!(\"{first} {}\", name.1);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The statement `let first = &name.0` borrows `name.0`. This borrow removes @Perm{write}@Perm{own} permissions from `name.0`. It also removes @Perm{write}@Perm{own} permissions from `name`. (For example, one could not pass `name` to a function that takes as input a value of type `(String, String)`.) But `name.1` still retains the @Perm{write} permission, so doing `name.1.push_str(...)` is a valid operation."
        },
        {
          "kind": "text",
          "content": "However, Rust can lose track of exactly which places are borrowed. For example, let's say we refactor the expression `&name.0` into a function `get_first`. Notice how after calling `get_first(&name)`, Rust now removes the @Perm{write} permission on `name.1`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "fn get_first(name: &(String, String)) -> &String {\n    &name.0\n}\n\nfn main() {\n    let mut name = (\n        String::from(\"Ferris\"), \n        String::from(\"Rustacean\")\n    );\n    let first = get_first(&name);`(focus,paths:name)`\n    name.1.push_str(\", Esq.\");`{}`\n    println!(\"{first} {}\", name.1);\n}"
          }
        },
        {
          "kind": "text",
          "content": "Now we can't do `name.1.push_str(..)`! Rust will return this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0502]: cannot borrow `name.1` as mutable because it is also borrowed as immutable\n  --> test.rs:11:5\n   |\n10 |     let first = get_first(&name);\n   |                           ----- immutable borrow occurs here\n11 |     name.1.push_str(\", Esq.\");\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n12 |     println!(\"{first} {}\", name.1);\n   |                ----- immutable borrow later used here"
          }
        },
        {
          "kind": "text",
          "content": "That's strange, since the program was safe before we edited it. The edit we made doesn't meaningfully change the runtime behavior. So why does it matter that we put `&name.0` into a function?"
        },
        {
          "kind": "text",
          "content": "The problem is that Rust doesn't look at the implementation of `get_first` when deciding what `get_first(&name)` should borrow. Rust only looks at the type signature, which just says \"some `String` in the input gets borrowed\". Rust conservatively decides then that both `name.0` and `name.1` get borrowed, and eliminates write and own permissions on both."
        },
        {
          "kind": "text",
          "content": "Remember, the key idea is that **the program above is safe.** It has no undefined behavior! A future version of Rust may be smart enough to let it compile, but for today, it gets rejected. So how should we work around the borrow checker today? One possibility is to inline the expression `&name.0`, like in the original program. Another possibility is to defer borrow checking to runtime with [cells], which we will discuss in future chapters."
        },
        {
          "kind": "text",
          "content": "### Fixing a Safe Program: Mutating Different Array Elements"
        },
        {
          "kind": "text",
          "content": "A similar kind of problem arises when we borrow elements of an array. For example, observe what places are borrowed when we take a mutable reference to an array:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut a = [0, 1, 2, 3];\nlet x = &mut a[1];`(focus,paths:a[_])`\n*x += 1;`(focus,paths:a[_])`\nprintln!(\"{a:?}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Rust's borrow checker does not contain different places for `a[0]`, `a[1]`, and so on. It uses a single place `a[_]` that represents *all* indexes of `a`. Rust does this because it cannot always determine the value of an index. For example, imagine a more complex scenario like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let idx = a_complex_function();\nlet x = &mut a[idx];"
          }
        },
        {
          "kind": "text",
          "content": "What is the value of `idx`? Rust isn't going to guess, so it assumes `idx` could be anything. For example, let's say we try to read from one array index while writing to a different one:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet mut a = [0, 1, 2, 3];\nlet x = &mut a[1];`(focus,paths:a[_])`\nlet y = &a[2];`{}`\n*x += *y;\n#}"
          }
        },
        {
          "kind": "text",
          "content": "However, Rust will reject this program because `a` gave its read permission to `x`. The compiler's error message says the same thing:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0502]: cannot borrow `a[_]` as immutable because it is also borrowed as mutable\n --> test.rs:4:9\n  |\n3 | let x = &mut a[1];\n  |         --------- mutable borrow occurs here\n4 | let y = &a[2];\n  |         ^^^^^ immutable borrow occurs here\n5 | *x += *y;\n  | -------- mutable borrow later used here"
          }
        },
        {
          "kind": "text",
          "content": "<!-- However, Rust will reject this program because `a` gave its read permission to `x`. -->"
        },
        {
          "kind": "text",
          "content": "Again, **this program is safe.** For cases like these, Rust often provides a function in the standard library that can work around the borrow checker. For example, we could use [`slice::split_at_mut`][split_at_mut]:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet mut a = [0, 1, 2, 3];\nlet (a_l, a_r) = a.split_at_mut(2);\nlet x = &mut a_l[1];\nlet y = &a_r[0];\n*x += *y;\n# }"
          }
        },
        {
          "kind": "text",
          "content": "You might wonder, but how is `split_at_mut` implemented? In some Rust libraries, especially core types like `Vec` or `slice`, you will often find **`unsafe` blocks**. `unsafe` blocks allow the use of \"raw\" pointers, which are not checked for safety by the borrow checker. For example, we could use an unsafe block to accomplish our task:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet mut a = [0, 1, 2, 3];\nlet x = &mut a[1] as *mut i32;\nlet y = &a[2] as *const i32;\nunsafe { *x += *y; } // DO NOT DO THIS unless you know what you're doing!\n# }"
          }
        },
        {
          "kind": "text",
          "content": "Unsafe code is sometimes necessary to work around the limitations of the borrow checker. As a general strategy, let's say the borrow checker rejects a program you think is actually safe. Then you should look for standard library functions (like `split_at_mut`) that contain `unsafe` blocks which solve your problem. We will discuss unsafe code further in [Chapter 20][unsafe]. For now, just be aware that unsafe code is how Rust implements certain otherwise-impossible patterns."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "cbe8ef63-4f7e-45fd-b11f-e6eba40587b0",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following best explains why an `i32` can be copied without a move, but a `String` cannot?\n",
                  "distractors": [
                    "An `i32` is smaller in memory than a `String`",
                    "An `i32` is a primitive type in Rust, while a `String` is not",
                    "A `String` can be placed on the heap, while an `i32` can only be placed on the stack"
                  ]
                },
                "answer": {
                  "answer": "A `String` owns data on the heap, while an `i32` does not"
                },
                "context": "If a `String` could be copied without a move, then two variables could think they own\nthe same string, leading to a double-free.\n"
              },
              {
                "id": "512e1ec0-cd7b-4a90-949b-d7b08b4009a8",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The following code snippet does not compile:\n\n```rust\nlet s = String::from(\"Hello world\");\nlet s_ref = &s;\nlet s2 = *s_ref;\nprintln!(\"{s2}\");\n```\n\nWhich of the following best describes the undefined behavior that could occur if this program were allowed to execute?\n",
                  "distractors": [
                    "The read of `s2` in `println` is a use of freed memory",
                    "The dereference `*s_ref` is a use of freed memory",
                    "There is no undefined behavior in this program"
                  ]
                },
                "answer": {
                  "answer": "The string is freed twice at the end of the program"
                },
                "context": "The `println` is technically safe, since the string won't be deallocated until the end\nof the current scope. But then undefined behavior occurs, when the string is freed twice\non behalf of `s` and `s2`.\n"
              },
              {
                "id": "1e31e163-5bd4-4385-b222-33c19058bf6a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The following program does not compile:\n\n```rust\nfn copy_to_prev(v: &mut Vec<i32>, i: usize) {\n  let n = &mut v[i];\n  *n = v[i - 1];\n}\nfn main() {\n  let mut v = vec![1, 2, 3];\n  copy_to_prev(&mut v, 1);\n}\n```\n\nWhich of the following best describes the undefined behavior that could occur if this program were allowed to execute?\n",
                  "distractors": [
                    "The assignment `*n` is a use of freed memory",
                    "The borrow `&mut v[i]` creates a pointer to freed memory",
                    "The read of `v[i - 1]` is a use of freed memory"
                  ]
                },
                "answer": {
                  "answer": "There is no undefined behavior in this program"
                },
                "context": "This program is safe. No undefined behavior could occur if it were executed. (If `i` was outside\nthe bounds of `v`, then Rust will panic at runtime rather than cause undefined behavior.)\n\nThe issue is that Rust doesn't know for sure that `v[i]` and `v[i - 1]` are referring to different elements.\n"
              },
              {
                "id": "4df75888-2cd5-4259-8629-46a307429fd0",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider this function that is a simplified variant of the function from the previous quiz:\n\n```\n/// Adds \"Ph.D.\" to a person's name\nfn award_phd(name: &String) {\n    let mut name = *name;\n    name.push_str(\", Ph.D.\");\n}\n```\n\nThe Rust compiler rejects this function with the following error:\n\n```text\nerror[E0507]: cannot move out of `*name` which is behind a shared reference\n --> test.rs:3:20\n  |\n3 |     let mut name = *name;\n  |                    ^^^^^\n  |                    |\n  |                    move occurs because `*name` has type `String`, which does not implement the `Copy` trait\n  |                    help: consider borrowing here: `&*name`\n```\n\nAssume that the compiler did NOT reject this function. Select each (if any) of the following programs that could\npossibly cause undefined behavior if executed. If none of these programs could cause undefined behavior, \nthen check \"None of these programs\" .\n",
                  "distractors": [
                    "None of these programs"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet name = String::from(\"Ferris\");\naward_phd(&name);\n```\n",
                    "```\nlet name = String::from(\"Ferris\");\naward_phd(&name);\nprintln!(\"{}\", name);\n```\n",
                    "```\nlet name = String::from(\"Ferris\");\nlet name_ref = &name;\naward_phd(&name);\nprintln!(\"{}\", name_ref);\n```\n"
                  ]
                },
                "context": "The statement `let mut name = *name` makes `name` take ownership of the input string.\nHowever, the caller also still retains ownership of the string. Therefore after `award_phd`\nfinishes, the string is deallocated. Therefore every program above has undefined behavior, \nbecause `name` will eventually be deallocated a second time. It does not matter whether `name`\nor a reference to `name` is read after calling `award_phd`.\n"
              },
              {
                "id": "1f48fda5-afc6-440b-a9aa-53dc8d54efaa",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let mut point = [0, 1];\n    let mut x = point[0];\n    let y = &mut point[1];\n    x += 1;\n    *y += 1;\n    println!(\"{} {}\", point[0], point[1]);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "0 2"
                },
                "context": "This program does compile, as the binding of `x` copies `point[0]`, allowing `y` to mutably borrow `point[1]`.\nThe mutation `x += 1` does not affect `point`, while the mutation `*y += 1` does, so the final result is `0 2`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Summary"
        },
        {
          "kind": "text",
          "content": "When fixing an ownership error, you should ask yourself: is my program actually unsafe? If yes, then you need to understand the root cause of the unsafety. If no, then you need to understand the limitations of the borrow checker to work around them."
        },
        {
          "kind": "text",
          "content": "[rc]: https://doc.rust-lang.org/std/rc/index.html\n[cells]: https://doc.rust-lang.org/std/cell/index.html\n[split_at_mut]: https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\n[unsafe]: ch19-01-unsafe-rust.html\n[`Vec::remove`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.remove\n[`slice::join`]: https://doc.rust-lang.org/std/primitive.slice.html#method.join\n[iterators]: ch13-02-iterators.html\n[closures]: ch13-01-closures.html"
        },
        {
          "kind": "text",
          "content": "[^safe-subset]: This guarantee applies for programs written in the \"safe subset\" of Rust. If you use `unsafe` code or invoke unsafe components (like calling a C library), then you must take extra care to avoid undefined behavior."
        }
      ]
    },
    {
      "title": "The Slice Type",
      "file": "ch04-04-slices.md",
      "elements": [
        {
          "kind": "text",
          "content": "*Slices* let you reference a contiguous sequence of elements in a [collection](ch08-00-common-collections.md)\nrather than the whole collection. A slice is a kind of reference, so it is a non-owning pointer."
        },
        {
          "kind": "text",
          "content": "To motivate why slices are useful, let's work through a small programming problem:\nwrite a function that takes a string of\nwords separated by spaces and returns the first word it finds in that string.\nIf the function doesn’t find a space in the string, the whole string must be\none word, so the entire string should be returned. Without slices, we might\nwrite the signature of the function like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn first_word(s: &String) -> ?"
          }
        },
        {
          "kind": "text",
          "content": "The `first_word` function has a `&String` as a parameter. We don’t want\nownership of the string, so this is fine. But what should we return? We don’t really have a\nway to talk about *part* of a string. However, we could return the index of the\nend of the word, indicated by a space. Let’s try that, as shown in Listing 4-7."
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Listing 4-7: The `first_word` function that returns a\nbyte index value into the `String` parameter</span>"
        },
        {
          "kind": "text",
          "content": "Because we need to go through the `String` element by element and check whether\na value is a space, we’ll convert our `String` to an array of bytes using the\n`as_bytes` method:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:as_bytes}}"
          }
        },
        {
          "kind": "text",
          "content": "Next, we create an iterator over the array of bytes using the `iter` method:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:iter}}"
          }
        },
        {
          "kind": "text",
          "content": "We’ll discuss iterators in more detail in [Chapter 13][ch13]<!-- ignore -->.\nFor now, know that `iter` is a method that returns each element in a collection\nand that `enumerate` wraps the result of `iter` and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n`enumerate` is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves."
        },
        {
          "kind": "text",
          "content": "Because the `enumerate` method returns a tuple, we can use patterns to\ndestructure that tuple. We’ll be discussing patterns more in [Chapter\n6][ch6]<!-- ignore -->. In the `for` loop, we specify a pattern that has `i`\nfor the index in the tuple and `&item` for the single byte in the tuple.\nBecause we get a reference to the element from `.iter().enumerate()`, we use\n`&` in the pattern."
        },
        {
          "kind": "text",
          "content": "Inside the `for` loop, we search for the byte that represents the space by\nusing the byte literal syntax. If we find a space, we return the position.\nOtherwise, we return the length of the string by using `s.len()`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:inside_for}}"
          }
        },
        {
          "kind": "text",
          "content": "We now have a way to find out the index of the end of the first word in the\nstring, but there’s a problem. We’re returning a `usize` on its own, but it’s\nonly a meaningful number in the context of the `&String`. In other words,\nbecause it’s a separate value from the `String`, there’s no guarantee that it\nwill still be valid in the future. Consider the program in Listing 4-8 that\nuses the `first_word` function from Listing 4-7."
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter+permissions",
              "boundaries",
              "stepper",
              "horizontal"
            ],
            "code": "fn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {\n    let mut s = String::from(\"hello world\");`(focus)`\n    let word = first_word(&s);`[]`\n    s.clear();`[]``{}`    \n}"
          }
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Listing 4-8: Storing the result from calling the\n`first_word` function and then changing the `String` contents</span>"
        },
        {
          "kind": "text",
          "content": "This program compiles without any errors, as `s` retains write permissions\nafter calling `first_word`. Because `word` isn’t connected to the state of `s`\nat all, `word` still contains the value `5`. We could use that value `5` with\nthe variable `s` to try to extract the first word out, but this would be a bug\nbecause the contents of `s` have changed since we saved `5` in `word`."
        },
        {
          "kind": "text",
          "content": "Having to worry about the index in `word` getting out of sync with the data in\n`s` is tedious and error prone! Managing these indices is even more brittle if\nwe write a `second_word` function. Its signature would have to look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn second_word(s: &String) -> (usize, usize) {"
          }
        },
        {
          "kind": "text",
          "content": "Now we’re tracking a starting *and* an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren’t tied to\nthat state at all. We have three unrelated variables floating around that\nneed to be kept in sync."
        },
        {
          "kind": "text",
          "content": "Luckily, Rust has a solution to this problem: string slices."
        },
        {
          "kind": "text",
          "content": "### String Slices"
        },
        {
          "kind": "text",
          "content": "A *string slice* is a reference to part of a `String`, and it looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {\nlet s = String::from(\"hello world\");\n\nlet hello: &str = &s[0..5];\nlet world: &str = &s[6..11];\nlet s2: &String = &s; `[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Rather than a reference to the entire `String` (like `s2`), `hello` is a reference to a\nportion of the `String`, specified in the extra `[0..5]` bit. We create slices\nusing a range within brackets by specifying `[starting_index..ending_index]`,\nwhere `starting_index` is the first position in the slice and `ending_index` is\none more than the last position in the slice."
        },
        {
          "kind": "text",
          "content": "Slices are special kinds of references because they are \"fat\" pointers, or pointers\nwith metadata. Here, the metadata is the length of the slice. We can see this metadata\nby changing our visualization to peek into the internals of Rust's data structures:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "concreteTypes",
              "hideCode"
            ],
            "code": "fn main() {\n    let s = String::from(\"hello world\");\n\n    let hello: &str = &s[0..5];\n    let world: &str = &s[6..11];\n    let s2: &String = &s; // not a slice, for comparison\n    `[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "Observe that the variables `hello` and `world` have both a `ptr` and a `len` field, which together define the underlined regions\nof the string on the heap. You can also see here what a `String` actually looks like: a string is a vector of bytes (`Vec<u8>`),\nwhich contains a length `len` and a buffer `buf` that has a pointer `ptr` and a capacity `cap`."
        },
        {
          "kind": "text",
          "content": "Because slices are references, they also change the permissions on referenced data. For example, observe below that when\n`hello` is created as a slice of `s`, then `s` loses write and own permissions:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "fn main() {\n    let mut s = String::from(\"hello\");\n    let hello: &str = &s[0..5];\n    println!(\"{hello}\");\n    s.push_str(\" world\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "#### Range syntax"
        },
        {
          "kind": "text",
          "content": "With Rust’s `..` range syntax, if you want to start at index zero, you can drop\nthe value before the two periods. In other words, these are equal:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];"
          }
        },
        {
          "kind": "text",
          "content": "By the same token, if your slice includes the last byte of the `String`, you\ncan drop the trailing number. That means these are equal:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[3..len];\nlet slice = &s[3..];"
          }
        },
        {
          "kind": "text",
          "content": "You can also drop both values to take a slice of the entire string. So these\nare equal:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &s[..];"
          }
        },
        {
          "kind": "text",
          "content": "> Note: String slice range indices must occur at valid UTF-8 character\n> boundaries. If you attempt to create a string slice in the middle of a\n> multibyte character, your program will exit with an error. For the purposes\n> of introducing string slices, we are assuming ASCII only in this section; a\n> more thorough discussion of UTF-8 handling is in the [“Storing UTF-8 Encoded\n> Text with Strings”][strings]<!-- ignore --> section of Chapter 8."
        },
        {
          "kind": "text",
          "content": "#### Rewriting `first_word` with string slices"
        },
        {
          "kind": "text",
          "content": "With all this information in mind, let’s rewrite `first_word` to return a\nslice. The type that signifies “string slice” is written as `&str`:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-18-first-word-slice/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We get the index for the end of the word in the same way as we did in Listing\n4-7, by looking for the first occurrence of a space. When we find a space, we\nreturn a string slice using the start of the string and the index of the space\nas the starting and ending indices."
        },
        {
          "kind": "text",
          "content": "Now when we call `first_word`, we get back a single value that is tied to the\nunderlying data. The value is made up of a reference to the starting point of\nthe slice and the number of elements in the slice."
        },
        {
          "kind": "text",
          "content": "Returning a slice would also work for a `second_word` function:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn second_word(s: &String) -> &str {"
          }
        },
        {
          "kind": "text",
          "content": "We now have a straightforward API that’s much harder to mess up, because the\ncompiler will ensure the references into the `String` remain valid. Remember\nthe bug in the program in Listing 4-8, when we got the index to the end of the\nfirst word but then cleared the string so our index was invalid? That code was\nlogically incorrect but didn’t show any immediate errors. The problems would\nshow up later if we kept trying to use the first word index with an emptied\nstring. Slices make this bug impossible and let us know we have a problem with\nour code much sooner. For example:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper",
              "shouldFail"
            ],
            "code": "#fn first_word(s: &String) -> &str {\n#    let bytes = s.as_bytes();\n#\n#    for (i, &item) in bytes.iter().enumerate() {\n#        if item == b' ' {\n#            return &s[0..i];\n#        }\n#    }\n#\n#    &s[..]\n#}\nfn main() {\n    let mut s = String::from(\"hello world\");\n    let word = first_word(&s);`(focus,paths:s)`\n    s.clear();`{}`\n    println!(\"the first word is: {}\", word);\n}"
          }
        },
        {
          "kind": "text",
          "content": "You can see that calling `first_word` now removes the write permission from `s`,\nwhich prevents us from calling `s.clear()`. Here’s the compiler error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Recall from the borrowing rules that if we have an immutable reference to\nsomething, we cannot also take a mutable reference. Because `clear` needs to\ntruncate the `String`, it needs to get a mutable reference. The `println!`\nafter the call to `clear` uses the reference in `word`, so the immutable\nreference must still be active at that point. Rust disallows the mutable\nreference in `clear` and the immutable reference in `word` from existing at the\nsame time, and compilation fails. Not only has Rust made our API easier to use,\nbut it has also eliminated an entire class of errors at compile time!"
        },
        {
          "kind": "text",
          "content": "#### String Literals Are Slices"
        },
        {
          "kind": "text",
          "content": "Recall that we talked about string literals being stored inside the binary. Now\nthat we know about slices, we can properly understand string literals:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let s = \"Hello, world!\";"
          }
        },
        {
          "kind": "text",
          "content": "The type of `s` here is `&str`: it’s a slice pointing to that specific point of\nthe binary. This is also why string literals are immutable; `&str` is an\nimmutable reference."
        },
        {
          "kind": "text",
          "content": "#### String Slices as Parameters"
        },
        {
          "kind": "text",
          "content": "Knowing that you can take slices of literals and `String` values leads us to\none more improvement on `first_word`, and that’s its signature:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn first_word(s: &String) -> &str {"
          }
        },
        {
          "kind": "text",
          "content": "A more experienced Rustacean would write the signature shown in Listing 4-9\ninstead because it allows us to use the same function on both `&String` values\nand `&str` values."
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Listing 4-9: Improving the `first_word` function by using\na string slice for the type of the `s` parameter</span>"
        },
        {
          "kind": "text",
          "content": "If we have a string slice, we can pass that directly. If we have a `String`, we\ncan pass a slice of the `String` or a reference to the `String`. This\nflexibility takes advantage of *deref coercions*, a feature we will cover in the\n[“Implicit Deref Coercions with Functions and\nMethods”][deref-coercions]<!--ignore--> section of Chapter 15."
        },
        {
          "kind": "text",
          "content": "Defining a function to take a string slice instead of a reference to a `String`\nmakes our API more general and useful without losing any functionality:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:usage}}"
          }
        },
        {
          "kind": "text",
          "content": "### Other Slices"
        },
        {
          "kind": "text",
          "content": "String slices, as you might imagine, are specific to strings. But there’s a\nmore general slice type, too. Consider this array:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let a = [1, 2, 3, 4, 5];"
          }
        },
        {
          "kind": "text",
          "content": "Just as we might want to refer to a part of a string, we might want to refer\nto part of an array. We’d do so like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);"
          }
        },
        {
          "kind": "text",
          "content": "This slice has the type `&[i32]`. It works the same way as string slices do, by\nstoring a reference to the first element and a length. You’ll use this kind of\nslice for all sorts of other collections. We’ll discuss these collections in\ndetail when we talk about vectors in Chapter 8."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "7fbda6e4-dca7-458e-ab52-fab03181f90b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the variables `s2` and `s3` in the following program. These two variables will be located in memory within the stack frame for `main`. Each variable has a size in memory on the stack, *not* including the size of pointed data. Which statement is true about the sizes of `s2` and `s3`?\n\n```\nfn main() {\n  let s = String::from(\"hello\");\n  let s2: &String = &s;\n  let s3: &str = &s[..];\n}\n```\n",
                  "distractors": [
                    "`s3` has the same number of bytes as `s2`",
                    "`s3` has fewer bytes than `s2`"
                  ]
                },
                "answer": {
                  "answer": "`s3` has more bytes than `s2`"
                },
                "context": "The type `&String` is a normal reference consisting of a single pointer, so 8 bytes on a 64-bit architecture. The type `&str` is a special slice reference which consists of a pointer *and* a length, so 16 bytes. Therefore `s3` of type `&str` uses more memory than `s2` of type `&String`. You can verify this yourself using [`std::mem::size_of`](https://doc.rust-lang.org/std/mem/fn.size_of.html), like so:\n\n```rust\nfn main() {\n  println!(\n    \"&String={} &str={}\",\n    std::mem::size_of::<&String>(),\n    std::mem::size_of::<&str>(),\n  );\n}\n```\n\nAlso, note that Rust will implicitly convert string references to either `&String` or `&str` based on the context of the reference. So the expression `&s` produces two different values based on the expected type of `&s`.\n"
              },
              {
                "id": "adcfc154-03bd-470a-bacb-b3cad97cfc7f",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let mut s = String::from(\"hello\");\n  for &item in s.as_bytes().iter() {\n    if item == b'l' {\n      s.push_str(\" world\");\n    }\n  }\n  println!(\"{s}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 5
                },
                "context": "Because `s.as_bytes()` produces an immutable reference to `s`, it is illegal to mutate `s` (via `push_str`) inside the for-loop.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Slices are a special kind of reference that refer to sub-ranges of a sequence, like a\nstring or a vector. At runtime, a slice is represented as a \"fat pointer\" which contains\na pointer to the beginning of the range and a length of the range. One advantage of slices\nover index-based ranges is that the slice cannot be invalidated while it's being used."
        },
        {
          "kind": "text",
          "content": "[ch13]: ch13-02-iterators.html\n[ch6]: ch06-02-match.html#patterns-that-bind-to-values\n[strings]: ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\n[deref-coercions]: ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods"
        }
      ]
    },
    {
      "title": "Ownership Recap",
      "file": "ch04-05-ownership-recap.md",
      "elements": [
        {
          "kind": "text",
          "content": "This chapter introduced a lot of new concepts like ownership, borrowing, and slices.\nIf you aren't familiar with systems programming, this chapter also introduced new concepts like memory allocation, the stack vs. the heap, pointers, and undefined behavior. Before we move on to the rest of Rust, let's first stop and take a breath. We'll review and practice with the key concepts from this chapter."
        },
        {
          "kind": "text",
          "content": "### Ownership versus Garbage Collection"
        },
        {
          "kind": "text",
          "content": "To put ownership into context, we should talk about **garbage collection**.\nMost programming languages use a garbage collector to manage memory, such as in Python, Javascript, Java, and Go. A garbage collector works at runtime adjacent to a running program (a tracing collector, at least). The collector scans through memory to find data that's no longer used &mdash; that is, the running program can no longer reach that data from a function-local variable. Then the collector deallocates the unused memory for later use."
        },
        {
          "kind": "text",
          "content": "The key benefit of a garbage collector is that it avoids undefined behavior (such as using freed memory), as can happen in C or C++. Garbage collection also avoids the need for a complex type system to check for undefined behavior, like in Rust. However, there are a few drawbacks to garbage collection. One obvious drawback is performance, as garbage collection incurs either frequent small overheads (for reference-counting, like in Python and Swift) or infrequent large overheads (for tracing, like in all other GC'd languages)."
        },
        {
          "kind": "text",
          "content": "But another less obvious drawback is that **garbage collection can be unpredictable**. To illustrate the point, say we are implementing a `Document` type that represents a mutable list of words. We could implement `Document` in a garbage-collected language such as Python in this way:"
        },
        {
          "kind": "code",
          "content": {
            "language": "python",
            "flags": [],
            "code": "class Document:     \n    def __init__(self, words: List[str]):\n        \"\"\"Create a new document\"\"\"\n        self.words = words\n\n    def add_word(self, word: str):\n        \"\"\"Add a word to the document\"\"\"\n        self.words.append(word)\n        \n    def get_words(self) -> List[str]:  \n        \"\"\"Get a list of all the words in the document\"\"\"\n        return self.words"
          }
        },
        {
          "kind": "text",
          "content": "Here's one way we could use this `Document` class that creates a document `d`, copies it into a new document `d2`, and then mutates `d2`."
        },
        {
          "kind": "code",
          "content": {
            "language": "python",
            "flags": [],
            "code": "words = [\"Hello\"]\nd = Document(words)\n\nd2 = Document(d.get_words())\nd2.add_word(\"world\")"
          }
        },
        {
          "kind": "text",
          "content": "Consider two key questions about this example:"
        },
        {
          "kind": "text",
          "content": "1. **When is the words array deallocated?**\nThis program has created three pointers to the same array. The variables `words`, `d`, and `d2` all contain a pointer to the words array allocated on the heap. Therefore Python will only deallocate the words array when all three variables are out of scope. More generally, it's often difficult to predict where data will be garbage-collected just by reading the source code."
        },
        {
          "kind": "text",
          "content": "2. **What are the contents of the document `d`?**\nBecause `d2` contains a pointer to the same words array as `d`, then `d2.add_word(\"world\")` also mutates the document `d`. Therefore in this example, the words in `d` are `[\"Hello\", \"world\"]`. This happens because `d.get_words()` returns a mutable reference to the words array in `d`. Pervasive, implicit mutable references can easily lead to unpredictable bugs when data structures can leak their internals[^ownership-originally]. Here, it is probably not intended behavior that a change to `d2` can change `d`."
        },
        {
          "kind": "text",
          "content": "This problem is not unique to Python &mdash; you can encounter similar behavior in C#, Java, Javascript, and so on. In fact, most programming languages actually have a concept of pointers. It's just a question of how the language exposes pointers to the programmer. Garbage collection makes it difficult to see which variable points to which data. For example, it wasn't obvious that `d.get_words()` produced a pointer to data within `d`."
        },
        {
          "kind": "text",
          "content": "By contrast, Rust's ownership model puts pointers front-and-center. We can see that by translating the `Document` type into a Rust data structure. Normally we would use a `struct`, but we haven't covered those yet, so we'll just use a type alias:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "type Document = Vec<String>;\n\nfn new_document(words: Vec<String>) -> Document {\n    words\n}\n\nfn add_word(this: &mut Document, word: String) {\n    this.push(word);\n}\n\nfn get_words(this: &Document) -> &[String] {\n    this.as_slice()\n}"
          }
        },
        {
          "kind": "text",
          "content": "This Rust API differs from the Python API in a few key ways:"
        },
        {
          "kind": "text",
          "content": "* The function `new_document` consumes ownership of the input vector `words`. That means the `Document` *owns* the word vector. The word vector will be predictably deallocated when its owning `Document` goes out of scope."
        },
        {
          "kind": "text",
          "content": "* The function `add_word` requires a mutable reference `&mut Document` to be able to mutate a document. It also consumes ownership of the input `word`, meaning no one else can mutate the individual words of the document."
        },
        {
          "kind": "text",
          "content": "* The function `get_words` returns an explicit immutable reference to strings within the document. The only way to create a new document from this word vector is to deep-copy its contents, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn main() {\n    let words = vec![\"hello\".to_string()];\n    let d = new_document(words);\n\n    // .to_vec() converts &[String] to Vec<String> by cloning each string\n    let words_copy = get_words(&d).to_vec();\n    let mut d2 = new_document(words_copy);\n    add_word(&mut d2, \"world\".to_string());\n\n    // The modification to `d2` does not affect `d`\n    assert!(!get_words(&d).contains(&\"world\".into()));\n}"
          }
        },
        {
          "kind": "text",
          "content": "The point of this example is to say: if Rust is not your first language, then you already have experience working with memory and pointers! Rust just makes those concepts explicit. This has the dual benefit of (1) improving runtime performance by avoiding garbage collection, and (2) improving predictability by preventing accidental \"leaks\" of data."
        },
        {
          "kind": "text",
          "content": "### The Concepts of Ownership"
        },
        {
          "kind": "text",
          "content": "Next, let's review the concepts of ownership. This review will be quick &mdash; the goal is to remind you of the relevant concepts. If you realize you forgot or didn't understand a concept, then we will link you to the relevant chapters which you can review."
        },
        {
          "kind": "text",
          "content": "#### Ownership at Runtime"
        },
        {
          "kind": "text",
          "content": "We'll start by reviewing how Rust uses memory at runtime:\n* Rust allocates local variables in stack frames, which are allocated when a function is called and deallocated when the call ends.\n* Local variables can hold either data (like numbers, booleans, tuples, etc.) or pointers.\n* Pointers can be created either through boxes (pointers owning data on the heap) or references (non-owning pointers)."
        },
        {
          "kind": "text",
          "content": "This diagram illustrates how each concept looks at runtime:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "fn main() {\n  let mut a_num = 0;\n  inner(&mut a_num);`[]`\n}\n\nfn inner(x: &mut i32) {\n  let another_num = 1;\n  let a_stack_ref = &another_num;\n\n  let a_box = Box::new(2);  \n  let a_box_stack_ref = &a_box;\n  let a_box_heap_ref = &*a_box;`[]`\n\n  *x += 5;\n}"
          }
        },
        {
          "kind": "text",
          "content": "Review this diagram and make sure you understand each part. For example, you should be able to answer:\n* Why does `a_box_stack_ref` point to the stack, while `a_box_heap_ref` point to the heap?\n* Why is the value `2` no longer on the heap at L2?\n* Why does `a_num` have the value `5` at L2?"
        },
        {
          "kind": "text",
          "content": "If you want to review boxes, re-read [Chapter 4.1][ch04-01]. If you want to review references, re-read [Chapter 4.2][ch04-02]. If you want to see case studies involving boxes and references, re-read [Chapter 4.3][ch04-03]."
        },
        {
          "kind": "text",
          "content": "Slices are a special kind of reference that refer to a contiguous sequence of data in memory. This diagram illustrates how a slice refers to a subsequence of characters in a string:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "fn main() {\n  let s = String::from(\"abcdefg\");\n  let s_slice = &s[2..5];`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "If you want to review slices, re-read [Chapter 4.4][ch04-04]."
        },
        {
          "kind": "text",
          "content": "#### Ownership at Compile-time"
        },
        {
          "kind": "text",
          "content": "Rust tracks @Perm{read} (read), @Perm{write} (write), and @Perm{own} (own) permissions on each variable. Rust requires that a variable has appropriate permissions to perform a given operation. As a basic example, if a variable is not declared as `let mut`, then it is missing the @Perm{write} permission and cannot be mutated:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "fn main() {\n  let n = 0;\n  n += 1;\n}"
          }
        },
        {
          "kind": "text",
          "content": "A variable's permissions can be changed if it is **moved** or **borrowed**. A move of a variable with a non-copyable type (like `Box<T>` or `String`) requires the @Perm{read}@Perm{own} permissions, and the move eliminates all permissions on the variable. That rule prevents the use of moved variables:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "fn main() {\n  let s = String::from(\"Hello world\");\n  consume_a_string(s);\n  println!(\"{s}\"); // can't read `s` after moving it\n}\n\nfn consume_a_string(_s: String) {\n  // om nom nom\n}"
          }
        },
        {
          "kind": "text",
          "content": "If you want to review how moves work, re-read [Chapter 4.1][ch04-01]."
        },
        {
          "kind": "text",
          "content": "Borrowing a variable (creating a reference to it) temporarily removes some of the variable's permissions. An immutable borrow creates an immutable reference, and also disables the borrowed data from being mutated or moved. For example, printing an immutable reference is ok:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut s = String::from(\"Hello\");\nlet s_ref = &s;\nprintln!(\"{s_ref}\");\nprintln!(\"{s}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "But mutating an immutable reference is not ok:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet mut s = String::from(\"Hello\");\nlet s_ref = &s;`(focus,paths:*s_ref)`\ns_ref.push_str(\" world\");\nprintln!(\"{s}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "And mutating the immutably borrowed data is not ok:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet mut s = String::from(\"Hello\");`(focus)`\nlet s_ref = &s;`(focus,rxpaths:s$)`\ns.push_str(\" world\");\nprintln!(\"{s_ref}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "And moving data out of the reference is not ok:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet mut s = String::from(\"Hello\");\nlet s_ref = &s;`(focus,paths:*s_ref)`\nlet s2 = *s_ref;\nprintln!(\"{s}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "A mutable borrow creates a mutable reference, which disables the borrowed data from being read, written, or moved. For example, mutating a mutable reference is ok:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet mut s = String::from(\"Hello\");\nlet s_ref = &mut s;\ns_ref.push_str(\" world\");\nprintln!(\"{s}\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "But accessing the mutably borrowed data is not ok:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet mut s = String::from(\"Hello\");\nlet s_ref = &mut s;`(focus,rxpaths:s$)`\nprintln!(\"{s}\");\ns_ref.push_str(\" world\");\n#}"
          }
        },
        {
          "kind": "text",
          "content": "If you want to review permissions and references, re-read [Chapter 4.2][ch04-02]."
        },
        {
          "kind": "text",
          "content": "#### Connecting Ownership between Compile-time and Runtime"
        },
        {
          "kind": "text",
          "content": "Rust's permissions are designed to prevent undefined behavior. For example, one kind of undefined behavior is a **use-after-free** where freed memory is read or written. Immutable borrows remove the @Perm{write} permission to avoid use-after-free, like in this case:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "#fn main() {\nlet mut v = vec![1, 2, 3];\nlet n = &v[0];`[]`\nv.push(4);`[]`\nprintln!(\"{n}\");`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Another kind of undefined behavior is a **double-free** where memory is freed twice. Dereferences of references to non-copyable data do not have the @Perm{own} permission to avoid double-frees, like in this case:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "#fn main() {\nlet v = vec![1, 2, 3];\nlet v_ref: &Vec<i32> = &v;\nlet v2 = *v_ref;`[]`\ndrop(v2);`[]`\ndrop(v);`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "If you want to review undefined behavior, re-read [Chapter 4.1][ch04-01] and [Chapter 4.3][ch04-03]."
        },
        {
          "kind": "text",
          "content": "### The Rest of Ownership"
        },
        {
          "kind": "text",
          "content": "As we introduce additional features like structs, enums, and traits, those features will have specific interactions with ownership. This chapter provides the essential foundation for understanding those interactions &mdash; the concepts of memory, pointers, undefined behavior, and permissions will help us talk about the more advanced parts of Rust in future chapters."
        },
        {
          "kind": "text",
          "content": "And don't forget to take the quizzes if you want to check your understanding!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "1ec0098c-c5dc-46de-a889-b6659c0af757",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are writing a function with the following spec:\n\n> `round_all` takes as input a list of floating point numbers, and it rounds each number in-place to the nearest integer.\n\nWhich of the following is the most appropriate type signature for a function implementing this spec?\n",
                  "distractors": [
                    "```\nfn round_all(v: &Vec<f32>) -> Vec<f32>;\n```\n",
                    "```\nfn round_all(v: Vec<f32>);\n```\n",
                    "```\nfn round_all(v: &Vec<f32>);\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```\nfn round_all(v: &mut Vec<f32>);\n```\n"
                },
                "context": "The spec calls for the input to be mutated in-place, therefore the most appropriate type signature accepts a mutable reference to the input.\nAn immutable reference or an owned vector are both inappropriate for this spec.\n"
              },
              {
                "id": "f8ca5ab2-0e5d-4c0d-bca2-99e6763ba9c5",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are writing a function with the following spec:\n\n> `find_contains` takes as input a collection of strings and a target substring. \n> It returns a list of all the strings in the collection that contain the target substring.\n\nWhich of the following is the most appropriate type signature for a function implementing this spec?\n",
                  "distractors": [
                    "```\nfn find_contains(haystack: &Vec<String>, needle: String) -> Vec<String>;\n```\n",
                    "```\nfn find_contains(haystack: &[String], needle: &str) -> Vec<String>;\n```\n",
                    "```\nfn find_contains(haystack: &Vec<String>, needle: &str) -> &[String];\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```\nfn find_contains(haystack: &[String], needle: &str) -> Vec<&String>;\n```\n"
                },
                "context": "For `haystack`, the slice type `&[String]` can accept more inputs than `&Vec<String>`, so it is preferred.\nFor `needle`, the target substring does not need to be heap-allocated, so `&str` is preferred to `String`.\nFor the return type, `Vec<String>` is not desirable because it would require cloning the input strings.\n`&[String]` is not desirable because it can only return a contiguous subsequence of the input.\n`Vec<&String>` is the most preferable because it only incurs the cost of allocating the vector, not the strings themselves.\n"
              },
              {
                "id": "868a4edf-16f0-4191-8aed-835c812b8b25",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Rust normally disallows multiple mutable accesses to the same array, even when those accesses are disjoint. \nFor example, this function does not compile:\n\n```\nfn main() {\n  let mut v = vec![0, 1, 2, 3];\n  let (r0, r1) = (&mut v[0..2], &mut v[2..4]);\n  r0[0] += 1;\n  r1[0] += 1;  \n}\n```\n\nHowever, the Rust standard library has a function `slice::split_at_mut` that does permit this functionality:\n\n```\nfn main() {\n  let mut v = vec![0, 1, 2, 3];\n  let (r0, r1) = v.split_at_mut(2);\n  r0[0] += 1;\n  r1[0] += 1;  \n}\n```\n\nWhich of the following best describes how it's possible to implement `split_at_mut`?\n",
                  "distractors": [
                    "`split_at_mut` is a special compiler primitive that cannot be implemented within the language",
                    "`split_at_mut` uses unsafe code to disable the borrow checker from checking the safety of mutable references",
                    "`split_at_mut` calls into a C library that can't be analyzed by Rust"
                  ]
                },
                "answer": {
                  "answer": "`split_at_mut` uses unsafe code to circumvent the borrow checker with raw pointers"
                },
                "context": "As discussed in [Chapter 4.3 \"Fixing a Safe Program: Mutating Different Array Elements\"](ch04-03-fixing-ownership-errors.html#fixing-a-safe-program-mutating-different-array-elements), functions like `split_at_mut` are implemented with the `unsafe` feature.\nThis feature doesn't completely disable the borrow checker, but rather enables the use of specific unsafe features like raw pointers.\n"
              },
              {
                "id": "ba32e57a-e5f2-42e4-8cfd-eb265990c690",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the permissions in the following program:\n\n```aquascope,permissions,boundaries,stepper\n#fn main() {\nlet s = String::new();\nlet s_ref = &s;`(focus,paths:*s_ref)`\n#println!(\"{s_ref}\");\n#}\n```\n\nWhich of the following best explains why `*s_ref` does not have the @Perm{own} (own) permission?\n",
                  "distractors": [
                    "Ownership permits borrowing, and reborrowing `*s_ref` can cause a double-free",
                    "Ownership permits mutation, and mutating `*s_ref` can cause a use-after-free",
                    "Ownership permits reading, and reading `*s_ref` can cause a use-after-free"
                  ]
                },
                "answer": {
                  "answer": "Ownership permits moving, and moving out of a reference can cause a double-free"
                },
                "context": "The @Perm{own} permission represents ownership of an object. There can only exist one owner of an object, so it is important\nthat references cannot transfer ownership of non-copyable types like `String`. If two variables thought they owned\nthe same string, then they would both attempt to deallocate it, causing a double-free.\n"
              },
              {
                "id": "3a5f5de5-23a9-49fb-bdb4-acc9c3fbb4a6",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the set of Rust programs that contain no `unsafe` code. \nSelect each of the following statements that is true about the kinds of programs accepted and rejected by the borrow checker:\n",
                  "distractors": [
                    "The borrow checker always accepts programs without undefined behavior",
                    "The borrow checker sometimes accepts programs with undefined behavior"
                  ]
                },
                "answer": {
                  "answer": [
                    "The borrow checker always rejects programs with undefined behavior",
                    "The borrow checker sometimes rejects programs without undefined behavior"
                  ]
                },
                "context": "The borrow checker always rejects programs with undefined behavior, but may sometimes reject programs without undefined behavior (i.e., are perfectly safe).\nIn technical terms, the borrow checker is a sound and incomplete analysis.\n"
              },
              {
                "id": "208e0e38-a706-4d96-9809-f0e12f574136",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The function `extract` is rejected by the borrow checker:\n\n```rust\nfn extract(b: &Box<i32>) -> i32 {\n    let b2: Box<i32> = *b;\n    *b2\n}\n```\n\nImagine that the borrow checker did not reject this function. \nDetermine whether there exists an input such that the function would cause undefined behavior if executed on that input.\n",
                  "distractors": [
                    "This function could NOT cause undefined behavior"
                  ]
                },
                "answer": {
                  "answer": "This function COULD cause undefined behavior"
                },
                "context": "This function would cause a double-free on any input.\n"
              },
              {
                "id": "dcfd54f8-7fe6-4483-aefd-ea95ba5b5eb0",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The function `transfer_string` is rejected by the borrow checker:\n\n```rust\nfn get_first(strs: &mut (String, String)) -> &mut String {\n    &mut strs.0\n}\n\nfn get_second(strs: &mut (String, String)) -> &mut String {\n    &mut strs.1\n}\n\nfn transfer_string(strs: &mut (String, String)) {\n    let fst = get_first(strs);\n    let snd = get_second(strs);\n    fst.push_str(snd);\n    snd.clear();\n}\n```\n\nImagine that the borrow checker did not reject this function. \nDetermine whether there exists an input such that the function would cause undefined behavior if executed on that input.\n",
                  "distractors": [
                    "This function COULD cause undefined behavior"
                  ]
                },
                "answer": {
                  "answer": "This function could NOT cause undefined behavior"
                },
                "context": "The borrow checker rejects this function because it assumes that `get_first` and `get_second` could return a mutable\nreference to either component of the tuple, and so `fst` and `snd` could possibly point to the same value. But they are\nalways distinct in this program, so this function is actually safe.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[^ownership-originally]: In fact, the original invention of ownership types wasn't about memory safety at all. It was about preventing leaks of mutable references to data structure internals in Java-like languages. If you're curious to learn more about the history of ownership types, check out the paper [\"Ownership Types for Flexible Alias Protection\"](https://dl.acm.org/doi/abs/10.1145/286936.286947) (Clarke et al. 1998)."
        },
        {
          "kind": "text",
          "content": "[ch04-01]: ch04-01-what-is-ownership.html\n[ch04-02]: ch04-02-references-and-borrowing.html\n[ch04-03]: ch04-03-fixing-ownership-errors.html\n[ch04-04]: ch04-04-slices.html"
        }
      ]
    },
    {
      "title": "Using Structs to Structure Related Data",
      "file": "ch05-00-structs.md",
      "elements": [
        {
          "kind": "text",
          "content": "A _struct_, or _structure_, is a custom data type that lets you package\ntogether and name multiple related values that make up a meaningful group. If\nyou’re familiar with an object-oriented language, a _struct_ is like an\nobject’s data attributes. In this chapter, we’ll compare and contrast tuples\nwith structs to build on what you already know and demonstrate when structs are\na better way to group data."
        },
        {
          "kind": "text",
          "content": "We’ll demonstrate how to define and instantiate structs. We’ll discuss how to\ndefine associated functions, especially the kind of associated functions called\n_methods_, to specify behavior associated with a struct type. Structs and enums\n(discussed in Chapter 6) are the building blocks for creating new types in your\nprogram’s domain to take full advantage of Rust’s compile-time type checking."
        }
      ]
    },
    {
      "title": "Defining and Instantiating Structs",
      "file": "ch05-01-defining-structs.md",
      "elements": [
        {
          "kind": "text",
          "content": "Structs are similar to tuples, discussed in [“The Tuple Type”][tuples]<!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types. Unlike with tuples, in a struct\nyou’ll name each piece of data so it’s clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don’t have to rely\non the order of the data to specify or access the values of an instance."
        },
        {
          "kind": "text",
          "content": "To define a struct, we enter the keyword `struct` and name the entire struct. A\nstruct’s name should describe the significance of the pieces of data being\ngrouped together. Then, inside curly brackets, we define the names and types of\nthe pieces of data, which we call _fields_. For example, Listing 5-1 shows a\nstruct that stores information about a user account."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-1\" file-name=\"src/main.rs\" caption=\"A `User` struct definition\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-01/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To use a struct after we’ve defined it, we create an _instance_ of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing _`key:\nvalue`_ pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don’t have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type. For\nexample, we can declare a particular user as shown in Listing 5-2."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#struct User {\n#    active: bool,\n#    username: String,\n#    email: String,\n#    sign_in_count: u64,\n#}\nfn main() {\n    let user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "To get a specific value from a struct, we use dot notation. For example, to\naccess this user’s email address, we use `user1.email`. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field. Listing 5-3 shows how to change the value in the `email`\nfield of a mutable `User` instance."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#struct User {\n#    active: bool,\n#    username: String,\n#    email: String,\n#    sign_in_count: u64,\n#}\nfn main() {\n    let mut user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };`[]`\n\n    user1.email = String::from(\"anotheremail@example.com\");`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "Note that the entire instance must be mutable; Rust doesn’t allow us to mark\nonly certain fields as mutable. As with any expression, we can construct a new\ninstance of the struct as the last expression in the function body to\nimplicitly return that new instance."
        },
        {
          "kind": "text",
          "content": "Listing 5-4 shows a `build_user` function that returns a `User` instance with\nthe given email and username. The `active` field gets the value of `true`, and\nthe `sign_in_count` gets a value of `1`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-4\" file-name=\"src/main.rs\" caption=\"A `build_user` function that takes an email and username and returns a `User` instance\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "It makes sense to name the function parameters with the same name as the struct\nfields, but having to repeat the `email` and `username` field names and\nvariables is a bit tedious. If the struct had more fields, repeating each name\nwould get even more annoying. Luckily, there’s a convenient shorthand!"
        },
        {
          "kind": "text",
          "content": "<!-- Old heading. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\"></a>"
        },
        {
          "kind": "text",
          "content": "### Using the Field Init Shorthand"
        },
        {
          "kind": "text",
          "content": "Because the parameter names and the struct field names are exactly the same in\nListing 5-4, we can use the _field init shorthand_ syntax to rewrite\n`build_user` so it behaves exactly the same but doesn’t have the repetition of\n`username` and `email`, as shown in Listing 5-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-5\" file-name=\"src/main.rs\" caption=\"A `build_user` function that uses field init shorthand because the `username` and `email` parameters have the same name as struct fields\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we’re creating a new instance of the `User` struct, which has a field\nnamed `email`. We want to set the `email` field’s value to the value in the\n`email` parameter of the `build_user` function. Because the `email` field and\nthe `email` parameter have the same name, we only need to write `email` rather\nthan `email: email`."
        },
        {
          "kind": "text",
          "content": "### Creating Instances from Other Instances with Struct Update Syntax"
        },
        {
          "kind": "text",
          "content": "It’s often useful to create a new instance of a struct that includes most of\nthe values from another instance of the same type, but changes some. You can do\nthis using _struct update syntax_."
        },
        {
          "kind": "text",
          "content": "First, in Listing 5-6 we show how to create a new `User` instance in `user2`\nregularly, without the update syntax. We set a new value for `email` but\notherwise use the same values from `user1` that we created in Listing 5-2."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#struct User {\n#    active: bool,\n#    username: String,\n#    email: String,\n#    sign_in_count: u64,\n#}\nfn main() {\n#   let user1 = User {\n#      email: String::from(\"someone@example.com\"),\n#      username: String::from(\"someusername123\"),\n#      active: true,\n#      sign_in_count: 1,\n#   };\n    // --snip--\n\n    let user2 = User {\n        active: user1.active,\n        username: user1.username,\n        email: String::from(\"another@example.com\"),\n        sign_in_count: user1.sign_in_count,\n    };`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Listing 5-6: Creating a new `User` instance using all but one of\nthe values from `user1`</span>"
        },
        {
          "kind": "text",
          "content": "Using struct update syntax, we can achieve the same effect with less code, as\nshown in Listing 5-7. The syntax `..` specifies that the remaining fields not\nexplicitly set should have the same value as the fields in the given instance."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-7\" file-name=\"src/main.rs\" caption=\"Using struct update syntax to set a new `email` value for a `User` instance but to use the rest of the values from `user1`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The code in Listing 5-7 also creates an instance in `user2` that has a\ndifferent value for `email` but has the same values for the `username`,\n`active`, and `sign_in_count` fields from `user1`. The `..user1` must come last\nto specify that any remaining fields should get their values from the\ncorresponding fields in `user1`, but we can choose to specify values for as\nmany fields as we want in any order, regardless of the order of the fields in\nthe struct’s definition."
        },
        {
          "kind": "text",
          "content": "Note that the struct update syntax uses `=` like an assignment; this is\nbecause it moves the data, just as we saw in the [\"What Is Ownership?\"][move]<!-- ignore --> section. In this example, after creating `user2`, `user1` is partially invalidated because the `String` in the\n`username` field of `user1` was moved into `user2`. If we had given `user2` new\n`String` values for both `email` and `username`, and thus only used the\n`active` and `sign_in_count` values from `user1`, then `user1` would still be\nfully valid after creating `user2`. The types of `active` and `sign_in_count` are\ntypes that implement the `Copy` trait, so the behavior we discussed in the\n[“Copying vs. Moving Out of a Collection”][copy]<!-- ignore --> section would apply."
        },
        {
          "kind": "text",
          "content": "### Using Tuple Structs Without Named Fields to Create Different Types"
        },
        {
          "kind": "text",
          "content": "Rust also supports structs that look similar to tuples, called _tuple structs_.\nTuple structs have the added meaning the struct name provides but don’t have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant."
        },
        {
          "kind": "text",
          "content": "To define a tuple struct, start with the `struct` keyword and the struct name\nfollowed by the types in the tuple. For example, here we define and use two\ntuple structs named `Color` and `Point`:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that the `black` and `origin` values are different types because they’re\ninstances of different tuple structs. Each struct you define is its own type,\neven though the fields within the struct might have the same types. For\nexample, a function that takes a parameter of type `Color` cannot take a\n`Point` as an argument, even though both types are made up of three `i32`\nvalues. Otherwise, tuple struct instances are similar to tuples in that you can\ndestructure them into their individual pieces, and you can use a `.` followed\nby the index to access an individual value. Unlike tuples, tuple structs\nrequire you to name the type of the struct when you destructure them. For\nexample, we would write `let Point(x, y, z) = origin;` to destructure the\nvalues in the `origin` point into variables named `x`, `y`, and `z`."
        },
        {
          "kind": "text",
          "content": "### Unit-Like Structs Without Any Fields"
        },
        {
          "kind": "text",
          "content": "You can also define structs that don’t have any fields! These are called\n_unit-like structs_ because they behave similarly to `()`, the unit type that\nwe mentioned in [“The Tuple Type”][tuples]<!-- ignore --> section. Unit-like\nstructs can be useful when you need to implement a trait on some type but don’t\nhave any data that you want to store in the type itself. We’ll discuss traits\nin Chapter 10. Here’s an example of declaring and instantiating a unit struct\nnamed `AlwaysEqual`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "struct AlwaysEqual;\n\nfn main() {\n    let subject = AlwaysEqual;`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "To define `AlwaysEqual`, we use the `struct` keyword, the name we want, and\nthen a semicolon. No need for curly brackets or parentheses! Then we can get an\ninstance of `AlwaysEqual` in the `subject` variable in a similar way: using the\nname we defined, without any curly brackets or parentheses. Imagine that later\nwe’ll implement behavior for this type such that every instance of\n`AlwaysEqual` is always equal to every instance of any other type, perhaps to\nhave a known result for testing purposes. We wouldn’t need any data to\nimplement that behavior! You’ll see in Chapter 10 how to define traits and\nimplement them on any type, including unit-like structs."
        },
        {
          "kind": "text",
          "content": "> ### Ownership of Struct Data\n>\n> In the `User` struct definition in Listing 5-1, we used the owned `String`\n> type rather than the `&str` string slice type. This is a deliberate choice\n> because we want each instance of this struct to own all of its data and for\n> that data to be valid for as long as the entire struct is valid.\n>\n> It’s also possible for structs to store references to data owned by something\n> else, but to do so requires the use of _lifetimes_, a Rust feature that we’ll\n> discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct\n> is valid for as long as the struct is. Let’s say you try to store a reference\n> in a struct without specifying lifetimes, like the following; this won’t work:\n>\n> <Listing file-name=\"src/main.rs\">\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore,does_not_compile\n> struct User {\n>     active: bool,\n>     username: &str,\n>     email: &str,\n>     sign_in_count: u64,\n> }\n>\n> fn main() {\n>     let user1 = User {\n>         active: true,\n>         username: \"someusername123\",\n>         email: \"someone@example.com\",\n>         sign_in_count: 1,\n>     };\n> }\n> ```\n>\n> </Listing>\n>\n> The compiler will complain that it needs lifetime specifiers:\n>\n> ```console\n> $ cargo run\n>    Compiling structs v0.1.0 (file:///projects/structs)\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:3:15\n>   |\n> 3 |     username: &str,\n>   |               ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 ~     username: &'a str,\n>   |\n>\n> error[E0106]: missing lifetime specifier\n>  --> src/main.rs:4:12\n>   |\n> 4 |     email: &str,\n>   |            ^ expected named lifetime parameter\n>   |\n> help: consider introducing a named lifetime parameter\n>   |\n> 1 ~ struct User<'a> {\n> 2 |     active: bool,\n> 3 |     username: &str,\n> 4 ~     email: &'a str,\n>   |\n>\n> For more information about this error, try `rustc --explain E0106`.\n> error: could not compile `structs` (bin \"structs\") due to 2 previous errors\n> ```\n>\n> In Chapter 10, we’ll discuss how to fix these errors so you can store\n> references in structs, but for now, we’ll fix errors like these using owned\n> types like `String` instead of references like `&str`."
        },
        {
          "kind": "text",
          "content": "### Borrowing Fields of a Struct"
        },
        {
          "kind": "text",
          "content": "Similar to our discussion in [\"Different Tuple Fields\"][differentfields], Rust's borrow checker will track ownership permissions\nat both the struct-level and field-level. For example, if we borrow a field `x` of a `Point` structure, then both `p` and `p.x` temporarily lose their permissions (but not `p.y`):"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nstruct Point { x: i32, y: i32 }\n\nlet mut p = Point { x: 0, y: 0 };`(focus,paths:p)`\nlet x = &mut p.x;`(focus,paths:p)`\n*x += 1;`(focus,paths:p)`\nprintln!(\"{}, {}\", p.x, p.y);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "As a result, if we try and use `p` while `p.x` is mutably borrowed like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "struct Point { x: i32, y: i32 }\n\nfn print_point(p: &Point) {\n    println!(\"{}, {}\", p.x, p.y);\n}\n\nfn main() {\n    let mut p = Point { x: 0, y: 0 };`(focus,paths:p)`\n    let x = &mut p.x;`(focus,paths:p)`\n    print_point(&p);`{}`\n    *x += 1;`(focus,paths:p)`\n}"
          }
        },
        {
          "kind": "text",
          "content": "Then the compiler will reject our program with the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n  --> test.rs:10:17\n   |\n9  |     let x = &mut p.x;\n   |             -------- mutable borrow occurs here\n10 |     print_point(&p);\n   |                 ^^ immutable borrow occurs here\n11 |     *x += 1;\n   |     ------- mutable borrow later used here"
          }
        },
        {
          "kind": "text",
          "content": "More generally, if you encounter an ownership error that involves a struct, you should consider which fields of your structure\nare supposed to be borrowed with which permissions. But be aware of the borrow checker's limitations, since Rust may sometimes\nassume more fields are borrowed than they actually are."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "bba8893d-f59f-492a-b639-ea04a5c8093b",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Point {\n  x: i32,\n  y: i32,\n}\n\nfn main() {\n  let mut a = Point { x: 1, y: 2 };\n  a.x += 1;\n  let b = Point { y: 1, ..a };\n  a.x += 1;\n  println!(\"{}\", b.x);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "2"
                },
                "context": " \nThe `..a` syntax copies each field of `a` into `b` (except `y`), so the second `a.x += 1` has no effect on `b`.\n"
              },
              {
                "id": "77ef68d6-ee7f-4642-8817-73b846c46b2b",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Point {\n  x: i32,\n  y: i32,\n}\n\nfn main() {\n  let mut p = Point { x: 1, y: 2 };\n  let x = &mut p.x;\n  let y = &mut p.y;\n  *x += 1;\n  *y += 1;\n  println!(\"{} {}\", p.x, p.y);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "2 3"
                },
                "context": " \nRust understands that `.x` refers to a different object than `.y`, so it is valid to take simultaneous mutable references\nto both fields.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\nfor the error above\nafter running update-rustc.sh:\npbcopy < listings/ch05-using-structs-to-structure-related-data/no-listing-02-reference-in-struct/output.txt\npaste above\nadd `> ` before every line -->"
        },
        {
          "kind": "text",
          "content": "[tuples]: ch03-02-data-types.html#the-tuple-type\n[move]: ch04-01-what-is-ownership.html\n[copy]: ch04-03-fixing-ownership-errors.html#fixing-an-unsafe-program-copying-vs-moving-out-of-a-collection\n[differentfields]: ch04-03-fixing-ownership-errors.html#fixing-a-safe-program-mutating-different-tuple-fields"
        }
      ]
    },
    {
      "title": "An Example Program Using Structs",
      "file": "ch05-02-example-structs.md",
      "elements": [
        {
          "kind": "text",
          "content": "To understand when we might want to use structs, let’s write a program that\ncalculates the area of a rectangle. We’ll start by using single variables, and\nthen refactor the program until we’re using structs instead."
        },
        {
          "kind": "text",
          "content": "Let’s make a new binary project with Cargo called _rectangles_ that will take\nthe width and height of a rectangle specified in pixels and calculate the area\nof the rectangle. Listing 5-8 shows a short program with one way of doing\nexactly that in our project’s _src/main.rs_."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-8\" file-name=\"src/main.rs\" caption=\"Calculating the area of a rectangle specified by separate width and height variables\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Now, run this program using `cargo run`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This code succeeds in figuring out the area of the rectangle by calling the\n`area` function with each dimension, but we can do more to make this code clear\nand readable."
        },
        {
          "kind": "text",
          "content": "The issue with this code is evident in the signature of `area`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The `area` function is supposed to calculate the area of one rectangle, but the\nfunction we wrote has two parameters, and it’s not clear anywhere in our\nprogram that the parameters are related. It would be more readable and more\nmanageable to group width and height together. We’ve already discussed one way\nwe might do that in [“The Tuple Type”][the-tuple-type]<!-- ignore --> section\nof Chapter 3: by using tuples."
        },
        {
          "kind": "text",
          "content": "### Refactoring with Tuples"
        },
        {
          "kind": "text",
          "content": "Listing 5-9 shows another version of our program that uses tuples."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-9\" file-name=\"src/main.rs\" caption=\"Specifying the width and height of the rectangle with a tuple\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-09/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In one way, this program is better. Tuples let us add a bit of structure, and\nwe’re now passing just one argument. But in another way, this version is less\nclear: tuples don’t name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious."
        },
        {
          "kind": "text",
          "content": "Mixing up the width and height wouldn’t matter for the area calculation, but if\nwe want to draw the rectangle on the screen, it would matter! We would have to\nkeep in mind that `width` is the tuple index `0` and `height` is the tuple\nindex `1`. This would be even harder for someone else to figure out and keep in\nmind if they were to use our code. Because we haven’t conveyed the meaning of\nour data in our code, it’s now easier to introduce errors."
        },
        {
          "kind": "text",
          "content": "### Refactoring with Structs: Adding More Meaning"
        },
        {
          "kind": "text",
          "content": "We use structs to add meaning by labeling the data. We can transform the tuple\nwe’re using into a struct with a name for the whole as well as names for the\nparts, as shown in Listing 5-10."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-10\" file-name=\"src/main.rs\" caption=\"Defining a `Rectangle` struct\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-10/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we’ve defined a struct and named it `Rectangle`. Inside the curly\nbrackets, we defined the fields as `width` and `height`, both of which have\ntype `u32`. Then, in `main`, we created a particular instance of `Rectangle`\nthat has a width of `30` and a height of `50`."
        },
        {
          "kind": "text",
          "content": "Our `area` function is now defined with one parameter, which we’ve named\n`rectangle`, whose type is an immutable borrow of a struct `Rectangle`\ninstance. As mentioned in Chapter 4, we want to borrow the struct rather than\ntake ownership of it. This way, `main` retains its ownership and can continue\nusing `rect1`, which is the reason we use the `&` in the function signature and\nwhere we call the function."
        },
        {
          "kind": "text",
          "content": "The `area` function accesses the `width` and `height` fields of the `Rectangle`\ninstance (note that accessing fields of a borrowed struct instance does not\nmove the field values, which is why you often see borrows of structs). Our\nfunction signature for `area` now says exactly what we mean: calculate the area\nof `Rectangle`, using its `width` and `height` fields. This conveys that the\nwidth and height are related to each other, and it gives descriptive names to\nthe values rather than using the tuple index values of `0` and `1`. This is a\nwin for clarity."
        },
        {
          "kind": "text",
          "content": "### Adding Useful Functionality with Derived Traits"
        },
        {
          "kind": "text",
          "content": "It’d be useful to be able to print an instance of `Rectangle` while we’re\ndebugging our program and see the values for all its fields. Listing 5-11 tries\nusing the [`println!` macro][println]<!-- ignore --> as we have used in\nprevious chapters. This won’t work, however."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-11\" file-name=\"src/main.rs\" caption=\"Attempting to print a `Rectangle` instance\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we compile this code, we get an error with this core message:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:3}}"
          }
        },
        {
          "kind": "text",
          "content": "The `println!` macro can do many kinds of formatting, and by default, the curly\nbrackets tell `println!` to use formatting known as `Display`: output intended\nfor direct end user consumption. The primitive types we’ve seen so far\nimplement `Display` by default because there’s only one way you’d want to show\na `1` or any other primitive type to a user. But with structs, the way\n`println!` should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn’t try to guess what we want, and structs don’t have a provided\nimplementation of `Display` to use with `println!` and the `{}` placeholder."
        },
        {
          "kind": "text",
          "content": "If we continue reading the errors, we’ll find this helpful note:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:9:10}}"
          }
        },
        {
          "kind": "text",
          "content": "Let’s try it! The `println!` macro call will now look like `println!(\"rect1 is\n{rect1:?}\");`. Putting the specifier `:?` inside the curly brackets tells\n`println!` we want to use an output format called `Debug`. The `Debug` trait\nenables us to print our struct in a way that is useful for developers so we can\nsee its value while we’re debugging our code."
        },
        {
          "kind": "text",
          "content": "Compile the code with this change. Drat! We still get an error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:3}}"
          }
        },
        {
          "kind": "text",
          "content": "But again, the compiler gives us a helpful note:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:9:10}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust _does_ include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute `#[derive(Debug)]` just before the\nstruct definition, as shown in Listing 5-12."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-12\" file-name=\"src/main.rs\" caption=\"Adding the attribute to derive the `Debug` trait and printing the `Rectangle` instance using debug formatting\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Now when we run the program, we won’t get any errors, and we’ll see the\nfollowing output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Nice! It’s not the prettiest output, but it shows the values of all the fields\nfor this instance, which would definitely help during debugging. When we have\nlarger structs, it’s useful to have output that’s a bit easier to read; in\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string. In\nthis example, using the `{:#?}` style will output the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-02-pretty-debug/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Another way to print out a value using the `Debug` format is to use the [`dbg!`\nmacro][dbg]<!-- ignore -->, which takes ownership of an expression (as opposed\nto `println!`, which takes a reference), prints the file and line number of\nwhere that `dbg!` macro call occurs in your code along with the resultant value\nof that expression, and returns ownership of the value."
        },
        {
          "kind": "text",
          "content": "> Note: Calling the `dbg!` macro prints to the standard error console stream\n> (`stderr`), as opposed to `println!`, which prints to the standard output\n> console stream (`stdout`). We’ll talk more about `stderr` and `stdout` in the\n> [“Writing Error Messages to Standard Error Instead of Standard Output”\n> section in Chapter 12][err]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "Here’s an example where we’re interested in the value that gets assigned to the\n`width` field, as well as the value of the whole struct in `rect1`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "We can put `dbg!` around the expression `30 * scale` and, because `dbg!`\nreturns ownership of the expression’s value, the `width` field will get the\nsame value as if we didn’t have the `dbg!` call there. We don’t want `dbg!` to\ntake ownership of `rect1`, so we use a reference to `rect1` in the next call.\nHere’s what the output of this example looks like:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We can see the first bit of output came from _src/main.rs_ line 10 where we’re\ndebugging the expression `30 * scale`, and its resultant value is `60` (the\n`Debug` formatting implemented for integers is to print only their value). The\n`dbg!` call on line 14 of _src/main.rs_ outputs the value of `&rect1`, which is\nthe `Rectangle` struct. This output uses the pretty `Debug` formatting of the\n`Rectangle` type. The `dbg!` macro can be really helpful when you’re trying to\nfigure out what your code is doing!"
        },
        {
          "kind": "text",
          "content": "In addition to the `Debug` trait, Rust has provided a number of traits for us\nto use with the `derive` attribute that can add useful behavior to our custom\ntypes. Those traits and their behaviors are listed in [Appendix C][app-c]<!--\nignore -->. We’ll cover how to implement these traits with custom behavior as\nwell as how to create your own traits in Chapter 10. There are also many\nattributes other than `derive`; for more information, see [the “Attributes”\nsection of the Rust Reference][attributes]."
        },
        {
          "kind": "text",
          "content": "Our `area` function is very specific: it only computes the area of rectangles.\nIt would be helpful to tie this behavior more closely to our `Rectangle` struct\nbecause it won’t work with any other type. Let’s look at how we can continue to\nrefactor this code by turning the `area` function into an `area` _method_\ndefined on our `Rectangle` type."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "f0ec64fa-262f-4819-8379-acad7aaf8be2",
                "type": "Tracing",
                "prompt": {
                  "program": "#[derive(Debug)]\nstruct Rectangle {\n  width: u32,\n  height: u32,\n}\n\nfn main() {\n  let rect1 = Rectangle {\n    width: 30,\n    height: 50,\n  };\n\n  let a = area(rect1);\n  println!(\"{} * {} = {}\", rect1.width, rect1.height, a);\n}\n\nfn area(rectangle: Rectangle) -> u32 {\n  rectangle.width * rectangle.height\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 14
                },
                "context": " \nThe `area` function takes ownership of its argument `rectangle`. Calling `area(rect1)` therefore\nmoves `rect1`, meaning it cannot be used on the next line.\n"
              },
              {
                "id": "9ce4156e-4112-4101-a2c7-51758ceca639",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which statement best describes a difference between the `Display` and `Debug` traits?",
                  "distractors": [
                    "`Display` is for printing values to the console, while `Debug` is for viewing values in a debugger",
                    "`Display` cannot be implemented for structs, while `Debug` can be implemented for structs",
                    "There is no difference, `Display` and `Debug` are aliases for the same trait."
                  ]
                },
                "answer": {
                  "answer": "`Display` is for presenting values to an end-user, while `Debug` is for developers' internal use"
                }
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[the-tuple-type]: ch03-02-data-types.html#the-tuple-type\n[app-c]: appendix-03-derivable-traits.md\n[println]: https://doc.rust-lang.org/std/macro.println.html\n[dbg]: https://doc.rust-lang.org/std/macro.dbg.html\n[err]: ch12-06-writing-to-stderr-instead-of-stdout.html\n[attributes]: https://doc.rust-lang.org/reference/attributes.html"
        }
      ]
    },
    {
      "title": "Method Syntax",
      "file": "ch05-03-method-syntax.md",
      "elements": [
        {
          "kind": "text",
          "content": "_Methods_ are similar to functions: we declare them with the `fn` keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat’s run when the method is called from somewhere else. Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in [Chapter 6][enums]<!-- ignore --> and [Chapter\n18][trait-objects]<!-- ignore -->, respectively), and their first parameter is\nalways `self`, which represents the instance of the struct the method is being\ncalled on."
        },
        {
          "kind": "text",
          "content": "### Defining Methods"
        },
        {
          "kind": "text",
          "content": "Let’s change the `area` function that has a `Rectangle` instance as a parameter\nand instead make an `area` method defined on the `Rectangle` struct, as shown\nin Listing 5-13."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-13\" file-name=\"src/main.rs\" caption=\"Defining an `area` method on the `Rectangle` struct\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-13/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To define the function within the context of `Rectangle`, we start an `impl`\n(implementation) block for `Rectangle`. Everything within this `impl` block\nwill be associated with the `Rectangle` type. Then we move the `area` function\nwithin the `impl` curly brackets and change the first (and in this case, only)\nparameter to be `self` in the signature and everywhere within the body. In\n`main`, where we called the `area` function and passed `rect1` as an argument,\nwe can instead use _method syntax_ to call the `area` method on our `Rectangle`\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments."
        },
        {
          "kind": "text",
          "content": "In the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`.\nThe `&self` is actually short for `self: &Self`. Within an `impl` block, the\ntype `Self` is an alias for the type that the `impl` block is for. Methods must\nhave a parameter named `self` of type `Self` for their first parameter, so Rust\nlets you abbreviate this with only the name `self` in the first parameter spot.\nNote that we still need to use the `&` in front of the `self` shorthand to\nindicate that this method borrows the `Self` instance, just as we did in\n`rectangle: &Rectangle`. Methods can take ownership of `self`, borrow `self`\nimmutably, as we’ve done here, or borrow `self` mutably, just as they can any\nother parameter."
        },
        {
          "kind": "text",
          "content": "We chose `&self` here for the same reason we used `&Rectangle` in the function\nversion: we don’t want to take ownership, and we just want to read the data in\nthe struct, not write to it. If we wanted to change the instance that we’ve\ncalled the method on as part of what the method does, we’d use `&mut self` as\nthe first parameter. Having a method that takes ownership of the instance by\nusing just `self` as the first parameter is rare; this technique is usually\nused when the method transforms `self` into something else and you want to\nprevent the caller from using the original instance after the transformation."
        },
        {
          "kind": "text",
          "content": "The main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of `self` in every\nmethod’s signature, is for organization. We’ve put all the things we can do\nwith an instance of a type in one `impl` block rather than making future users\nof our code search for capabilities of `Rectangle` in various places in the\nlibrary we provide."
        },
        {
          "kind": "text",
          "content": "Note that we can choose to give a method the same name as one of the struct’s\nfields. For example, we can define a method on `Rectangle` that is also named\n`width`:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-06-method-field-interaction/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we’re choosing to make the `width` method return `true` if the value in\nthe instance’s `width` field is greater than `0` and `false` if the value is\n`0`: we can use a field within a method of the same name for any purpose. In\n`main`, when we follow `rect1.width` with parentheses, Rust knows we mean the\nmethod `width`. When we don’t use parentheses, Rust knows we mean the field\n`width`."
        },
        {
          "kind": "text",
          "content": "Often, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called _getters_, and Rust does not implement them automatically for struct\nfields as some other languages do. Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type’s public API. We will discuss what public and private\nare and how to designate a field or method as public or private in [Chapter\n7][public]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "### Methods with More Parameters"
        },
        {
          "kind": "text",
          "content": "Let’s practice using methods by implementing a second method on the `Rectangle`\nstruct. This time we want an instance of `Rectangle` to take another instance\nof `Rectangle` and return `true` if the second `Rectangle` can fit completely\nwithin `self` (the first `Rectangle`); otherwise, it should return `false`.\nThat is, once we’ve defined the `can_hold` method, we want to be able to write\nthe program shown in Listing 5-14."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-14\" file-name=\"src/main.rs\" caption=\"Using the as-yet-unwritten `can_hold` method\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-14/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The expected output would look like the following because both dimensions of\n`rect2` are smaller than the dimensions of `rect1`, but `rect3` is wider than\n`rect1`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Can rect1 hold rect2? true\nCan rect1 hold rect3? false"
          }
        },
        {
          "kind": "text",
          "content": "We know we want to define a method, so it will be within the `impl Rectangle`\nblock. The method name will be `can_hold`, and it will take an immutable borrow\nof another `Rectangle` as a parameter. We can tell what the type of the\nparameter will be by looking at the code that calls the method:\n`rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to\n`rect2`, an instance of `Rectangle`. This makes sense because we only need to\nread `rect2` (rather than write, which would mean we’d need a mutable borrow),\nand we want `main` to retain ownership of `rect2` so we can use it again after\ncalling the `can_hold` method. The return value of `can_hold` will be a\nBoolean, and the implementation will check whether the width and height of\n`self` are greater than the width and height of the other `Rectangle`,\nrespectively. Let’s add the new `can_hold` method to the `impl` block from\nListing 5-13, shown in Listing 5-15."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-15\" file-name=\"src/main.rs\" caption=\"Implementing the `can_hold` method on `Rectangle` that takes another `Rectangle` instance as a parameter\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-15/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we run this code with the `main` function in Listing 5-14, we’ll get our\ndesired output. Methods can take multiple parameters that we add to the\nsignature after the `self` parameter, and those parameters work just like\nparameters in functions."
        },
        {
          "kind": "text",
          "content": "### Associated Functions"
        },
        {
          "kind": "text",
          "content": "All functions defined within an `impl` block are called _associated functions_\nbecause they’re associated with the type named after the `impl`. We can define\nassociated functions as functions that don’t have `self` as their first parameter (and thus\nare not methods) because they don’t need an instance of the type to work with.\nWe’ve already used one function like this: the `String::from` function that’s\ndefined on the `String` type."
        },
        {
          "kind": "text",
          "content": "Associated functions that aren’t methods are often used for constructors that\nwill return a new instance of the struct. These are often called `new`, but\n`new` isn’t a special name and isn’t built into the language. For example, we\ncould choose to provide an associated function named `square` that would have\none dimension parameter and use that as both width and height, thus making it\neasier to create a square `Rectangle` rather than having to specify the same\nvalue twice:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-03-associated-functions/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The `Self` keywords in the return type and in the body of the function are\naliases for the type that appears after the `impl` keyword, which in this case\nis `Rectangle`."
        },
        {
          "kind": "text",
          "content": "To call this associated function, we use the `::` syntax with the struct name;\n`let sq = Rectangle::square(3);` is an example. This function is namespaced by\nthe struct: the `::` syntax is used for both associated functions and\nnamespaces created by modules. We’ll discuss modules in [Chapter\n7][modules]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "### Multiple `impl` Blocks"
        },
        {
          "kind": "text",
          "content": "Each struct is allowed to have multiple `impl` blocks. For example, Listing\n5-15 is equivalent to the code shown in Listing 5-16, which has each method in\nits own `impl` block."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"5-16\" caption=\"Rewriting Listing 5-15 using multiple `impl` blocks\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-16/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "There’s no reason to separate these methods into multiple `impl` blocks here,\nbut this is valid syntax. We’ll see a case in which multiple `impl` blocks are\nuseful in Chapter 10, where we discuss generic types and traits."
        },
        {
          "kind": "text",
          "content": "### Method Calls are Syntactic Sugar for Function Calls"
        },
        {
          "kind": "text",
          "content": "Using the concepts we've discussed so far, we can now see how method calls are syntactic sugar for function calls. For example, let's say we have a rectangle struct with an `area` method and a `set_width` method:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    fn set_width(&mut self, width: u32) {\n        self.width = width;\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "And let's say we have a rectangle `r`. Then the method calls `r.area()` and `r.set_width(2)` are equivalent to this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \n# impl Rectangle {\n#     fn area(&self) -> u32 {\n#        self.width * self.height\n#      }\n# \n#     fn set_width(&mut self, width: u32) {\n#         self.width = width;\n#     }\n# }\n# \n# fn main() {\n    let mut r = Rectangle { \n        width: 1,\n        height: 2\n    };\n    let area1 = r.area();\n    let area2 = Rectangle::area(&r);\n    assert_eq!(area1, area2);\n\n    r.set_width(2);\n    Rectangle::set_width(&mut r, 2);\n# }"
          }
        },
        {
          "kind": "text",
          "content": "The method call `r.area()` becomes `Rectangle::area(&r)`. The function name is the associated function `Rectangle::area`. The function argument is the `&self` parameter. Rust automatically inserts the borrowing operator `&`."
        },
        {
          "kind": "text",
          "content": "> *Note:* if you are familiar with C or C++, you are used to two different syntaxes for method calls: `r.area()` and `r->area()`. Rust does not have an equivalent to the arrow operator `->`. Rust will automatically reference and dereference the method receiver when you use the dot operator."
        },
        {
          "kind": "text",
          "content": "The method call `r.set_width(2)` similarly becomes `Rectangle::set_width(&mut r, 2)`. This method expects `&mut self`, so the first argument is a mutable borrow `&mut r`. The second argument is exactly the same, the number 2."
        },
        {
          "kind": "text",
          "content": "As we described in Chapter 4.2 [\"Dereferencing a Pointer Accesses Its Data\"](ch04-02-references-and-borrowing.html#dereferencing-a-pointer-accesses-its-data), Rust will insert as many references and dereferences as needed to make the types match up for the `self` parameter. For example, here are two equivalent calls to `area` for a mutable reference to a boxed rectangle:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "# struct Rectangle {\n#     width: u32,\n#     height: u32,\n# }\n# \n# impl Rectangle {\n#     fn area(&self) -> u32 {\n#        self.width * self.height\n#      }\n# \n#     fn set_width(&mut self, width: u32) {\n#         self.width = width;\n#     }\n# }\n# fn main() {\n    let r = &mut Box::new(Rectangle { \n        width: 1,\n        height: 2\n    });\n    let area1 = r.area();\n    let area2 = Rectangle::area(&**r);\n    assert_eq!(area1, area2);\n# }"
          }
        },
        {
          "kind": "text",
          "content": "Rust will add two dereferences (once for the mutable reference, once for the box) and then one immutable borrow because `area` expects `&Rectangle`. Note that this is also a situation where a mutable reference is \"downgraded\" into a shared reference, like we discussed in [Chapter 4.2](ch04-02-references-and-borrowing.html#mutable-references-provide-unique-and-non-owning-access-to-data). Conversely, you would not be allowed to call `set_width` on a value of type `&Rectangle` or `&Box<Rectangle>`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "ae4e06f6-5fdc-43d9-929c-85eba3559a82",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "What is the keyword for constructor functions in Rust?",
                  "distractors": [
                    "`constructor`",
                    "`new`",
                    "The name of the type being constructed"
                  ],
                  "answerIndex": 3
                },
                "answer": {
                  "answer": "None of the above"
                },
                "context": "Rust does not have a keyword for constructor functions. The idiomatic way to define a constructor function is to make an associated function called `new`, \nbut that is not enforced by the language.\n"
              },
              {
                "id": "a506f97d-2b51-4517-bc4d-f69764093c71",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Point(i32, i32);\nfn main() {\n  let p = Point(1, 2);\n\n  impl p {\n    fn x(&self) -> i32 { self.0 }\n  }\n  \n  println!(\"{}\", p.x());\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 5
                },
                "context": " \nMethods can only be implemented for types (e.g. `impl Point`), not variables (like `p`).\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Methods and Ownership"
        },
        {
          "kind": "text",
          "content": "Like we discussed in Chapter 4.2 [\"References and Borrowing\"](ch04-02-references-and-borrowing.html), methods must be called on structs that have the necessary permissions. As a running example, we will use these three methods that take `&self`, `&mut self`, and `self`, respectively."
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "impl Rectangle {    \n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    fn set_width(&mut self, width: u32) {\n        self.width = width;\n    }\n\n    fn max(self, other: Rectangle) -> Rectangle {\n        Rectangle { \n            width: self.width.max(other.width),\n            height: self.height.max(other.height),\n        }\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "#### Reads and Writes with `&self` and `&mut self`"
        },
        {
          "kind": "text",
          "content": "If we make an owned rectangle with `let rect = Rectangle { ... }`, then `rect` has @Perm{read} and @Perm{own} permissions. With those permissions, it is permissible to call the `area` and `max` methods:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper"
            ],
            "code": "#struct Rectangle {\n#    width: u32,\n#    height: u32,\n#}\n#impl Rectangle {    \n#  fn area(&self) -> u32 {\n#    self.width * self.height\n#  }\n#\n#  fn set_width(&mut self, width: u32) {\n#    self.width = width;\n#  }\n#\n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n#}\n#fn main() {\nlet rect = Rectangle {\n    width: 0,\n    height: 0\n};`(focus,rxpaths:^rect$)`\nprintln!(\"{}\", rect.area());`{}`\n\nlet other_rect = Rectangle { width: 1, height: 1 };\nlet max_rect = rect.max(other_rect);`{}`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "However, if we try to call `set_width`, we are missing the @Perm{write} permission:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "shouldFail"
            ],
            "code": "#struct Rectangle {\n#    width: u32,\n#    height: u32,\n#}\n#impl Rectangle {    \n#  fn area(&self) -> u32 {\n#    self.width * self.height\n#  }\n#\n#  fn set_width(&mut self, width: u32) {\n#    self.width = width;\n#  }\n#\n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n#}\n#fn main() {\nlet rect = Rectangle {\n    width: 0,\n    height: 0\n};\nrect.set_width(0);`{}`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Rust will reject this program with the corresponding error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0596]: cannot borrow `rect` as mutable, as it is not declared as mutable\n  --> test.rs:28:1\n   |\n24 | let rect = Rectangle {\n   |     ---- help: consider changing this to be mutable: `mut rect`\n...\n28 | rect.set_width(0);\n   | ^^^^^^^^^^^^^^^^^ cannot borrow as mutable"
          }
        },
        {
          "kind": "text",
          "content": "We will get a similar error if we try to call `set_width` on an immutable reference to a `Rectangle`, even if the underlying rectangle is mutable:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper",
              "shouldFail"
            ],
            "code": "#struct Rectangle {\n#    width: u32,\n#    height: u32,\n#}\n#impl Rectangle {    \n#  fn area(&self) -> u32 {\n#    self.width * self.height\n#  }\n#\n#  fn set_width(&mut self, width: u32) {\n#    self.width = width;\n#  }\n#\n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n#}\n#fn main() {\n// Added the mut keyword to the let-binding\nlet mut rect = Rectangle {\n    width: 0,\n    height: 0\n};`(focus,rxpaths:^rect$)`\nrect.set_width(1);`{}`     // this is now ok\n\nlet rect_ref = &rect;`(focus,rxpaths:^\\*rect_ref$)`\nrect_ref.set_width(2);`{}` // but this is still not ok\n#}"
          }
        },
        {
          "kind": "text",
          "content": "#### Moves with `self`"
        },
        {
          "kind": "text",
          "content": "Calling a method that expects `self` will move the input struct (unless the struct implements `Copy`). For example, we cannot use a `Rectangle` after passing it to `max`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper",
              "shouldFail"
            ],
            "code": "#struct Rectangle {\n#    width: u32,\n#    height: u32,\n#}\n#impl Rectangle {    \n#  fn area(&self) -> u32 {\n#    self.width * self.height\n#  }\n#\n#  fn set_width(&mut self, width: u32) {\n#    self.width = width;\n#  }\n#\n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n#}\n#fn main() {\nlet rect = Rectangle {\n    width: 0,\n    height: 0\n};`(focus,rxpaths:^rect$)`\nlet other_rect = Rectangle { \n    width: 1, \n    height: 1 \n};\nlet max_rect = rect.max(other_rect);`(focus,rxpaths:^rect$)`\nprintln!(\"{}\", rect.area());`{}`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Once we call `rect.max(..)`, we move `rect` and so lose all permissions on it. Trying to compile this program would give us the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0382]: borrow of moved value: `rect`\n  --> test.rs:33:16\n   |\n24 | let rect = Rectangle {\n   |     ---- move occurs because `rect` has type `Rectangle`, which does not implement the `Copy` trait\n...\n32 | let max_rect = rect.max(other_rect);\n   |                     --------------- `rect` moved due to this method call\n33 | println!(\"{}\", rect.area());\n   |                ^^^^^^^^^^^ value borrowed here after move"
          }
        },
        {
          "kind": "text",
          "content": "A similar situation arises if we try to call a `self` method on a reference. For instance, say we tried to make a method `set_to_max` that assigns `self` to the output of `self.max(..)`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper",
              "shouldFail"
            ],
            "code": "#struct Rectangle {\n#    width: u32,\n#    height: u32,\n#}\nimpl Rectangle {    \n#  fn area(&self) -> u32 {\n#    self.width * self.height\n#  }\n#\n#  fn set_width(&mut self, width: u32) {\n#    self.width = width;\n#  }\n#\n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n    fn set_to_max(&mut self, other: Rectangle) {`(focus,rxpaths:^\\*self$)`\n        *self = self.max(other);`{}`\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "Then we can see that `self` is missing @Perm{own} permissions in the operation `self.max(..)`. Rust therefore rejects this program with the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0507]: cannot move out of `*self` which is behind a mutable reference\n  --> test.rs:23:17\n   |\n23 |         *self = self.max(other);\n   |                 ^^^^^----------\n   |                 |    |\n   |                 |    `*self` moved due to this method call\n   |                 move occurs because `*self` has type `Rectangle`, which does not implement the `Copy` trait\n   |"
          }
        },
        {
          "kind": "text",
          "content": "This is the same kind of error we discussed in Chapter 4.3 [\"Copying vs. Moving Out of a Collection\"](ch04-03-fixing-ownership-errors.html#fixing-an-unsafe-program-copying-vs-moving-out-of-a-collection)."
        },
        {
          "kind": "text",
          "content": "#### Good Moves and Bad Moves"
        },
        {
          "kind": "text",
          "content": "You might wonder: why does it matter if we move out of `*self`? In fact, for the case of `Rectangle`, it actually is safe to move out of `*self`, even though Rust doesn't let you do it. For example, if we simulate a program that calls the rejected `set_to_max`, you can see how nothing unsafe occurs:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "#struct Rectangle {\n#    width: u32,\n#    height: u32,\n#}\nimpl Rectangle {    \n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n    fn set_to_max(&mut self, other: Rectangle) {\n        let max = self.max(other);`[]`\n        *self = max;\n    }\n}\n\nfn main() {\n    let mut rect = Rectangle { width: 0, height: 1 };\n    let other_rect = Rectangle { width: 1, height: 0 };`[]`\n    rect.set_to_max(other_rect);`[]`\n}"
          }
        },
        {
          "kind": "text",
          "content": "The reason it's safe to move out of `*self` is because `Rectangle` does not own any heap data.\nIn fact, we can actually get Rust to compile `set_to_max` by simply adding `#[derive(Copy, Clone)]` to the definition of `Rectangle`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "boundaries",
              "stepper"
            ],
            "code": "\\#[derive(Copy, Clone)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {    \n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h\n#    }\n#  }\n    fn set_to_max(&mut self, other: Rectangle) {`(focus,rxpaths:^\\*self$)`\n        *self = self.max(other);`{}`\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "Notice that unlike before, `self.max(other)` no longer requires the @Perm{own} permission on `*self` or `other`. Remember that `self.max(other)` desugars to `Rectangle::max(*self, other)`. The dereference `*self` does not require ownership over `*self` if `Rectangle` is copyable."
        },
        {
          "kind": "text",
          "content": "You might wonder: why doesn't Rust automatically derive `Copy` for `Rectangle`? Rust does not auto-derive `Copy` for stability across API changes. Imagine that the author of the `Rectangle` type decided to add a `name: String` field. Then all client code that relies on `Rectangle` being `Copy` would suddenly get rejected by the compiler. To avoid that issue, API authors must explicitly add `#[derive(Copy)]` to indicate that they expect their struct to always be `Copy`."
        },
        {
          "kind": "text",
          "content": "To better understand the issue, let's run a simulation. Say we added `name: String` to `Rectangle`. What would happen if Rust allowed `set_to_max` to compile?"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "shouldFail",
              "horizontal"
            ],
            "code": "struct Rectangle {\n    width: u32,\n    height: u32,\n    name: String,\n}\n\nimpl Rectangle {    \n#  fn max(self, other: Self) -> Self {\n#    let w = self.width.max(other.width);\n#    let h = self.height.max(other.height);\n#    Rectangle { \n#      width: w,\n#      height: h,\n#      name: String::from(\"max\")\n#    }\n#  }\n    fn set_to_max(&mut self, other: Rectangle) {\n        `[]`let max = self.max(other);`[]`\n        drop(*self);`[]` // This is usually implicit,\n                         // but added here for clarity.\n        *self = max;\n    }\n}\n\nfn main() {\n    let mut r1 = Rectangle { \n        width: 9, \n        height: 9, \n        name: String::from(\"r1\") \n    };\n    let r2 = Rectangle {\n        width: 16,\n        height: 16,\n        name: String::from(\"r2\")\n    };\n    r1.set_to_max(r2);\n}"
          }
        },
        {
          "kind": "text",
          "content": "In this program, we call `set_to_max` with two rectangles `r1` and `r2`. `self` is a mutable reference to `r1` and `other` is a move of `r2`. After calling `self.max(other)`, the `max` method consumes ownership of both rectangles. When `max` returns, Rust deallocates both strings \"r1\" and \"r2\" in the heap. Notice the problem: at the location L2, `*self` is supposed to be readable and writable. However, `(*self).name` (actually `r1.name`) has been deallocated."
        },
        {
          "kind": "text",
          "content": "Therefore when we do `*self = max`, we encounter undefined behavior. When we overwrite `*self`, Rust will implicitly drop the data previously in `*self`. To make that behavior explicit, we have added `drop(*self)`. After calling `drop(*self)`, Rust attempts to free `(*self).name` a second time. That action is a double-free, which is undefined behavior."
        },
        {
          "kind": "text",
          "content": "So remember: when you see an error like \"cannot move out of `*self`\", that's usually because you're trying to call a `self` method on a reference like `&self` or `&mut self`. Rust is protecting you from a double-free."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Structs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear. In `impl` blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have."
        },
        {
          "kind": "text",
          "content": "But structs aren’t the only way you can create custom types: let’s turn to\nRust’s enum feature to add another tool to your toolbox."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "97781ca8-ad58-449c-9769-e20b9d2e42a6",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you have a variable `v` of type `&mut Vec<i32>`, and you want to call the `len` method with the\nfollowing signature:\n\n```\nimpl Vec<i32> {\n  fn len(&self) -> usize {\n    /* ... */\n  }\n}\n```\n\nIf you try to compile the expression `v.len()`, which of the following statements best describes what happens?\n",
                  "distractors": [
                    "It does not compile, because `&mut Vec<i32>` is not the same type as `&Vec<i32>`",
                    "It does not compile, `v` is not explicitly dereferenced",
                    "It compiles, because `&self` can take any kind of reference"
                  ]
                },
                "answer": {
                  "answer": "It compiles, because the `&mut` reference is implicitly reborrowed as an `&` reference"
                },
                "context": "The expression `v.len()` desugars to `Vec::len(&*v)`, which is a valid re-borrow of `v`, so this expression compiles.\nYou cannot, however, pass `v` directly to `Vec::len`, since `&self` specifically refers to immutable references.\n"
              },
              {
                "id": "35a75881-eb08-486c-92b3-413ab512138a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider these two methods that increment a field of a struct. Which style would be more idiomatic for Rust?\n\n```\nstruct Point(i32, i32);\nimpl Point {\n  fn incr_v1(mut self)  { self.0 += 1; }\n  fn incr_v2(&mut self) { self.0 += 1; }\n}\n```\n",
                  "distractors": [
                    "`incr_v1`",
                    "Both are idiomatic",
                    "Neither are idiomatic"
                  ],
                  "answerIndex": 1
                },
                "answer": {
                  "answer": "`incr_v2`"
                },
                "context": "The `incr_v1` method is not idiomatic, because it consumes ownership of the `Point`. This means after calling `p.incr_v1()`, `p` \nwould be unusable, which is probably not intended for this method.\n"
              },
              {
                "id": "03a0a1ec-8ce6-40f2-b8b7-6dd5402aeb7d",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Point(i32, i32);\nimpl Point {\n  fn incr_x(&mut self) {\n    self.0 += 1;\n  }\n}\n\nfn main() {\n  let mut p = Point(0, 0);\n  p.incr_x();\n  println!(\"{}\", p.0);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "1"
                },
                "context": " \nRemember that `.0` is valid for tuple structs like `Point`.\n"
              },
              {
                "id": "be7be598-8a31-4c1a-9171-4ff90f512430",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Point {\n  x: i32,\n  y: i32\n}\n\nimpl Point {\n  fn get_x(&mut self) -> &mut i32 {\n    &mut self.x\n  }\n}\n\nfn main() {\n  let mut p = Point { x: 1, y: 2 };\n  let x = p.get_x();\n  *x += 1;\n  println!(\"{} {}\", *x, p.y);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 16
                },
                "context": " \nBecause `get_x` mutably borrows all of `p`, a program cannot use `p` in any way until `x` is no longer used. \nTherefore reading `x` and `p.y` in the same line is an ownership error.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[enums]: ch06-00-enums.html\n[trait-objects]: ch18-02-trait-objects.md\n[public]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html"
        }
      ]
    },
    {
      "title": "Enums and Pattern Matching",
      "file": "ch06-00-enums.md",
      "elements": [
        {
          "kind": "text",
          "content": "In this chapter, we’ll look at _enumerations_, also referred to as _enums_.\nEnums allow you to define a type by enumerating its possible _variants_. First\nwe’ll define and use an enum to show how an enum can encode meaning along with\ndata. Next, we’ll explore a particularly useful enum, called `Option`, which\nexpresses that a value can be either something or nothing. Then we’ll look at\nhow pattern matching in the `match` expression makes it easy to run different\ncode for different values of an enum. Finally, we’ll cover how the `if let`\nconstruct is another convenient and concise idiom available to handle enums in\nyour code."
        }
      ]
    },
    {
      "title": "Defining an Enum",
      "file": "ch06-01-defining-an-enum.md",
      "elements": [
        {
          "kind": "text",
          "content": "Where structs give you a way of grouping together related fields and data, like\na `Rectangle` with its `width` and `height`, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n`Rectangle` is one of a set of possible shapes that also includes `Circle` and\n`Triangle`. To do this, Rust allows us to encode these possibilities as an enum."
        },
        {
          "kind": "text",
          "content": "Let’s look at a situation we might want to express in code and see why enums\nare useful and more appropriate than structs in this case. Say we need to work\nwith IP addresses. Currently, two major standards are used for IP addresses:\nversion four and version six. Because these are the only possibilities for an\nIP address that our program will come across, we can _enumerate_ all possible\nvariants, which is where enumeration gets its name."
        },
        {
          "kind": "text",
          "content": "Any IP address can be either a version four or a version six address, but not\nboth at the same time. That property of IP addresses makes the enum data\nstructure appropriate because an enum value can only be one of its variants.\nBoth version four and version six addresses are still fundamentally IP\naddresses, so they should be treated as the same type when the code is handling\nsituations that apply to any kind of IP address."
        },
        {
          "kind": "text",
          "content": "We can express this concept in code by defining an `IpAddrKind` enumeration and\nlisting the possible kinds an IP address can be, `V4` and `V6`. These are the\nvariants of the enum:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:def}}"
          }
        },
        {
          "kind": "text",
          "content": "`IpAddrKind` is now a custom data type that we can use elsewhere in our code."
        },
        {
          "kind": "text",
          "content": "### Enum Values"
        },
        {
          "kind": "text",
          "content": "We can create instances of each of the two variants of `IpAddrKind` like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:instance}}"
          }
        },
        {
          "kind": "text",
          "content": "Note that the variants of the enum are namespaced under its identifier, and we\nuse a double colon to separate the two. This is useful because now both values\n`IpAddrKind::V4` and `IpAddrKind::V6` are of the same type: `IpAddrKind`. We\ncan then, for instance, define a function that takes any `IpAddrKind`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn}}"
          }
        },
        {
          "kind": "text",
          "content": "And we can call this function with either variant:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn_call}}"
          }
        },
        {
          "kind": "text",
          "content": "Using enums has even more advantages. Thinking more about our IP address type,\nat the moment we don’t have a way to store the actual IP address _data_; we\nonly know what _kind_ it is. Given that you just learned about structs in\nChapter 5, you might be tempted to tackle this problem with structs as shown in\nListing 6-1."
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {\nenum IpAddrKind {\n    V4,\n    V6,\n}\n\nstruct IpAddr {\n    kind: IpAddrKind,\n    address: String,\n}\n\nlet home = IpAddr {\n    kind: IpAddrKind::V4,\n    address: String::from(\"127.0.0.1\"),\n};\n\nlet loopback = IpAddr {\n    kind: IpAddrKind::V6,\n    address: String::from(\"::1\"),\n};`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Here, we’ve defined a struct `IpAddr` that has two fields: a `kind` field that\nis of type `IpAddrKind` (the enum we defined previously) and an `address` field\nof type `String`. We have two instances of this struct. The first is `home`,\nand it has the value `IpAddrKind::V4` as its `kind` with associated address\ndata of `127.0.0.1`. The second instance is `loopback`. It has the other\nvariant of `IpAddrKind` as its `kind` value, `V6`, and has address `::1`\nassociated with it. We’ve used a struct to bundle the `kind` and `address`\nvalues together, so now the variant is associated with the value."
        },
        {
          "kind": "text",
          "content": "However, representing the same concept using just an enum is more concise:\nrather than an enum inside a struct, we can put data directly into each enum\nvariant. This new definition of the `IpAddr` enum says that both `V4` and `V6`\nvariants will have associated `String` values:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {    \nenum IpAddr {\n    V4(String),\n    V6(String),\n}\n\nlet home = IpAddr::V4(String::from(\"127.0.0.1\"));\n\nlet loopback = IpAddr::V6(String::from(\"::1\"));`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "We attach data to each variant of the enum directly, so there is no need for an\nextra struct. Here, it’s also easier to see another detail of how enums work:\nthe name of each enum variant that we define also becomes a function that\nconstructs an instance of the enum. That is, `IpAddr::V4()` is a function call\nthat takes a `String` argument and returns an instance of the `IpAddr` type. We\nautomatically get this constructor function defined as a result of defining the\nenum."
        },
        {
          "kind": "text",
          "content": "There’s another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. Version four IP\naddresses will always have four numeric components that will have values\nbetween 0 and 255. If we wanted to store `V4` addresses as four `u8` values but\nstill express `V6` addresses as one `String` value, we wouldn’t be able to with\na struct. Enums handle this case with ease:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {\nenum IpAddr {\n    V4(u8, u8, u8, u8),\n    V6(String),\n}\n\nlet home = IpAddr::V4(127, 0, 0, 1);\n\nlet loopback = IpAddr::V6(String::from(\"::1\"));`[]`\n#}\n"
          }
        },
        {
          "kind": "text",
          "content": "We’ve shown several different ways to define data structures to store version\nfour and version six IP addresses. However, as it turns out, wanting to store\nIP addresses and encode which kind they are is so common that [the standard\nlibrary has a definition we can use!][IpAddr]<!-- ignore --> Let’s look at how\nthe standard library defines `IpAddr`: it has the exact enum and variants that\nwe’ve defined and used, but it embeds the address data inside the variants in\nthe form of two different structs, which are defined differently for each\nvariant:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "struct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}"
          }
        },
        {
          "kind": "text",
          "content": "This code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with."
        },
        {
          "kind": "text",
          "content": "Note that even though the standard library contains a definition for `IpAddr`,\nwe can still create and use our own definition without conflict because we\nhaven’t brought the standard library’s definition into our scope. We’ll talk\nmore about bringing types into scope in Chapter 7."
        },
        {
          "kind": "text",
          "content": "Let’s look at another example of an enum in Listing 6-2: this one has a wide\nvariety of types embedded in its variants."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-2\" caption=\"A `Message` enum whose variants each store different amounts and types of values\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This enum has four variants with different types:"
        },
        {
          "kind": "text",
          "content": "- `Quit`: Has no data associated with it at all\n- `Move`: Has named fields, like a struct does\n- `Write`: Includes a single `String`\n- `ChangeColor`: Includes three `i32` values"
        },
        {
          "kind": "text",
          "content": "Defining an enum with variants such as the ones in Listing 6-2 is similar to\ndefining different kinds of struct definitions, except the enum doesn’t use the\n`struct` keyword and all the variants are grouped together under the `Message`\ntype. The following structs could hold the same data that the preceding enum\nvariants hold:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-04-structs-similar-to-message-enum/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "But if we used the different structs, each of which has its own type, we\ncouldn’t as easily define a function to take any of these kinds of messages as\nwe could with the `Message` enum defined in Listing 6-2, which is a single type."
        },
        {
          "kind": "text",
          "content": "There is one more similarity between enums and structs: just as we’re able to\ndefine methods on structs using `impl`, we’re also able to define methods on\nenums. Here’s a method named `call` that we could define on our `Message` enum:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-05-methods-on-enums/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The body of the method would use `self` to get the value that we called the\nmethod on. In this example, we’ve created a variable `m` that has the value\n`Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the\nbody of the `call` method when `m.call()` runs."
        },
        {
          "kind": "text",
          "content": "Let’s look at another enum in the standard library that is very common and\nuseful: `Option`."
        },
        {
          "kind": "text",
          "content": "### The `Option` Enum and Its Advantages Over Null Values"
        },
        {
          "kind": "text",
          "content": "This section explores a case study of `Option`, which is another enum defined\nby the standard library. The `Option` type encodes the very common scenario in\nwhich a value could be something or it could be nothing."
        },
        {
          "kind": "text",
          "content": "For example, if you request the first item in a non-empty list, you would get\na value. If you request the first item in an empty list, you would get nothing.\nExpressing this concept in terms of the type system means the compiler can\ncheck whether you’ve handled all the cases you should be handling; this\nfunctionality can prevent bugs that are extremely common in other programming\nlanguages."
        },
        {
          "kind": "text",
          "content": "Programming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn’t have the\nnull feature that many other languages have. _Null_ is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null."
        },
        {
          "kind": "text",
          "content": "In his 2009 presentation “Null References: The Billion Dollar Mistake,” Tony\nHoare, the inventor of null, had this to say:"
        },
        {
          "kind": "text",
          "content": "> I call it my billion-dollar mistake. At that time, I was designing the first\n> comprehensive type system for references in an object-oriented language. My\n> goal was to ensure that all use of references should be absolutely safe, with\n> checking performed automatically by the compiler. But I couldn’t resist the\n> temptation to put in a null reference, simply because it was so easy to\n> implement. This has led to innumerable errors, vulnerabilities, and system\n> crashes, which have probably caused a billion dollars of pain and damage in\n> the last forty years."
        },
        {
          "kind": "text",
          "content": "The problem with null values is that if you try to use a null value as a\nnot-null value, you’ll get an error of some kind. Because this null or not-null\nproperty is pervasive, it’s extremely easy to make this kind of error."
        },
        {
          "kind": "text",
          "content": "However, the concept that null is trying to express is still a useful one: a\nnull is a value that is currently invalid or absent for some reason."
        },
        {
          "kind": "text",
          "content": "The problem isn’t really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n`Option<T>`, and it is [defined by the standard library][option]<!-- ignore -->\nas follows:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Option<T> {\n    None,\n    Some(T),\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `Option<T>` enum is so useful that it’s even included in the prelude; you\ndon’t need to bring it into scope explicitly. Its variants are also included in\nthe prelude: you can use `Some` and `None` directly without the `Option::`\nprefix. The `Option<T>` enum is still just a regular enum, and `Some(T)` and\n`None` are still variants of type `Option<T>`."
        },
        {
          "kind": "text",
          "content": "The `<T>` syntax is a feature of Rust we haven’t talked about yet. It’s a\ngeneric type parameter, and we’ll cover generics in more detail in Chapter 10.\nFor now, all you need to know is that `<T>` means that the `Some` variant of\nthe `Option` enum can hold one piece of data of any type, and that each\nconcrete type that gets used in place of `T` makes the overall `Option<T>` type\na different type. Here are some examples of using `Option` values to hold\nnumber types and char types:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter"
            ],
            "code": "#fn main() {\nlet some_number = Some(5);\nlet some_char = Some('e');\n\nlet absent_number: Option<i32> = None;`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "The type of `some_number` is `Option<i32>`. The type of `some_char` is\n`Option<char>`, which is a different type. Rust can infer these types because\nwe’ve specified a value inside the `Some` variant. For `absent_number`, Rust\nrequires us to annotate the overall `Option` type: the compiler can’t infer the\ntype that the corresponding `Some` variant will hold by looking only at a\n`None` value. Here, we tell Rust that we mean for `absent_number` to be of type\n`Option<i32>`."
        },
        {
          "kind": "text",
          "content": "When we have a `Some` value, we know that a value is present and the value is\nheld within the `Some`. When we have a `None` value, in some sense it means the\nsame thing as null: we don’t have a valid value. So why is having `Option<T>`\nany better than having null?"
        },
        {
          "kind": "text",
          "content": "In short, because `Option<T>` and `T` (where `T` can be any type) are different\ntypes, the compiler won’t let us use an `Option<T>` value as if it were\ndefinitely a valid value. For example, this code won’t compile, because it’s\ntrying to add an `i8` to an `Option<i8>`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "If we run this code, we get an error message like this one:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Intense! In effect, this error message means that Rust doesn’t understand how\nto add an `i8` and an `Option<i8>`, because they’re different types. When we\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an `Option<i8>` (or\nwhatever type of value we’re working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value."
        },
        {
          "kind": "text",
          "content": "In other words, you have to convert an `Option<T>` to a `T` before you can\nperform `T` operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn’t null when it actually is."
        },
        {
          "kind": "text",
          "content": "Eliminating the risk of incorrectly assuming a not-null value helps you to be\nmore confident in your code. In order to have a value that can possibly be\nnull, you must explicitly opt in by making the type of that value `Option<T>`.\nThen, when you use that value, you are required to explicitly handle the case\nwhen the value is null. Everywhere that a value has a type that isn’t an\n`Option<T>`, you _can_ safely assume that the value isn’t null. This was a\ndeliberate design decision for Rust to limit null’s pervasiveness and increase\nthe safety of Rust code."
        },
        {
          "kind": "text",
          "content": "So how do you get the `T` value out of a `Some` variant when you have a value\nof type `Option<T>` so that you can use that value? The `Option<T>` enum has a\nlarge number of methods that are useful in a variety of situations; you can\ncheck them out in [its documentation][docs]<!-- ignore -->. Becoming familiar\nwith the methods on `Option<T>` will be extremely useful in your journey with\nRust."
        },
        {
          "kind": "text",
          "content": "In general, in order to use an `Option<T>` value, you want to have code that\nwill handle each variant. You want some code that will run only when you have a\n`Some(T)` value, and this code is allowed to use the inner `T`. You want some\nother code to run only if you have a `None` value, and that code doesn’t have a\n`T` value available. The `match` expression is a control flow construct that\ndoes just this when used with enums: it will run different code depending on\nwhich variant of the enum it has, and that code can use the data inside the\nmatching value."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "770f09d3-110d-4505-b41a-2af422198d59",
                "type": "Tracing",
                "prompt": {
                  "program": "fn foo(x: &i32) { \n  println!(\"{x}\");\n}\n\nfn main() {\n  let x = null;\n  foo(x);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 6
                },
                "context": " \nRust does not have null pointers, so the `null` keyword does not exist. An Option type should be used to represent the possibility of an object being null.\n"
              },
              {
                "id": "6226be11-31c3-4cac-b97c-515514a70af2",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider these two representations of a `Result` type that contains a value `T` if a computation succeeds, or an error `E` if it fails.\n\n```\nstruct Result1<T, E> {\n  ok: Option<T>,\n  err: Option<E>,\n}\n\nenum Result2<T, E> {\n  Ok(T),\n  Err(E)\n}\n```\n\nThe enum `Result2` is considered more idiomatic than the struct `Result1` in Rust. \nWhich statement below is **NOT** a valid reason why?\n",
                  "distractors": [
                    "The struct uses more space in memory at runtime than the enum",
                    "The struct could have `ok` and `err` both be `None`, while the enum must have at least one of them",
                    "The struct is more syntactically verbose to construct than the enum"
                  ]
                },
                "answer": {
                  "answer": "The struct contains `Option` types, which are only intended to wrap structs"
                },
                "context": "It's perfectly fine to have structs contain `Option` types as fields (the question asked for which is **NOT** a valid reason).\nBut if your data structure has invariants like \"exactly one of two optional fields should be `Some`\",\nthen that invariant is better ensured by use of an enum.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[IpAddr]: https://doc.rust-lang.org/std/net/enum.IpAddr.html\n[option]: https://doc.rust-lang.org/std/option/enum.Option.html\n[docs]: https://doc.rust-lang.org/std/option/enum.Option.html"
        }
      ]
    },
    {
      "title": "The `match` Control Flow Construct",
      "file": "ch06-02-match.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old heading. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"the-match-control-flow-operator\"></a>"
        },
        {
          "kind": "text",
          "content": "Rust has an extremely powerful control flow construct called `match` that\nallows you to compare a value against a series of patterns and then execute\ncode based on which pattern matches. Patterns can be made up of literal values,\nvariable names, wildcards, and many other things; [Chapter\n19][ch19-00-patterns]<!-- ignore --> covers all the different kinds of patterns\nand what they do. The power of `match` comes from the expressiveness of the\npatterns and the fact that the compiler confirms that all possible cases are\nhandled."
        },
        {
          "kind": "text",
          "content": "Think of a `match` expression as being like a coin-sorting machine: coins slide\ndown a track with variously sized holes along it, and each coin falls through\nthe first hole it encounters that it fits into. In the same way, values go\nthrough each pattern in a `match`, and at the first pattern the value “fits,”\nthe value falls into the associated code block to be used during execution."
        },
        {
          "kind": "text",
          "content": "Speaking of coins, let’s use them as an example using `match`! We can write a\nfunction that takes an unknown US coin and, in a similar way as the counting\nmachine, determines which coin it is and returns its value in cents, as shown\nin Listing 6-3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-3\" caption=\"An enum and a `match` expression that has the variants of the enum as its patterns\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s break down the `match` in the `value_in_cents` function. First we list\nthe `match` keyword followed by an expression, which in this case is the value\n`coin`. This seems very similar to a conditional expression used with `if`, but\nthere’s a big difference: with `if`, the condition needs to evaluate to a\nBoolean value, but here it can be any type. The type of `coin` in this example\nis the `Coin` enum that we defined on the first line."
        },
        {
          "kind": "text",
          "content": "Next are the `match` arms. An arm has two parts: a pattern and some code. The\nfirst arm here has a pattern that is the value `Coin::Penny` and then the `=>`\noperator that separates the pattern and the code to run. The code in this case\nis just the value `1`. Each arm is separated from the next with a comma."
        },
        {
          "kind": "text",
          "content": "When the `match` expression executes, it compares the resultant value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn’t match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need: in Listing 6-3, our `match` has four arms."
        },
        {
          "kind": "text",
          "content": "The code associated with each arm is an expression, and the resultant value of\nthe expression in the matching arm is the value that gets returned for the\nentire `match` expression."
        },
        {
          "kind": "text",
          "content": "We don’t typically use curly brackets if the match arm code is short, as it is\nin Listing 6-3 where each arm just returns a value. If you want to run multiple\nlines of code in a match arm, you must use curly brackets, and the comma\nfollowing the arm is then optional. For example, the following code prints\n“Lucky penny!” every time the method is called with a `Coin::Penny`, but still\nreturns the last value of the block, `1`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-08-match-arm-multiple-lines/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "### Patterns That Bind to Values"
        },
        {
          "kind": "text",
          "content": "Another useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern. This is how we can extract values out of enum\nvariants."
        },
        {
          "kind": "text",
          "content": "As an example, let’s change one of our enum variants to hold data inside it.\nFrom 1999 through 2008, the United States minted quarters with different\ndesigns for each of the 50 states on one side. No other coins got state\ndesigns, so only quarters have this extra value. We can add this information to\nour `enum` by changing the `Quarter` variant to include a `UsState` value\nstored inside it, which we’ve done in Listing 6-4."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-4\" caption=\"A `Coin` enum in which the `Quarter` variant also holds a `UsState` value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s imagine that a friend is trying to collect all 50 state quarters. While\nwe sort our loose change by coin type, we’ll also call out the name of the\nstate associated with each quarter so that if it’s one our friend doesn’t have,\nthey can add it to their collection."
        },
        {
          "kind": "text",
          "content": "In the match expression for this code, we add a variable called `state` to the\npattern that matches values of the variant `Coin::Quarter`. When a\n`Coin::Quarter` matches, the `state` variable will bind to the value of that\nquarter’s state. Then we can use `state` in the code for that arm, like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-09-variable-in-pattern/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "If we were to call `value_in_cents(Coin::Quarter(UsState::Alaska))`, `coin`\nwould be `Coin::Quarter(UsState::Alaska)`. When we compare that value with each\nof the match arms, none of them match until we reach `Coin::Quarter(state)`. At\nthat point, the binding for `state` will be the value `UsState::Alaska`. We can\nthen use that binding in the `println!` expression, thus getting the inner\nstate value out of the `Coin` enum variant for `Quarter`."
        },
        {
          "kind": "text",
          "content": "### Matching with `Option<T>`"
        },
        {
          "kind": "text",
          "content": "In the previous section, we wanted to get the inner `T` value out of the `Some`\ncase when using `Option<T>`; we can also handle `Option<T>` using `match`, as\nwe did with the `Coin` enum! Instead of comparing coins, we’ll compare the\nvariants of `Option<T>`, but the way the `match` expression works remains the\nsame."
        },
        {
          "kind": "text",
          "content": "Let’s say we want to write a function that takes an `Option<i32>` and, if\nthere’s a value inside, adds 1 to that value. If there isn’t a value inside,\nthe function should return the `None` value and not attempt to perform any\noperations."
        },
        {
          "kind": "text",
          "content": "This function is very easy to write, thanks to `match`, and will look like\nListing 6-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-5\" caption=\"A function that uses a `match` expression on an `Option<i32>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s examine the first execution of `plus_one` in more detail. When we call\n`plus_one(five)`, the variable `x` in the body of `plus_one` will have the\nvalue `Some(5)`. We then compare that against each match arm:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}}"
          }
        },
        {
          "kind": "text",
          "content": "The `Some(5)` value doesn’t match the pattern `None`, so we continue to the\nnext arm:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:second_arm}}"
          }
        },
        {
          "kind": "text",
          "content": "Does `Some(5)` match `Some(i)`? It does! We have the same variant. The `i`\nbinds to the value contained in `Some`, so `i` takes the value `5`. The code in\nthe match arm is then executed, so we add 1 to the value of `i` and create a\nnew `Some` value with our total `6` inside."
        },
        {
          "kind": "text",
          "content": "Now let’s consider the second call of `plus_one` in Listing 6-5, where `x` is\n`None`. We enter the `match` and compare to the first arm:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}}"
          }
        },
        {
          "kind": "text",
          "content": "It matches! There’s no value to add to, so the program stops and returns the\n`None` value on the right side of `=>`. Because the first arm matched, no other\narms are compared."
        },
        {
          "kind": "text",
          "content": "Combining `match` and enums is useful in many situations. You’ll see this\npattern a lot in Rust code: `match` against an enum, bind a variable to the\ndata inside, and then execute code based on it. It’s a bit tricky at first, but\nonce you get used to it, you’ll wish you had it in all languages. It’s\nconsistently a user favorite."
        },
        {
          "kind": "text",
          "content": "### Matches Are Exhaustive"
        },
        {
          "kind": "text",
          "content": "There’s one other aspect of `match` we need to discuss: the arms’ patterns must\ncover all possibilities. Consider this version of our `plus_one` function,\nwhich has a bug and won’t compile:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We didn’t handle the `None` case, so this code will cause a bug. Luckily, it’s\na bug Rust knows how to catch. If we try to compile this code, we’ll get this\nerror:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust knows that we didn’t cover every possible case, and even knows which\npattern we forgot! Matches in Rust are _exhaustive_: we must exhaust every last\npossibility in order for the code to be valid. Especially in the case of\n`Option<T>`, when Rust prevents us from forgetting to explicitly handle the\n`None` case, it protects us from assuming that we have a value when we might\nhave null, thus making the billion-dollar mistake discussed earlier impossible."
        },
        {
          "kind": "text",
          "content": "### Catch-All Patterns and the `_` Placeholder"
        },
        {
          "kind": "text",
          "content": "Using enums, we can also take special actions for a few particular values, but\nfor all other values take one default action. Imagine we’re implementing a game\nwhere, if you roll a 3 on a dice roll, your player doesn’t move, but instead\ngets a new fancy hat. If you roll a 7, your player loses a fancy hat. For all\nother values, your player moves that number of spaces on the game board. Here’s\na `match` that implements that logic, with the result of the dice roll\nhardcoded rather than a random value, and all other logic represented by\nfunctions without bodies because actually implementing them is out of scope for\nthis example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-15-binding-catchall/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "For the first two arms, the patterns are the literal values `3` and `7`. For\nthe last arm that covers every other possible value, the pattern is the\nvariable we’ve chosen to name `other`. The code that runs for the `other` arm\nuses the variable by passing it to the `move_player` function."
        },
        {
          "kind": "text",
          "content": "This code compiles, even though we haven’t listed all the possible values a\n`u8` can have, because the last pattern will match all values not specifically\nlisted. This catch-all pattern meets the requirement that `match` must be\nexhaustive. Note that we have to put the catch-all arm last because the\npatterns are evaluated in order. If we put the catch-all arm earlier, the other\narms would never run, so Rust will warn us if we add arms after a catch-all!"
        },
        {
          "kind": "text",
          "content": "Rust also has a pattern we can use when we want a catch-all but don’t want to\n_use_ the value in the catch-all pattern: `_` is a special pattern that matches\nany value and does not bind to that value. This tells Rust we aren’t going to\nuse the value, so Rust won’t warn us about an unused variable."
        },
        {
          "kind": "text",
          "content": "Let’s change the rules of the game: now, if you roll anything other than a 3 or\na 7, you must roll again. We no longer need to use the catch-all value, so we\ncan change our code to use `_` instead of the variable named `other`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-16-underscore-catchall/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This example also meets the exhaustiveness requirement because we’re explicitly\nignoring all other values in the last arm; we haven’t forgotten anything."
        },
        {
          "kind": "text",
          "content": "Finally, we’ll change the rules of the game one more time so that nothing else\nhappens on your turn if you roll anything other than a 3 or a 7. We can express\nthat by using the unit value (the empty tuple type we mentioned in [“The Tuple\nType”][tuples]<!-- ignore --> section) as the code that goes with the `_` arm:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-17-underscore-unit/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Here, we’re telling Rust explicitly that we aren’t going to use any other value\nthat doesn’t match a pattern in an earlier arm, and we don’t want to run any\ncode in this case."
        },
        {
          "kind": "text",
          "content": "There’s more about patterns and matching that we’ll cover in [Chapter\n19][ch19-00-patterns]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: 1e4f082c-ffa4-4d33-8726-2dbcd72e1aa2 -->\n### How Matches Interact with Ownership"
        },
        {
          "kind": "text",
          "content": "If an enum contains non-copyable data like a String, then you should be careful with whether a match will move or borrow that data. For example, this program using an `Option<String>` will compile:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "# fn main() {\nlet opt: Option<String> = \n    Some(String::from(\"Hello world\"));\n\nmatch opt {\n    Some(_) => println!(\"Some!\"),\n    None => println!(\"None!\")\n};\n\nprintln!(\"{:?}\", opt);\n# }"
          }
        },
        {
          "kind": "text",
          "content": "But if we replace the placeholder in `Some(_)` with a variable name, like `Some(s)`, then the program will NOT compile:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "#fn main() {\nlet opt: Option<String> = \n    Some(String::from(\"Hello world\"));\n\nmatch opt {\n    // _ became s\n    Some(s) => println!(\"Some: {}\", s),\n    None => println!(\"None!\")\n};\n\nprintln!(\"{:?}\", opt);`{}`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "`opt` is a plain enum &mdash; its type is `Option<String>` and not a reference like `&Option<String>`. Therefore a match on `opt` will move non-ignored fields like `s`. Notice how `opt` loses read and own permission sooner in the second program compared to the first. After the match expression, the data within `opt` has been moved, so it is illegal to read `opt` in the `println`."
        },
        {
          "kind": "text",
          "content": "If we want to peek into `opt` without moving its contents, the idiomatic solution is to match on a reference:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries"
            ],
            "code": "#fn main() {\nlet opt: Option<String> = \n    Some(String::from(\"Hello world\"));\n\n// opt became &opt\nmatch &opt {\n    Some(s) => println!(\"Some: {}\", s),\n    None => println!(\"None!\")\n};\n\nprintln!(\"{:?}\", opt);\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Rust will “push down” the reference from the outer enum, `&Option<String>`, to the inner field, `&String`. Therefore `s` has type `&String`, and `opt` can be used after the match. To better understand this “pushing down” mechanism, see the section about [binding modes](https://doc.rust-lang.org/reference/patterns.html#binding-modes) in the Rust Reference.\n<!-- END INTERVENTION -->"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5b6e4016-c089-4cb3-96a7-ca9f88694488",
                "type": "Tracing",
                "prompt": {
                  "program": "enum Location {\n  Point(i32),\n  Range(i32, i32)\n}\n\nfn main() {\n  let l: Location = Location::Range(0, 5);\n  let n = match l {\n    Location::Point(_) => -1,\n    Location::Range(_, 5) => 5,\n    Location::Range(0, _) => 0,\n    _ => -2\n  };\n  println!(\"{n}\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "5"
                },
                "context": " \nEach match is tried from top to bottom. Both the second and third pattern are applicable, so the second one is used.\n"
              },
              {
                "id": "f7c361e0-733a-4d48-9809-736e3c1e2b67",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider this method implemented for the `Option` type:\n\n```\nimpl<T> Option<T> {\n  fn unwrap_or(self, other: T) -> T {\n    match self {\n      Some(t) => t,\n      None => other\n    }\n  }\n}\n```\n\nWhich sentence best describes the behavior of this function?\n",
                  "distractors": [
                    "Returns a new option containing the object inside `self` if it exists, and `other` otherwise",
                    "Inserts `other` into `self` if `self` does not already contain a value",
                    "Returns a reference to the object inside `self` if it exists, and `other` otherwise"
                  ]
                },
                "answer": {
                  "answer": "Returns the object inside `self` if it exists, and `other` otherwise"
                },
                "context": "This function \"unwraps\" the option by consuming ownership of it and retrieving the value inside, but if no value exists then it falls back by returning `other`.\nThis is a real function in the standard library!\n"
              },
              {
                "id": "1e4f082c-ffa4-4d33-8726-2dbcd72e1aa2",
                "type": "Tracing",
                "prompt": {
                  "program": "#[derive(Debug)]\nenum Either {\n  Left(usize),\n  Right(String)\n}\n\nfn main() {\n  let x = Either::Right(String::from(\"Hello world\"));\n  let value = match x {\n    Either::Left(n) => n,\n    Either::Right(s) => s.len()\n  };\n  println!(\"{x:?} {value}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 13
                },
                "context": "The match arm `Either::Right(s)` moves the field `s`, so `x` cannot be used in the `println`.\n"
              },
              {
                "id": "6e012d34-5c59-443e-85d9-385f0d7dee13",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider these two implementations of a function to decrement an unsigned number twice.\n\n```\nfn decr_twice_v1(n: u32) -> Option<u32> {\n  match n {\n    0 => None,\n    1 => None,\n    n2 => Some(n2 - 2)\n  }\n}\n\nfn decr_twice_v2(n: u32) -> Option<u32> {\n  if n == 0 {\n    None\n  } else if n == 1 {\n    None\n  } else {\n    Some(n - 2)\n  }\n}\n```\n\nThe functions have the same behavior for:\n",
                  "distractors": [
                    "No inputs",
                    "Some, but not all inputs"
                  ]
                },
                "answer": {
                  "answer": "All inputs"
                },
                "context": "The `match` and `if` perform the same function here. A match is like a specialized `if` that checks for equality of the matched object.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[tuples]: ch03-02-data-types.html#the-tuple-type"
        },
        {
          "kind": "text",
          "content": "[ch19-00-patterns]: ch19-00-patterns.html"
        }
      ]
    },
    {
      "title": "Concise Control Flow with `if let` and `let else`",
      "file": "ch06-03-if-let.md",
      "elements": [
        {
          "kind": "text",
          "content": "The `if let` syntax lets you combine `if` and `let` into a less verbose way to\nhandle values that match one pattern while ignoring the rest. Consider the\nprogram in Listing 6-6 that matches on an `Option<u8>` value in the\n`config_max` variable but only wants to execute code if the value is the `Some`\nvariant."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-6\" caption=\"A `match` that only cares about executing code when the value is `Some`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If the value is `Some`, we print out the value in the `Some` variant by binding\nthe value to the variable `max` in the pattern. We don’t want to do anything\nwith the `None` value. To satisfy the `match` expression, we have to add `_ =>\n()` after processing just one variant, which is annoying boilerplate code to\nadd."
        },
        {
          "kind": "text",
          "content": "Instead, we could write this in a shorter way using `if let`. The following\ncode behaves the same as the `match` in Listing 6-6:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-12-if-let/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The syntax `if let` takes a pattern and an expression separated by an equal\nsign. It works the same way as a `match`, where the expression is given to the\n`match` and the pattern is its first arm. In this case, the pattern is\n`Some(max)`, and the `max` binds to the value inside the `Some`. We can then\nuse `max` in the body of the `if let` block in the same way we used `max` in\nthe corresponding `match` arm. The code in the `if let` block only runs if the\nvalue matches the pattern."
        },
        {
          "kind": "text",
          "content": "Using `if let` means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking `match` enforces that ensures you\naren’t forgetting to handle any cases. Choosing between `match` and `if let`\ndepends on what you’re doing in your particular situation and whether gaining\nconciseness is an appropriate trade-off for losing exhaustive checking."
        },
        {
          "kind": "text",
          "content": "In other words, you can think of `if let` as syntax sugar for a `match` that\nruns code when the value matches one pattern and then ignores all other values."
        },
        {
          "kind": "text",
          "content": "We can include an `else` with an `if let`. The block of code that goes with the\n`else` is the same as the block of code that would go with the `_` case in the\n`match` expression that is equivalent to the `if let` and `else`. Recall the\n`Coin` enum definition in Listing 6-4, where the `Quarter` variant also held a\n`UsState` value. If we wanted to count all non-quarter coins we see while also\nannouncing the state of the quarters, we could do that with a `match`\nexpression, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-13-count-and-announce-match/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Or we could use an `if let` and `else` expression, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-14-count-and-announce-if-let-else/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "## Staying on the “Happy Path” with `let...else`"
        },
        {
          "kind": "text",
          "content": "The common pattern is to perform some computation when a value is present and\nreturn a default value otherwise. Continuing on with our example of coins with a\n`UsState` value, if we wanted to say something funny depending on how old the\nstate on the quarter was, we might introduce a method on `UsState` to check the\nage of a state, like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-07/src/main.rs:state}}"
          }
        },
        {
          "kind": "text",
          "content": "Then we might use `if let` to match on the type of coin, introducing a `state`\nvariable within the body of the condition, as in Listing 6-7."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-7\" caption=\"Checking whether a state existed in 1900 by using conditionals nested inside an `if let`.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-07/src/main.rs:describe}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "That gets the job done, but it has pushed the work into the body of the `if\nlet` statement, and if the work to be done is more complicated, it might be\nhard to follow exactly how the top-level branches relate. We could also take\nadvantage of the fact that expressions produce a value either to produce the\n`state` from the `if let` or to return early, as in Listing 6-8. (You could do\nsimilar with a `match`, too.)"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-8\" caption=\"Using `if let` to produce a value or return early.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-08/src/main.rs:describe}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This is a bit annoying to follow in its own way, though! One branch of the `if\nlet` produces a value, and the other one returns from the function entirely."
        },
        {
          "kind": "text",
          "content": "To make this common pattern nicer to express, Rust has `let...else`. The\n`let...else` syntax takes a pattern on the left side and an expression on the\nright, very similar to `if let`, but it does not have an `if` branch, only an\n`else` branch. If the pattern matches, it will bind the value from the pattern\nin the outer scope. If the pattern does _not_ match, the program will flow into\nthe `else` arm, which must return from the function."
        },
        {
          "kind": "text",
          "content": "In Listing 6-9, you can see how Listing 6-8 looks when using `let...else` in\nplace of `if let`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"6-9\" caption=\"Using `let...else` to clarify the flow through the function.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-09/src/main.rs:describe}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Notice that it stays “on the happy path” in the main body of the function this\nway, without having significantly different control flow for two branches the\nway the `if let` did."
        },
        {
          "kind": "text",
          "content": "If you have a situation in which your program has logic that is too verbose to\nexpress using a `match`, remember that `if let` and `let...else` are in your\nRust toolbox as well."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "b2e05b2a-1f98-4498-9a9b-e1e358adf476",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which control flow construct would be most idiomatic to use in the following function?\n\n```\nenum Location {\n  Point(i32),\n  Range(i32, i32)\n}\n\nfn print_range_max(loc: &Location) {  \n  // print the second field of Range, if loc is a Range\n}\n```\n",
                  "distractors": [
                    "`match`"
                  ]
                },
                "answer": {
                  "answer": "`if let`"
                },
                "context": "If the function only has an effect in one condition, an `if let` is most idiomatic.\n"
              },
              {
                "id": "fe17286b-67ed-43a7-a1df-10afee7921cc",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which control flow construct would be most idiomatic to use in the following function?\n\n```\nenum Location {\n  Point(i32),\n  Range(i32, i32)\n}\n\nfn get_start(loc: &Location) -> i32 { \n  // return the first field of Range or the only field of Point  \n}\n```\n",
                  "distractors": [
                    "`if let`"
                  ]
                },
                "answer": {
                  "answer": "`match`"
                },
                "context": " \nIf the function needs to return a value for each condition, then a `match` is most appropriate.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "We’ve now covered how to use enums to create custom types that can be one of a\nset of enumerated values. We’ve shown how the standard library’s `Option<T>`\ntype helps you use the type system to prevent errors. When enum values have\ndata inside them, you can use `match` or `if let` to extract and use those\nvalues, depending on how many cases you need to handle."
        },
        {
          "kind": "text",
          "content": "Your Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions only get values of the type each\nfunction expects."
        },
        {
          "kind": "text",
          "content": "In order to provide a well-organized API to your users that is straightforward\nto use and only exposes exactly what your users will need, let’s now turn to\nRust’s modules."
        }
      ]
    },
    {
      "title": "Ownership Inventory #1",
      "file": "ch06-04-inventory.md",
      "elements": [
        {
          "kind": "text",
          "content": "The Ownership Inventory is a series of quizzes that check your understanding of ownership in real-world scenarios. These scenarios are inspired by common StackOverflow questions about Rust. You can use these questions to test how well you understand ownership so far."
        },
        {
          "kind": "text",
          "content": "### A new technology: the in-browser IDE"
        },
        {
          "kind": "text",
          "content": "These questions will involve Rust programs which use functions you haven't seen before. Therefore we will use an experimental technology that supports IDE features in the browser. The IDE lets you get information about unfamiliar functions and types. For example, try doing the following actions in the program below:"
        },
        {
          "kind": "text",
          "content": "* Hover your mouse over `replace` to see its type and description.\n* Hover your mouse over `s2` to see its inferred type."
        },
        {
          "kind": "text",
          "content": "---------"
        },
        {
          "kind": "text",
          "content": "<pre>\n<code class=\"ide\">\n/// Turns a string into a far more exciting string\nfn make_exciting(s: &str) -> String {\nlet s2 = s.replace(\".\", \"!\");\nlet s3 = s2.replace(\"?\", \"‽\");\ns3\n}\n</code>\n</pre>"
        },
        {
          "kind": "text",
          "content": "---------"
        },
        {
          "kind": "text",
          "content": "A few important caveats about this experimental technology:"
        },
        {
          "kind": "text",
          "content": "**PLATFORM COMPATIBILITY:** the in-browser IDE does not work on touch-screens. The in-browser IDE has only been tested to work on Google Chrome 109 and Firefox 107. It might not work in older versions of Safari."
        },
        {
          "kind": "text",
          "content": "**MEMORY USAGE:** the in-browser IDE uses a [WebAssembly](https://rustwasm.github.io/book/) build of [rust-analyzer](https://github.com/rust-lang/rust-analyzer), which can take up a fair amount of memory. Each instance of the IDE appears to take around ~300 MB. (Note: we have also received some reports of >10GB memory usage.)"
        },
        {
          "kind": "text",
          "content": "**SCROLLING:** the in-browser IDE will \"eat\" your cursor if your cursor intersects with the editor while scrolling. If you're having trouble scrolling the page, try moving your cursor onto the rightmost scrollbar."
        },
        {
          "kind": "text",
          "content": "**LOAD TIMES:** the IDE may take up to 15 seconds to initialize for a new program. It will say \"Loading...\" as you interact with code in the editor."
        },
        {
          "kind": "text",
          "content": "### The Quiz"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "6e5e193e-579d-4a46-aae4-d35336b77b68",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Makes a string to separate lines of text, \n/// returning a default if the provided string is blank\nfn make_separator(user_str: &str) -> &str {\n    if user_str == \"\" {\n        let default = \"=\".repeat(10);\n        &default\n    } else {\n        user_str\n    }\n}\n```\n\nIf you tried to compile this function, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "`user_str` does not live long enough",
                    "function `make_separator` cannot return a reference of type `&str`",
                    "function `make_separator` cannot return two different references"
                  ]
                },
                "answer": {
                  "answer": "cannot return reference to local variable `default`"
                },
                "context": "Because `default` lives on the stack within `make_separator`, it will be deallocated once a call to `make_separator` ends.\nThis leaves `&default` pointing to deallocated memory. Rust therefore complains that you cannot return a reference to a local variable.\n"
              },
              {
                "id": "44a2eb01-b49a-497b-a9d2-207814d1db1e",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Makes a string to separate lines of text, \n/// returning a default if the provided string is blank\nfn make_separator(user_str: &str) -> &str {\n    if user_str == \"\" {\n        let default = \"=\".repeat(10);\n        &default\n    } else {\n        user_str\n    }\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0515]: cannot return reference to local variable `default`\n --> test.rs:6:9\n  |\n6 |         &default\n  |         ^^^^^^^^ returns a reference to data owned by the current function\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.\n",
                  "distractors": [
                    "```\nprintln!(\"{}\", make_separator(\"Hello world!\"));\n```\n",
                    "None of these programs"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet s = make_separator(\"\");\nprintln!(\"{s}\");\n```\n"
                  ]
                },
                "context": "The caller must pass an empty string to trigger the problematic if-condition. This returns a dangling pointer.\n"
              },
              {
                "id": "815ae4cd-0f23-4da5-9dc2-0e81c664cc28",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Makes a string to separate lines of text, \n/// returning a default if the provided string is blank\nfn make_separator(user_str: &str) -> &str {\n    if user_str == \"\" {\n        let default = \"=\".repeat(10);\n        &default\n    } else {\n        user_str\n    }\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\nfn make_separator(user_str: &str) -> &str {\n    if user_str == \"\" {\n        let default = \"=\".repeat(10);\n        &default\n    } else {\n        `[&user_str]`\n    }\n}\n```\n",
                    "```ide\nfn make_separator(user_str: `[String]`) -> `[String]` {\n    if user_str == \"\" {\n        let default = \"=\".repeat(10);\n        `[default]`\n    } else {\n        user_str\n    }\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\nfn make_separator(user_str: &str) -> `[String]` {\n    if user_str == \"\" {\n        let default = \"=\".repeat(10);\n        `[default]`\n    } else {\n        `[user_str.to_string()]`        \n    }\n}\n```\n"
                },
                "context": "There is no valid way to return a pointer to a stack-allocated variable. The simple solution is therefore to change the return type to `String`\nand copy the input `user_str` into an owned string. However, requiring `user_str` to be a `String` would reduce the flexibility of the API, e.g.\na caller could not call `make_separator` on a substring of a bigger string. It would also require callers to heap-allocate strings, e.g.\nthey could not use a string literal like `make_separator(\"Rust\")`.\n\nThe most idiomatic solution to this problem uses a construct you haven't seen yet: [`Cow`](https://doc.rust-lang.org/std/borrow/enum.Cow.html).\nThe clone-on-write smart pointer would enable this function to return *either* an owned string *or* a string reference without a type error.\n"
              },
              {
                "id": "1f4e5c06-ecdf-481d-9cae-8a25dafe9cfd",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\n/// Gets the string out of an option if it exists,\n/// returning a default otherwise\nfn get_or_default(arg: &Option<String>) -> String {\n    if arg.is_none() {\n        return String::new();\n    }\n    let s = arg.unwrap();\n    s.clone()\n}\n```\n\nIf you tried to compile this function, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "cannot call `arg.is_none()` without dereferencing `arg`",
                    "`arg` does not live long enough",
                    "cannot return `s.clone()` which does not live long enough"
                  ]
                },
                "answer": {
                  "answer": "cannot move out of `arg` in `arg.unwrap()`"
                },
                "context": "The function `Option::unwrap` expects `self`, meaning it expects ownership of `arg`. However `arg` is an immutable\nreference to an option, so it cannot provide ownership of the option. Therefore the compiler complains that we \ncannot move out of `arg` via `unwrap`.\n"
              },
              {
                "id": "989670b2-b038-47c4-9975-a93d6ee193e5",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\n/// Gets the string out of an option if it exists,\n/// returning a default otherwise\nfn get_or_default(arg: &Option<String>) -> String {\n    if arg.is_none() {\n        return String::new();\n    }\n    let s = arg.unwrap();\n    s.clone()\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0507]: cannot move out of `*arg` which is behind a shared reference\n   --> test.rs:7:13\n    |\n7   |     let s = arg.unwrap();\n    |             ^^^^--------\n    |             |   |\n    |             |   `*arg` moved due to this method call\n    |             help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n    |             move occurs because `*arg` has type `Option<String>`, which does not implement the `Copy` trait\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.\n",
                  "distractors": [
                    "None of these programs"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet opt = Some(String::from(\"Rust\"));\nget_or_default(&opt);\nprintln!(\"{:?}\", opt);\n```\n",
                    "```\nlet opt = Some(String::from(\"Rust\"));\nlet s = get_or_default(&opt);\nprintln!(\"{}\", s);\n```\n",
                    "```\nlet opt = Some(String::from(\"Rust\"));\nget_or_default(&opt);\n```\n"
                  ]
                },
                "context": "All of these programs violate memory safety due to a double-free. If `arg.unwrap()` were permitted, then\nownership of the string `String::from(\"Rust\")` would be assumed by `s`. After `get_or_default` returns,\nthen the string would be freed. However, `opt` also believes it owns the string, so \nthe string would be freed a second time on behalf of `opt`.\n"
              },
              {
                "id": "3a8d5bb8-a204-43e6-b50a-d17c803dbe37",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\n/// Gets the string out of an option if it exists,\n/// returning a default otherwise\nfn get_or_default(arg: &Option<String>) -> String {\n    if arg.is_none() {\n        return String::new();\n    }\n    let s = arg.unwrap();\n    s.clone()\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\nfn get_or_default(arg: `[&mut Option<String>]`) -> String {\n    if arg.is_none() {\n        return String::new();\n    }\n    let s = arg`[.as_mut()]`.unwrap();\n    s.clone()\n}\n```\n",
                    "```ide\nfn get_or_default(arg: `[Option<String>]`) -> String {\n    if arg.is_none() {\n        return String::new();\n    }\n    let s = arg.unwrap();\n    s.clone()\n}\n```\n",
                    "```ide\nfn get_or_default(arg: &Option<`[&str]`>) -> String {\n    if arg.is_none() {\n        return String::new();\n    }\n    let s = arg.unwrap();\n    `[s.to_string()]`\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\nfn get_or_default(arg: &Option<String>) -> String {\n    `[match arg {]`\n        `[None => String::new(),]`\n        `[Some(s) => s.clone()]`\n    `[}]`\n}\n```\n"
                },
                "context": "The combination of `is_none` and `unwrap` here is a Rust anti-pattern, since a `match` combines the two functionalities and\nautomatically deals with pushing the reference `&Option` into the interior to produce `&String`. Therefore the `match` solution\nis the most idiomatic, and passes the compiler without changing the intended type signature of the function.\n\nThe solution of changing `&Option` to `Option` is not desirable because it requires the caller to provide ownership of their option,\nwhich is a far more restrictive API.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Managing Growing Projects with Packages, Crates, and Modules",
      "file": "ch07-00-managing-growing-projects-with-packages-crates-and-modules.md",
      "elements": [
        {
          "kind": "text",
          "content": "As you write large programs, organizing your code will become increasingly\nimportant. By grouping related functionality and separating code with distinct\nfeatures, you’ll clarify where to find code that implements a particular\nfeature and where to go to change how a feature works."
        },
        {
          "kind": "text",
          "content": "The programs we’ve written so far have been in one module in one file. As a\nproject grows, you should organize code by splitting it into multiple modules\nand then multiple files. A package can contain multiple binary crates and\noptionally one library crate. As a package grows, you can extract parts into\nseparate crates that become external dependencies. This chapter covers all\nthese techniques. For very large projects comprising a set of interrelated\npackages that evolve together, Cargo provides _workspaces_, which we’ll cover\nin [“Cargo Workspaces”][workspaces]<!-- ignore --> in Chapter 14."
        },
        {
          "kind": "text",
          "content": "We’ll also discuss encapsulating implementation details, which lets you reuse\ncode at a higher level: once you’ve implemented an operation, other code can\ncall your code via its public interface without having to know how the\nimplementation works. The way you write code defines which parts are public for\nother code to use and which parts are private implementation details that you\nreserve the right to change. This is another way to limit the amount of detail\nyou have to keep in your head."
        },
        {
          "kind": "text",
          "content": "A related concept is scope: the nested context in which code is written has a\nset of names that are defined as “in scope.” When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can’t have two items with the\nsame name in the same scope; tools are available to resolve name conflicts."
        },
        {
          "kind": "text",
          "content": "Rust has a number of features that allow you to manage your code’s\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the _module system_, include:"
        },
        {
          "kind": "text",
          "content": "* **Packages**: A Cargo feature that lets you build, test, and share crates\n* **Crates**: A tree of modules that produces a library or executable\n* **Modules and use**: Let you control the organization, scope, and privacy of\npaths\n* **Paths**: A way of naming an item, such as a struct, function, or module"
        },
        {
          "kind": "text",
          "content": "In this chapter, we’ll cover all these features, discuss how they interact, and\nexplain how to use them to manage scope. By the end, you should have a solid\nunderstanding of the module system and be able to work with scopes like a pro!"
        },
        {
          "kind": "text",
          "content": "[workspaces]: ch14-03-cargo-workspaces.html"
        }
      ]
    },
    {
      "title": "Packages and Crates",
      "file": "ch07-01-packages-and-crates.md",
      "elements": [
        {
          "kind": "text",
          "content": "The first parts of the module system we’ll cover are packages and crates."
        },
        {
          "kind": "text",
          "content": "A _crate_ is the smallest amount of code that the Rust compiler considers at a\ntime. Even if you run `rustc` rather than `cargo` and pass a single source code\nfile (as we did all the way back in “Writing and Running a Rust Program” in\nChapter 1), the compiler considers that file to be a crate. Crates can contain\nmodules, and the modules may be defined in other files that get compiled with\nthe crate, as we’ll see in the coming sections."
        },
        {
          "kind": "text",
          "content": "A crate can come in one of two forms: a binary crate or a library crate.\n_Binary crates_ are programs you can compile to an executable that you can run,\nsuch as a command line program or a server. Each must have a function called\n`main` that defines what happens when the executable runs. All the crates we’ve\ncreated so far have been binary crates."
        },
        {
          "kind": "text",
          "content": "_Library crates_ don’t have a `main` function, and they don’t compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the `rand` crate we used in [Chapter\n2][rand]<!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say “crate,” they mean library crate, and they\nuse “crate” interchangeably with the general programming concept of a “library.”"
        },
        {
          "kind": "text",
          "content": "The _crate root_ is a source file that the Rust compiler starts from and makes\nup the root module of your crate (we’ll explain modules in depth in [“Defining\nModules to Control Scope and Privacy”][modules]<!-- ignore -->)."
        },
        {
          "kind": "text",
          "content": "A _package_ is a bundle of one or more crates that provides a set of\nfunctionality. A package contains a _Cargo.toml_ file that describes how to\nbuild those crates. Cargo is actually a package that contains the binary crate\nfor the command line tool you’ve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on. Other\nprojects can depend on the Cargo library crate to use the same logic the Cargo\ncommand line tool uses."
        },
        {
          "kind": "text",
          "content": "A package can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that’s a\nlibrary or binary crate."
        },
        {
          "kind": "text",
          "content": "Let’s walk through what happens when we create a package. First we enter the\ncommand `cargo new my-project`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs"
          }
        },
        {
          "kind": "text",
          "content": "After we run `cargo new my-project`, we use `ls` to see what Cargo creates. In\nthe project directory, there’s a _Cargo.toml_ file, giving us a package.\nThere’s also a _src_ directory that contains _main.rs_. Open _Cargo.toml_ in\nyour text editor, and note there’s no mention of _src/main.rs_. Cargo follows a\nconvention that _src/main.rs_ is the crate root of a binary crate with the same\nname as the package. Likewise, Cargo knows that if the package directory\ncontains _src/lib.rs_, the package contains a library crate with the same name\nas the package, and _src/lib.rs_ is its crate root. Cargo passes the crate root\nfiles to `rustc` to build the library or binary."
        },
        {
          "kind": "text",
          "content": "Here, we have a package that only contains _src/main.rs_, meaning it only\ncontains a binary crate named `my-project`. If a package contains _src/main.rs_\nand _src/lib.rs_, it has two crates: a binary and a library, both with the same\nname as the package. A package can have multiple binary crates by placing files\nin the _src/bin_ directory: each file will be a separate binary crate."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "904a0808-22d1-45e5-9611-cf143babbc41",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which is the correct order, where \"A > B\" means \"A contains B\"?\n",
                  "distractors": [
                    "module > crate > package",
                    "crate > package > module"
                  ]
                },
                "answer": {
                  "answer": "package > crate > module"
                },
                "context": "A package is the top-level organizational unit, containing crates. A crate contains modules.\n"
              },
              {
                "id": "d45c7cbe-6089-40b9-843c-fbb9ff48ca49",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Imagine you see a Rust package `foobar` with the following files:\n\n```text\nfoobar\n├── Cargo.toml\n├── build.rs\n└── src/\n    ├── main.rs\n    ├── util.rs\n    ├── lib.rs\n    └── bin/\n        └── alt.rs\n```\n\nHow many crates does this package contain? Write your answer as a digit, e.g. 0, 1, and so on.\n"
                },
                "answer": {
                  "answer": "3"
                },
                "context": " \n`main.rs` produces a binary crate, `lib.rs` produces a library crate, and `bin/alt.rs` produces a binary crate. The `util.rs` would presumably be used as a module within\none of these crates, but it is not a special filename recognized by Rust, so it would not be its own crate. `build.rs` is a build script.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[modules]: ch07-02-defining-modules-to-control-scope-and-privacy.html\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number"
        }
      ]
    },
    {
      "title": "Defining Modules to Control Scope and Privacy",
      "file": "ch07-02-defining-modules-to-control-scope-and-privacy.md",
      "elements": [
        {
          "kind": "text",
          "content": "In this section, we’ll talk about modules and other parts of the module system,\nnamely _paths_, which allow you to name items; the `use` keyword that brings a\npath into scope; and the `pub` keyword to make items public. We’ll also discuss\nthe `as` keyword, external packages, and the glob operator."
        },
        {
          "kind": "text",
          "content": "### Modules Cheat Sheet"
        },
        {
          "kind": "text",
          "content": "Before we get to the details of modules and paths, here we provide a quick\nreference on how modules, paths, the `use` keyword, and the `pub` keyword work\nin the compiler, and how most developers organize their code. We’ll be going\nthrough examples of each of these rules throughout this chapter, but this is a\ngreat place to refer to as a reminder of how modules work."
        },
        {
          "kind": "text",
          "content": "- **Start from the crate root**: When compiling a crate, the compiler first\nlooks in the crate root file (usually _src/lib.rs_ for a library crate or\n_src/main.rs_ for a binary crate) for code to compile.\n- **Declaring modules**: In the crate root file, you can declare new modules;\nsay you declare a “garden” module with `mod garden;`. The compiler will look\nfor the module’s code in these places:\n- Inline, within curly brackets that replace the semicolon following `mod\ngarden`\n- In the file _src/garden.rs_\n- In the file _src/garden/mod.rs_\n- **Declaring submodules**: In any file other than the crate root, you can\ndeclare submodules. For example, you might declare `mod vegetables;` in\n_src/garden.rs_. The compiler will look for the submodule’s code within the\ndirectory named for the parent module in these places:\n- Inline, directly following `mod vegetables`, within curly brackets instead\nof the semicolon\n- In the file _src/garden/vegetables.rs_\n- In the file _src/garden/vegetables/mod.rs_\n- **Paths to code in modules**: Once a module is part of your crate, you can\nrefer to code in that module from anywhere else in that same crate, as long\nas the privacy rules allow, using the path to the code. For example, an\n`Asparagus` type in the garden vegetables module would be found at\n`crate::garden::vegetables::Asparagus`.\n- **Private vs. public**: Code within a module is private from its parent\nmodules by default. To make a module public, declare it with `pub mod`\ninstead of `mod`. To make items within a public module public as well, use\n`pub` before their declarations.\n- **The `use` keyword**: Within a scope, the `use` keyword creates shortcuts to\nitems to reduce repetition of long paths. In any scope that can refer to\n`crate::garden::vegetables::Asparagus`, you can create a shortcut with `use\ncrate::garden::vegetables::Asparagus;` and from then on you only need to\nwrite `Asparagus` to make use of that type in the scope."
        },
        {
          "kind": "text",
          "content": "Here, we create a binary crate named `backyard` that illustrates these rules.\nThe crate’s directory, also named `backyard`, contains these files and\ndirectories:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "backyard\n├── Cargo.lock\n├── Cargo.toml\n└── src\n    ├── garden\n    │   └── vegetables.rs\n    ├── garden.rs\n    └── main.rs"
          }
        },
        {
          "kind": "text",
          "content": "The crate root file in this case is _src/main.rs_, and it contains:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `pub mod garden;` line tells the compiler to include the code it finds in\n_src/garden.rs_, which is:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/garden.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, `pub mod vegetables;` means the code in _src/garden/vegetables.rs_ is\nincluded too. That code is:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden/vegetables.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Now let’s get into the details of these rules and demonstrate them in action!"
        },
        {
          "kind": "text",
          "content": "### Grouping Related Code in Modules"
        },
        {
          "kind": "text",
          "content": "_Modules_ let us organize code within a crate for readability and easy reuse.\nModules also allow us to control the _privacy_ of items because code within a\nmodule is private by default. Private items are internal implementation details\nnot available for outside use. We can choose to make modules and the items\nwithin them public, which exposes them to allow external code to use and depend\non them."
        },
        {
          "kind": "text",
          "content": "As an example, let’s write a library crate that provides the functionality of a\nrestaurant. We’ll define the signatures of functions but leave their bodies\nempty to concentrate on the organization of the code rather than the\nimplementation of a restaurant."
        },
        {
          "kind": "text",
          "content": "In the restaurant industry, some parts of a restaurant are referred to as\n_front of house_ and others as _back of house_. Front of house is where\ncustomers are; this encompasses where the hosts seat customers, servers take\norders and payment, and bartenders make drinks. Back of house is where the\nchefs and cooks work in the kitchen, dishwashers clean up, and managers do\nadministrative work."
        },
        {
          "kind": "text",
          "content": "To structure our crate in this way, we can organize its functions into nested\nmodules. Create a new library named `restaurant` by running `cargo new\nrestaurant --lib`. Then enter the code in Listing 7-1 into _src/lib.rs_ to\ndefine some modules and function signatures; this code is the front of house\nsection."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-1\" file-name=\"src/lib.rs\" caption=\"A `front_of_house` module containing other modules that then contain functions\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-01/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We define a module with the `mod` keyword followed by the name of the module\n(in this case, `front_of_house`). The body of the module then goes inside curly\nbrackets. Inside modules, we can place other modules, as in this case with the\nmodules `hosting` and `serving`. Modules can also hold definitions for other\nitems, such as structs, enums, constants, traits, and as in Listing 7-1,\nfunctions."
        },
        {
          "kind": "text",
          "content": "By using modules, we can group related definitions together and name why\nthey’re related. Programmers using this code can navigate the code based on the\ngroups rather than having to read through all the definitions, making it easier\nto find the definitions relevant to them. Programmers adding new functionality\nto this code would know where to place the code to keep the program organized."
        },
        {
          "kind": "text",
          "content": "Earlier, we mentioned that _src/main.rs_ and _src/lib.rs_ are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named `crate` at the root of the crate’s module structure,\nknown as the _module tree_."
        },
        {
          "kind": "text",
          "content": "Listing 7-2 shows the module tree for the structure in Listing 7-1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-2\" caption=\"The module tree for the code in Listing 7-1\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "crate\n └── front_of_house\n     ├── hosting\n     │   ├── add_to_waitlist\n     │   └── seat_at_table\n     └── serving\n         ├── take_order\n         ├── serve_order\n         └── take_payment"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This tree shows how some of the modules nest inside other modules; for example,\n`hosting` nests inside `front_of_house`. The tree also shows that some modules\nare _siblings_, meaning they’re defined in the same module; `hosting` and\n`serving` are siblings defined within `front_of_house`. If module A is\ncontained inside module B, we say that module A is the _child_ of module B and\nthat module B is the _parent_ of module A. Notice that the entire module tree\nis rooted under the implicit module named `crate`."
        },
        {
          "kind": "text",
          "content": "The module tree might remind you of the filesystem’s directory tree on your\ncomputer; this is a very apt comparison! Just like directories in a filesystem,\nyou use modules to organize your code. And just like files in a directory, we\nneed a way to find our modules."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "23c95879-aae2-4121-bf89-21278f7b6ec6",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following is NOT a benefit of using modules?\n",
                  "distractors": [
                    "Modules group related code so programmers can more easily work on a large codebase",
                    "Modules encapsulate implementation details that shouldn't be used by external clients",
                    "Modules provide a scope to avoid naming conflicts across parts of a codebase"
                  ]
                },
                "answer": {
                  "answer": "Modules boost the runtime performance of interdependent code within the same module"
                },
                "context": "Modules have no effect on runtime, they are purely for compile-time organization.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Paths for Referring to an Item in the Module Tree",
      "file": "ch07-03-paths-for-referring-to-an-item-in-the-module-tree.md",
      "elements": [
        {
          "kind": "text",
          "content": "To show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path."
        },
        {
          "kind": "text",
          "content": "A path can take two forms:"
        },
        {
          "kind": "text",
          "content": "- An _absolute path_ is the full path starting from a crate root; for code\nfrom an external crate, the absolute path begins with the crate name, and for\ncode from the current crate, it starts with the literal `crate`.\n- A _relative path_ starts from the current module and uses `self`, `super`, or\nan identifier in the current module."
        },
        {
          "kind": "text",
          "content": "Both absolute and relative paths are followed by one or more identifiers\nseparated by double colons (`::`)."
        },
        {
          "kind": "text",
          "content": "Returning to Listing 7-1, say we want to call the `add_to_waitlist` function.\nThis is the same as asking: what’s the path of the `add_to_waitlist` function?\nListing 7-3 contains Listing 7-1 with some of the modules and functions\nremoved."
        },
        {
          "kind": "text",
          "content": "We’ll show two ways to call the `add_to_waitlist` function from a new function,\n`eat_at_restaurant`, defined in the crate root. These paths are correct, but\nthere’s another problem remaining that will prevent this example from compiling\nas is. We’ll explain why in a bit."
        },
        {
          "kind": "text",
          "content": "The `eat_at_restaurant` function is part of our library crate’s public API, so\nwe mark it with the `pub` keyword. In the [“Exposing Paths with the `pub`\nKeyword”][pub]<!-- ignore --> section, we’ll go into more detail about `pub`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-3\" file-name=\"src/lib.rs\" caption=\"Calling the `add_to_waitlist` function using absolute and relative paths\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-03/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The first time we call the `add_to_waitlist` function in `eat_at_restaurant`,\nwe use an absolute path. The `add_to_waitlist` function is defined in the same\ncrate as `eat_at_restaurant`, which means we can use the `crate` keyword to\nstart an absolute path. We then include each of the successive modules until we\nmake our way to `add_to_waitlist`. You can imagine a filesystem with the same\nstructure: we’d specify the path `/front_of_house/hosting/add_to_waitlist` to\nrun the `add_to_waitlist` program; using the `crate` name to start from the\ncrate root is like using `/` to start from the filesystem root in your shell."
        },
        {
          "kind": "text",
          "content": "The second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a\nrelative path. The path starts with `front_of_house`, the name of the module\ndefined at the same level of the module tree as `eat_at_restaurant`. Here the\nfilesystem equivalent would be using the path\n`front_of_house/hosting/add_to_waitlist`. Starting with a module name means\nthat the path is relative."
        },
        {
          "kind": "text",
          "content": "Choosing whether to use a relative or absolute path is a decision you’ll make\nbased on your project, and it depends on whether you’re more likely to move\nitem definition code separately from or together with the code that uses the\nitem. For example, if we moved the `front_of_house` module and the\n`eat_at_restaurant` function into a module named `customer_experience`, we’d\nneed to update the absolute path to `add_to_waitlist`, but the relative path\nwould still be valid. However, if we moved the `eat_at_restaurant` function\nseparately into a module named `dining`, the absolute path to the\n`add_to_waitlist` call would stay the same, but the relative path would need to\nbe updated. Our preference in general is to specify absolute paths because it’s\nmore likely we’ll want to move code definitions and item calls independently of\neach other."
        },
        {
          "kind": "text",
          "content": "Let’s try to compile Listing 7-3 and find out why it won’t compile yet! The\nerrors we get are shown in Listing 7-4."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-4\" caption=\"Compiler errors from building the code in Listing 7-3\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch07-managing-growing-projects/listing-07-03/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The error messages say that module `hosting` is private. In other words, we\nhave the correct paths for the `hosting` module and the `add_to_waitlist`\nfunction, but Rust won’t let us use them because it doesn’t have access to the\nprivate sections. In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module."
        },
        {
          "kind": "text",
          "content": "Items in a parent module can’t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they’re defined. To continue with our\nmetaphor, think of the privacy rules as being like the back office of a\nrestaurant: what goes on in there is private to restaurant customers, but\noffice managers can see and do everything in the restaurant they operate."
        },
        {
          "kind": "text",
          "content": "Rust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules’ code to outer ancestor\nmodules by using the `pub` keyword to make an item public."
        },
        {
          "kind": "text",
          "content": "### Exposing Paths with the `pub` Keyword"
        },
        {
          "kind": "text",
          "content": "Let’s return to the error in Listing 7-4 that told us the `hosting` module is\nprivate. We want the `eat_at_restaurant` function in the parent module to have\naccess to the `add_to_waitlist` function in the child module, so we mark the\n`hosting` module with the `pub` keyword, as shown in Listing 7-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-5\" file-name=\"src/lib.rs\" caption=\"Declaring the `hosting` module as `pub` to use it from `eat_at_restaurant`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-05/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Unfortunately, the code in Listing 7-5 still results in compiler errors, as\nshown in Listing 7-6."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-6\" caption=\"Compiler errors from building the code in Listing 7-5\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch07-managing-growing-projects/listing-07-05/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "What happened? Adding the `pub` keyword in front of `mod hosting` makes the\nmodule public. With this change, if we can access `front_of_house`, we can\naccess `hosting`. But the _contents_ of `hosting` are still private; making the\nmodule public doesn’t make its contents public. The `pub` keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there’s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well."
        },
        {
          "kind": "text",
          "content": "The errors in Listing 7-6 say that the `add_to_waitlist` function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules."
        },
        {
          "kind": "text",
          "content": "Let’s also make the `add_to_waitlist` function public by adding the `pub`\nkeyword before its definition, as in Listing 7-7."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-7\" file-name=\"src/lib.rs\" caption=\"Adding the `pub` keyword to `mod hosting` and `fn add_to_waitlist` lets us call the function from `eat_at_restaurant`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-07/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Now the code will compile! To see why adding the `pub` keyword lets us use\nthese paths in `eat_at_restaurant` with respect to the privacy rules, let’s look\nat the absolute and the relative paths."
        },
        {
          "kind": "text",
          "content": "In the absolute path, we start with `crate`, the root of our crate’s module\ntree. The `front_of_house` module is defined in the crate root. While\n`front_of_house` isn’t public, because the `eat_at_restaurant` function is\ndefined in the same module as `front_of_house` (that is, `eat_at_restaurant`\nand `front_of_house` are siblings), we can refer to `front_of_house` from\n`eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can\naccess the parent module of `hosting`, so we can access `hosting`. Finally, the\n`add_to_waitlist` function is marked with `pub` and we can access its parent\nmodule, so this function call works!"
        },
        {
          "kind": "text",
          "content": "In the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n`front_of_house`. The `front_of_house` module is defined within the same module\nas `eat_at_restaurant`, so the relative path starting from the module in which\n`eat_at_restaurant` is defined works. Then, because `hosting` and\n`add_to_waitlist` are marked with `pub`, the rest of the path works, and this\nfunction call is valid!"
        },
        {
          "kind": "text",
          "content": "If you plan on sharing your library crate so other projects can use your code,\nyour public API is your contract with users of your crate that determines how\nthey can interact with your code. There are many considerations around managing\nchanges to your public API to make it easier for people to depend on your\ncrate. These considerations are beyond the scope of this book; if you’re\ninterested in this topic, see [The Rust API Guidelines][api-guidelines]."
        },
        {
          "kind": "text",
          "content": "> #### Best Practices for Packages with a Binary and a Library\n>\n> We mentioned that a package can contain both a _src/main.rs_ binary crate\n> root as well as a _src/lib.rs_ library crate root, and both crates will have\n> the package name by default. Typically, packages with this pattern of\n> containing both a library and a binary crate will have just enough code in the\n> binary crate to start an executable that calls code defined in the library\n> crate. This lets other projects benefit from the most functionality that the\n> package provides because the library crate’s code can be shared.\n>\n> The module tree should be defined in _src/lib.rs_. Then, any public items can\n> be used in the binary crate by starting paths with the name of the package.\n> The binary crate becomes a user of the library crate just like a completely\n> external crate would use the library crate: it can only use the public API.\n> This helps you design a good API; not only are you the author, you’re also a\n> client!\n>\n> In [Chapter 12][ch12]<!-- ignore -->, we’ll demonstrate this organizational\n> practice with a command line program that will contain both a binary crate\n> and a library crate."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "4e18f340-e336-43c5-9a95-79dec1f49945",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "What is the keyword you use at the start of an absolute path to an item in the current crate?"
                },
                "answer": {
                  "answer": "crate"
                },
                "context": "For example, an absolute path to item `b` in module `a` would be `crate::a::b`.\n"
              },
              {
                "id": "256d0ce2-da89-4b44-94da-177634fc633a",
                "type": "Tracing",
                "prompt": {
                  "program": "pub mod foo {\n  fn a() { println!(\"a\"); }\n  mod bar {\n    pub fn b() { println!(\"b\"); }\n  }\n}\n\nfn main() {\n  foo::bar::b();\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 9
                },
                "context": "`b` is not accessible to `main` because the module `bar` is not marked as `pub`.\n"
              },
              {
                "id": "5e78e2e4-81dc-42b2-8527-f08b5117982f",
                "type": "Tracing",
                "prompt": {
                  "program": "pub mod foo {\n  pub mod bar {\n    pub fn b() { println!(\"b\");  }\n  }\n  pub fn a() { bar::b(); }\n}\n\nfn main() {\n  foo::a();\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "b"
                },
                "context": "It is valid within `foo` to use a relative path to refer to items within `bar`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Starting Relative Paths with `super`"
        },
        {
          "kind": "text",
          "content": "We can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using `super` at the start of the\npath. This is like starting a filesystem path with the `..` syntax that means\nto go to the parent directory. Using `super` allows us to reference an item\nthat we know is in the parent module, which can make rearranging the module\ntree easier when the module is closely related to the parent but the parent\nmight be moved elsewhere in the module tree someday."
        },
        {
          "kind": "text",
          "content": "Consider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction `fix_incorrect_order` defined in the `back_of_house` module calls the\nfunction `deliver_order` defined in the parent module by specifying the path to\n`deliver_order`, starting with `super`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-8\" file-name=\"src/lib.rs\" caption=\"Calling a function using a relative path starting with `super`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-08/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `fix_incorrect_order` function is in the `back_of_house` module, so we can\nuse `super` to go to the parent module of `back_of_house`, which in this case\nis `crate`, the root. From there, we look for `deliver_order` and find it.\nSuccess! We think the `back_of_house` module and the `deliver_order` function\nare likely to stay in the same relationship to each other and get moved\ntogether should we decide to reorganize the crate’s module tree. Therefore, we\nused `super` so we’ll have fewer places to update code in the future if this\ncode gets moved to a different module."
        },
        {
          "kind": "text",
          "content": "### Making Structs and Enums Public"
        },
        {
          "kind": "text",
          "content": "We can also use `pub` to designate structs and enums as public, but there are a\nfew extra details to the usage of `pub` with structs and enums. If we use `pub`\nbefore a struct definition, we make the struct public, but the struct’s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we’ve defined a public `back_of_house::Breakfast` struct\nwith a public `toast` field but a private `seasonal_fruit` field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what’s in season and in stock. The available fruit changes quickly, so\ncustomers can’t choose the fruit or even see which fruit they’ll get."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-9\" file-name=\"src/lib.rs\" caption=\"A struct with some public fields and some private fields\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-09/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because the `toast` field in the `back_of_house::Breakfast` struct is public,\nin `eat_at_restaurant` we can write and read to the `toast` field using dot\nnotation. Notice that we can’t use the `seasonal_fruit` field in\n`eat_at_restaurant`, because `seasonal_fruit` is private. Try uncommenting the\nline modifying the `seasonal_fruit` field value to see what error you get!"
        },
        {
          "kind": "text",
          "content": "Also, note that because `back_of_house::Breakfast` has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t\nhave such a function, we couldn’t create an instance of `Breakfast` in\n`eat_at_restaurant` because we couldn’t set the value of the private\n`seasonal_fruit` field in `eat_at_restaurant`."
        },
        {
          "kind": "text",
          "content": "In contrast, if we make an enum public, all of its variants are then public. We\nonly need the `pub` before the `enum` keyword, as shown in Listing 7-10."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-10\" file-name=\"src/lib.rs\" caption=\"Designating an enum as public makes all its variants public.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-10/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because we made the `Appetizer` enum public, we can use the `Soup` and `Salad`\nvariants in `eat_at_restaurant`."
        },
        {
          "kind": "text",
          "content": "Enums aren’t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with `pub` in every case, so the default\nfor enum variants is to be public. Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with `pub`."
        },
        {
          "kind": "text",
          "content": "There’s one more situation involving `pub` that we haven’t covered, and that is\nour last module system feature: the `use` keyword. We’ll cover `use` by itself\nfirst, and then we’ll show how to combine `pub` and `use`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8ef2f170-71d9-4f17-a688-b99d8c8072a8",
                "type": "Tracing",
                "prompt": {
                  "program": "pub mod a {\n  pub mod b {\n    pub fn f() { println!(\"b1\"); }\n    pub mod c {\n      pub fn f() { println!(\"c1\"); }\n    }\n  }\n  pub fn entry() { super::b::c::f(); }\n}\n\npub mod b {\n  pub fn f() { println!(\"b2\"); }\n  pub mod c {\n    pub fn f() { println!(\"c2\"); }\n  }\n}\n\nfn main() {\n  crate::a::entry();\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "c2"
                },
                "context": "`entry` uses the path `super::b::c::f`. `entry` is within the module `a`, so `super` refers to the parent module of `a`, which is the root crate. \nThen the child `b` of the root is the outermost module `b`, whose child `c` contains a function `f` that prints `\"c2\"`.\n"
              },
              {
                "id": "153b12b3-4fbc-449c-99a6-7a2cd469df0f",
                "type": "Tracing",
                "prompt": {
                  "program": "pub mod point {\n  #[derive(Debug)]\n  pub struct Point(i32, i32);\n\n  impl Point {\n    pub fn origin() -> Self { Point(0, 0) }\n  }\n}\n\nfn main() {\n  let mut p = point::Point::origin();\n  p.0 += 1;\n  println!(\"{p:?}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 12
                },
                "context": "While the `Point` structure and the `origin` static method are both public, the field `i32` is not marked as pub. Therefore directly accessing `p.0` outside of\nthe `point` module is not allowed. This program would compile if line 3 were changed to `pub struct Point(pub i32, pub i32)`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[pub]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\n[api-guidelines]: https://rust-lang.github.io/api-guidelines/\n[ch12]: ch12-00-an-io-project.html"
        }
      ]
    },
    {
      "title": "Bringing Paths into Scope with the `use` Keyword",
      "file": "ch07-04-bringing-paths-into-scope-with-the-use-keyword.md",
      "elements": [
        {
          "kind": "text",
          "content": "Having to write out the paths to call functions can feel inconvenient and\nrepetitive. In Listing 7-7, whether we chose the absolute or relative path to\nthe `add_to_waitlist` function, every time we wanted to call `add_to_waitlist`\nwe had to specify `front_of_house` and `hosting` too. Fortunately, there’s a\nway to simplify this process: we can create a shortcut to a path with the `use`\nkeyword once, and then use the shorter name everywhere else in the scope."
        },
        {
          "kind": "text",
          "content": "In Listing 7-11, we bring the `crate::front_of_house::hosting` module into the\nscope of the `eat_at_restaurant` function so we only have to specify\n`hosting::add_to_waitlist` to call the `add_to_waitlist` function in\n`eat_at_restaurant`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-11\" file-name=\"src/lib.rs\" caption=\"Bringing a module into scope with `use`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-11/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Adding `use` and a path in a scope is similar to creating a symbolic link in\nthe filesystem. By adding `use crate::front_of_house::hosting` in the crate\nroot, `hosting` is now a valid name in that scope, just as though the `hosting`\nmodule had been defined in the crate root. Paths brought into scope with `use`\nalso check privacy, like any other paths."
        },
        {
          "kind": "text",
          "content": "Note that `use` only creates the shortcut for the particular scope in which the\n`use` occurs. Listing 7-12 moves the `eat_at_restaurant` function into a new\nchild module named `customer`, which is then a different scope than the `use`\nstatement, so the function body won’t compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-12\" file-name=\"src/lib.rs\" caption=\"A `use` statement only applies in the scope it’s in.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness",
              "does_not_compile",
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-12/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The compiler error shows that the shortcut no longer applies within the\n`customer` module:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch07-managing-growing-projects/listing-07-12/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Notice there’s also a warning that the `use` is no longer used in its scope! To\nfix this problem, move the `use` within the `customer` module too, or reference\nthe shortcut in the parent module with `super::hosting` within the child\n`customer` module."
        },
        {
          "kind": "text",
          "content": "### Creating Idiomatic `use` Paths"
        },
        {
          "kind": "text",
          "content": "In Listing 7-11, you might have wondered why we specified `use\ncrate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in\n`eat_at_restaurant`, rather than specifying the `use` path all the way out to\nthe `add_to_waitlist` function to achieve the same result, as in Listing 7-13."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-13\" file-name=\"src/lib.rs\" caption=\"Bringing the `add_to_waitlist` function into scope with `use`, which is unidiomatic\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-13/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Although both Listing 7-11 and Listing 7-13 accomplish the same task, Listing\n7-11 is the idiomatic way to bring a function into scope with `use`. Bringing\nthe function’s parent module into scope with `use` means we have to specify the\nparent module when calling the function. Specifying the parent module when\ncalling the function makes it clear that the function isn’t locally defined\nwhile still minimizing repetition of the full path. The code in Listing 7-13 is\nunclear as to where `add_to_waitlist` is defined."
        },
        {
          "kind": "text",
          "content": "On the other hand, when bringing in structs, enums, and other items with `use`,\nit’s idiomatic to specify the full path. Listing 7-14 shows the idiomatic way\nto bring the standard library’s `HashMap` struct into the scope of a binary\ncrate."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-14\" file-name=\"src/main.rs\" caption=\"Bringing `HashMap` into scope in an idiomatic way\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-14/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "There’s no strong reason behind this idiom: it’s just the convention that has\nemerged, and folks have gotten used to reading and writing Rust code this way."
        },
        {
          "kind": "text",
          "content": "The exception to this idiom is if we’re bringing two items with the same name\ninto scope with `use` statements, because Rust doesn’t allow that. Listing 7-15\nshows how to bring two `Result` types into scope that have the same name but\ndifferent parent modules, and how to refer to them."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-15\" file-name=\"src/lib.rs\" caption=\"Bringing two types with the same name into the same scope requires using their parent modules.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-15/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As you can see, using the parent modules distinguishes the two `Result` types.\nIf instead we specified `use std::fmt::Result` and `use std::io::Result`, we’d\nhave two `Result` types in the same scope, and Rust wouldn’t know which one we\nmeant when we used `Result`."
        },
        {
          "kind": "text",
          "content": "### Providing New Names with the `as` Keyword"
        },
        {
          "kind": "text",
          "content": "There’s another solution to the problem of bringing two types of the same name\ninto the same scope with `use`: after the path, we can specify `as` and a new\nlocal name, or _alias_, for the type. Listing 7-16 shows another way to write\nthe code in Listing 7-15 by renaming one of the two `Result` types using `as`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-16\" file-name=\"src/lib.rs\" caption=\"Renaming a type when it’s brought into scope with the `as` keyword\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-16/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In the second `use` statement, we chose the new name `IoResult` for the\n`std::io::Result` type, which won’t conflict with the `Result` from `std::fmt`\nthat we’ve also brought into scope. Listing 7-15 and Listing 7-16 are\nconsidered idiomatic, so the choice is up to you!"
        },
        {
          "kind": "text",
          "content": "### Re-exporting Names with `pub use`"
        },
        {
          "kind": "text",
          "content": "When we bring a name into scope with the `use` keyword, the name is private to\nthe scope into which we imported it. To enable code outside that scope to refer\nto that name as if it had been defined in that scope, we can combine `pub` and\n`use`. This technique is called _re-exporting_ because we’re bringing an item\ninto scope but also making that item available for others to bring into their\nscope."
        },
        {
          "kind": "text",
          "content": "Listing 7-17 shows the code in Listing 7-11 with `use` in the root module\nchanged to `pub use`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-17\" file-name=\"src/lib.rs\" caption=\"Making a name available for any code to use from a new scope with `pub use`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-17/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Before this change, external code would have to call the `add_to_waitlist`\nfunction by using the path\n`restaurant::front_of_house::hosting::add_to_waitlist()`, which also would have\nrequired the `front_of_house` module to be marked as `pub`. Now that this `pub\nuse` has re-exported the `hosting` module from the root module, external code\ncan use the path `restaurant::hosting::add_to_waitlist()` instead."
        },
        {
          "kind": "text",
          "content": "Re-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain. For\nexample, in this restaurant metaphor, the people running the restaurant think\nabout “front of house” and “back of house.” But customers visiting a restaurant\nprobably won’t think about the parts of the restaurant in those terms. With `pub\nuse`, we can write our code with one structure but expose a different structure.\nDoing so makes our library well organized for programmers working on the library\nand programmers calling the library. We’ll look at another example of `pub use`\nand how it affects your crate’s documentation in [“Exporting a Convenient Public\nAPI with `pub use`”][ch14-pub-use]<!-- ignore --> in Chapter 14."
        },
        {
          "kind": "text",
          "content": "### Using External Packages"
        },
        {
          "kind": "text",
          "content": "In Chapter 2, we programmed a guessing game project that used an external\npackage called `rand` to get random numbers. To use `rand` in our project, we\nadded this line to _Cargo.toml_:"
        },
        {
          "kind": "text",
          "content": "<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch14-03-cargo-workspaces.md\n-->"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"Cargo.toml\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:9:}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Adding `rand` as a dependency in _Cargo.toml_ tells Cargo to download the\n`rand` package and any dependencies from [crates.io](https://crates.io/) and\nmake `rand` available to our project."
        },
        {
          "kind": "text",
          "content": "Then, to bring `rand` definitions into the scope of our package, we added a\n`use` line starting with the name of the crate, `rand`, and listed the items we\nwanted to bring into scope. Recall that in [“Generating a Random\nNumber”][rand]<!-- ignore --> in Chapter 2, we brought the `Rng` trait into\nscope and called the `rand::thread_rng` function:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:ch07-04}}"
          }
        },
        {
          "kind": "text",
          "content": "Members of the Rust community have made many packages available at\n[crates.io](https://crates.io/), and pulling any of them into your package\ninvolves these same steps: listing them in your package’s _Cargo.toml_ file and\nusing `use` to bring items from their crates into scope."
        },
        {
          "kind": "text",
          "content": "Note that the standard `std` library is also a crate that’s external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon’t need to change _Cargo.toml_ to include `std`. But we do need to refer to\nit with `use` to bring items from there into our package’s scope. For example,\nwith `HashMap` we would use this line:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "use std::collections::HashMap;"
          }
        },
        {
          "kind": "text",
          "content": "This is an absolute path starting with `std`, the name of the standard library\ncrate."
        },
        {
          "kind": "text",
          "content": "### Using Nested Paths to Clean Up Large `use` Lists"
        },
        {
          "kind": "text",
          "content": "If we’re using multiple items defined in the same crate or same module, listing\neach item on its own line can take up a lot of vertical space in our files. For\nexample, these two `use` statements we had in the guessing game in Listing 2-4\nbring items from `std` into scope:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-01-use-std-unnested/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Instead, we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer, as shown in Listing 7-18."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-18\" file-name=\"src/main.rs\" caption=\"Specifying a nested path to bring multiple items with the same prefix into scope\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-18/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In bigger programs, bringing many items into scope from the same crate or\nmodule using nested paths can reduce the number of separate `use` statements\nneeded by a lot!"
        },
        {
          "kind": "text",
          "content": "We can use a nested path at any level in a path, which is useful when combining\ntwo `use` statements that share a subpath. For example, Listing 7-19 shows two\n`use` statements: one that brings `std::io` into scope and one that brings\n`std::io::Write` into scope."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-19\" file-name=\"src/lib.rs\" caption=\"Two `use` statements where one is a subpath of the other\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-19/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The common part of these two paths is `std::io`, and that’s the complete first\npath. To merge these two paths into one `use` statement, we can use `self` in\nthe nested path, as shown in Listing 7-20."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-20\" file-name=\"src/lib.rs\" caption=\"Combining the paths in Listing 7-19 into one `use` statement\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-20/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This line brings `std::io` and `std::io::Write` into scope."
        },
        {
          "kind": "text",
          "content": "### The Glob Operator"
        },
        {
          "kind": "text",
          "content": "If we want to bring _all_ public items defined in a path into scope, we can\nspecify that path followed by the `*` glob operator:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "use std::collections::*;"
          }
        },
        {
          "kind": "text",
          "content": "This `use` statement brings all public items defined in `std::collections` into\nthe current scope. Be careful when using the glob operator! Glob can make it\nharder to tell what names are in scope and where a name used in your program\nwas defined. Additionally, if the dependency changes its definitions, what\nyou’ve imported changes as well, which may lead to compiler errors when you\nupgrade the dependency if the dependency adds a definition with the same name\nas a definition of yours in the same scope, for example."
        },
        {
          "kind": "text",
          "content": "The glob operator is often used when testing to bring everything under test into\nthe `tests` module; we’ll talk about that in [“How to Write\nTests”][writing-tests]<!-- ignore --> in Chapter 11. The glob operator is also\nsometimes used as part of the prelude pattern: see [the standard library\ndocumentation](../std/prelude/index.html#other-preludes)<!-- ignore --> for more\ninformation on that pattern."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "a162c2c8-aadf-4963-a997-02a1035f2459",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following statements best describes the function of the `use` keyword?",
                  "distractors": [
                    "`use` copies the contents of an item from one module to another",
                    "`use` allows access to items that circumvents normal privacy rules",
                    "`use` indicates to the compiler that an item will be used and should be optimized"
                  ]
                },
                "answer": {
                  "answer": "`use` reduces the verbosity of referring to items in the used path"
                },
                "context": "`use` allows references to items in the used path that are shorter than without the `use`, reducing the verbosity of reference.\n"
              },
              {
                "id": "eccc2099-9880-4628-8474-f1d55e2a4a4a",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Consider this module and `use` statement:\n\n```\npub mod parent {\n  pub fn a() {}\n  fn b() {}\n  pub mod child {\n    pub fn c() {}\n  }\n}\n\nfn main() {\n  use parent::{*, child as alias};\n  // ...\n}\n```\n\nInside `main`, what is the total number of paths that can refer to `a`, `b`, or `c` (not including those that use `self`, `super`, or `crate`)?\nWrite your answer as a digit such as 0 or 1. For example, if the only two valid paths were `a` and `parent::b`, then the answer would be 2.\n"
                },
                "answer": {
                  "answer": "5"
                },
                "context": "There are two paths to `a`: `parent::a` and `a`. There are no paths to `b`, because it is private. There are three paths to `c`:\n`parent::child::c`, `child::c`, `alias::c`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[ch14-pub-use]: ch14-02-publishing-to-crates-io.html#exporting-a-convenient-public-api-with-pub-use\n[rand]: ch02-00-guessing-game-tutorial.html#generating-a-random-number\n[writing-tests]: ch11-01-writing-tests.html#how-to-write-tests"
        }
      ]
    },
    {
      "title": "Separating Modules into Different Files",
      "file": "ch07-05-separating-modules-into-different-files.md",
      "elements": [
        {
          "kind": "text",
          "content": "So far, all the examples in this chapter defined multiple modules in one file.\nWhen modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate."
        },
        {
          "kind": "text",
          "content": "For example, let’s start from the code in Listing 7-17 that had multiple\nrestaurant modules. We’ll extract modules into files instead of having all the\nmodules defined in the crate root file. In this case, the crate root file is\n_src/lib.rs_, but this procedure also works with binary crates whose crate root\nfile is _src/main.rs_."
        },
        {
          "kind": "text",
          "content": "First we’ll extract the `front_of_house` module to its own file. Remove the\ncode inside the curly brackets for the `front_of_house` module, leaving only\nthe `mod front_of_house;` declaration, so that _src/lib.rs_ contains the code\nshown in Listing 7-21. Note that this won’t compile until we create the\n_src/front_of_house.rs_ file in Listing 7-22."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-21\" file-name=\"src/lib.rs\" caption=\"Declaring the `front_of_house` module whose body will be in *src/front_of_house.rs*\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Next, place the code that was in the curly brackets into a new file named\n_src/front_of_house.rs_, as shown in Listing 7-22. The compiler knows to look\nin this file because it came across the module declaration in the crate root\nwith the name `front_of_house`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"7-22\" file-name=\"src/front_of_house.rs\" caption=\"Definitions inside the `front_of_house` module in *src/front_of_house.rs*\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/front_of_house.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that you only need to load a file using a `mod` declaration _once_ in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you’ve put the `mod`\nstatement), other files in your project should refer to the loaded file’s code\nusing a path to where it was declared, as covered in the [“Paths for Referring\nto an Item in the Module Tree”][paths]<!-- ignore --> section. In other words,\n`mod` is _not_ an “include” operation that you may have seen in other\nprogramming languages."
        },
        {
          "kind": "text",
          "content": "Next, we’ll extract the `hosting` module to its own file. The process is a bit\ndifferent because `hosting` is a child module of `front_of_house`, not of the\nroot module. We’ll place the file for `hosting` in a new directory that will be\nnamed for its ancestors in the module tree, in this case _src/front_of_house_."
        },
        {
          "kind": "text",
          "content": "To start moving `hosting`, we change _src/front_of_house.rs_ to contain only\nthe declaration of the `hosting` module:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/front_of_house.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Then we create a _src/front_of_house_ directory and a _hosting.rs_ file to\ncontain the definitions made in the `hosting` module:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/front_of_house/hosting.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house/hosting.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If we instead put _hosting.rs_ in the _src_ directory, the compiler would\nexpect the _hosting.rs_ code to be in a `hosting` module declared in the crate\nroot, and not declared as a child of the `front_of_house` module. The\ncompiler’s rules for which files to check for which modules’ code mean the\ndirectories and files more closely match the module tree."
        },
        {
          "kind": "text",
          "content": "> ### Alternate File Paths\n>\n> So far we’ve covered the most idiomatic file paths the Rust compiler uses,\n> but Rust also supports an older style of file path. For a module named\n> `front_of_house` declared in the crate root, the compiler will look for the\n> module’s code in:\n>\n> - _src/front_of_house.rs_ (what we covered)\n> - _src/front_of_house/mod.rs_ (older style, still supported path)\n>\n> For a module named `hosting` that is a submodule of `front_of_house`, the\n> compiler will look for the module’s code in:\n>\n> - _src/front_of_house/hosting.rs_ (what we covered)\n> - _src/front_of_house/hosting/mod.rs_ (older style, still supported path)\n>\n> If you use both styles for the same module, you’ll get a compiler error.\n> Using a mix of both styles for different modules in the same project is\n> allowed, but might be confusing for people navigating your project.\n>\n> The main downside to the style that uses files named _mod.rs_ is that your\n> project can end up with many files named _mod.rs_, which can get confusing\n> when you have them open in your editor at the same time."
        },
        {
          "kind": "text",
          "content": "We’ve moved each module’s code to a separate file, and the module tree remains\nthe same. The function calls in `eat_at_restaurant` will work without any\nmodification, even though the definitions live in different files. This\ntechnique lets you move modules to new files as they grow in size."
        },
        {
          "kind": "text",
          "content": "Note that the `pub use crate::front_of_house::hosting` statement in\n_src/lib.rs_ also hasn’t changed, nor does `use` have any impact on what files\nare compiled as part of the crate. The `mod` keyword declares modules, and Rust\nlooks in a file with the same name as the module for the code that goes into\nthat module."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "6a94bc90-6cc5-4a47-838c-596d3747b7e4",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Imagine a Rust package with the following directory structure:\n\n```text\nfoobar\n├── Cargo.toml\n└── src/\n    ├── lib.rs\n    ├── engine.rs\n    └── engine/\n        └── analysis.rs\n```\n\nThe contents of each file are:\n\n\n```\n// engine/analysis.rs\npub fn run() {}\n```\n\n```\n// engine.rs\nmod analysis;\npub use analysis::*;\n```\n\n```\n// lib.rs\npub mod engine;\n```\n\nSay that another Rust developer is using the `foobar` library crate in a separate package, and they want to call the `run` function. \nWhat is the path they would write?\n"
                },
                "answer": {
                  "answer": "foobar::engine::run",
                  "alternatives": [
                    "foobar::engine::run()"
                  ]
                },
                "context": "The module tree generated by this directory structure is as follows:\n\n```text\nfoobar\n└── engine\n    └── run  \n```\n\nTherefore the path to `run` is `foobar::engine::run`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Rust lets you split a package into multiple crates and a crate into modules so\nyou can refer to items defined in one module from another module. You can do\nthis by specifying absolute or relative paths. These paths can be brought into\nscope with a `use` statement so you can use a shorter path for multiple uses of\nthe item in that scope. Module code is private by default, but you can make\ndefinitions public by adding the `pub` keyword."
        },
        {
          "kind": "text",
          "content": "In the next chapter, we’ll look at some collection data structures in the\nstandard library that you can use in your neatly organized code."
        },
        {
          "kind": "text",
          "content": "[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html"
        }
      ]
    },
    {
      "title": "Common Collections",
      "file": "ch08-00-common-collections.md",
      "elements": [
        {
          "kind": "text",
          "content": "Rust’s standard library includes a number of very useful data structures called\n_collections_. Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data that these collections point to is stored on the heap, which\nmeans the amount of data does not need to be known at compile time and can grow\nor shrink as the program runs. Each kind of collection has different\ncapabilities and costs, and choosing an appropriate one for your current\nsituation is a skill you’ll develop over time. In this chapter, we’ll discuss\nthree collections that are used very often in Rust programs:"
        },
        {
          "kind": "text",
          "content": "- A _vector_ allows you to store a variable number of values next to each other.\n- A _string_ is a collection of characters. We’ve mentioned the `String` type\npreviously, but in this chapter we’ll talk about it in depth.\n- A _hash map_ allows you to associate a value with a specific key. It’s a\nparticular implementation of the more general data structure called a _map_."
        },
        {
          "kind": "text",
          "content": "To learn about the other kinds of collections provided by the standard library,\nsee [the documentation][collections]."
        },
        {
          "kind": "text",
          "content": "We’ll discuss how to create and update vectors, strings, and hash maps, as well\nas what makes each special."
        },
        {
          "kind": "text",
          "content": "[collections]: https://doc.rust-lang.org/std/collections/index.html"
        }
      ]
    },
    {
      "title": "Storing Lists of Values with Vectors",
      "file": "ch08-01-vectors.md",
      "elements": [
        {
          "kind": "text",
          "content": "The first collection type we’ll look at is `Vec<T>`, also known as a _vector_.\nVectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart."
        },
        {
          "kind": "text",
          "content": "### Creating a New Vector"
        },
        {
          "kind": "text",
          "content": "To create a new empty vector, we call the `Vec::new` function, as shown in\nListing 8-1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-1\" caption=\"Creating a new, empty vector to hold values of type `i32`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-01/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that we added a type annotation here. Because we aren’t inserting any\nvalues into this vector, Rust doesn’t know what kind of elements we intend to\nstore. This is an important point. Vectors are implemented using generics;\nwe’ll cover how to use generics with your own types in Chapter 10. For now,\nknow that the `Vec<T>` type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets. In Listing 8-1, we’ve told Rust that the `Vec<T>` in `v` will\nhold elements of the `i32` type."
        },
        {
          "kind": "text",
          "content": "More often, you’ll create a `Vec<T>` with initial values and Rust will infer\nthe type of value you want to store, so you rarely need to do this type\nannotation. Rust conveniently provides the `vec!` macro, which will create a\nnew vector that holds the values you give it. Listing 8-2 creates a new\n`Vec<i32>` that holds the values `1`, `2`, and `3`. The integer type is `i32`\nbecause that’s the default integer type, as we discussed in the [“Data\nTypes”][data-types]<!-- ignore --> section of Chapter 3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-2\" caption=\"Creating a new vector containing values\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because we’ve given initial `i32` values, Rust can infer that the type of `v`\nis `Vec<i32>`, and the type annotation isn’t necessary. Next, we’ll look at how\nto modify a vector."
        },
        {
          "kind": "text",
          "content": "### Updating a Vector"
        },
        {
          "kind": "text",
          "content": "To create a vector and then add elements to it, we can use the `push` method,\nas shown in Listing 8-3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-3\" caption=\"Using the `push` method to add values to a vector\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As with any variable, if we want to be able to change its value, we need to\nmake it mutable using the `mut` keyword, as discussed in Chapter 3. The numbers\nwe place inside are all of type `i32`, and Rust infers this from the data, so\nwe don’t need the `Vec<i32>` annotation."
        },
        {
          "kind": "text",
          "content": "### Reading Elements of Vectors"
        },
        {
          "kind": "text",
          "content": "There are two ways to reference a value stored in a vector: via indexing or by\nusing the `get` method. In the following examples, we’ve annotated the types of\nthe values that are returned from these functions for extra clarity."
        },
        {
          "kind": "text",
          "content": "Listing 8-4 shows both methods of accessing a value in a vector, with indexing\nsyntax and the `get` method."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-4\" caption=\"Using indexing syntax and using the `get` method to access an item in a vector\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note a few details here. We use the index value of `2` to get the third element\nbecause vectors are indexed by number, starting at zero. Using `&` and `[]`\ngives us a reference to the element at the index value. When we use the `get`\nmethod with the index passed as an argument, we get an `Option<&T>` that we can\nuse with `match`."
        },
        {
          "kind": "text",
          "content": "Rust provides these two ways to reference an element so you can choose how the\nprogram behaves when you try to use an index value outside the range of\nexisting elements. As an example, let’s see what happens when we have a vector\nof five elements and then we try to access an element at index 100 with each\ntechnique, as shown in Listing 8-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-5\" caption=\"Attempting to access the element at index 100 in a vector containing five elements\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "panics"
            ],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we run this code, the first `[]` method will cause the program to panic\nbecause it references a nonexistent element. This method is best used when you\nwant your program to crash if there’s an attempt to access an element past the\nend of the vector."
        },
        {
          "kind": "text",
          "content": "When the `get` method is passed an index that is outside the vector, it returns\n`None` without panicking. You would use this method if accessing an element\nbeyond the range of the vector may happen occasionally under normal\ncircumstances. Your code will then have logic to handle having either\n`Some(&element)` or `None`, as discussed in Chapter 6. For example, the index\ncould be coming from a person entering a number. If they accidentally enter a\nnumber that’s too large and the program gets a `None` value, you could tell the\nuser how many items are in the current vector and give them another chance to\nenter a valid value. That would be more user-friendly than crashing the program\ndue to a typo!"
        },
        {
          "kind": "text",
          "content": "When the program has a valid reference, the borrow checker enforces the\nownership and borrowing rules (covered in Chapter 4) to ensure this reference\nand any other references to the contents of the vector remain valid. Recall the\nrule that states you can’t have mutable and immutable references in the same\nscope. That rule applies in Listing 8-6, where we hold an immutable reference\nto the first element in a vector and try to add an element to the end. This\nprogram won’t work if we also try to refer to that element later in the\nfunction."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-6\" caption=\"Attempting to add an element to a vector while holding a reference to an item\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Compiling this code will result in this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch08-common-collections/listing-08-06/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The code in Listing 8-6 might look like it should work: why should a reference\nto the first element care about changes at the end of the vector? This error is\ndue to the way vectors work: because vectors put the values next to each other\nin memory, adding a new element onto the end of the vector might require\nallocating new memory and copying the old elements to the new space, if there\nisn’t enough room to put all the elements next to each other where the vector\nis currently stored. In that case, the reference to the first element would be\npointing to deallocated memory. The borrowing rules prevent programs from\nending up in that situation."
        },
        {
          "kind": "text",
          "content": "> Note: For more on the implementation details of the `Vec<T>` type, see [“The\n> Rustonomicon”][nomicon]."
        },
        {
          "kind": "text",
          "content": "### Iterating Over the Values in a Vector"
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: e8da8773-8df2-4279-8c27-b7e9eda1dddd -->\nTo access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time. Listing 8-7 shows how\nto use a `for` loop to get immutable references to each element in a vector of\n`i32` values and print them."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-7\" caption=\"Printing each element in a vector by iterating over the elements using a `for` loop\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To read the number that `n_ref` refers to, we have to use the `*` dereference operator to get to the value in `n_ref` before we can add 1 to it, as covered in [\"Dereferencing a Pointer Accesses Its Data\"][deref]."
        },
        {
          "kind": "text",
          "content": "We can also iterate over mutable references to each element in a mutable vector\nin order to make changes to all the elements. The `for` loop in Listing 8-8\nwill add `50` to each element."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-8\" caption=\"Iterating over mutable references to elements in a vector\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To change the value that the mutable reference refers to, we again use the `*` dereference operator to get to the value in `n_ref` before we can use the `+=` operator.\n<!-- END INTERVENTION -->"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "1665d1ef-961f-4451-a988-ec46121531f9",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which call to this `find_until` function will cause a runtime panic?\n\n```\nfn find_until(v: &Vec<i32>, n: i32, til: usize) -> Option<usize> {\n  for i in 0 .. til {\n    if v[i] == n {\n      return Some(i);\n    }\n  }\n  return None;\n}\n```\n",
                  "distractors": [
                    "`find_until(&vec![1, 2, 3], 0, 0)`",
                    "`find_until(&vec![1, 2, 3], 3, 3)`",
                    "`find_until(&vec![1, 2, 3], 1, 4)`"
                  ]
                },
                "answer": {
                  "answer": "`find_until(&vec![1, 2, 3], 4, 4)`"
                },
                "context": "If `til = 4`, then for a vector of length 3, the for-loop will attempt to index the vector with `i = 3`, which is out of bounds.\nThis function does not panic if `n = 1` because it returns before reaching the out-of-bounds index.\n"
              },
              {
                "id": "789dfffc-7556-443d-98ab-5d0a4db5c162",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let mut v = Vec::new();\n  let s = String::from(\"Hello \");\n  v.push(s);\n  v[0].push_str(\"world\");\n  println!(\"original: {}\", s);\n  println!(\"new: {}\", v[0]);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 6
                },
                "context": "`Vec::push` moves its argument, so `s` is not usable after calling `v.push(s)`. Therefore calling `println!(\"original: {}\", s)` is not ownership-safe.\n"
              },
              {
                "id": "66270f68-3ad6-4e79-8c73-c04d2daf9792",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n  let v = vec![String::from(\"Hello \")];\n  let mut s = v[0];\n  s.push_str(\"world\");\n  println!(\"{s}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 3
                },
                "context": "Non-copyable types cannot be moved out of a vector by indexing. Only methods such as `Vec::remove` permit moving out of a vector. See Section 4.3 \n[\"Copying vs. Moving Out of a Collection\"](ch04-03-fixing-ownership-errors.html#fixing-an-unsafe-program-copying-vs-moving-out-of-a-collection)\nfor a deeper explanation of why.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Safely Using Iterators"
        },
        {
          "kind": "text",
          "content": "We will discuss more about how iterators work in Chapter 13.2 [\"Processing a Series of Items with Iterators\"](ch13-02-iterators.html).\nFor now, one important detail is that iterators contain a pointer to data within the vector. We can see how\niterators work by desugaring a for-loop into the corresponding method calls of [`Vec::iter`] and [`Iterator::next`]:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "interpreter",
              "horizontal"
            ],
            "code": "#fn main() {\n#use std::slice::Iter;  \nlet mut v: Vec<i32>         = vec![1, 2];\nlet mut iter: Iter<'_, i32> = v.iter();`[]`\nlet n1: &i32                = iter.next().unwrap();`[]`\nlet n2: &i32                = iter.next().unwrap();`[]`\nlet end: Option<&i32>       = iter.next();`[]`\n#}"
          }
        },
        {
          "kind": "text",
          "content": "Observe that the iterator `iter` is a pointer that moves through each element of the vector. The `next` method advances\nthe iterator and returns an optional reference to the previous element, either `Some` (which we unwrap) or `None` at the end of the vector."
        },
        {
          "kind": "text",
          "content": "This detail is relevant to safely using vectors. For example, say we wanted to duplicate a vector in-place, such as `[1, 2]` becoming `[1, 2, 1, 2]`.\nA naive implementation might look like this, annotated with the permissions inferred by the compiler:"
        },
        {
          "kind": "code",
          "content": {
            "language": "aquascope",
            "flags": [
              "permissions",
              "stepper",
              "boundaries",
              "shouldFail"
            ],
            "code": "fn dup_in_place(v: &mut Vec<i32>) {\n    for n_ref in v.iter() {`(focus,paths:*v)`\n        v.push(*n_ref);`{}`\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "Notice that `v.iter()` removes the @Perm{write} permission from `*v`. Therefore the `v.push(..)` operation is missing the expected @Perm{write} permission. The Rust compiler will reject this program with a corresponding error message:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n --> test.rs:3:9\n  |\n2 |     for n_ref in v.iter() {\n  |                  --------\n  |                  |\n  |                  immutable borrow occurs here\n  |                  immutable borrow later used here\n3 |         v.push(*n_ref);\n  |         ^^^^^^^^^^^^^^ mutable borrow occurs here"
          }
        },
        {
          "kind": "text",
          "content": "As we discussed in Chapter 4, the safety issue beneath this error is reading deallocated memory. As soon as `v.push(1)` happens, the vector will reallocate its contents and invalidate the iterator's pointer. So to use iterators safely, Rust does not allow you to add or remove elements from the vector during iteration."
        },
        {
          "kind": "text",
          "content": "<!-- TODO: add loop support and make this diagram look reasonable -->\n<!-- ```aquascope,interpreter,shouldFail,horizontal\nfn dup_in_place(v: &mut Vec<i32>) {`[]`\nfor n_ref in v.iter() {\nv.push(*n_ref);\n}`[]`\n}\nfn main() {\nlet mut v = vec![1, 2, 3];\ndup_in_place(&mut v);\n}"
        },
        {
          "kind": "code",
          "content": {
            "language": "-->",
            "flags": [],
            "code": "\nOne way to iterate over a vector without using a pointer is with a range, like we used for string slices in [Chapter 4.4](ch04-04-slices.html#range-syntax). For example, the range `0 .. v.len()` is an iterator over all indices of a vector `v`, as seen here:\n"
          }
        },
        {
          "kind": "text",
          "content": "#fn main() {\n#use std::ops::Range;\nlet mut v: Vec<i32>        = vec![1, 2];\nlet mut iter: Range<usize> = 0 .. v.len();`[]`\nlet i1: usize              = iter.next().unwrap();\nlet n1: &i32               = &v[i1];`[]`\n#}"
        },
        {
          "kind": "code",
          "content": {
            "language": "",
            "flags": [],
            "code": "\n### Using an Enum to Store Multiple Types\n\nVectors can only store values that are of the same type. This can be\ninconvenient; there are definitely use cases for needing to store a list of\nitems of different types. Fortunately, the variants of an enum are defined\nunder the same enum type, so when we need one type to represent elements of\ndifferent types, we can define and use an enum!\n\nFor example, say we want to get values from a row in a spreadsheet in which\nsome of the columns in the row contain integers, some floating-point numbers,\nand some strings. We can define an enum whose variants will hold the different\nvalue types, and all the enum variants will be considered the same type: that\nof the enum. Then we can create a vector to hold that enum and so, ultimately,\nhold different types. We’ve demonstrated this in Listing 8-9.\n\n<Listing number=\"8-9\" caption=\"Defining an `enum` to store values of different types in one vector\">\n"
          }
        },
        {
          "kind": "text",
          "content": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-09/src/main.rs:here}}"
        },
        {
          "kind": "code",
          "content": {
            "language": "",
            "flags": [],
            "code": "\n</Listing>\n\nRust needs to know what types will be in the vector at compile time so it knows\nexactly how much memory on the heap will be needed to store each element. We\nmust also be explicit about what types are allowed in this vector. If Rust\nallowed a vector to hold any type, there would be a chance that one or more of\nthe types would cause errors with the operations performed on the elements of\nthe vector. Using an enum plus a `match` expression means that Rust will ensure\nat compile time that every possible case is handled, as discussed in Chapter 6.\n\nIf you don’t know the exhaustive set of types a program will get at runtime to\nstore in a vector, the enum technique won’t work. Instead, you can use a trait\nobject, which we’ll cover in Chapter 18.\n\nNow that we’ve discussed some of the most common ways to use vectors, be sure\nto review [the API documentation][vec-api]<!-- ignore --> for all of the many\nuseful methods defined on `Vec<T>` by the standard library. For example, in\naddition to `push`, a `pop` method removes and returns the last element.\n\n### Dropping a Vector Drops Its Elements\n\nLike any other `struct`, a vector is freed when it goes out of scope, as\nannotated in Listing 8-10.\n\n<Listing number=\"8-10\" caption=\"Showing where the vector and its elements are dropped\">\n"
          }
        },
        {
          "kind": "text",
          "content": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-10/src/main.rs:here}}"
        },
        {
          "kind": "code",
          "content": {
            "language": "",
            "flags": [],
            "code": "\n</Listing>\n\nWhen the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.\n\nLet’s move on to the next collection type: `String`!\n\n{{#quiz ../quizzes/ch08-01-vec-sec2.toml}}\n\n[data-types]: ch03-02-data-types.html#data-types\n[nomicon]: https://doc.rust-lang.org/nomicon/vec/vec.html\n[vec-api]: https://doc.rust-lang.org/std/vec/struct.Vec.html\n[deref]: ch04-02-references-and-borrowing.html#dereferencing-a-pointer-accesses-its-data\n[`Vec::iter`]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\n[`Iterator::next`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next"
          }
        }
      ]
    },
    {
      "title": "Storing UTF-8 Encoded Text with Strings",
      "file": "ch08-02-strings.md",
      "elements": [
        {
          "kind": "text",
          "content": "We talked about strings in Chapter 4, but we’ll look at them in more depth now.\nNew Rustaceans commonly get stuck on strings for a combination of three\nreasons: Rust’s propensity for exposing possible errors, strings being a more\ncomplicated data structure than many programmers give them credit for, and\nUTF-8. These factors combine in a way that can seem difficult when you’re\ncoming from other programming languages."
        },
        {
          "kind": "text",
          "content": "We discuss strings in the context of collections because strings are\nimplemented as a collection of bytes, plus some methods to provide useful\nfunctionality when those bytes are interpreted as text. In this section, we’ll\ntalk about the operations on `String` that every collection type has, such as\ncreating, updating, and reading. We’ll also discuss the ways in which `String`\nis different from the other collections, namely how indexing into a `String` is\ncomplicated by the differences between how people and computers interpret\n`String` data."
        },
        {
          "kind": "text",
          "content": "### What Is a String?"
        },
        {
          "kind": "text",
          "content": "We’ll first define what we mean by the term _string_. Rust has only one string\ntype in the core language, which is the string slice `str` that is usually seen\nin its borrowed form `&str`. In Chapter 4, we talked about _string slices_,\nwhich are references to some UTF-8 encoded string data stored elsewhere. String\nliterals, for example, are stored in the program’s binary and are therefore\nstring slices."
        },
        {
          "kind": "text",
          "content": "The `String` type, which is provided by Rust’s standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to “strings” in Rust, they might be\nreferring to either the `String` or the string slice `&str` types, not just one\nof those types. Although this section is largely about `String`, both types are\nused heavily in Rust’s standard library, and both `String` and string slices\nare UTF-8 encoded."
        },
        {
          "kind": "text",
          "content": "### Creating a New String"
        },
        {
          "kind": "text",
          "content": "Many of the same operations available with `Vec<T>` are available with `String`\nas well because `String` is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities. An example\nof a function that works the same way with `Vec<T>` and `String` is the `new`\nfunction to create an instance, shown in Listing 8-11."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-11\" caption=\"Creating a new, empty `String`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This line creates a new, empty string called `s`, into which we can then load\ndata. Often, we’ll have some initial data with which we want to start the\nstring. For that, we use the `to_string` method, which is available on any type\nthat implements the `Display` trait, as string literals do. Listing 8-12 shows\ntwo examples."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-12\" caption=\"Using the `to_string` method to create a `String` from a string literal\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-12/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code creates a string containing `initial contents`."
        },
        {
          "kind": "text",
          "content": "We can also use the function `String::from` to create a `String` from a string\nliteral. The code in Listing 8-13 is equivalent to the code in Listing 8-12\nthat uses `to_string`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-13\" caption=\"Using the `String::from` function to create a `String` from a string literal\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-13/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because strings are used for so many things, we can use many different generic\nAPIs for strings, providing us with a lot of options. Some of them can seem\nredundant, but they all have their place! In this case, `String::from` and\n`to_string` do the same thing, so which one you choose is a matter of style and\nreadability."
        },
        {
          "kind": "text",
          "content": "Remember that strings are UTF-8 encoded, so we can include any properly encoded\ndata in them, as shown in Listing 8-14."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-14\" caption=\"Storing greetings in different languages in strings\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "All of these are valid `String` values."
        },
        {
          "kind": "text",
          "content": "### Updating a String"
        },
        {
          "kind": "text",
          "content": "A `String` can grow in size and its contents can change, just like the contents\nof a `Vec<T>`, if you push more data into it. In addition, you can conveniently\nuse the `+` operator or the `format!` macro to concatenate `String` values."
        },
        {
          "kind": "text",
          "content": "#### Appending to a String with `push_str` and `push`"
        },
        {
          "kind": "text",
          "content": "We can grow a `String` by using the `push_str` method to append a string slice,\nas shown in Listing 8-15."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-15\" caption=\"Appending a string slice to a `String` using the `push_str` method\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-15/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "After these two lines, `s` will contain `foobar`. The `push_str` method takes a\nstring slice because we don’t necessarily want to take ownership of the\nparameter. For example, in the code in Listing 8-16, we want to be able to use\n`s2` after appending its contents to `s1`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-16\" caption=\"Using a string slice after appending its contents to a `String`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-16/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If the `push_str` method took ownership of `s2`, we wouldn’t be able to print\nits value on the last line. However, this code works as we’d expect!"
        },
        {
          "kind": "text",
          "content": "The `push` method takes a single character as a parameter and adds it to the\n`String`. Listing 8-17 adds the letter _l_ to a `String` using the `push`\nmethod."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-17\" caption=\"Adding one character to a `String` value using `push`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-17/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As a result, `s` will contain `lol`."
        },
        {
          "kind": "text",
          "content": "#### Concatenation with the `+` Operator or the `format!` Macro"
        },
        {
          "kind": "text",
          "content": "Often, you’ll want to combine two existing strings. One way to do so is to use\nthe `+` operator, as shown in Listing 8-18."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-18\" caption=\"Using the `+` operator to combine two `String` values into a new `String` value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-18/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The string `s3` will contain `Hello, world!`. The reason `s1` is no longer\nvalid after the addition, and the reason we used a reference to `s2`, has to do\nwith the signature of the method that’s called when we use the `+` operator.\nThe `+` operator uses the `add` method, whose signature looks something like\nthis:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn add(self, s: &str) -> String {"
          }
        },
        {
          "kind": "text",
          "content": "In the standard library, you’ll see `add` defined using generics and associated\ntypes. Here, we’ve substituted in concrete types, which is what happens when we\ncall this method with `String` values. We’ll discuss generics in Chapter 10.\nThis signature gives us the clues we need in order to understand the tricky\nbits of the `+` operator."
        },
        {
          "kind": "text",
          "content": "First, `s2` has an `&`, meaning that we’re adding a _reference_ of the second\nstring to the first string. This is because of the `s` parameter in the `add`\nfunction: we can only add a `&str` to a `String`; we can’t add two `String`\nvalues together. But wait—the type of `&s2` is `&String`, not `&str`, as\nspecified in the second parameter to `add`. So why does Listing 8-18 compile?"
        },
        {
          "kind": "text",
          "content": "The reason we’re able to use `&s2` in the call to `add` is that the compiler\ncan _coerce_ the `&String` argument into a `&str`. When we call the `add`\nmethod, Rust uses a _deref coercion_, which here turns `&s2` into `&s2[..]`.\nWe’ll discuss deref coercion in more depth in Chapter 15. Because `add` does\nnot take ownership of the `s` parameter, `s2` will still be a valid `String`\nafter this operation."
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: f1ab2171-96f0-4380-b16d-9055a9a00415 -->\nSecond, we can see in the signature that `add` takes ownership of `self`,\nbecause `self` does *not* have an `&`. This means `s1` in Listing 8-18 will be\nmoved into the `add` call and will no longer be valid after that. So, although\n`let s3 = s1 + &s2;` looks like it will copy both strings and create a new one,\nthis statement instead does the following:\n1. `add` takes ownership of `s1`,\n2. it appends a copy of the contents of `s2` to `s1`,\n3. and then it returns back ownership of `s1`."
        },
        {
          "kind": "text",
          "content": "If `s1` has enough capacity for `s2`, then no memory allocations occur. However, if `s1` does not have enough capacity for `s2`, then `s1` will internally make a larger memory allocation to fit both strings.\n<!-- END INTERVENTION -->"
        },
        {
          "kind": "text",
          "content": "If we need to concatenate multiple strings, the behavior of the `+` operator\ngets unwieldy:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/no-listing-01-concat-multiple-strings/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "At this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"`\ncharacters, it’s difficult to see what’s going on. For combining strings in\nmore complicated ways, we can instead use the `format!` macro:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/no-listing-02-format/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code also sets `s` to `tic-tac-toe`. The `format!` macro works like\n`println!`, but instead of printing the output to the screen, it returns a\n`String` with the contents. The version of the code using `format!` is much\neasier to read, and the code generated by the `format!` macro uses references\nso that this call doesn’t take ownership of any of its parameters."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "79942534-f414-41e6-944f-96d57905632c",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "What is the difference between using `a + b` and `a.push_str(b)` to concatenate two strings?",
                  "distractors": [
                    "`push_str` is more efficient at runtime than `+`",
                    "`push_str` consumes ownership of `b`, while `+` does not",
                    "There is no difference, they are aliases for the same function"
                  ]
                },
                "answer": {
                  "answer": "`+` consumes ownership of `a`, while `push_str` does not"
                },
                "context": "`push_str` takes `&mut self` while `+` takes `self`, so `+` consumes ownership and `push_str` does not.\n"
              },
              {
                "id": "f1ab2171-96f0-4380-b16d-9055a9a00415",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "What is the maximum number of times a heap allocation could occur in this program? Write your answer in digits, e.g. 0 or 1.\n\n```\nlet s1 = String::from(\"tic\");\nlet s2 = String::from(\"tac\");\nlet s3 = String::from(\"toe\");\n\nlet s = s1 + \"-\" + &s2 + \"-\" + &s3;\n```\n"
                },
                "answer": {
                  "answer": "7"
                },
                "context": "One allocation for each call to `String::from`, and one allocation for every time `+` is called.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Indexing into Strings"
        },
        {
          "kind": "text",
          "content": "In many other programming languages, accessing individual characters in a\nstring by referencing them by index is a valid and common operation. However,\nif you try to access parts of a `String` using indexing syntax in Rust, you’ll\nget an error. Consider the invalid code in Listing 8-19."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-19\" caption=\"Attempting to use indexing syntax with a String\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-19/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will result in the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch08-common-collections/listing-08-19/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error and the note tell the story: Rust strings don’t support indexing. But\nwhy not? To answer that question, we need to discuss how Rust stores strings in\nmemory."
        },
        {
          "kind": "text",
          "content": "#### Internal Representation"
        },
        {
          "kind": "text",
          "content": "A `String` is a wrapper over a `Vec<u8>`. Let’s look at some of our properly\nencoded UTF-8 example strings from Listing 8-14. First, this one:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:spanish}}"
          }
        },
        {
          "kind": "text",
          "content": "In this case, `len` will be `4`, which means the vector storing the string\n`\"Hola\"` is 4 bytes long. Each of these letters takes one byte when encoded in\nUTF-8. The following line, however, may surprise you (note that this string\nbegins with the capital Cyrillic letter _Ze_, not the number 3):"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:russian}}"
          }
        },
        {
          "kind": "text",
          "content": "If you were asked how long the string is, you might say 12. In fact, Rust’s\nanswer is 24: that’s the number of bytes it takes to encode “Здравствуйте” in\nUTF-8, because each Unicode scalar value in that string takes 2 bytes of\nstorage. Therefore, an index into the string’s bytes will not always correlate\nto a valid Unicode scalar value. To demonstrate, consider this invalid Rust\ncode:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "let hello = \"Здравствуйте\";\nlet answer = &hello[0];"
          }
        },
        {
          "kind": "text",
          "content": "You already know that `answer` will not be `З`, the first letter. When encoded\nin UTF-8, the first byte of `З` is `208` and the second is `151`, so it would\nseem that `answer` should in fact be `208`, but `208` is not a valid character\non its own. Returning `208` is likely not what a user would want if they asked\nfor the first letter of this string; however, that’s the only data that Rust\nhas at byte index 0. Users generally don’t want the byte value returned, even\nif the string contains only Latin letters: if `&\"hi\"[0]` were valid code that\nreturned the byte value, it would return `104`, not `h`."
        },
        {
          "kind": "text",
          "content": "The answer, then, is that to avoid returning an unexpected value and causing\nbugs that might not be discovered immediately, Rust doesn’t compile this code\nat all and prevents misunderstandings early in the development process."
        },
        {
          "kind": "text",
          "content": "#### Bytes and Scalar Values and Grapheme Clusters! Oh My!"
        },
        {
          "kind": "text",
          "content": "Another point about UTF-8 is that there are actually three relevant ways to\nlook at strings from Rust’s perspective: as bytes, scalar values, and grapheme\nclusters (the closest thing to what we would call _letters_)."
        },
        {
          "kind": "text",
          "content": "If we look at the Hindi word “नमस्ते” written in the Devanagari script, it is\nstored as a vector of `u8` values that looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]"
          }
        },
        {
          "kind": "text",
          "content": "That’s 18 bytes and is how computers ultimately store this data. If we look at\nthem as Unicode scalar values, which are what Rust’s `char` type is, those\nbytes look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "['न', 'म', 'स', '्', 'त', 'े']"
          }
        },
        {
          "kind": "text",
          "content": "There are six `char` values here, but the fourth and sixth are not letters:\nthey’re diacritics that don’t make sense on their own. Finally, if we look at\nthem as grapheme clusters, we’d get what a person would call the four letters\nthat make up the Hindi word:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "[\"न\", \"म\", \"स्\", \"ते\"]"
          }
        },
        {
          "kind": "text",
          "content": "Rust provides different ways of interpreting the raw string data that computers\nstore so that each program can choose the interpretation it needs, no matter\nwhat human language the data is in."
        },
        {
          "kind": "text",
          "content": "A final reason Rust doesn’t allow us to index into a `String` to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn’t possible to guarantee that performance with a `String`,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were."
        },
        {
          "kind": "text",
          "content": "### Slicing Strings"
        },
        {
          "kind": "text",
          "content": "Indexing into a string is often a bad idea because it’s not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice. If you really need to use\nindices to create string slices, therefore, Rust asks you to be more specific."
        },
        {
          "kind": "text",
          "content": "Rather than indexing using `[]` with a single number, you can use `[]` with a\nrange to create a string slice containing particular bytes:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let hello = \"Здравствуйте\";\n\nlet s = &hello[0..4];"
          }
        },
        {
          "kind": "text",
          "content": "Here, `s` will be a `&str` that contains the first four bytes of the string.\nEarlier, we mentioned that each of these characters was two bytes, which means\n`s` will be `Зд`."
        },
        {
          "kind": "text",
          "content": "If we were to try to slice only part of a character’s bytes with something like\n`&hello[0..1]`, Rust would panic at runtime in the same way as if an invalid\nindex were accessed in a vector:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch08-common-collections/output-only-01-not-char-boundary/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "You should use caution when creating string slices with ranges, because doing\nso can crash your program."
        },
        {
          "kind": "text",
          "content": "### Methods for Iterating Over Strings"
        },
        {
          "kind": "text",
          "content": "The best way to operate on pieces of strings is to be explicit about whether\nyou want characters or bytes. For individual Unicode scalar values, use the\n`chars` method. Calling `chars` on “Зд” separates out and returns two values of\ntype `char`, and you can iterate over the result to access each element:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "for c in \"Зд\".chars() {\n    println!(\"{c}\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "This code will print the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "З\nд"
          }
        },
        {
          "kind": "text",
          "content": "Alternatively, the `bytes` method returns each raw byte, which might be\nappropriate for your domain:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "for b in \"Зд\".bytes() {\n    println!(\"{b}\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "This code will print the four bytes that make up this string:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "208\n151\n208\n180"
          }
        },
        {
          "kind": "text",
          "content": "But be sure to remember that valid Unicode scalar values may be made up of more\nthan one byte."
        },
        {
          "kind": "text",
          "content": "Getting grapheme clusters from strings, as with the Devanagari script, is\ncomplex, so this functionality is not provided by the standard library. Crates\nare available on [crates.io](https://crates.io/)<!-- ignore --> if this is the\nfunctionality you need."
        },
        {
          "kind": "text",
          "content": "### Strings Are Not So Simple"
        },
        {
          "kind": "text",
          "content": "To summarize, strings are complicated. Different programming languages make\ndifferent choices about how to present this complexity to the programmer. Rust\nhas chosen to make the correct handling of `String` data the default behavior\nfor all Rust programs, which means programmers have to put more thought into\nhandling UTF-8 data up front. This trade-off exposes more of the complexity of\nstrings than is apparent in other programming languages, but it prevents you\nfrom having to handle errors involving non-ASCII characters later in your\ndevelopment life cycle."
        },
        {
          "kind": "text",
          "content": "The good news is that the standard library offers a lot of functionality built\noff the `String` and `&str` types to help handle these complex situations\ncorrectly. Be sure to check out the documentation for useful methods like\n`contains` for searching in a string and `replace` for substituting parts of a\nstring with another string."
        },
        {
          "kind": "text",
          "content": "Let’s switch to something a bit less complex: hash maps!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "da6daf92-5b2c-4f8d-97de-6905dbc77936",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which statement is the best explanation for why Rust does not allow string indexing?",
                  "distractors": [
                    "Indexing strings is unsafe because it can cause a segfault or buffer overflow",
                    "Indexing strings is inefficient because string are null-terminated so their length cannot be efficiently computed",
                    "Indexing strings would make Rust too easy to use, and Rust developers need job security"
                  ]
                },
                "answer": {
                  "answer": "Indexing strings is ambiguous because strings represent several granularities of sequenced data"
                },
                "context": "A UTF-8 string can be interpreted as a sequence of bytes, characters, or grapheme clusters. None of these is necessarily the \"default\" way\nof interpreting a string, so a default indexing operation does not make sense.\n"
              },
              {
                "id": "9366278e-a3f5-4759-ac72-e3c7d248da44",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which statement best describes the difference between the types of a string slice `&str` and a byte slice `&[u8]`?\n",
                  "distractors": [
                    "`&str` always points to data stored in the program binary, whereas `&[u8]` can be stored anywhere in memory",
                    "`&str` cannot be further sliced, while `&[u8]` can be sliced again",
                    "`&str` can be constructed from a `String`, while `&[u8]` can only come from a `Vec`"
                  ]
                },
                "answer": {
                  "answer": "`&str` points to bytes that can always be interpreted as UTF-8, whereas `&[u8]` can be any byte sequence"
                },
                "context": "`&str` is a promise that the byte sequence it points to will always be valid UTF-8. Therefore a programmer who wants to e.g. print out\nan `&str` never needs to check if it is valid, or worry about accidentally interpreting an invalid string.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Storing Keys with Associated Values in Hash Maps",
      "file": "ch08-03-hash-maps.md",
      "elements": [
        {
          "kind": "text",
          "content": "The last of our common collections is the _hash map_. The type `HashMap<K, V>`\nstores a mapping of keys of type `K` to values of type `V` using a _hashing\nfunction_, which determines how it places these keys and values into memory.\nMany programming languages support this kind of data structure, but they often\nuse a different name, such as _hash_, _map_, _object_, _hash table_,\n_dictionary_, or _associative array_, just to name a few."
        },
        {
          "kind": "text",
          "content": "Hash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team’s score in a hash map in which\neach key is a team’s name and the values are each team’s score. Given a team\nname, you can retrieve its score."
        },
        {
          "kind": "text",
          "content": "We’ll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on `HashMap<K, V>` by the standard library.\nAs always, check the standard library documentation for more information."
        },
        {
          "kind": "text",
          "content": "### Creating a New Hash Map"
        },
        {
          "kind": "text",
          "content": "One way to create an empty hash map is to use `new` and to add elements with\n`insert`. In Listing 8-20, we’re keeping track of the scores of two teams whose\nnames are _Blue_ and _Yellow_. The Blue team starts with 10 points, and the\nYellow team starts with 50."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-20\" caption=\"Creating a new hash map and inserting some keys and values\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-20/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that we need to first `use` the `HashMap` from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it’s not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there’s no built-in macro to construct them, for example."
        },
        {
          "kind": "text",
          "content": "Just like vectors, hash maps store their data on the heap. This `HashMap` has\nkeys of type `String` and values of type `i32`. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type, and all of the values\nmust have the same type."
        },
        {
          "kind": "text",
          "content": "### Accessing Values in a Hash Map"
        },
        {
          "kind": "text",
          "content": "We can get a value out of the hash map by providing its key to the `get`\nmethod, as shown in Listing 8-21."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-21\" caption=\"Accessing the score for the Blue team stored in the hash map\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-21/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, `score` will have the value that’s associated with the Blue team, and the\nresult will be `10`. The `get` method returns an `Option<&V>`; if there’s no\nvalue for that key in the hash map, `get` will return `None`. This program\nhandles the `Option` by calling `copied` to get an `Option<i32>` rather than an\n`Option<&i32>`, then `unwrap_or` to set `score` to zero if `scores` doesn’t\nhave an entry for the key."
        },
        {
          "kind": "text",
          "content": "We can iterate over each key-value pair in a hash map in a similar manner as we\ndo with vectors, using a `for` loop:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/no-listing-03-iterate-over-hashmap/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code will print each pair in an arbitrary order:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Yellow: 50\nBlue: 10"
          }
        },
        {
          "kind": "text",
          "content": "### Hash Maps and Ownership"
        },
        {
          "kind": "text",
          "content": "For types that implement the `Copy` trait, like `i32`, the values are copied\ninto the hash map. For owned values like `String`, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-22\" caption=\"Showing that keys and values are owned by the hash map once they’re inserted\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-22/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We aren’t able to use the variables `field_name` and `field_value` after\nthey’ve been moved into the hash map with the call to `insert`."
        },
        {
          "kind": "text",
          "content": "If we insert references to values into the hash map, the values won’t be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We’ll talk more about these issues in\n[“Validating References with\nLifetimes”][validating-references-with-lifetimes]<!-- ignore --> in Chapter 10."
        },
        {
          "kind": "text",
          "content": "### Updating a Hash Map"
        },
        {
          "kind": "text",
          "content": "Although the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time (but not vice versa: for\nexample, both the Blue team and the Yellow team could have the value `10`\nstored in the `scores` hash map)."
        },
        {
          "kind": "text",
          "content": "When you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey _doesn’t_ already have a value. Or you could combine the old value and the\nnew value. Let’s look at how to do each of these!"
        },
        {
          "kind": "text",
          "content": "#### Overwriting a Value"
        },
        {
          "kind": "text",
          "content": "If we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-23 calls `insert` twice, the hash map will\nonly contain one key-value pair because we’re inserting the value for the Blue\nteam’s key both times."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-23\" caption=\"Replacing a value stored with a particular key\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-23/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print `{\"Blue\": 25}`. The original value of `10` has been\noverwritten."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"only-inserting-a-value-if-the-key-has-no-value\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Adding a Key and Value Only If a Key Isn’t Present"
        },
        {
          "kind": "text",
          "content": "It’s common to check whether a particular key already exists in the hash map\nwith a value and then to take the following actions: if the key does exist in\nthe hash map, the existing value should remain the way it is; if the key\ndoesn’t exist, insert it and a value for it."
        },
        {
          "kind": "text",
          "content": "Hash maps have a special API for this called `entry` that takes the key you\nwant to check as a parameter. The return value of the `entry` method is an enum\ncalled `Entry` that represents a value that might or might not exist. Let’s say\nwe want to check whether the key for the Yellow team has a value associated\nwith it. If it doesn’t, we want to insert the value `50`, and the same for the\nBlue team. Using the `entry` API, the code looks like Listing 8-24."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-24\" caption=\"Using the `entry` method to only insert if the key does not already have a value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-24/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `or_insert` method on `Entry` is defined to return a mutable reference to\nthe value for the corresponding `Entry` key if that key exists, and if not, it\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker."
        },
        {
          "kind": "text",
          "content": "Running the code in Listing 8-24 will print `{\"Yellow\": 50, \"Blue\": 10}`. The\nfirst call to `entry` will insert the key for the Yellow team with the value\n`50` because the Yellow team doesn’t have a value already. The second call to\n`entry` will not change the hash map because the Blue team already has the\nvalue `10`."
        },
        {
          "kind": "text",
          "content": "#### Updating a Value Based on the Old Value"
        },
        {
          "kind": "text",
          "content": "Another common use case for hash maps is to look up a key’s value and then\nupdate it based on the old value. For instance, Listing 8-25 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we’ve\nseen that word. If it’s the first time we’ve seen a word, we’ll first insert\nthe value `0`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"8-25\" caption=\"Counting occurrences of words using a hash map that stores words and counts\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch08-common-collections/listing-08-25/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. You might see\nthe same key-value pairs printed in a different order: recall from [“Accessing\nValues in a Hash Map”][access]<!-- ignore --> that iterating over a hash map\nhappens in an arbitrary order."
        },
        {
          "kind": "text",
          "content": "The `split_whitespace` method returns an iterator over subslices, separated by\nwhitespace, of the value in `text`. The `or_insert` method returns a mutable\nreference (`&mut V`) to the value for the specified key. Here, we store that\nmutable reference in the `count` variable, so in order to assign to that value,\nwe must first dereference `count` using the asterisk (`*`). The mutable\nreference goes out of scope at the end of the `for` loop, so all of these\nchanges are safe and allowed by the borrowing rules."
        },
        {
          "kind": "text",
          "content": "### Hashing Functions"
        },
        {
          "kind": "text",
          "content": "By default, `HashMap` uses a hashing function called _SipHash_ that can provide\nresistance to denial-of-service (DoS) attacks involving hash\ntables[^siphash]<!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it. If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher. A _hasher_ is a type that implements the\n`BuildHasher` trait. We’ll talk about traits and how to implement them in\n[Chapter 10][traits]<!-- ignore -->. You don’t necessarily have to implement\nyour own hasher from scratch; [crates.io](https://crates.io/)<!-- ignore -->\nhas libraries shared by other Rust users that provide hashers implementing many\ncommon hashing algorithms."
        },
        {
          "kind": "text",
          "content": "[^siphash]: [https://en.wikipedia.org/wiki/SipHash](https://en.wikipedia.org/wiki/SipHash)"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "f76aba3c-2e95-428a-9366-93b03264a8b6",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::collections::HashMap;\nfn main() {\n  let mut h = HashMap::new();\n  h.insert(\"k1\", 0);\n  let v1 = &h[\"k1\"];\n  h.insert(\"k2\", 1);\n  let v2 = &h[\"k2\"];\n  println!(\"{} {}\", v1, v2);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 6
                },
                "context": "`h` cannot be mutated (`h.insert(\"k2\", 1)`) while an immutable reference (`v1`) to it is live.\n"
              },
              {
                "id": "6028c7f5-b373-475f-ba43-553773c7b3b7",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::collections::HashMap;\nfn main() {\n  let mut h: HashMap<char, Vec<usize>> = HashMap::new();\n  for (i, c) in \"hello!\".chars().enumerate() {\n    h.entry(c).or_insert(Vec::new()).push(i);\n  }\n  let mut sum = 0;\n  for i in h.get(&'l').unwrap() {\n    sum += *i;\n  }\n  println!(\"{}\", sum);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "5"
                },
                "context": "This program stores a vector of indexes for each occurrence of a given letter into a hashmap. \nThen it sums all the indexes for the letter 'l', which occurs at indexes 2 and 3 in the string `\"hello!\"`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Vectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:"
        },
        {
          "kind": "text",
          "content": "1. Given a list of integers, use a vector and return the median (when sorted,\nthe value in the middle position) and mode (the value that occurs most\noften; a hash map will be helpful here) of the list.\n1. Convert strings to pig latin. The first consonant of each word is moved to\nthe end of the word and _ay_ is added, so _first_ becomes _irst-fay_. Words\nthat start with a vowel have _hay_ added to the end instead (_apple_ becomes\n_apple-hay_). Keep in mind the details about UTF-8 encoding!\n1. Using a hash map and vectors, create a text interface to allow a user to add\nemployee names to a department in a company; for example, “Add Sally to\nEngineering” or “Add Amir to Sales.” Then let the user retrieve a list of all\npeople in a department or all people in the company by department, sorted\nalphabetically."
        },
        {
          "kind": "text",
          "content": "The standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!"
        },
        {
          "kind": "text",
          "content": "We’re getting into more complex programs in which operations can fail, so it’s\na perfect time to discuss error handling. We’ll do that next!"
        },
        {
          "kind": "text",
          "content": "[validating-references-with-lifetimes]: ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[access]: #accessing-values-in-a-hash-map\n[traits]: ch10-02-traits.html"
        }
      ]
    },
    {
      "title": "Ownership Inventory #2",
      "file": "ch08-04-inventory.md",
      "elements": [
        {
          "kind": "text",
          "content": "The Ownership Inventory is a series of quizzes that test your understanding of ownership in real-world scenarios. These scenarios are inspired by common StackOverflow questions about Rust."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "867e5d29-c1eb-44b3-99e3-bb2325b74e44",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Removes all the zeros in-place from a vector of integers.\nfn remove_zeros(v: &mut Vec<i32>) {\n    for (i, t) in v.iter().enumerate().rev() {\n        if *t == 0 {\n            v.remove(i);\n            v.shrink_to_fit();\n        }\n    }\n}\n```\n\nIf you tried to compile this function, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "`v` does not live long enough to call `v.remove(i)`",
                    "`t` cannot be dereferenced while `i` is live",
                    "`v.iter()` cannot be called on a mutable reference"
                  ]
                },
                "answer": {
                  "answer": "`v.remove(i)` cannot borrow `v` as mutable"
                },
                "context": "The function `v.iter()` immutably borrows a vector `v` for the duration of the for-loop. However, `v.remove(i)` requires a mutable\nreference to `v`. Therefore `v.remove(i)` cannot borrow `v` as mutable, since that would conflict with the iterator.\n"
              },
              {
                "id": "dd1bd092-ef8d-4293-a4d6-6a59b5887e98",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Removes all the zeros in-place from a vector of integers.\nfn remove_zeros(v: &mut Vec<i32>) {\n    for (i, t) in v.iter().enumerate().rev() {\n        if *t == 0 {\n            v.remove(i);\n            v.shrink_to_fit();\n        }\n    }\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n --> test.rs:5:13\n  |\n3 |     for (i, t) in v.iter().enumerate().rev() {\n  |                   --------------------------\n  |                   |\n  |                   immutable borrow occurs here\n  |                   immutable borrow later used here\n4 |         if *t == 0 {\n5 |             v.remove(i);\n  |             ^^^^^^^^^^^ mutable borrow occurs here\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.\n",
                  "distractors": [
                    "```\nlet mut v = vec![1; 100];\nremove_zeros(&mut v);\n```\n",
                    "None of these programs"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet mut v = vec![5, 5, 0];\nremove_zeros(&mut v);\nprintln!(\"{:?}\", v);\n```\n",
                    "```\nlet mut v = vec![1, 2, 0, 3];\nremove_zeros(&mut v);\n```\n"
                  ]
                },
                "context": "To violate memory safety, `remove_zeros` must be called with a vector that contains a zero after the first element.\nThe call to `v.shrink_to_fit()` will deallocate memory owned by the vector (due to resizing), which will invalidate the\niterator `v.iter()` which contains a pointer to the old data. Note that reading the vector `v` after calling `remove_zeros`\nis not essential to the safety violation, since the issue is internal to `remove_zeros`.\n"
              },
              {
                "id": "c7e7e1e1-2788-4dd9-9c18-436bc95b405f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Removes all the zeros in-place from a vector of integers.\nfn remove_zeros(v: &mut Vec<i32>) {\n    for (i, t) in v.iter().enumerate().rev() {\n        if *t == 0 {\n            v.remove(i);\n            v.shrink_to_fit();\n        }\n    }\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\nfn remove_zeros(v: &mut Vec<i32>) {\n    for (i, t) in v`[.clone()]`.iter().enumerate().rev() {\n        if *t == 0 {\n            v.remove(i);\n            v.shrink_to_fit();\n        }\n    }\n}\n```\n",
                    "```ide\nfn remove_zeros(v: `[&]`Vec<i32>) `[-> Vec<i32>]` {\n    `[let mut new_vec = Vec::new();]`\n    for (i, t) in v.iter().enumerate().rev() {\n        if *t `[!=]` 0 {\n            `[new_vec.push(*t)]`\n        }\n    }\n    `[new_vec]`\n}\n```\n",
                    "```ide\nfn remove_zeros(v: `[Vec<i32>]`) {\n    for (i, t) in v.iter().enumerate().rev() {\n        if *t == 0 {\n            v.remove(i);\n            v.shrink_to_fit();\n        }\n    }\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\nfn remove_zeros(v: &mut Vec<i32>) {\n    for `[i in (0 .. v.len()).rev()]` {\n        if `[v[i]]` == 0 {\n            v.remove(i);\n            v.shrink_to_fit();\n        }\n    }\n}\n```\n"
                },
                "context": "Any strategy that requires allocating a new vector, either via `Vec::clone` or `Vec::new`, requires unnecessary additional allocation.\nTherefore the simplest strategy that works is to only iterate over the indices `0 .. v.len()` which does not borrow `v`. We do this\nin reverse order to avoid removing missing indexes.\n\nLike with Problem 1, the most idiomatic strategy is actually to use a built-in function we haven't discussed,\n[`Vec::retain`](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain). This function keeps only elements in a vector\nthat pass a predicate, but does so with more memory-efficiency.\n"
              },
              {
                "id": "fb0e3080-7cc8-4338-948e-fae693d137c8",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\n/// Reverses the elements of a vector in-place\nfn reverse(v: &mut Vec<String>) {\n    let n = v.len();\n    for i in 0 .. n / 2 {\n        std::mem::swap(&mut v[i], &mut v[n - i - 1]);\n    }\n}\n```\n\nIf you tried to compile this program, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "cannot borrow `v` as immutable for `v.len()` when `v` is a mutable borrow",
                    "cannot mutably borrow an element `v[i]` of a mutable vector"
                  ]
                },
                "answer": {
                  "answer": "cannot borrow `v` as mutable twice for `v[i]` and `v[n - i - 1]`"
                },
                "context": "The compiler does not consider the specific value of the indexes used to access an array, so `&mut v[i]`\nand `&mut v[n - i - 1]` are assumed to possibly refer to the same element. Therefore we get an error\nwhere `v` cannot be mutably borrowed twice.\n"
              },
              {
                "id": "4c703871-3cc3-483f-beb5-876bdbcd223b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\n/// Reverses the elements of a vector in-place\nfn reverse(v: &mut Vec<String>) {\n    let n = v.len();\n    for i in 0 .. n / 2 {\n        std::mem::swap(&mut v[i], &mut v[n - i - 1]);\n    }\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0499]: cannot borrow `*v` as mutable more than once at a time\n --> test.rs:5:40\n  |\n5 |         std::mem::swap(&mut v[i], &mut v[n - i - 1]);\n  |         --------------      -          ^ second mutable borrow occurs here\n  |         |                   |\n  |         |                   first mutable borrow occurs here\n  |         first borrow later used by call\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.\n",
                  "distractors": [
                    "```\nlet mut v = vec![String::from(\"a\"), String::from(\"b\")];\nlet x = &v[0];\nreverse(&mut v);\nprintln!(\"{x}\");\n```\n",
                    "```\nlet mut v = vec![String::from(\"a\"), String::from(\"b\")];\nreverse(&mut v);\n```\n",
                    "```\nlet mut v = vec![String::from(\"a\"), String::from(\"b\")];\nreverse(&mut v);\nprintln!(\"{:?}\", v);\n```\n"
                  ]
                },
                "answer": {
                  "answer": [
                    "None of these programs"
                  ]
                },
                "context": "This function cannot cause a memory safety violation because `i != n - i - 1` for all `i`, so the two\nmutable references always refer to different elements. Note that the `let x = &v[0]` program would not\ncompile, as Rust's borrow checker would not allow `reverse` to be called while `x` is live.\n"
              },
              {
                "id": "380fc77f-190d-4386-9e0e-f9360bbbfd98",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\n/// Reverses the elements of a vector in-place\nfn reverse(v: &mut Vec<String>) {\n    let n = v.len();\n    for i in 0 .. n / 2 {\n        std::mem::swap(&mut v[i], &mut v[n - i - 1]);\n    }\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\nfn reverse(v: &mut Vec<String>) {\n    let n = v.len();\n    `[let mut v2 = v.clone();]`\n    for i in 0 .. n / 2 {\n        std::mem::swap(&mut v[i], &mut `[v2]`[n - i - 1]);\n    }\n}\n```\n",
                    "```ide\nfn reverse(v: `[&Vec<String>]`) -> `[Vec<String>]` {\n    let n = v.len();\n    `[let mut v2 = Vec::new();]`    \n    for _ in 0 .. `[n]` {\n        `[v2.push(v.pop().unwrap());]`\n    }\n    `[v2]`\n}\n```\n",
                    "```ide\nfn reverse(v: &mut Vec<String>) {\n    let n = v.len();    \n    for i in 0 .. n / 2 {\n        `[let s1 = v[i].clone();]`\n        `[let s2 = v[n - i - 1].clone();]`\n        `[v[i] = s2;]`\n        `[v[n - i - 1] = s1;]`\n    }\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\nfn reverse(v: &mut Vec<String>) {\n    let n = v.len();\n    for i in 0 .. n / 2 {\n        `[let p1 = &mut v[i] as *mut String;]`\n        `[let p2 = &mut v[n - i - 1] as *mut String;]`\n        `[unsafe { std::ptr::swap_nonoverlapping(p1, p2, 1); }]`\n    }\n}\n```\n"
                },
                "context": "In a situation where the borrow checker rejects an operation that is actually safe and has no workaround, then\nunsafe code is sometimes acceptable if it's critical to avoid allocations. \nIn this specific case, you should actually use [`Vec::swap`](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.swap), which is internally implemented\nwith heavily-tested `unsafe` code similar to the code above. \nBut in general, if the standard library doesn't happen to support your use case, then `unsafe` can be acceptable if used correctly.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Error Handling",
      "file": "ch09-00-error-handling.md",
      "elements": [
        {
          "kind": "text",
          "content": "Errors are a fact of life in software, so Rust has a number of features for\nhandling situations in which something goes wrong. In many cases, Rust requires\nyou to acknowledge the possibility of an error and take some action before your\ncode will compile. This requirement makes your program more robust by ensuring\nthat you’ll discover errors and handle them appropriately before deploying your\ncode to production!"
        },
        {
          "kind": "text",
          "content": "Rust groups errors into two major categories: _recoverable_ and _unrecoverable_\nerrors. For a recoverable error, such as a _file not found_ error, we most\nlikely just want to report the problem to the user and retry the operation.\nUnrecoverable errors are always symptoms of bugs, such as trying to access a\nlocation beyond the end of an array, and so we want to immediately stop the\nprogram."
        },
        {
          "kind": "text",
          "content": "Most languages don’t distinguish between these two kinds of errors and handle\nboth in the same way, using mechanisms such as exceptions. Rust doesn’t have\nexceptions. Instead, it has the type `Result<T, E>` for recoverable errors and\nthe `panic!` macro that stops execution when the program encounters an\nunrecoverable error. This chapter covers calling `panic!` first and then talks\nabout returning `Result<T, E>` values. Additionally, we’ll explore\nconsiderations when deciding whether to try to recover from an error or to stop\nexecution."
        }
      ]
    },
    {
      "title": "Unrecoverable Errors with `panic!`",
      "file": "ch09-01-unrecoverable-errors-with-panic.md",
      "elements": [
        {
          "kind": "text",
          "content": "Sometimes bad things happen in your code, and there’s nothing you can do about\nit. In these cases, Rust has the `panic!` macro. There are two ways to cause a\npanic in practice: by taking an action that causes our code to panic (such as\naccessing an array past the end) or by explicitly calling the `panic!` macro.\nIn both cases, we cause a panic in our program. By default, these panics will\nprint a failure message, unwind, clean up the stack, and quit. Via an\nenvironment variable, you can also have Rust display the call stack when a\npanic occurs to make it easier to track down the source of the panic."
        },
        {
          "kind": "text",
          "content": "> ### Unwinding the Stack or Aborting in Response to a Panic\n>\n> By default, when a panic occurs the program starts _unwinding_, which means\n> Rust walks back up the stack and cleans up the data from each function it\n> encounters. However, walking back and cleaning up is a lot of work. Rust,\n> therefore, allows you to choose the alternative of immediately _aborting_,\n> which ends the program without cleaning up.\n>\n> Memory that the program was using will then need to be cleaned up by the\n> operating system. If in your project you need to make the resultant binary as\n> small as possible, you can switch from unwinding to aborting upon a panic by\n> adding `panic = 'abort'` to the appropriate `[profile]` sections in your\n> _Cargo.toml_ file. For example, if you want to abort on panic in release mode,\n> add this:\n>\n> ```toml\n> [profile.release]\n> panic = 'abort'\n> ```"
        },
        {
          "kind": "text",
          "content": "Let’s try calling `panic!` in a simple program:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "panics"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/no-listing-01-panic/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When you run the program, you’ll see something like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/no-listing-01-panic/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The call to `panic!` causes the error message contained in the last two lines.\nThe first line shows our panic message and the place in our source code where\nthe panic occurred: _src/main.rs:2:5_ indicates that it’s the second line,\nfifth character of our _src/main.rs_ file."
        },
        {
          "kind": "text",
          "content": "In this case, the line indicated is part of our code, and if we go to that\nline, we see the `panic!` macro call. In other cases, the `panic!` call might\nbe in code that our code calls, and the filename and line number reported by\nthe error message will be someone else’s code where the `panic!` macro is\ncalled, not the line of our code that eventually led to the `panic!` call."
        },
        {
          "kind": "text",
          "content": "<!-- Old heading. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"using-a-panic-backtrace\"></a>"
        },
        {
          "kind": "text",
          "content": "We can use the backtrace of the functions the `panic!` call came from to figure\nout the part of our code that is causing the problem. To understand how to use\na `panic!` backtrace, let’s look at another example and see what it’s like when\na `panic!` call comes from a library because of a bug in our code instead of\nfrom our code calling the macro directly. Listing 9-1 has some code that\nattempts to access an index in a vector beyond the range of valid indexes."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-1\" file-name=\"src/main.rs\" caption=\"Attempting to access an element beyond the end of a vector, which will cause a call to `panic!`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "panics"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we’re attempting to access the 100th element of our vector (which is at\nindex 99 because indexing starts at zero), but the vector has only three\nelements. In this situation, Rust will panic. Using `[]` is supposed to return\nan element, but if you pass an invalid index, there’s no element that Rust\ncould return here that would be correct."
        },
        {
          "kind": "text",
          "content": "In C, attempting to read beyond the end of a data structure is undefined\nbehavior. You might get whatever is at the location in memory that would\ncorrespond to that element in the data structure, even though the memory\ndoesn’t belong to that structure. This is called a _buffer overread_ and can\nlead to security vulnerabilities if an attacker is able to manipulate the index\nin such a way as to read data they shouldn’t be allowed to that is stored after\nthe data structure."
        },
        {
          "kind": "text",
          "content": "To protect your program from this sort of vulnerability, if you try to read an\nelement at an index that doesn’t exist, Rust will stop execution and refuse to\ncontinue. Let’s try it and see:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-01/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This error points at line 4 of our _main.rs_ where we attempt to access index\n`99` of the vector in `v`."
        },
        {
          "kind": "text",
          "content": "The `note:` line tells us that we can set the `RUST_BACKTRACE` environment\nvariable to get a backtrace of exactly what happened to cause the error. A\n_backtrace_ is a list of all the functions that have been called to get to this\npoint. Backtraces in Rust work as they do in other languages: the key to\nreading the backtrace is to start from the top and read until you see files you\nwrote. That’s the spot where the problem originated. The lines above that spot\nare code that your code has called; the lines below are code that called your\ncode. These before-and-after lines might include core Rust code, standard\nlibrary code, or crates that you’re using. Let’s try getting a backtrace by\nsetting the `RUST_BACKTRACE` environment variable to any value except `0`.\nListing 9-2 shows output similar to what you’ll see."
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch09-error-handling/listing-09-01\nRUST_BACKTRACE=1 cargo run\ncopy the backtrace output below\ncheck the backtrace number mentioned in the text below the listing\n-->"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-2\" caption=\"The backtrace generated by a call to `panic!` displayed when the environment variable `RUST_BACKTRACE` is set\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ RUST_BACKTRACE=1 cargo run\nthread 'main' panicked at src/main.rs:4:6:\nindex out of bounds: the len is 3 but the index is 99\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/std/src/panicking.rs:692:5\n   1: core::panicking::panic_fmt\n             at /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/panicking.rs:75:14\n   2: core::panicking::panic_bounds_check\n             at /rustc/4d91de4e48198da2e33413efdcd9cd2cc0c46688/library/core/src/panicking.rs:273:5\n   3: <usize as core::slice::index::SliceIndex<[T]>>::index\n             at file:///home/.rustup/toolchains/1.85/lib/rustlib/src/rust/library/core/src/slice/index.rs:274:10\n   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n             at file:///home/.rustup/toolchains/1.85/lib/rustlib/src/rust/library/core/src/slice/index.rs:16:9\n   5: <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index\n             at file:///home/.rustup/toolchains/1.85/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:3361:9\n   6: panic::main\n             at ./src/main.rs:4:6\n   7: core::ops::function::FnOnce::call_once\n             at file:///home/.rustup/toolchains/1.85/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "That’s a lot of output! The exact output you see might be different depending\non your operating system and Rust version. In order to get backtraces with this\ninformation, debug symbols must be enabled. Debug symbols are enabled by\ndefault when using `cargo build` or `cargo run` without the `--release` flag,\nas we have here."
        },
        {
          "kind": "text",
          "content": "In the output in Listing 9-2, line 6 of the backtrace points to the line in our\nproject that’s causing the problem: line 4 of _src/main.rs_. If we don’t want\nour program to panic, we should start our investigation at the location pointed\nto by the first line mentioning a file we wrote. In Listing 9-1, where we\ndeliberately wrote code that would panic, the way to fix the panic is to not\nrequest an element beyond the range of the vector indexes. When your code\npanics in the future, you’ll need to figure out what action the code is taking\nwith what values to cause the panic and what the code should do instead."
        },
        {
          "kind": "text",
          "content": "We’ll come back to `panic!` and when we should and should not use `panic!` to\nhandle error conditions in the [“To `panic!` or Not to\n`panic!`”][to-panic-or-not-to-panic]<!-- ignore --> section later in this\nchapter. Next, we’ll look at how to recover from an error using `Result`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "18bf21e1-4e1a-4e98-861d-c7032710a8ad",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "What is the name of the environment variable you should set to `1` to see the backtrace of a panic?"
                },
                "answer": {
                  "answer": "RUST_BACKTRACE"
                },
                "context": "For example, you can run from the command line: `RUST_BACKTRACE=1 cargo run`\n"
              },
              {
                "id": "23cabd75-88f5-4ff8-8bf5-4bd4d1a9e64a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following is NOT a good reason to use a panic?",
                  "distractors": [
                    "The program is about to perform a dangerous operation",
                    "The program should stop executing as soon as possible",
                    "The program has reached an unrecoverable error state"
                  ]
                },
                "answer": {
                  "answer": "The program has reached an error state which should be communicated to a caller function"
                },
                "context": "A panic should not be used to communicate failure *within* the program. The default assumption is that caller functions\nwill not try to catch panics.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[to-panic-or-not-to-panic]: ch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic"
        }
      ]
    },
    {
      "title": "Recoverable Errors with `Result`",
      "file": "ch09-02-recoverable-errors-with-result.md",
      "elements": [
        {
          "kind": "text",
          "content": "Most errors aren’t serious enough to require the program to stop entirely.\nSometimes when a function fails it’s for a reason that you can easily interpret\nand respond to. For example, if you try to open a file and that operation fails\nbecause the file doesn’t exist, you might want to create the file instead of\nterminating the process."
        },
        {
          "kind": "text",
          "content": "Recall from [“Handling Potential Failure with `Result`”][handle_failure]<!--\nignore --> in Chapter 2 that the `Result` enum is defined as having two\nvariants, `Ok` and `Err`, as follows:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `T` and `E` are generic type parameters: we’ll discuss generics in more\ndetail in Chapter 10. What you need to know right now is that `T` represents\nthe type of the value that will be returned in a success case within the `Ok`\nvariant, and `E` represents the type of the error that will be returned in a\nfailure case within the `Err` variant. Because `Result` has these generic type\nparameters, we can use the `Result` type and the functions defined on it in\nmany different situations where the success value and error value we want to\nreturn may differ."
        },
        {
          "kind": "text",
          "content": "Let’s call a function that returns a `Result` value because the function could\nfail. In Listing 9-3 we try to open a file."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-3\" file-name=\"src/main.rs\" caption=\"Opening a file\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-03/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The return type of `File::open` is a `Result<T, E>`. The generic parameter `T`\nhas been filled in by the implementation of `File::open` with the type of the\nsuccess value, `std::fs::File`, which is a file handle. The type of `E` used in\nthe error value is `std::io::Error`. This return type means the call to\n`File::open` might succeed and return a file handle that we can read from or\nwrite to. The function call also might fail: for example, the file might not\nexist, or we might not have permission to access the file. The `File::open`\nfunction needs to have a way to tell us whether it succeeded or failed and at\nthe same time give us either the file handle or error information. This\ninformation is exactly what the `Result` enum conveys."
        },
        {
          "kind": "text",
          "content": "In the case where `File::open` succeeds, the value in the variable\n`greeting_file_result` will be an instance of `Ok` that contains a file handle.\nIn the case where it fails, the value in `greeting_file_result` will be an\ninstance of `Err` that contains more information about the kind of error that\noccurred."
        },
        {
          "kind": "text",
          "content": "We need to add to the code in Listing 9-3 to take different actions depending\non the value `File::open` returns. Listing 9-4 shows one way to handle the\n`Result` using a basic tool, the `match` expression that we discussed in\nChapter 6."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-4\" file-name=\"src/main.rs\" caption=\"Using a `match` expression to handle the `Result` variants that might be returned\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-04/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that, like the `Option` enum, the `Result` enum and its variants have been\nbrought into scope by the prelude, so we don’t need to specify `Result::`\nbefore the `Ok` and `Err` variants in the `match` arms."
        },
        {
          "kind": "text",
          "content": "When the result is `Ok`, this code will return the inner `file` value out of\nthe `Ok` variant, and we then assign that file handle value to the variable\n`greeting_file`. After the `match`, we can use the file handle for reading or\nwriting."
        },
        {
          "kind": "text",
          "content": "The other arm of the `match` handles the case where we get an `Err` value from\n`File::open`. In this example, we’ve chosen to call the `panic!` macro. If\nthere’s no file named _hello.txt_ in our current directory and we run this\ncode, we’ll see the following output from the `panic!` macro:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-04/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "As usual, this output tells us exactly what has gone wrong."
        },
        {
          "kind": "text",
          "content": "### Matching on Different Errors"
        },
        {
          "kind": "text",
          "content": "The code in Listing 9-4 will `panic!` no matter why `File::open` failed.\nHowever, we want to take different actions for different failure reasons. If\n`File::open` failed because the file doesn’t exist, we want to create the file\nand return the handle to the new file. If `File::open` failed for any other\nreason—for example, because we didn’t have permission to open the file—we still\nwant the code to `panic!` in the same way it did in Listing 9-4. For this, we\nadd an inner `match` expression, shown in Listing 9-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-5\" file-name=\"src/main.rs\" caption=\"Handling different kinds of errors in different ways\">"
        },
        {
          "kind": "text",
          "content": "<!-- ignore this test because otherwise it creates hello.txt which causes other\ntests to fail lol -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-05/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The type of the value that `File::open` returns inside the `Err` variant is\n`io::Error`, which is a struct provided by the standard library. This struct\nhas a method `kind` that we can call to get an `io::ErrorKind` value. The enum\n`io::ErrorKind` is provided by the standard library and has variants\nrepresenting the different kinds of errors that might result from an `io`\noperation. The variant we want to use is `ErrorKind::NotFound`, which indicates\nthe file we’re trying to open doesn’t exist yet. So we match on\n`greeting_file_result`, but we also have an inner match on `error.kind()`."
        },
        {
          "kind": "text",
          "content": "The condition we want to check in the inner match is whether the value returned\nby `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is,\nwe try to create the file with `File::create`. However, because `File::create`\ncould also fail, we need a second arm in the inner `match` expression. When the\nfile can’t be created, a different error message is printed. The second arm of\nthe outer `match` stays the same, so the program panics on any error besides\nthe missing file error."
        },
        {
          "kind": "text",
          "content": "> #### Alternatives to Using `match` with `Result<T, E>`\n>\n> That’s a lot of `match`! The `match` expression is very useful but also very\n> much a primitive. In Chapter 13, you’ll learn about closures, which are used\n> with many of the methods defined on `Result<T, E>`. These methods can be more\n> concise than using `match` when handling `Result<T, E>` values in your code.\n>\n> For example, here’s another way to write the same logic as shown in Listing\n> 9-5, this time using closures and the `unwrap_or_else` method:\n>\n> <!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n>\n> ```rust,ignore\n> use std::fs::File;\n> use std::io::ErrorKind;\n>\n> fn main() {\n>     let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| {\n>         if error.kind() == ErrorKind::NotFound {\n>             File::create(\"hello.txt\").unwrap_or_else(|error| {\n>                 panic!(\"Problem creating the file: {error:?}\");\n>             })\n>         } else {\n>             panic!(\"Problem opening the file: {error:?}\");\n>         }\n>     });\n> }\n> ```\n>\n> Although this code has the same behavior as Listing 9-5, it doesn’t contain\n> any `match` expressions and is cleaner to read. Come back to this example\n> after you’ve read Chapter 13, and look up the `unwrap_or_else` method in the\n> standard library documentation. Many more of these methods can clean up huge\n> nested `match` expressions when you’re dealing with errors."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8f9e0e79-f4a7-4056-b35e-f7ae65b78888",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of these statements best describes why `File::open` returns a `Result` and not an `Option`?",
                  "distractors": [
                    "Because `Result` represents the possibility of failure, while `Option` cannot represent failures",
                    "Because `Result` uses fewer bytes at runtime than `Option` to represent failures",
                    "Because `Result` represents errors the same way as the underlying system calls"
                  ]
                },
                "answer": {
                  "answer": "Because `Result` can represent why an operation failed, and file opening can fail for many reasons"
                },
                "context": "`Option` can just represent *that* an operation has failed, but `Result` can explain *why* the operation has failed.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "#### Shortcuts for Panic on Error: `unwrap` and `expect`"
        },
        {
          "kind": "text",
          "content": "Using `match` works well enough, but it can be a bit verbose and doesn’t always\ncommunicate intent well. The `Result<T, E>` type has many helper methods\ndefined on it to do various, more specific tasks. The `unwrap` method is a\nshortcut method implemented just like the `match` expression we wrote in\nListing 9-4. If the `Result` value is the `Ok` variant, `unwrap` will return\nthe value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will\ncall the `panic!` macro for us. Here is an example of `unwrap` in action:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/no-listing-04-unwrap/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If we run this code without a _hello.txt_ file, we’ll see an error message from\nthe `panic!` call that the `unwrap` method makes:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-04-unwrap\ncargo run\ncopy and paste relevant text\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "thread 'main' panicked at src/main.rs:4:49:\ncalled `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }"
          }
        },
        {
          "kind": "text",
          "content": "Similarly, the `expect` method lets us also choose the `panic!` error message.\nUsing `expect` instead of `unwrap` and providing good error messages can convey\nyour intent and make tracking down the source of a panic easier. The syntax of\n`expect` looks like this:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/no-listing-05-expect/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We use `expect` in the same way as `unwrap`: to return the file handle or call\nthe `panic!` macro. The error message used by `expect` in its call to `panic!`\nwill be the parameter that we pass to `expect`, rather than the default\n`panic!` message that `unwrap` uses. Here’s what it looks like:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-05-expect\ncargo run\ncopy and paste relevant text\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "thread 'main' panicked at src/main.rs:5:10:\nhello.txt should be included in this project: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }"
          }
        },
        {
          "kind": "text",
          "content": "In production-quality code, most Rustaceans choose `expect` rather than\n`unwrap` and give more context about why the operation is expected to always\nsucceed. That way, if your assumptions are ever proven wrong, you have more\ninformation to use in debugging."
        },
        {
          "kind": "text",
          "content": "### Propagating Errors"
        },
        {
          "kind": "text",
          "content": "When a function’s implementation calls something that might fail, instead of\nhandling the error within the function itself, you can return the error to the\ncalling code so that it can decide what to do. This is known as _propagating_\nthe error and gives more control to the calling code, where there might be more\ninformation or logic that dictates how the error should be handled than what\nyou have available in the context of your code."
        },
        {
          "kind": "text",
          "content": "For example, Listing 9-6 shows a function that reads a username from a file. If\nthe file doesn’t exist or can’t be read, this function will return those errors\nto the code that called the function."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-6\" file-name=\"src/main.rs\" caption=\"A function that returns errors to the calling code using `match`\">"
        },
        {
          "kind": "text",
          "content": "<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This function can be written in a much shorter way, but we’re going to start by\ndoing a lot of it manually in order to explore error handling; at the end,\nwe’ll show the shorter way. Let’s look at the return type of the function\nfirst: `Result<String, io::Error>`. This means the function is returning a\nvalue of the type `Result<T, E>`, where the generic parameter `T` has been\nfilled in with the concrete type `String` and the generic type `E` has been\nfilled in with the concrete type `io::Error`."
        },
        {
          "kind": "text",
          "content": "If this function succeeds without any problems, the code that calls this\nfunction will receive an `Ok` value that holds a `String`—the `username` that\nthis function read from the file. If this function encounters any problems, the\ncalling code will receive an `Err` value that holds an instance of `io::Error`\nthat contains more information about what the problems were. We chose\n`io::Error` as the return type of this function because that happens to be the\ntype of the error value returned from both of the operations we’re calling in\nthis function’s body that might fail: the `File::open` function and the\n`read_to_string` method."
        },
        {
          "kind": "text",
          "content": "The body of the function starts by calling the `File::open` function. Then we\nhandle the `Result` value with a `match` similar to the `match` in Listing 9-4.\nIf `File::open` succeeds, the file handle in the pattern variable `file`\nbecomes the value in the mutable variable `username_file` and the function\ncontinues. In the `Err` case, instead of calling `panic!`, we use the `return`\nkeyword to return early out of the function entirely and pass the error value\nfrom `File::open`, now in the pattern variable `e`, back to the calling code as\nthis function’s error value."
        },
        {
          "kind": "text",
          "content": "So, if we have a file handle in `username_file`, the function then creates a\nnew `String` in variable `username` and calls the `read_to_string` method on\nthe file handle in `username_file` to read the contents of the file into\n`username`. The `read_to_string` method also returns a `Result` because it\nmight fail, even though `File::open` succeeded. So we need another `match` to\nhandle that `Result`: if `read_to_string` succeeds, then our function has\nsucceeded, and we return the username from the file that’s now in `username`\nwrapped in an `Ok`. If `read_to_string` fails, we return the error value in the\nsame way that we returned the error value in the `match` that handled the\nreturn value of `File::open`. However, we don’t need to explicitly say\n`return`, because this is the last expression in the function."
        },
        {
          "kind": "text",
          "content": "The code that calls this code will then handle getting either an `Ok` value\nthat contains a username or an `Err` value that contains an `io::Error`. It’s\nup to the calling code to decide what to do with those values. If the calling\ncode gets an `Err` value, it could call `panic!` and crash the program, use a\ndefault username, or look up the username from somewhere other than a file, for\nexample. We don’t have enough information on what the calling code is actually\ntrying to do, so we propagate all the success or error information upward for\nit to handle appropriately."
        },
        {
          "kind": "text",
          "content": "This pattern of propagating errors is so common in Rust that Rust provides the\nquestion mark operator `?` to make this easier."
        },
        {
          "kind": "text",
          "content": "#### A Shortcut for Propagating Errors: The `?` Operator"
        },
        {
          "kind": "text",
          "content": "Listing 9-7 shows an implementation of `read_username_from_file` that has the\nsame functionality as in Listing 9-6, but this implementation uses the `?`\noperator."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-7\" file-name=\"src/main.rs\" caption=\"A function that returns errors to the calling code using the `?` operator\">"
        },
        {
          "kind": "text",
          "content": "<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `?` placed after a `Result` value is defined to work in almost the same way\nas the `match` expressions we defined to handle the `Result` values in Listing\n9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will\nget returned from this expression, and the program will continue. If the value\nis an `Err`, the `Err` will be returned from the whole function as if we had\nused the `return` keyword so the error value gets propagated to the calling\ncode."
        },
        {
          "kind": "text",
          "content": "There is a difference between what the `match` expression from Listing 9-6 does\nand what the `?` operator does: error values that have the `?` operator called\non them go through the `from` function, defined in the `From` trait in the\nstandard library, which is used to convert values from one type into another.\nWhen the `?` operator calls the `from` function, the error type received is\nconverted into the error type defined in the return type of the current\nfunction. This is useful when a function returns one error type to represent\nall the ways a function might fail, even if parts might fail for many different\nreasons."
        },
        {
          "kind": "text",
          "content": "For example, we could change the `read_username_from_file` function in Listing\n9-7 to return a custom error type named `OurError` that we define. If we also\ndefine `impl From<io::Error> for OurError` to construct an instance of\n`OurError` from an `io::Error`, then the `?` operator calls in the body of\n`read_username_from_file` will call `from` and convert the error types without\nneeding to add any more code to the function."
        },
        {
          "kind": "text",
          "content": "In the context of Listing 9-7, the `?` at the end of the `File::open` call will\nreturn the value inside an `Ok` to the variable `username_file`. If an error\noccurs, the `?` operator will return early out of the whole function and give\nany `Err` value to the calling code. The same thing applies to the `?` at the\nend of the `read_to_string` call."
        },
        {
          "kind": "text",
          "content": "The `?` operator eliminates a lot of boilerplate and makes this function’s\nimplementation simpler. We could even shorten this code further by chaining\nmethod calls immediately after the `?`, as shown in Listing 9-8."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-8\" file-name=\"src/main.rs\" caption=\"Chaining method calls after the `?` operator\">"
        },
        {
          "kind": "text",
          "content": "<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve moved the creation of the new `String` in `username` to the beginning of\nthe function; that part hasn’t changed. Instead of creating a variable\n`username_file`, we’ve chained the call to `read_to_string` directly onto the\nresult of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the\n`read_to_string` call, and we still return an `Ok` value containing `username`\nwhen both `File::open` and `read_to_string` succeed rather than returning\nerrors. The functionality is again the same as in Listing 9-6 and Listing 9-7;\nthis is just a different, more ergonomic way to write it."
        },
        {
          "kind": "text",
          "content": "Listing 9-9 shows a way to make this even shorter using `fs::read_to_string`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-9\" file-name=\"src/main.rs\" caption=\"Using `fs::read_to_string` instead of opening and then reading the file\">"
        },
        {
          "kind": "text",
          "content": "<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Reading a file into a string is a fairly common operation, so the standard\nlibrary provides the convenient `fs::read_to_string` function that opens the\nfile, creates a new `String`, reads the contents of the file, puts the contents\ninto that `String`, and returns it. Of course, using `fs::read_to_string`\ndoesn’t give us the opportunity to explain all the error handling, so we did it\nthe longer way first."
        },
        {
          "kind": "text",
          "content": "#### Where the `?` Operator Can Be Used"
        },
        {
          "kind": "text",
          "content": "The `?` operator can only be used in functions whose return type is compatible\nwith the value the `?` is used on. This is because the `?` operator is defined\nto perform an early return of a value out of the function, in the same manner\nas the `match` expression we defined in Listing 9-6. In Listing 9-6, the\n`match` was using a `Result` value, and the early return arm returned an\n`Err(e)` value. The return type of the function has to be a `Result` so that\nit’s compatible with this `return`."
        },
        {
          "kind": "text",
          "content": "In Listing 9-10, let’s look at the error we’ll get if we use the `?` operator\nin a `main` function with a return type that is incompatible with the type of\nthe value we use `?` on."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-10\" file-name=\"src/main.rs\" caption=\"Attempting to use the `?` in the `main` function that returns `()` won’t compile.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-10/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code opens a file, which might fail. The `?` operator follows the `Result`\nvalue returned by `File::open`, but this `main` function has the return type of\n`()`, not `Result`. When we compile this code, we get the following error\nmessage:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch09-error-handling/listing-09-10/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This error points out that we’re only allowed to use the `?` operator in a\nfunction that returns `Result`, `Option`, or another type that implements\n`FromResidual`."
        },
        {
          "kind": "text",
          "content": "To fix the error, you have two choices. One choice is to change the return type\nof your function to be compatible with the value you’re using the `?` operator\non as long as you have no restrictions preventing that. The other choice is to\nuse a `match` or one of the `Result<T, E>` methods to handle the `Result<T, E>`\nin whatever way is appropriate."
        },
        {
          "kind": "text",
          "content": "The error message also mentioned that `?` can be used with `Option<T>` values\nas well. As with using `?` on `Result`, you can only use `?` on `Option` in a\nfunction that returns an `Option`. The behavior of the `?` operator when called\non an `Option<T>` is similar to its behavior when called on a `Result<T, E>`:\nif the value is `None`, the `None` will be returned early from the function at\nthat point. If the value is `Some`, the value inside the `Some` is the\nresultant value of the expression, and the function continues. Listing 9-11 has\nan example of a function that finds the last character of the first line in the\ngiven text."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-11\" caption=\"Using the `?` operator on an `Option<T>` value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This function returns `Option<char>` because it’s possible that there is a\ncharacter there, but it’s also possible that there isn’t. This code takes the\n`text` string slice argument and calls the `lines` method on it, which returns\nan iterator over the lines in the string. Because this function wants to\nexamine the first line, it calls `next` on the iterator to get the first value\nfrom the iterator. If `text` is the empty string, this call to `next` will\nreturn `None`, in which case we use `?` to stop and return `None` from\n`last_char_of_first_line`. If `text` is not the empty string, `next` will\nreturn a `Some` value containing a string slice of the first line in `text`."
        },
        {
          "kind": "text",
          "content": "The `?` extracts the string slice, and we can call `chars` on that string slice\nto get an iterator of its characters. We’re interested in the last character in\nthis first line, so we call `last` to return the last item in the iterator.\nThis is an `Option` because it’s possible that the first line is the empty\nstring; for example, if `text` starts with a blank line but has characters on\nother lines, as in `\"\\nhi\"`. However, if there is a last character on the first\nline, it will be returned in the `Some` variant. The `?` operator in the middle\ngives us a concise way to express this logic, allowing us to implement the\nfunction in one line. If we couldn’t use the `?` operator on `Option`, we’d\nhave to implement this logic using more method calls or a `match` expression."
        },
        {
          "kind": "text",
          "content": "Note that you can use the `?` operator on a `Result` in a function that returns\n`Result`, and you can use the `?` operator on an `Option` in a function that\nreturns `Option`, but you can’t mix and match. The `?` operator won’t\nautomatically convert a `Result` to an `Option` or vice versa; in those cases,\nyou can use methods like the `ok` method on `Result` or the `ok_or` method on\n`Option` to do the conversion explicitly."
        },
        {
          "kind": "text",
          "content": "So far, all the `main` functions we’ve used return `()`. The `main` function is\nspecial because it’s the entry point and exit point of an executable program,\nand there are restrictions on what its return type can be for the program to\nbehave as expected."
        },
        {
          "kind": "text",
          "content": "Luckily, `main` can also return a `Result<(), E>`. Listing 9-12 has the code\nfrom Listing 9-10, but we’ve changed the return type of `main` to be\n`Result<(), Box<dyn Error>>` and added a return value `Ok(())` to the end. This\ncode will now compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-12\" file-name=\"src/main.rs\" caption=\"Changing `main` to return `Result<(), E>` allows the use of the `?` operator on `Result` values.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-12/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `Box<dyn Error>` type is a _trait object_, which we’ll talk about in [“Using\nTrait Objects That Allow for Values of Different Types”][trait-objects]<!--\nignore --> in Chapter 18. For now, you can read `Box<dyn Error>` to mean “any\nkind of error.” Using `?` on a `Result` value in a `main` function with the\nerror type `Box<dyn Error>` is allowed because it allows any `Err` value to be\nreturned early. Even though the body of this `main` function will only ever\nreturn errors of type `std::io::Error`, by specifying `Box<dyn Error>`, this\nsignature will continue to be correct even if more code that returns other\nerrors is added to the body of `main`."
        },
        {
          "kind": "text",
          "content": "When a `main` function returns a `Result<(), E>`, the executable will exit with\na value of `0` if `main` returns `Ok(())` and will exit with a nonzero value if\n`main` returns an `Err` value. Executables written in C return integers when\nthey exit: programs that exit successfully return the integer `0`, and programs\nthat error return some integer other than `0`. Rust also returns integers from\nexecutables to be compatible with this convention."
        },
        {
          "kind": "text",
          "content": "The `main` function may return any types that implement [the\n`std::process::Termination` trait][termination]<!-- ignore -->, which contains\na function `report` that returns an `ExitCode`. Consult the standard library\ndocumentation for more information on implementing the `Termination` trait for\nyour own types."
        },
        {
          "kind": "text",
          "content": "Now that we’ve discussed the details of calling `panic!` or returning `Result`,\nlet’s return to the topic of how to decide which is appropriate to use in which\ncases."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "91fb1ec6-fb11-4b6f-88df-dbc921a4108f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Given an arbitrary expression `e` of type `Result<T, E>`, which code snippet best represents how `e?` is translated?",
                  "distractors": [
                    "```\nif let Err(err) = e {\n  return Err(err);\n}\n```\n  ",
                    "```\ne.unwrap()\n```\n  ",
                    "```\nmatch e {\n  Ok(x) => x,\n  Err(err) => panic!(\"{err}\")\n}\n```\n  "
                  ]
                },
                "answer": {
                  "answer": "```\nmatch e {\n  Ok(x) => x,\n  Err(err) => { return Err(err); }\n}\n```\n  "
                },
                "context": "If `e` is a `Result`, then `e?` extracts the value inside the `Ok` if possible, otherwise returning the `Err` out of the current function.\n"
              },
              {
                "id": "0ea46358-f560-4d3e-85d2-a1806eb7c797",
                "type": "Tracing",
                "prompt": {
                  "program": "// assume hello.txt has the contents \"will\"\n\nfn read_username_from_file() -> Option<String> {\n  let mut username_file = File::open(\"hello.txt\")?;\n  let mut username = String::new();\n  username_file.read_to_string(&mut username)?;\n  Some(username)\n}\n\nfn main() {\n  println!(\"{}\", read_username_from_file().unwrap()); \n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 4
                },
                "context": "`File::open` returns a `Result`, but the return type of `read_username_from_file` expects an `Option`. Therefore it is invalid to use the `?`\noperator until the `Result` has been converted to an `Option` (e.g. with the `Result::ok` method).\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[handle_failure]: ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result\n[trait-objects]: ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[termination]: ../std/process/trait.Termination.html"
        }
      ]
    },
    {
      "title": "To `panic!` or Not to `panic!`",
      "file": "ch09-03-to-panic-or-not-to-panic.md",
      "elements": [
        {
          "kind": "text",
          "content": "So how do you decide when you should call `panic!` and when you should return\n`Result`? When code panics, there’s no way to recover. You could call `panic!`\nfor any error situation, whether there’s a possible way to recover or not, but\nthen you’re making the decision that a situation is unrecoverable on behalf of\nthe calling code. When you choose to return a `Result` value, you give the\ncalling code options. The calling code could choose to attempt to recover in a\nway that’s appropriate for its situation, or it could decide that an `Err`\nvalue in this case is unrecoverable, so it can call `panic!` and turn your\nrecoverable error into an unrecoverable one. Therefore, returning `Result` is a\ngood default choice when you’re defining a function that might fail."
        },
        {
          "kind": "text",
          "content": "In situations such as examples, prototype code, and tests, it’s more\nappropriate to write code that panics instead of returning a `Result`. Let’s\nexplore why, then discuss situations in which the compiler can’t tell that\nfailure is impossible, but you as a human can. The chapter will conclude with\nsome general guidelines on how to decide whether to panic in library code."
        },
        {
          "kind": "text",
          "content": "### Examples, Prototype Code, and Tests"
        },
        {
          "kind": "text",
          "content": "When you’re writing an example to illustrate some concept, also including\nrobust error-handling code can make the example less clear. In examples, it’s\nunderstood that a call to a method like `unwrap` that could panic is meant as a\nplaceholder for the way you’d want your application to handle errors, which can\ndiffer based on what the rest of your code is doing."
        },
        {
          "kind": "text",
          "content": "Similarly, the `unwrap` and `expect` methods are very handy when prototyping,\nbefore you’re ready to decide how to handle errors. They leave clear markers in\nyour code for when you’re ready to make your program more robust."
        },
        {
          "kind": "text",
          "content": "If a method call fails in a test, you’d want the whole test to fail, even if\nthat method isn’t the functionality under test. Because `panic!` is how a test\nis marked as a failure, calling `unwrap` or `expect` is exactly what should\nhappen."
        },
        {
          "kind": "text",
          "content": "### Cases in Which You Have More Information Than the Compiler"
        },
        {
          "kind": "text",
          "content": "It would also be appropriate to call `expect` when you have some other logic\nthat ensures the `Result` will have an `Ok` value, but the logic isn’t\nsomething the compiler understands. You’ll still have a `Result` value that you\nneed to handle: whatever operation you’re calling still has the possibility of\nfailing in general, even though it’s logically impossible in your particular\nsituation. If you can ensure by manually inspecting the code that you’ll never\nhave an `Err` variant, it’s perfectly acceptable to call `expect` and document\nthe reason you think you’ll never have an `Err` variant in the argument text.\nHere’s an example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/no-listing-08-unwrap-that-cant-fail/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We’re creating an `IpAddr` instance by parsing a hardcoded string. We can see\nthat `127.0.0.1` is a valid IP address, so it’s acceptable to use `expect`\nhere. However, having a hardcoded, valid string doesn’t change the return type\nof the `parse` method: we still get a `Result` value, and the compiler will\nstill make us handle the `Result` as if the `Err` variant is a possibility\nbecause the compiler isn’t smart enough to see that this string is always a\nvalid IP address. If the IP address string came from a user rather than being\nhardcoded into the program and therefore _did_ have a possibility of failure,\nwe’d definitely want to handle the `Result` in a more robust way instead.\nMentioning the assumption that this IP address is hardcoded will prompt us to\nchange `expect` to better error-handling code if, in the future, we need to get\nthe IP address from some other source instead."
        },
        {
          "kind": "text",
          "content": "### Guidelines for Error Handling"
        },
        {
          "kind": "text",
          "content": "It’s advisable to have your code panic when it’s possible that your code could\nend up in a bad state. In this context, a _bad state_ is when some assumption,\nguarantee, contract, or invariant has been broken, such as when invalid values,\ncontradictory values, or missing values are passed to your code—plus one or\nmore of the following:"
        },
        {
          "kind": "text",
          "content": "- The bad state is something that is unexpected, as opposed to something that\nwill likely happen occasionally, like a user entering data in the wrong\nformat.\n- Your code after this point needs to rely on not being in this bad state,\nrather than checking for the problem at every step.\n- There’s not a good way to encode this information in the types you use. We’ll\nwork through an example of what we mean in [“Encoding States and Behavior as\nTypes”][encoding]<!-- ignore --> in Chapter 18."
        },
        {
          "kind": "text",
          "content": "If someone calls your code and passes in values that don’t make sense, it’s\nbest to return an error if you can so the user of the library can decide what\nthey want to do in that case. However, in cases where continuing could be\ninsecure or harmful, the best choice might be to call `panic!` and alert the\nperson using your library to the bug in their code so they can fix it during\ndevelopment. Similarly, `panic!` is often appropriate if you’re calling\nexternal code that is out of your control and it returns an invalid state that\nyou have no way of fixing."
        },
        {
          "kind": "text",
          "content": "However, when failure is expected, it’s more appropriate to return a `Result`\nthan to make a `panic!` call. Examples include a parser being given malformed\ndata or an HTTP request returning a status that indicates you have hit a rate\nlimit. In these cases, returning a `Result` indicates that failure is an\nexpected possibility that the calling code must decide how to handle."
        },
        {
          "kind": "text",
          "content": "When your code performs an operation that could put a user at risk if it’s\ncalled using invalid values, your code should verify the values are valid first\nand panic if the values aren’t valid. This is mostly for safety reasons:\nattempting to operate on invalid data can expose your code to vulnerabilities.\nThis is the main reason the standard library will call `panic!` if you attempt\nan out-of-bounds memory access: trying to access memory that doesn’t belong to\nthe current data structure is a common security problem. Functions often have\n_contracts_: their behavior is only guaranteed if the inputs meet particular\nrequirements. Panicking when the contract is violated makes sense because a\ncontract violation always indicates a caller-side bug, and it’s not a kind of\nerror you want the calling code to have to explicitly handle. In fact, there’s\nno reasonable way for calling code to recover; the calling _programmers_ need\nto fix the code. Contracts for a function, especially when a violation will\ncause a panic, should be explained in the API documentation for the function."
        },
        {
          "kind": "text",
          "content": "However, having lots of error checks in all of your functions would be verbose\nand annoying. Fortunately, you can use Rust’s type system (and thus the type\nchecking done by the compiler) to do many of the checks for you. If your\nfunction has a particular type as a parameter, you can proceed with your code’s\nlogic knowing that the compiler has already ensured you have a valid value. For\nexample, if you have a type rather than an `Option`, your program expects to\nhave _something_ rather than _nothing_. Your code then doesn’t have to handle\ntwo cases for the `Some` and `None` variants: it will only have one case for\ndefinitely having a value. Code trying to pass nothing to your function won’t\neven compile, so your function doesn’t have to check for that case at runtime.\nAnother example is using an unsigned integer type such as `u32`, which ensures\nthe parameter is never negative."
        },
        {
          "kind": "text",
          "content": "### Creating Custom Types for Validation"
        },
        {
          "kind": "text",
          "content": "Let’s take the idea of using Rust’s type system to ensure we have a valid value\none step further and look at creating a custom type for validation. Recall the\nguessing game in Chapter 2 in which our code asked the user to guess a number\nbetween 1 and 100. We never validated that the user’s guess was between those\nnumbers before checking it against our secret number; we only validated that\nthe guess was positive. In this case, the consequences were not very dire: our\noutput of “Too high” or “Too low” would still be correct. But it would be a\nuseful enhancement to guide the user toward valid guesses and have different\nbehavior when the user guesses a number that’s out of range versus when the\nuser types, for example, letters instead."
        },
        {
          "kind": "text",
          "content": "One way to do this would be to parse the guess as an `i32` instead of only a\n`u32` to allow potentially negative numbers, and then add a check for the\nnumber being in range, like so:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/no-listing-09-guess-out-of-range/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `if` expression checks whether our value is out of range, tells the user\nabout the problem, and calls `continue` to start the next iteration of the loop\nand ask for another guess. After the `if` expression, we can proceed with the\ncomparisons between `guess` and the secret number knowing that `guess` is\nbetween 1 and 100."
        },
        {
          "kind": "text",
          "content": "However, this is not an ideal solution: if it were absolutely critical that the\nprogram only operated on values between 1 and 100, and it had many functions\nwith this requirement, having a check like this in every function would be\ntedious (and might impact performance)."
        },
        {
          "kind": "text",
          "content": "Instead, we can make a new type in a dedicated module and put the validations in\na function to create an instance of the type rather than repeating the\nvalidations everywhere. That way, it’s safe for functions to use the new type in\ntheir signatures and confidently use the values they receive. Listing 9-13 shows\none way to define a `Guess` type that will only create an instance of `Guess` if\nthe `new` function receives a value between 1 and 100."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"9-13\" caption=\"A `Guess` type that will only continue with values between 1 and 100\" file-name=\"src/guessing_game.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch09-error-handling/listing-09-13/src/guessing_game.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that this code in *src/guessing_game.rs* depends on adding a module\ndeclaration `mod guessing_game;` in *src/lib.rs* that we haven’t shown here.\nWithin this new module’s file, we define a struct in that module named `Guess`\nthat has a field named `value` that holds an `i32`. This is where the number\nwill be stored."
        },
        {
          "kind": "text",
          "content": "Then we implement an associated function named `new` on `Guess` that creates\ninstances of `Guess` values. The `new` function is defined to have one\nparameter named `value` of type `i32` and to return a `Guess`. The code in the\nbody of the `new` function tests `value` to make sure it’s between 1 and 100.\nIf `value` doesn’t pass this test, we make a `panic!` call, which will alert\nthe programmer who is writing the calling code that they have a bug they need\nto fix, because creating a `Guess` with a `value` outside this range would\nviolate the contract that `Guess::new` is relying on. The conditions in which\n`Guess::new` might panic should be discussed in its public-facing API\ndocumentation; we’ll cover documentation conventions indicating the possibility\nof a `panic!` in the API documentation that you create in Chapter 14. If\n`value` does pass the test, we create a new `Guess` with its `value` field set\nto the `value` parameter and return the `Guess`."
        },
        {
          "kind": "text",
          "content": "Next, we implement a method named `value` that borrows `self`, doesn’t have any\nother parameters, and returns an `i32`. This kind of method is sometimes called\na _getter_ because its purpose is to get some data from its fields and return\nit. This public method is necessary because the `value` field of the `Guess`\nstruct is private. It’s important that the `value` field be private so code\nusing the `Guess` struct is not allowed to set `value` directly: code outside\nthe `guessing_game` module _must_ use the `Guess::new` function to create an\ninstance of `Guess`, thereby ensuring there’s no way for a `Guess` to have a\n`value` that hasn’t been checked by the conditions in the `Guess::new` function."
        },
        {
          "kind": "text",
          "content": "A function that has a parameter or returns only numbers between 1 and 100 could\nthen declare in its signature that it takes or returns a `Guess` rather than an\n`i32` and wouldn’t need to do any additional checks in its body."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "31c55174-3fdf-4a21-959c-bb4056def264",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "A Rust programmer is designing a library for writing command-line interfaces. \nAs a part of this library, they are implementing a function to parse command-line flags provided by a user. \nWhich implementation would be most appropriate for this domain?\n\n```\nfn parse_flag_v1(flag: &str) -> Result<String, String> {\n  match flag.strip_prefix(\"--\") {\n    Some(no_dash) => Ok(no_dash.to_string()),\n    None => Err(format!(\"Invalid flag {flag}\"))\n  }\n}\n\nfn parse_flag_v2(flag: &str) -> String {\n  match flag.strip_prefix(\"--\") {\n    Some(no_dash) => no_dash.to_string(),\n    None => panic!(\"Invalid flag {flag}\")\n  }\n}\n```\n",
                  "distractors": [
                    "`parse_flag_v2`"
                  ],
                  "answerIndex": 0
                },
                "answer": {
                  "answer": "`parse_flag_v1`"
                },
                "context": "Here, the programmer would likely want to use a *recoverable* error (the `Result`). If a CLI user passes an incorrectly formatted flag,\nthen the CLI library might want to provide additional help like displaying the possible set of flags. A panic would force the application\nto only show the panic message, and would probably be a worse user experience.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Rust’s error-handling features are designed to help you write more robust code.\nThe `panic!` macro signals that your program is in a state it can’t handle and\nlets you tell the process to stop instead of trying to proceed with invalid or\nincorrect values. The `Result` enum uses Rust’s type system to indicate that\noperations might fail in a way that your code could recover from. You can use\n`Result` to tell code that calls your code that it needs to handle potential\nsuccess or failure as well. Using `panic!` and `Result` in the appropriate\nsituations will make your code more reliable in the face of inevitable problems."
        },
        {
          "kind": "text",
          "content": "Now that you’ve seen useful ways that the standard library uses generics with\nthe `Option` and `Result` enums, we’ll talk about how generics work and how you\ncan use them in your code."
        },
        {
          "kind": "text",
          "content": "[encoding]: ch18-03-oo-design-patterns.html#encoding-states-and-behavior-as-types"
        }
      ]
    },
    {
      "title": "Generic Types, Traits, and Lifetimes",
      "file": "ch10-00-generics.md",
      "elements": [
        {
          "kind": "text",
          "content": "Every programming language has tools for effectively handling the duplication\nof concepts. In Rust, one such tool is _generics_: abstract stand-ins for\nconcrete types or other properties. We can express the behavior of generics or\nhow they relate to other generics without knowing what will be in their place\nwhen compiling and running the code."
        },
        {
          "kind": "text",
          "content": "Functions can take parameters of some generic type, instead of a concrete type\nlike `i32` or `String`, in the same way they take parameters with unknown\nvalues to run the same code on multiple concrete values. In fact, we’ve already\nused generics in Chapter 6 with `Option<T>`, in Chapter 8 with `Vec<T>` and\n`HashMap<K, V>`, and in Chapter 9 with `Result<T, E>`. In this chapter, you’ll\nexplore how to define your own types, functions, and methods with generics!"
        },
        {
          "kind": "text",
          "content": "First we’ll review how to extract a function to reduce code duplication. We’ll\nthen use the same technique to make a generic function from two functions that\ndiffer only in the types of their parameters. We’ll also explain how to use\ngeneric types in struct and enum definitions."
        },
        {
          "kind": "text",
          "content": "Then you’ll learn how to use _traits_ to define behavior in a generic way. You\ncan combine traits with generic types to constrain a generic type to accept\nonly those types that have a particular behavior, as opposed to just any type."
        },
        {
          "kind": "text",
          "content": "Finally, we’ll discuss _lifetimes_: a variety of generics that give the\ncompiler information about how references relate to each other. Lifetimes allow\nus to give the compiler enough information about borrowed values so that it can\nensure references will be valid in more situations than it could without our\nhelp."
        },
        {
          "kind": "text",
          "content": "## Removing Duplication by Extracting a Function"
        },
        {
          "kind": "text",
          "content": "Generics allow us to replace specific types with a placeholder that represents\nmultiple types to remove code duplication. Before diving into generics syntax,\nlet’s first look at how to remove duplication in a way that doesn’t involve\ngeneric types by extracting a function that replaces specific values with a\nplaceholder that represents multiple values. Then we’ll apply the same\ntechnique to extract a generic function! By looking at how to recognize\nduplicated code you can extract into a function, you’ll start to recognize\nduplicated code that can use generics."
        },
        {
          "kind": "text",
          "content": "We’ll begin with the short program in Listing 10-1 that finds the largest\nnumber in a list."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-1\" file-name=\"src/main.rs\" caption=\"Finding the largest number in a list of numbers\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-01/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We store a list of integers in the variable `number_list` and place a reference\nto the first number in the list in a variable named `largest`. We then iterate\nthrough all the numbers in the list, and if the current number is greater than\nthe number stored in `largest`, we replace the reference in that variable.\nHowever, if the current number is less than or equal to the largest number seen\nso far, the variable doesn’t change, and the code moves on to the next number\nin the list. After considering all the numbers in the list, `largest` should\nrefer to the largest number, which in this case is 100."
        },
        {
          "kind": "text",
          "content": "We’ve now been tasked with finding the largest number in two different lists of\nnumbers. To do so, we can choose to duplicate the code in Listing 10-1 and use\nthe same logic at two different places in the program, as shown in Listing 10-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-2\" file-name=\"src/main.rs\" caption=\"Code to find the largest number in *two* lists of numbers\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-02/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Although this code works, duplicating code is tedious and error prone. We also\nhave to remember to update the code in multiple places when we want to change\nit."
        },
        {
          "kind": "text",
          "content": "To eliminate this duplication, we’ll create an abstraction by defining a\nfunction that operates on any list of integers passed in as a parameter. This\nsolution makes our code clearer and lets us express the concept of finding the\nlargest number in a list abstractly."
        },
        {
          "kind": "text",
          "content": "In Listing 10-3, we extract the code that finds the largest number into a\nfunction named `largest`. Then we call the function to find the largest number\nin the two lists from Listing 10-2. We could also use the function on any other\nlist of `i32` values we might have in the future."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-3\" file-name=\"src/main.rs\" caption=\"Abstracted code to find the largest number in two lists\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `largest` function has a parameter called `list`, which represents any\nconcrete slice of `i32` values we might pass into the function. As a result,\nwhen we call the function, the code runs on the specific values that we pass\nin."
        },
        {
          "kind": "text",
          "content": "In summary, here are the steps we took to change the code from Listing 10-2 to\nListing 10-3:"
        },
        {
          "kind": "text",
          "content": "1. Identify duplicate code.\n1. Extract the duplicate code into the body of the function, and specify the\ninputs and return values of that code in the function signature.\n1. Update the two instances of duplicated code to call the function instead."
        },
        {
          "kind": "text",
          "content": "Next, we’ll use these same steps with generics to reduce code duplication. In\nthe same way that the function body can operate on an abstract `list` instead\nof specific values, generics allow code to operate on abstract types."
        },
        {
          "kind": "text",
          "content": "For example, say we had two functions: one that finds the largest item in a\nslice of `i32` values and one that finds the largest item in a slice of `char`\nvalues. How would we eliminate that duplication? Let’s find out!"
        }
      ]
    },
    {
      "title": "Generic Data Types",
      "file": "ch10-01-syntax.md",
      "elements": [
        {
          "kind": "text",
          "content": "We use generics to create definitions for items like function signatures or\nstructs, which we can then use with many different concrete data types. Let’s\nfirst look at how to define functions, structs, enums, and methods using\ngenerics. Then we’ll discuss how generics affect code performance."
        },
        {
          "kind": "text",
          "content": "### In Function Definitions"
        },
        {
          "kind": "text",
          "content": "When defining a function that uses generics, we place the generics in the\nsignature of the function where we would usually specify the data types of the\nparameters and return value. Doing so makes our code more flexible and provides\nmore functionality to callers of our function while preventing code duplication."
        },
        {
          "kind": "text",
          "content": "Continuing with our `largest` function, Listing 10-4 shows two functions that\nboth find the largest value in a slice. We’ll then combine these into a single\nfunction that uses generics."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-4\" file-name=\"src/main.rs\" caption=\"Two functions that differ only in their names and in the types in their signatures\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `largest_i32` function is the one we extracted in Listing 10-3 that finds\nthe largest `i32` in a slice. The `largest_char` function finds the largest\n`char` in a slice. The function bodies have the same code, so let’s eliminate\nthe duplication by introducing a generic type parameter in a single function."
        },
        {
          "kind": "text",
          "content": "To parameterize the types in a new single function, we need to name the type\nparameter, just as we do for the value parameters to a function. You can use\nany identifier as a type parameter name. But we’ll use `T` because, by\nconvention, type parameter names in Rust are short, often just one letter, and\nRust’s type-naming convention is CamelCase. Short for _type_, `T` is the default\nchoice of most Rust programmers."
        },
        {
          "kind": "text",
          "content": "When we use a parameter in the body of the function, we have to declare the\nparameter name in the signature so the compiler knows what that name means.\nSimilarly, when we use a type parameter name in a function signature, we have\nto declare the type parameter name before we use it. To define the generic\n`largest` function, we place type name declarations inside angle brackets,\n`<>`, between the name of the function and the parameter list, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn largest<T>(list: &[T]) -> &T {"
          }
        },
        {
          "kind": "text",
          "content": "We read this definition as: the function `largest` is generic over some type\n`T`. This function has one parameter named `list`, which is a slice of values\nof type `T`. The `largest` function will return a reference to a value of the\nsame type `T`."
        },
        {
          "kind": "text",
          "content": "Listing 10-5 shows the combined `largest` function definition using the generic\ndata type in its signature. The listing also shows how we can call the function\nwith either a slice of `i32` values or `char` values. Note that this code won’t\ncompile yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-5\" file-name=\"src/main.rs\" caption=\"The `largest` function using generic type parameters; this doesn’t compile yet\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-05/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If we compile this code right now, we’ll get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-05/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: 0aad53ff-89d7-4d14-8e3d-c17809220252 -->\nThe issue above is that when `largest` takes a slice `&[T]` as input, the function cannot assume *anything* about the type `T`. It could be `i32`, it could be `String`, it could be [`File`](https://doc.rust-lang.org/std/fs/struct.File.html). However, `largest` requires that `T` is something you can compare with `>` (i.e. that `T` implements `PartialOrd`, a trait which we will discuss in the next section). Some types like `i32` and `String` are comparable, but other types like `File` are not comparable."
        },
        {
          "kind": "text",
          "content": "In a language like C++ with [templates](https://en.cppreference.com/w/cpp/language/templates), the compiler would not complain about the implementation of `largest`, but instead it would complain about trying to call `largest` on e.g. a file slice `&[File]`. Rust instead requires you to state the expected capabilities of generic types up front. If `T` needs to be comparable, then `largest` must say so. Therefore this compiler error says `largest` will not compile until `T` is restricted."
        },
        {
          "kind": "text",
          "content": "Additionally, unlike languages like Java where all objects have a set of core methods like [`Object.toString()`](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#toString()), there are no core methods in Rust. Without restrictions, a generic type `T` has no capabilities: it cannot be printed, cloned, or mutated (although it can be dropped).\n<!-- END INTERVENTION -->"
        },
        {
          "kind": "text",
          "content": "### In Struct Definitions"
        },
        {
          "kind": "text",
          "content": "We can also define structs to use a generic type parameter in one or more\nfields using the `<>` syntax. Listing 10-6 defines a `Point<T>` struct to hold\n`x` and `y` coordinate values of any type."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-6\" file-name=\"src/main.rs\" caption=\"A `Point<T>` struct that holds `x` and `y` values of type `T`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-06/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The syntax for using generics in struct definitions is similar to that used in\nfunction definitions. First we declare the name of the type parameter inside\nangle brackets just after the name of the struct. Then we use the generic\ntype in the struct definition where we would otherwise specify concrete data\ntypes."
        },
        {
          "kind": "text",
          "content": "Note that because we’ve used only one generic type to define `Point<T>`, this\ndefinition says that the `Point<T>` struct is generic over some type `T`, and\nthe fields `x` and `y` are _both_ that same type, whatever that type may be. If\nwe create an instance of a `Point<T>` that has values of different types, as in\nListing 10-7, our code won’t compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-7\" file-name=\"src/main.rs\" caption=\"The fields `x` and `y` must be the same type because both have the same generic data type `T`.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-07/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In this example, when we assign the integer value `5` to `x`, we let the\ncompiler know that the generic type `T` will be an integer for this instance of\n`Point<T>`. Then when we specify `4.0` for `y`, which we’ve defined to have the\nsame type as `x`, we’ll get a type mismatch error like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-07/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "To define a `Point` struct where `x` and `y` are both generics but could have\ndifferent types, we can use multiple generic type parameters. For example, in\nListing 10-8, we change the definition of `Point` to be generic over types `T`\nand `U` where `x` is of type `T` and `y` is of type `U`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-8\" file-name=\"src/main.rs\" caption=\"A `Point<T, U>` generic over two types so that `x` and `y` can be values of different types\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-08/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Now all the instances of `Point` shown are allowed! You can use as many generic\ntype parameters in a definition as you want, but using more than a few makes\nyour code hard to read. If you’re finding you need lots of generic types in\nyour code, it could indicate that your code needs restructuring into smaller\npieces."
        },
        {
          "kind": "text",
          "content": "### In Enum Definitions"
        },
        {
          "kind": "text",
          "content": "As we did with structs, we can define enums to hold generic data types in their\nvariants. Let’s take another look at the `Option<T>` enum that the standard\nlibrary provides, which we used in Chapter 6:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Option<T> {\n    Some(T),\n    None,\n}"
          }
        },
        {
          "kind": "text",
          "content": "This definition should now make more sense to you. As you can see, the\n`Option<T>` enum is generic over type `T` and has two variants: `Some`, which\nholds one value of type `T`, and a `None` variant that doesn’t hold any value.\nBy using the `Option<T>` enum, we can express the abstract concept of an\noptional value, and because `Option<T>` is generic, we can use this abstraction\nno matter what the type of the optional value is."
        },
        {
          "kind": "text",
          "content": "Enums can use multiple generic types as well. The definition of the `Result`\nenum that we used in Chapter 9 is one example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `Result` enum is generic over two types, `T` and `E`, and has two variants:\n`Ok`, which holds a value of type `T`, and `Err`, which holds a value of type\n`E`. This definition makes it convenient to use the `Result` enum anywhere we\nhave an operation that might succeed (return a value of some type `T`) or fail\n(return an error of some type `E`). In fact, this is what we used to open a\nfile in Listing 9-3, where `T` was filled in with the type `std::fs::File` when\nthe file was opened successfully and `E` was filled in with the type\n`std::io::Error` when there were problems opening the file."
        },
        {
          "kind": "text",
          "content": "When you recognize situations in your code with multiple struct or enum\ndefinitions that differ only in the types of the values they hold, you can\navoid duplication by using generic types instead."
        },
        {
          "kind": "text",
          "content": "### In Method Definitions"
        },
        {
          "kind": "text",
          "content": "We can implement methods on structs and enums (as we did in Chapter 5) and use\ngeneric types in their definitions too. Listing 10-9 shows the `Point<T>`\nstruct we defined in Listing 10-6 with a method named `x` implemented on it."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-9\" file-name=\"src/main.rs\" caption=\"Implementing a method named `x` on the `Point<T>` struct that will return a reference to the `x` field of type `T`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-09/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we’ve defined a method named `x` on `Point<T>` that returns a reference\nto the data in the field `x`."
        },
        {
          "kind": "text",
          "content": "Note that we have to declare `T` just after `impl` so we can use `T` to specify\nthat we’re implementing methods on the type `Point<T>`. By declaring `T` as a\ngeneric type after `impl`, Rust can identify that the type in the angle\nbrackets in `Point` is a generic type rather than a concrete type. We could\nhave chosen a different name for this generic parameter than the generic\nparameter declared in the struct definition, but using the same name is\nconventional. If you write a method within an `impl` that declares a generic\ntype, that method will be defined on any instance of the type, no matter what\nconcrete type ends up substituting for the generic type."
        },
        {
          "kind": "text",
          "content": "We can also specify constraints on generic types when defining methods on the\ntype. We could, for example, implement methods only on `Point<f32>` instances\nrather than on `Point<T>` instances with any generic type. In Listing 10-10 we\nuse the concrete type `f32`, meaning we don’t declare any types after `impl`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-10\" file-name=\"src/main.rs\" caption=\"An `impl` block that only applies to a struct with a particular concrete type for the generic type parameter `T`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-10/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code means the type `Point<f32>` will have a `distance_from_origin`\nmethod; other instances of `Point<T>` where `T` is not of type `f32` will not\nhave this method defined. The method measures how far our point is from the\npoint at coordinates (0.0, 0.0) and uses mathematical operations that are\navailable only for floating-point types."
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: 694bb2d0-f2e6-4b0b-a3e7-2d9f9e8b3d09 -->\nYou cannot simultaneously implement specific *and* generic methods of the same name this way. For example, if you implemented a general `distance_from_origin` for all types `T` and a specific `distance_from_origin` for `f32`, then the compiler will reject your program: Rust does not know which implementation to use when you call `Point<f32>::distance_from_origin`. More generally, Rust does not have inheritance-like mechanisms for specializing methods as you might find in an object-oriented language, with one exception (default trait methods) discussed in the next section.\n<!-- END INTERVENTION -->"
        },
        {
          "kind": "text",
          "content": "Generic type parameters in a struct definition aren’t always the same as those\nyou use in that same struct’s method signatures. Listing 10-11 uses the generic\ntypes `X1` and `Y1` for the `Point` struct and `X2` `Y2` for the `mixup` method\nsignature to make the example clearer. The method creates a new `Point`\ninstance with the `x` value from the `self` `Point` (of type `X1`) and the `y`\nvalue from the passed-in `Point` (of type `Y2`)."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-11\" file-name=\"src/main.rs\" caption=\"A method that uses generic types different from its struct’s definition\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-11/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In `main`, we’ve defined a `Point` that has an `i32` for `x` (with value `5`)\nand an `f64` for `y` (with value `10.4`). The `p2` variable is a `Point` struct\nthat has a string slice for `x` (with value `\"Hello\"`) and a `char` for `y`\n(with value `c`). Calling `mixup` on `p1` with the argument `p2` gives us `p3`,\nwhich will have an `i32` for `x` because `x` came from `p1`. The `p3` variable\nwill have a `char` for `y` because `y` came from `p2`. The `println!` macro\ncall will print `p3.x = 5, p3.y = c`."
        },
        {
          "kind": "text",
          "content": "The purpose of this example is to demonstrate a situation in which some generic\nparameters are declared with `impl` and some are declared with the method\ndefinition. Here, the generic parameters `X1` and `Y1` are declared after\n`impl` because they go with the struct definition. The generic parameters `X2`\nand `Y2` are declared after `fn mixup` because they’re only relevant to the\nmethod."
        },
        {
          "kind": "text",
          "content": "### Performance of Code Using Generics"
        },
        {
          "kind": "text",
          "content": "You might be wondering whether there is a runtime cost when using generic type\nparameters. The good news is that using generic types won’t make your program\nrun any slower than it would with concrete types."
        },
        {
          "kind": "text",
          "content": "Rust accomplishes this by performing monomorphization of the code using\ngenerics at compile time. _Monomorphization_ is the process of turning generic\ncode into specific code by filling in the concrete types that are used when\ncompiled. In this process, the compiler does the opposite of the steps we used\nto create the generic function in Listing 10-5: the compiler looks at all the\nplaces where generic code is called and generates code for the concrete types\nthe generic code is called with."
        },
        {
          "kind": "text",
          "content": "Let’s look at how this works by using the standard library’s generic\n`Option<T>` enum:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let integer = Some(5);\nlet float = Some(5.0);"
          }
        },
        {
          "kind": "text",
          "content": "When Rust compiles this code, it performs monomorphization. During that\nprocess, the compiler reads the values that have been used in `Option<T>`\ninstances and identifies two kinds of `Option<T>`: one is `i32` and the other\nis `f64`. As such, it expands the generic definition of `Option<T>` into two\ndefinitions specialized to `i32` and `f64`, thereby replacing the generic\ndefinition with the specific ones."
        },
        {
          "kind": "text",
          "content": "The monomorphized version of the code looks similar to the following (the\ncompiler uses different names than what we’re using here for illustration):"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Option_i32 {\n    Some(i32),\n    None,\n}\n\nenum Option_f64 {\n    Some(f64),\n    None,\n}\n\nfn main() {\n    let integer = Option_i32::Some(5);\n    let float = Option_f64::Some(5.0);\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The generic `Option<T>` is replaced with the specific definitions created by\nthe compiler. Because Rust compiles generic code into code that specifies the\ntype in each instance, we pay no runtime cost for using generics. When the code\nruns, it performs just as it would if we had duplicated each definition by\nhand. The process of monomorphization makes Rust’s generics extremely efficient\nat runtime."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "0aad53ff-89d7-4d14-8e3d-c17809220252",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Imagine using a third-party function whose implementation you don't know, but whose type signature is this:\n\n```\nfn mystery<T>(x: T) -> T {\n  // ????\n}\n```\n\nThen you call `mystery` like this:\n\n```\nlet y = mystery(3);\n```\n\nAssuming `mystery` uses no unsafe code, then the value of `y` must be :\n"
                },
                "answer": {
                  "answer": "3"
                },
                "context": "The only possible function (without unsafe code) that has the signature `T -> T` is the identity function:\n\n```\nfn mystery<T>(x: T) -> T {\n  x\n}\n```\n\nThe function could of course panic or print, but the return value can only be the input. `mystery` does not know\nwhat type `T` is, so there is no way for `mystery` to generate or mutate a value of `T`.\nSee [Theorems for free!](https://dl.acm.org/doi/pdf/10.1145/99370.99404) for more examples of this idea.\n\n**3 really is the correct answer! If you disagree with the answer, please don't submit a bug report!**\n"
              },
              {
                "id": "40ae0cfe-3567-4d05-b0d9-54d612a2d654",
                "type": "Tracing",
                "prompt": {
                  "program": "fn print_slice<T>(v: &[T]) {\n  for x in v {\n    println!(\"{x}\");\n  }\n}\n\nfn main() {\n  print_slice(&[1, 2, 3]);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 3
                },
                "context": "If a type is generic (like `T`), we cannot assume anything about it, including the ability to turn it into a string. Therefore `println!(\"{x}\")` is invalid\nbecause `x: &T`.\n"
              },
              {
                "id": "694bb2d0-f2e6-4b0b-a3e7-2d9f9e8b3d09",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Point<T> { x: T, y: T }\n\nimpl Point<i32> {\n  fn f(&self) -> &i32 { &self.y }\n}\n\nimpl<T> Point<T> {\n  fn f(&self) -> &T { &self.x }\n}\n\nfn main() {\n  let p: Point<i32> = Point { x: 1, y: 2 };\n  println!(\"{}\", p.f());\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 8
                },
                "context": "These definitions of `f` conflict, and there is no way for Rust to determine which `f` should be used when `p.f()` is called. Therefore this is a compiler error.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Traits: Defining Shared Behavior",
      "file": "ch10-02-traits.md",
      "elements": [
        {
          "kind": "text",
          "content": "A _trait_ defines the functionality a particular type has and can share with\nother types. We can use traits to define shared behavior in an abstract way. We\ncan use _trait bounds_ to specify that a generic type can be any type that has\ncertain behavior."
        },
        {
          "kind": "text",
          "content": "> Note: Traits are similar to a feature often called _interfaces_ in other\n> languages, although with some differences."
        },
        {
          "kind": "text",
          "content": "### Defining a Trait"
        },
        {
          "kind": "text",
          "content": "A type’s behavior consists of the methods we can call on that type. Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes. Trait definitions are a way to group method signatures together to\ndefine a set of behaviors necessary to accomplish some purpose."
        },
        {
          "kind": "text",
          "content": "For example, let’s say we have multiple structs that hold various kinds and\namounts of text: a `NewsArticle` struct that holds a news story filed in a\nparticular location and a `SocialPost` that can have, at most, 280 characters\nalong with metadata that indicates whether it was a new post, a repost, or a\nreply to another post."
        },
        {
          "kind": "text",
          "content": "We want to make a media aggregator library crate named `aggregator` that can\ndisplay summaries of data that might be stored in a `NewsArticle` or\n`SocialPost` instance. To do this, we need a summary from each type, and we’ll\nrequest that summary by calling a `summarize` method on an instance. Listing\n10-12 shows the definition of a public `Summary` trait that expresses this\nbehavior."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-12\" file-name=\"src/lib.rs\" caption=\"A `Summary` trait that consists of the behavior provided by a `summarize` method\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-12/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we declare a trait using the `trait` keyword and then the trait’s name,\nwhich is `Summary` in this case. We also declare the trait as `pub` so that\ncrates depending on this crate can make use of this trait too, as we’ll see in\na few examples. Inside the curly brackets, we declare the method signatures\nthat describe the behaviors of the types that implement this trait, which in\nthis case is `fn summarize(&self) -> String`."
        },
        {
          "kind": "text",
          "content": "After the method signature, instead of providing an implementation within curly\nbrackets, we use a semicolon. Each type implementing this trait must provide\nits own custom behavior for the body of the method. The compiler will enforce\nthat any type that has the `Summary` trait will have the method `summarize`\ndefined with this signature exactly."
        },
        {
          "kind": "text",
          "content": "A trait can have multiple methods in its body: the method signatures are listed\none per line, and each line ends in a semicolon."
        },
        {
          "kind": "text",
          "content": "### Implementing a Trait on a Type"
        },
        {
          "kind": "text",
          "content": "Now that we’ve defined the desired signatures of the `Summary` trait’s methods,\nwe can implement it on the types in our media aggregator. Listing 10-13 shows\nan implementation of the `Summary` trait on the `NewsArticle` struct that uses\nthe headline, the author, and the location to create the return value of\n`summarize`. For the `SocialPost` struct, we define `summarize` as the username\nfollowed by the entire text of the post, assuming that the post content is\nalready limited to 280 characters."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-13\" file-name=\"src/lib.rs\" caption=\"Implementing the `Summary` trait on the `NewsArticle` and `SocialPost` types\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-13/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Implementing a trait on a type is similar to implementing regular methods. The\ndifference is that after `impl`, we put the trait name we want to implement,\nthen use the `for` keyword, and then specify the name of the type we want to\nimplement the trait for. Within the `impl` block, we put the method signatures\nthat the trait definition has defined. Instead of adding a semicolon after each\nsignature, we use curly brackets and fill in the method body with the specific\nbehavior that we want the methods of the trait to have for the particular type."
        },
        {
          "kind": "text",
          "content": "Now that the library has implemented the `Summary` trait on `NewsArticle` and\n`SocialPost`, users of the crate can call the trait methods on instances of\n`NewsArticle` and `SocialPost` in the same way we call regular methods. The only\ndifference is that the user must bring the trait into scope as well as the\ntypes. Here’s an example of how a binary crate could use our `aggregator`\nlibrary crate:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-01-calling-trait-method/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "This code prints `1 new post: horse_ebooks: of course, as you probably already\nknow, people`."
        },
        {
          "kind": "text",
          "content": "Other crates that depend on the `aggregator` crate can also bring the `Summary`\ntrait into scope to implement `Summary` on their own types. One restriction to\nnote is that we can implement a trait on a type only if either the trait or the\ntype, or both, are local to our crate. For example, we can implement standard\nlibrary traits like `Display` on a custom type like `SocialPost` as part of our\n`aggregator` crate functionality because the type `SocialPost` is local to our\n`aggregator` crate. We can also implement `Summary` on `Vec<T>` in our\n`aggregator` crate because the trait `Summary` is local to our `aggregator`\ncrate."
        },
        {
          "kind": "text",
          "content": "But we can’t implement external traits on external types. For example, we can’t\nimplement the `Display` trait on `Vec<T>` within our `aggregator` crate because\n`Display` and `Vec<T>` are both defined in the standard library and aren’t\nlocal to our `aggregator` crate. This restriction is part of a property called\n_coherence_, and more specifically the _orphan rule_, so named because the\nparent type is not present. This rule ensures that other people’s code can’t\nbreak your code and vice versa. Without the rule, two crates could implement\nthe same trait for the same type, and Rust wouldn’t know which implementation\nto use."
        },
        {
          "kind": "text",
          "content": "### Default Implementations"
        },
        {
          "kind": "text",
          "content": "Sometimes it’s useful to have default behavior for some or all of the methods\nin a trait instead of requiring implementations for all methods on every type.\nThen, as we implement the trait on a particular type, we can keep or override\neach method’s default behavior."
        },
        {
          "kind": "text",
          "content": "In Listing 10-14, we specify a default string for the `summarize` method of the\n`Summary` trait instead of only defining the method signature, as we did in\nListing 10-12."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-14\" file-name=\"src/lib.rs\" caption=\"Defining a `Summary` trait with a default implementation of the `summarize` method\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-14/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To use a default implementation to summarize instances of `NewsArticle`, we\nspecify an empty `impl` block with `impl Summary for NewsArticle {}`."
        },
        {
          "kind": "text",
          "content": "Even though we’re no longer defining the `summarize` method on `NewsArticle`\ndirectly, we’ve provided a default implementation and specified that\n`NewsArticle` implements the `Summary` trait. As a result, we can still call\nthe `summarize` method on an instance of `NewsArticle`, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-02-calling-default-impl/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code prints `New article available! (Read more...)`."
        },
        {
          "kind": "text",
          "content": "Creating a default implementation doesn’t require us to change anything about\nthe implementation of `Summary` on `SocialPost` in Listing 10-13. The reason is\nthat the syntax for overriding a default implementation is the same as the\nsyntax for implementing a trait method that doesn’t have a default\nimplementation."
        },
        {
          "kind": "text",
          "content": "Default implementations can call other methods in the same trait, even if those\nother methods don’t have a default implementation. In this way, a trait can\nprovide a lot of useful functionality and only require implementors to specify\na small part of it. For example, we could define the `Summary` trait to have a\n`summarize_author` method whose implementation is required, and then define a\n`summarize` method that has a default implementation that calls the\n`summarize_author` method:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "To use this version of `Summary`, we only need to define `summarize_author`\nwhen we implement the trait on a type:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:impl}}"
          }
        },
        {
          "kind": "text",
          "content": "After we define `summarize_author`, we can call `summarize` on instances of the\n`SocialPost` struct, and the default implementation of `summarize` will call the\ndefinition of `summarize_author` that we’ve provided. Because we’ve implemented\n`summarize_author`, the `Summary` trait has given us the behavior of the\n`summarize` method without requiring us to write any more code. Here’s what\nthat looks like:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code prints `1 new post: (Read more from @horse_ebooks...)`."
        },
        {
          "kind": "text",
          "content": "Note that it isn’t possible to call the default implementation from an\noverriding implementation of that same method."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "c4adb1a8-ca6a-43c1-ae34-54302f674ece",
                "type": "Tracing",
                "prompt": {
                  "program": "trait MakeNoise {\n  fn make_noise(&self) {\n    println!(\"(silence)\");\n  }\n}\n\nstruct Dog {}\nstruct Cat {}\n\nimpl MakeNoise for Dog {\n  fn make_noise(&self) {\n    println!(\"bark\");\n  }\n}\n\nimpl MakeNoise for Cat {}\n\nfn main() {\n  let dog = Dog {};\n  let cat = Cat {};\n  dog.make_noise();\n  cat.make_noise();\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "bark\n(silence)"
                },
                "context": "The implementation of `MakeNoise` provides a specific implementation for `Dog` and uses the default implementation for `Cat`.\nTherefore calling `make_noise` on each prints `bark` and `(silence)`, respectively. \n"
              },
              {
                "id": "783f2485-e5b9-483b-8368-064366c77285",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The following are statements about what kinds of trait implementations are permitted by Rust. Select each statement which is true.",
                  "distractors": [
                    "You can implement an external trait for an external type"
                  ]
                },
                "answer": {
                  "answer": [
                    "You can implement an external trait for a local type",
                    "You can implement a local trait for an external type",
                    "You can implement a local trait for a local type"
                  ]
                },
                "context": "The \"orphan rule\" requires that you cannot implement an external trait for an external type, \nto ensure code doesn't break if two crates provide conflicting implementations.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Traits as Parameters"
        },
        {
          "kind": "text",
          "content": "Now that you know how to define and implement traits, we can explore how to use\ntraits to define functions that accept many different types. We’ll use the\n`Summary` trait we implemented on the `NewsArticle` and `SocialPost` types in\nListing 10-13 to define a `notify` function that calls the `summarize` method\non its `item` parameter, which is of some type that implements the `Summary`\ntrait. To do this, we use the `impl Trait` syntax, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-04-traits-as-parameters/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Instead of a concrete type for the `item` parameter, we specify the `impl`\nkeyword and the trait name. This parameter accepts any type that implements the\nspecified trait. In the body of `notify`, we can call any methods on `item`\nthat come from the `Summary` trait, such as `summarize`. We can call `notify`\nand pass in any instance of `NewsArticle` or `SocialPost`. Code that calls the\nfunction with any other type, such as a `String` or an `i32`, won’t compile\nbecause those types don’t implement `Summary`."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"fixing-the-largest-function-with-trait-bounds\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Trait Bound Syntax"
        },
        {
          "kind": "text",
          "content": "The `impl Trait` syntax works for straightforward cases but is actually syntax\nsugar for a longer form known as a _trait bound_; it looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn notify<T: Summary>(item: &T) {\n    println!(\"Breaking news! {}\", item.summarize());\n}"
          }
        },
        {
          "kind": "text",
          "content": "This longer form is equivalent to the example in the previous section but is\nmore verbose. We place trait bounds with the declaration of the generic type\nparameter after a colon and inside angle brackets."
        },
        {
          "kind": "text",
          "content": "The `impl Trait` syntax is convenient and makes for more concise code in simple\ncases, while the fuller trait bound syntax can express more complexity in other\ncases. For example, we can have two parameters that implement `Summary`. Doing\nso with the `impl Trait` syntax looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn notify(item1: &impl Summary, item2: &impl Summary) {"
          }
        },
        {
          "kind": "text",
          "content": "Using `impl Trait` is appropriate if we want this function to allow `item1` and\n`item2` to have different types (as long as both types implement `Summary`). If\nwe want to force both parameters to have the same type, however, we must use a\ntrait bound, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn notify<T: Summary>(item1: &T, item2: &T) {"
          }
        },
        {
          "kind": "text",
          "content": "The generic type `T` specified as the type of the `item1` and `item2`\nparameters constrains the function such that the concrete type of the value\npassed as an argument for `item1` and `item2` must be the same."
        },
        {
          "kind": "text",
          "content": "#### Specifying Multiple Trait Bounds with the `+` Syntax"
        },
        {
          "kind": "text",
          "content": "We can also specify more than one trait bound. Say we wanted `notify` to use\ndisplay formatting as well as `summarize` on `item`: we specify in the `notify`\ndefinition that `item` must implement both `Display` and `Summary`. We can do\nso using the `+` syntax:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn notify(item: &(impl Summary + Display)) {"
          }
        },
        {
          "kind": "text",
          "content": "The `+` syntax is also valid with trait bounds on generic types:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn notify<T: Summary + Display>(item: &T) {"
          }
        },
        {
          "kind": "text",
          "content": "With the two trait bounds specified, the body of `notify` can call `summarize`\nand use `{}` to format `item`."
        },
        {
          "kind": "text",
          "content": "#### Clearer Trait Bounds with `where` Clauses"
        },
        {
          "kind": "text",
          "content": "Using too many trait bounds has its downsides. Each generic has its own trait\nbounds, so functions with multiple generic type parameters can contain lots of\ntrait bound information between the function’s name and its parameter list,\nmaking the function signature hard to read. For this reason, Rust has alternate\nsyntax for specifying trait bounds inside a `where` clause after the function\nsignature. So, instead of writing this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {"
          }
        },
        {
          "kind": "text",
          "content": "we can use a `where` clause, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-07-where-clause/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This function’s signature is less cluttered: the function name, parameter list,\nand return type are close together, similar to a function without lots of trait\nbounds."
        },
        {
          "kind": "text",
          "content": "### Returning Types That Implement Traits"
        },
        {
          "kind": "text",
          "content": "We can also use the `impl Trait` syntax in the return position to return a\nvalue of some type that implements a trait, as shown here:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-05-returning-impl-trait/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "By using `impl Summary` for the return type, we specify that the\n`returns_summarizable` function returns some type that implements the `Summary`\ntrait without naming the concrete type. In this case, `returns_summarizable`\nreturns a `SocialPost`, but the code calling this function doesn’t need to know\nthat."
        },
        {
          "kind": "text",
          "content": "The ability to specify a return type only by the trait it implements is\nespecially useful in the context of closures and iterators, which we cover in\nChapter 13. Closures and iterators create types that only the compiler knows or\ntypes that are very long to specify. The `impl Trait` syntax lets you concisely\nspecify that a function returns some type that implements the `Iterator` trait\nwithout needing to write out a very long type."
        },
        {
          "kind": "text",
          "content": "However, you can only use `impl Trait` if you’re returning a single type. For\nexample, this code that returns either a `NewsArticle` or a `SocialPost` with\nthe return type specified as `impl Summary` wouldn’t work:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-06-impl-trait-returns-one-type/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Returning either a `NewsArticle` or a `SocialPost` isn’t allowed due to\nrestrictions around how the `impl Trait` syntax is implemented in the compiler.\nWe’ll cover how to write a function with this behavior in the [“Using Trait\nObjects That Allow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!-- ignore\n--> section of Chapter 18."
        },
        {
          "kind": "text",
          "content": "### Using Trait Bounds to Conditionally Implement Methods"
        },
        {
          "kind": "text",
          "content": "By using a trait bound with an `impl` block that uses generic type parameters,\nwe can implement methods conditionally for types that implement the specified\ntraits. For example, the type `Pair<T>` in Listing 10-15 always implements the\n`new` function to return a new instance of `Pair<T>` (recall from the\n[“Defining Methods”][methods]<!-- ignore --> section of Chapter 5 that `Self`\nis a type alias for the type of the `impl` block, which in this case is\n`Pair<T>`). But in the next `impl` block, `Pair<T>` only implements the\n`cmp_display` method if its inner type `T` implements the `PartialOrd` trait\nthat enables comparison _and_ the `Display` trait that enables printing."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-15\" file-name=\"src/lib.rs\" caption=\"Conditionally implementing methods on a generic type depending on trait bounds\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-15/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We can also conditionally implement a trait for any type that implements\nanother trait. Implementations of a trait on any type that satisfies the trait\nbounds are called _blanket implementations_ and are used extensively in the\nRust standard library. For example, the standard library implements the\n`ToString` trait on any type that implements the `Display` trait. The `impl`\nblock in the standard library looks similar to this code:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "impl<T: Display> ToString for T {\n    // --snip--\n}"
          }
        },
        {
          "kind": "text",
          "content": "Because the standard library has this blanket implementation, we can call the\n`to_string` method defined by the `ToString` trait on any type that implements\nthe `Display` trait. For example, we can turn integers into their corresponding\n`String` values like this because integers implement `Display`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let s = 3.to_string();"
          }
        },
        {
          "kind": "text",
          "content": "Blanket implementations appear in the documentation for the trait in the\n“Implementors” section."
        },
        {
          "kind": "text",
          "content": "Traits and trait bounds let us write code that uses generic type parameters to\nreduce duplication but also specify to the compiler that we want the generic\ntype to have particular behavior. The compiler can then use the trait bound\ninformation to check that all the concrete types used with our code provide the\ncorrect behavior. In dynamically typed languages, we would get an error at\nruntime if we called a method on a type which didn’t define the method. But\nRust moves these errors to compile time so we’re forced to fix the problems\nbefore our code is even able to run. Additionally, we don’t have to write code\nthat checks for behavior at runtime because we’ve already checked at compile\ntime. Doing so improves performance without having to give up the flexibility\nof generics."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "a2a1546b-27bf-47d2-a1bc-86d777573f40",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::fmt::Display;\nfn displayable<T: Display>(t: T) -> impl Display { t }\n\nfn main() {\n  let s = String::from(\"hello\");\n  let mut s2 = displayable(s);\n  s2.push_str(\" world\");\n  println!(\"{s2}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 7
                },
                "context": "Because `displayable` returns `impl Display`, then we only know that `s2` is *some* type that implements `Display`, \nnot that it is a `String` which has a `push_str` method. Therefore we cannot call `s2.push_str(..)`. If the return\ntype of `displayable` was `-> T`, then this program would compile.\n"
              },
              {
                "id": "8b35f91c-ced2-4b8f-bf1c-90550f2b744b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "What is the smallest set of trait bounds on `T` needed to make this function type-check?\n```\nfn f<T: /* ??? */>(t: &T) {\n  let t2 = t.clone();\n  println!(\"{t2}\");\n}\n```\n",
                  "distractors": [
                    "(no bounds)",
                    "`Clone`",
                    "`Clone + Display + Debug`"
                  ]
                },
                "answer": {
                  "answer": "`Clone + Display`"
                },
                "context": "Because `clone` is called and the `{}` display brackets are used in a formatter, then `T` must be `Clone` and `Display`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[using-trait-objects-that-allow-for-values-of-different-types]: ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[methods]: ch05-03-method-syntax.html#defining-methods"
        }
      ]
    },
    {
      "title": "Validating References with Lifetimes",
      "file": "ch10-03-lifetime-syntax.md",
      "elements": [
        {
          "kind": "text",
          "content": "Lifetimes are another kind of generic that we’ve already been using. Rather\nthan ensuring that a type has the behavior we want, lifetimes ensure that\nreferences are valid as long as we need them to be."
        },
        {
          "kind": "text",
          "content": "One detail we didn’t discuss in the [“References and\nBorrowing”][references-and-borrowing]<!-- ignore --> section in Chapter 4 is\nthat every reference in Rust has a _lifetime_, which is the scope for which\nthat reference is valid. Most of the time, lifetimes are implicit and inferred,\njust like most of the time, types are inferred. We are only required to\nannotate types when multiple types are possible. In a similar way, we have to\nannotate lifetimes when the lifetimes of references could be related in a few\ndifferent ways. Rust requires us to annotate the relationships using generic\nlifetime parameters to ensure the actual references used at runtime will\ndefinitely be valid."
        },
        {
          "kind": "text",
          "content": "Annotating lifetimes is not a concept most other programming languages have, so\nthis is going to feel unfamiliar. Although we won’t cover lifetimes in their\nentirety in this chapter, we’ll discuss common ways you might encounter\nlifetime syntax so you can get comfortable with the concept."
        },
        {
          "kind": "text",
          "content": "### Preventing Dangling References with Lifetimes"
        },
        {
          "kind": "text",
          "content": "The main aim of lifetimes is to prevent _dangling references_, which cause a\nprogram to reference data other than the data it’s intended to reference.\nConsider the unsafe program in Listing 10-16, which has an outer scope and an inner\nscope."
        },
        {
          "kind": "text",
          "content": "<!-- TODO(aquascope): support for nested scopes -->\n<Listing number=\"10-16\" caption=\"An attempt to use a reference whose value has gone out of scope\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "fn main() {\n    let r;\n\n    {\n        let x = 5;\n        r = &x;\n    }\n\n    println!(\"r: {}\", r);\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "> Note: The examples in Listings 10-16, 10-17, and 10-23 declare variables\n> without giving them an initial value, so the variable name exists in the outer\n> scope. At first glance, this might appear to be in conflict with Rust’s having\n> no null values. However, if we try to use a variable before giving it a value,\n> we’ll get a compile-time error, which shows that Rust indeed does not allow\n> null values."
        },
        {
          "kind": "text",
          "content": "The outer scope declares a variable named `r` with no initial value, and the\ninner scope declares a variable named `x` with the initial value of `5`. Inside\nthe inner scope, we attempt to set the value of `r` as a reference to `x`. Then\nthe inner scope ends, and we attempt to print the value in `r`. This code won’t\ncompile because the value that `r` is referring to has gone out of scope before\nwe try to use it. Here is the error message:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-16/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error message says that the variable `x` “does not live long enough.” The\nreason is that `x` will be out of scope when the inner scope ends on line 7.\nBut `r` is still valid for the outer scope; because its scope is larger, we say\nthat it “lives longer.” If Rust allowed this code to work, `r` would be\nreferencing memory that was deallocated when `x` went out of scope, and\nanything we tried to do with `r` wouldn’t work correctly. So how does Rust\ndetermine that this code is invalid? It uses a borrow checker."
        },
        {
          "kind": "text",
          "content": "### The Borrow Checker Ensures Data Outlives Its References"
        },
        {
          "kind": "text",
          "content": "The Rust compiler has a _borrow checker_ that compares scopes to determine\nwhether all borrows are valid. Listing 10-17 shows the same code as Listing\n10-16 but with annotations showing the lifetimes of the variables."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-17\" caption=\"Annotations of the lifetimes of `r` and `x`, named `'a` and `'b`, respectively\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-17/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we’ve annotated the lifetime of `r` with `'a` and the lifetime of `x`\nwith `'b`. As you can see, the inner `'b` block is much smaller than the outer\n`'a` lifetime block. At compile time, Rust compares the size of the two\nlifetimes and sees that `r` has a lifetime of `'a` but that it refers to memory\nwith a lifetime of `'b`. The program is rejected because `'b` is shorter than\n`'a`: the subject of the reference doesn’t live as long as the reference."
        },
        {
          "kind": "text",
          "content": "Listing 10-18 fixes the code so it doesn’t have a dangling reference and it\ncompiles without any errors."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-18\" caption=\"A valid reference because the data has a longer lifetime than the reference\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-18/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, `x` has the lifetime `'b`, which in this case is larger than `'a`. This\nmeans `r` can reference `x` because Rust knows that the reference in `r` will\nalways be valid while `x` is valid."
        },
        {
          "kind": "text",
          "content": "Now that you know what the lifetimes of references are and how Rust analyzes\nlifetimes to ensure references will always be valid, let’s explore generic\nlifetimes of parameters and return values in the context of functions."
        },
        {
          "kind": "text",
          "content": "### Generic Lifetimes in Functions"
        },
        {
          "kind": "text",
          "content": "We’ll write a function that returns the longer of two string slices. This\nfunction will take two string slices and return a single string slice. After\nwe’ve implemented the `longest` function, the code in Listing 10-19 should\nprint `The longest string is abcd`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-19\" file-name=\"src/main.rs\" caption=\"A `main` function that calls the `longest` function to find the longer of two string slices\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-19/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that we want the function to take string slices, which are references,\nrather than strings, because we don’t want the `longest` function to take\nownership of its parameters. Refer to [“String Slices as\nParameters”][string-slices-as-parameters]<!-- ignore --> in Chapter 4 for more\ndiscussion about why the parameters we use in Listing 10-19 are the ones we\nwant."
        },
        {
          "kind": "text",
          "content": "If we try to implement the `longest` function as shown in Listing 10-20, it\nwon’t compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-20\" file-name=\"src/main.rs\" caption=\"An implementation of the `longest` function that returns the longer of two string slices but does not yet compile\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-20/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Instead, we get the following error that talks about lifetimes:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-20/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The help text reveals that the return type needs a generic lifetime parameter\non it because Rust can’t tell whether the reference being returned refers to\n`x` or `y`. Actually, we don’t know either, because the `if` block in the body\nof this function returns a reference to `x` and the `else` block returns a\nreference to `y`!"
        },
        {
          "kind": "text",
          "content": "When we’re defining this function, we don’t know the concrete values that will\nbe passed into this function, so we don’t know whether the `if` case or the\n`else` case will execute. We also don’t know the concrete lifetimes of the\nreferences that will be passed in, so we can’t look at the scopes as we did in\nListings 10-17 and 10-18 to determine whether the reference we return will\nalways be valid. The borrow checker can’t determine this either, because it\ndoesn’t know how the lifetimes of `x` and `y` relate to the lifetime of the\nreturn value. To fix this error, we’ll add generic lifetime parameters that\ndefine the relationship between the references so the borrow checker can\nperform its analysis."
        },
        {
          "kind": "text",
          "content": "### Lifetime Annotation Syntax"
        },
        {
          "kind": "text",
          "content": "Lifetime annotations don’t change how long any of the references live. Rather,\nthey describe the relationships of the lifetimes of multiple references to each\nother without affecting the lifetimes. Just as functions can accept any type\nwhen the signature specifies a generic type parameter, functions can accept\nreferences with any lifetime by specifying a generic lifetime parameter."
        },
        {
          "kind": "text",
          "content": "Lifetime annotations have a slightly unusual syntax: the names of lifetime\nparameters must start with an apostrophe (`'`) and are usually all lowercase\nand very short, like generic types. Most people use the name `'a` for the first\nlifetime annotation. We place lifetime parameter annotations after the `&` of a\nreference, using a space to separate the annotation from the reference’s type."
        },
        {
          "kind": "text",
          "content": "Here are some examples: a reference to an `i32` without a lifetime parameter, a\nreference to an `i32` that has a lifetime parameter named `'a`, and a mutable\nreference to an `i32` that also has the lifetime `'a`."
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "&i32        // a reference\n&'a i32     // a reference with an explicit lifetime\n&'a mut i32 // a mutable reference with an explicit lifetime"
          }
        },
        {
          "kind": "text",
          "content": "One lifetime annotation by itself doesn’t have much meaning because the\nannotations are meant to tell Rust how generic lifetime parameters of multiple\nreferences relate to each other. Let’s examine how the lifetime annotations\nrelate to each other in the context of the `longest` function."
        },
        {
          "kind": "text",
          "content": "### Lifetime Annotations in Function Signatures"
        },
        {
          "kind": "text",
          "content": "To use lifetime annotations in function signatures, we need to declare the\ngeneric _lifetime_ parameters inside angle brackets between the function name\nand the parameter list, just as we did with generic _type_ parameters."
        },
        {
          "kind": "text",
          "content": "We want the signature to express the following constraint: the returned\nreference will be valid as long as both the parameters are valid. This is the\nrelationship between lifetimes of the parameters and the return value. We’ll\nname the lifetime `'a` and then add it to each reference, as shown in Listing\n10-21."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-21\" file-name=\"src/main.rs\" caption=\"The `longest` function definition specifying that all the references in the signature must have the same lifetime `'a`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-21/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code should compile and produce the result we want when we use it with the\n`main` function in Listing 10-19."
        },
        {
          "kind": "text",
          "content": "The function signature now tells Rust that for some lifetime `'a`, the function\ntakes two parameters, both of which are string slices that live at least as\nlong as lifetime `'a`. The function signature also tells Rust that the string\nslice returned from the function will live at least as long as lifetime `'a`.\nIn practice, it means that the lifetime of the reference returned by the\n`longest` function is the same as the smaller of the lifetimes of the values\nreferred to by the function arguments. These relationships are what we want\nRust to use when analyzing this code."
        },
        {
          "kind": "text",
          "content": "Remember, when we specify the lifetime parameters in this function signature,\nwe’re not changing the lifetimes of any values passed in or returned. Rather,\nwe’re specifying that the borrow checker should reject any values that don’t\nadhere to these constraints. Note that the `longest` function doesn’t need to\nknow exactly how long `x` and `y` will live, only that some scope can be\nsubstituted for `'a` that will satisfy this signature."
        },
        {
          "kind": "text",
          "content": "When annotating lifetimes in functions, the annotations go in the function\nsignature, not in the function body. The lifetime annotations become part of\nthe contract of the function, much like the types in the signature. Having\nfunction signatures contain the lifetime contract means the analysis the Rust\ncompiler does can be simpler. If there’s a problem with the way a function is\nannotated or the way it is called, the compiler errors can point to the part of\nour code and the constraints more precisely. If, instead, the Rust compiler\nmade more inferences about what we intended the relationships of the lifetimes\nto be, the compiler might only be able to point to a use of our code many steps\naway from the cause of the problem."
        },
        {
          "kind": "text",
          "content": "When we pass concrete references to `longest`, the concrete lifetime that is\nsubstituted for `'a` is the part of the scope of `x` that overlaps with the\nscope of `y`. In other words, the generic lifetime `'a` will get the concrete\nlifetime that is equal to the smaller of the lifetimes of `x` and `y`. Because\nwe’ve annotated the returned reference with the same lifetime parameter `'a`,\nthe returned reference will also be valid for the length of the smaller of the\nlifetimes of `x` and `y`."
        },
        {
          "kind": "text",
          "content": "Let’s look at how the lifetime annotations restrict the `longest` function by\npassing in references that have different concrete lifetimes. Listing 10-22 is\na straightforward example."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-22\" file-name=\"src/main.rs\" caption=\"Using the `longest` function with references to `String` values that have different concrete lifetimes\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-22/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In this example, `string1` is valid until the end of the outer scope, `string2`\nis valid until the end of the inner scope, and `result` references something\nthat is valid until the end of the inner scope. Run this code and you’ll see\nthat the borrow checker approves; it will compile and print `The longest string\nis long string is long`."
        },
        {
          "kind": "text",
          "content": "Next, let’s try an example that shows that the lifetime of the reference in\n`result` must be the smaller lifetime of the two arguments. We’ll move the\ndeclaration of the `result` variable outside the inner scope but leave the\nassignment of the value to the `result` variable inside the scope with\n`string2`. Then we’ll move the `println!` that uses `result` to outside the\ninner scope, after the inner scope has ended. The code in Listing 10-23 will\nnot compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-23\" file-name=\"src/main.rs\" caption=\"Attempting to use `result` after `string2` has gone out of scope\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-23/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we try to compile this code, we get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-23/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error shows that for `result` to be valid for the `println!` statement,\n`string2` would need to be valid until the end of the outer scope. Rust knows\nthis because we annotated the lifetimes of the function parameters and return\nvalues using the same lifetime parameter `'a`."
        },
        {
          "kind": "text",
          "content": "As humans, we can look at this code and see that `string1` is longer than\n`string2`, and therefore, `result` will contain a reference to `string1`.\nBecause `string1` has not gone out of scope yet, a reference to `string1` will\nstill be valid for the `println!` statement. However, the compiler can’t see\nthat the reference is valid in this case. We’ve told Rust that the lifetime of\nthe reference returned by the `longest` function is the same as the smaller of\nthe lifetimes of the references passed in. Therefore, the borrow checker\ndisallows the code in Listing 10-23 as possibly having an invalid reference."
        },
        {
          "kind": "text",
          "content": "Try designing more experiments that vary the values and lifetimes of the\nreferences passed in to the `longest` function and how the returned reference\nis used. Make hypotheses about whether or not your experiments will pass the\nborrow checker before you compile; then check to see if you’re right!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8b7f93c3-efb0-44e2-a0ca-b45e35620b30",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which kind of programming error is a lifetime supposed to prevent?",
                  "distractors": [
                    "Using the result of a fallible computation before checking for the possibility of error",
                    "Indexing past the bounds of an array (buffer overflow)",
                    "Not allocating enough memory for an object"
                  ]
                },
                "answer": {
                  "answer": "Using a reference to an object after its memory has been freed"
                },
                "context": "Lifetimes help identify how long an object is \"live\", and whether references to that object outlive the object itself. \n"
              },
              {
                "id": "77cf924a-ece1-4119-a762-f5f03536b4e1",
                "type": "Tracing",
                "prompt": {
                  "program": "fn shortest<'a, 'b>(x: &'a str, y: &'b str) -> &'a str {\n  if x.len() < y.len() {\n    x\n  } else {\n    y\n  }\n}\n\nfn main() {\n  println!(\"{}\", shortest(\"hello\", \"rust\"));\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 5
                },
                "context": "If the type signature says that the function must return a reference with lifetime `'a`, then it would be invalid to return\na reference with a different lifetime '`b`, i.e. `y` here.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Thinking in Terms of Lifetimes"
        },
        {
          "kind": "text",
          "content": "The way in which you need to specify lifetime parameters depends on what your\nfunction is doing. For example, if we changed the implementation of the\n`longest` function to always return the first parameter rather than the longest\nstring slice, we wouldn’t need to specify a lifetime on the `y` parameter. The\nfollowing code will compile:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-08-only-one-reference-with-lifetime/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve specified a lifetime parameter `'a` for the parameter `x` and the return\ntype, but not for the parameter `y`, because the lifetime of `y` does not have\nany relationship with the lifetime of `x` or the return value."
        },
        {
          "kind": "text",
          "content": "When returning a reference from a function, the lifetime parameter for the\nreturn type needs to match the lifetime parameter for one of the parameters. If\nthe reference returned does _not_ refer to one of the parameters, it must refer\nto a value created within this function. However, this would be a dangling\nreference because the value will go out of scope at the end of the function.\nConsider this attempted implementation of the `longest` function that won’t\ncompile:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-09-unrelated-lifetime/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, even though we’ve specified a lifetime parameter `'a` for the return\ntype, this implementation will fail to compile because the return value\nlifetime is not related to the lifetime of the parameters at all. Here is the\nerror message we get:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-09-unrelated-lifetime/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The problem is that `result` goes out of scope and gets cleaned up at the end\nof the `longest` function. We’re also trying to return a reference to `result`\nfrom the function. There is no way we can specify lifetime parameters that\nwould change the dangling reference, and Rust won’t let us create a dangling\nreference. In this case, the best fix would be to return an owned data type\nrather than a reference so the calling function is then responsible for\ncleaning up the value."
        },
        {
          "kind": "text",
          "content": "Ultimately, lifetime syntax is about connecting the lifetimes of various\nparameters and return values of functions. Once they’re connected, Rust has\nenough information to allow memory-safe operations and disallow operations that\nwould create dangling pointers or otherwise violate memory safety."
        },
        {
          "kind": "text",
          "content": "### Lifetime Annotations in Struct Definitions"
        },
        {
          "kind": "text",
          "content": "So far, the structs we’ve defined all hold owned types. We can define structs\nto hold references, but in that case we would need to add a lifetime annotation\non every reference in the struct’s definition. Listing 10-24 has a struct named\n`ImportantExcerpt` that holds a string slice."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-24\" file-name=\"src/main.rs\" caption=\"A struct that holds a reference, requiring a lifetime annotation\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-24/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This struct has the single field `part` that holds a string slice, which is a\nreference. As with generic data types, we declare the name of the generic\nlifetime parameter inside angle brackets after the name of the struct so we can\nuse the lifetime parameter in the body of the struct definition. This\nannotation means an instance of `ImportantExcerpt` can’t outlive the reference\nit holds in its `part` field."
        },
        {
          "kind": "text",
          "content": "The `main` function here creates an instance of the `ImportantExcerpt` struct\nthat holds a reference to the first sentence of the `String` owned by the\nvariable `novel`. The data in `novel` exists before the `ImportantExcerpt`\ninstance is created. In addition, `novel` doesn’t go out of scope until after\nthe `ImportantExcerpt` goes out of scope, so the reference in the\n`ImportantExcerpt` instance is valid."
        },
        {
          "kind": "text",
          "content": "### Lifetime Elision"
        },
        {
          "kind": "text",
          "content": "You’ve learned that every reference has a lifetime and that you need to specify\nlifetime parameters for functions or structs that use references. However, we\nhad a function in Listing 4-9, shown again in Listing 10-25, that compiled\nwithout lifetime annotations."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"10-25\" file-name=\"src/lib.rs\" caption=\"A function we defined in Listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-25/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The reason this function compiles without lifetime annotations is historical:\nin early versions (pre-1.0) of Rust, this code wouldn’t have compiled because\nevery reference needed an explicit lifetime. At that time, the function\nsignature would have been written like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn first_word<'a>(s: &'a str) -> &'a str {"
          }
        },
        {
          "kind": "text",
          "content": "After writing a lot of Rust code, the Rust team found that Rust programmers\nwere entering the same lifetime annotations over and over in particular\nsituations. These situations were predictable and followed a few deterministic\npatterns. The developers programmed these patterns into the compiler’s code so\nthe borrow checker could infer the lifetimes in these situations and wouldn’t\nneed explicit annotations."
        },
        {
          "kind": "text",
          "content": "This piece of Rust history is relevant because it’s possible that more\ndeterministic patterns will emerge and be added to the compiler. In the future,\neven fewer lifetime annotations might be required."
        },
        {
          "kind": "text",
          "content": "The patterns programmed into Rust’s analysis of references are called the\n_lifetime elision rules_. These aren’t rules for programmers to follow; they’re\na set of particular cases that the compiler will consider, and if your code\nfits these cases, you don’t need to write the lifetimes explicitly."
        },
        {
          "kind": "text",
          "content": "The elision rules don’t provide full inference. If there is still ambiguity\nabout what lifetimes the references have after Rust applies the rules, the\ncompiler won’t guess what the lifetime of the remaining references should be.\nInstead of guessing, the compiler will give you an error that you can resolve by\nadding the lifetime annotations."
        },
        {
          "kind": "text",
          "content": "Lifetimes on function or method parameters are called _input lifetimes_, and\nlifetimes on return values are called _output lifetimes_."
        },
        {
          "kind": "text",
          "content": "The compiler uses three rules to figure out the lifetimes of the references\nwhen there aren’t explicit annotations. The first rule applies to input\nlifetimes, and the second and third rules apply to output lifetimes. If the\ncompiler gets to the end of the three rules and there are still references for\nwhich it can’t figure out lifetimes, the compiler will stop with an error.\nThese rules apply to `fn` definitions as well as `impl` blocks."
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: d03748df-8dcf-4ec8-bd30-341927544665 -->\nThe first rule is that the compiler assigns a different lifetime parameter to each lifetime in each input type. References like `&'_ i32` need a lifetime parameter, and structures like `ImportantExcerpt<'_>` need a lifetime parameter. For example:\n* The function `fn foo(x: &i32)` would get one lifetime parameter and become `fn foo<'a>(x: &'a i32)`.\n* The function `fn foo(x: &i32, y: &i32)` would get two lifetime parameters and become `fn foo<'a, 'b>(x: &'a i32, y: &'b i32)`.\n* The function `fn foo(x: &ImportantExcerpt)` would get two lifetime parameters and become `fn foo<'a, 'b>(x: &'a ImportantExcerpt<'b>)`.\n<!-- END INTERVENTION -->"
        },
        {
          "kind": "text",
          "content": "The second rule is that, if there is exactly one input lifetime parameter, that\nlifetime is assigned to all output lifetime parameters: `fn foo<'a>(x: &'a i32)\n-> &'a i32`."
        },
        {
          "kind": "text",
          "content": "The third rule is that, if there are multiple input lifetime parameters, but\none of them is `&self` or `&mut self` because this is a method, the lifetime of\n`self` is assigned to all output lifetime parameters. This third rule makes\nmethods much nicer to read and write because fewer symbols are necessary."
        },
        {
          "kind": "text",
          "content": "Let’s pretend we’re the compiler. We’ll apply these rules to figure out the\nlifetimes of the references in the signature of the `first_word` function in\nListing 10-25. The signature starts without any lifetimes associated with the\nreferences:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn first_word(s: &str) -> &str {"
          }
        },
        {
          "kind": "text",
          "content": "Then the compiler applies the first rule, which specifies that each parameter\ngets its own lifetime. We’ll call it `'a` as usual, so now the signature is\nthis:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn first_word<'a>(s: &'a str) -> &str {"
          }
        },
        {
          "kind": "text",
          "content": "The second rule applies because there is exactly one input lifetime. The second\nrule specifies that the lifetime of the one input parameter gets assigned to\nthe output lifetime, so the signature is now this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn first_word<'a>(s: &'a str) -> &'a str {"
          }
        },
        {
          "kind": "text",
          "content": "Now all the references in this function signature have lifetimes, and the\ncompiler can continue its analysis without needing the programmer to annotate\nthe lifetimes in this function signature."
        },
        {
          "kind": "text",
          "content": "Let’s look at another example, this time using the `longest` function that had\nno lifetime parameters when we started working with it in Listing 10-20:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn longest(x: &str, y: &str) -> &str {"
          }
        },
        {
          "kind": "text",
          "content": "Let’s apply the first rule: each parameter gets its own lifetime. This time we\nhave two parameters instead of one, so we have two lifetimes:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {"
          }
        },
        {
          "kind": "text",
          "content": "You can see that the second rule doesn’t apply because there is more than one\ninput lifetime. The third rule doesn’t apply either, because `longest` is a\nfunction rather than a method, so none of the parameters are `self`. After\nworking through all three rules, we still haven’t figured out what the return\ntype’s lifetime is. This is why we got an error trying to compile the code in\nListing 10-20: the compiler worked through the lifetime elision rules but still\ncouldn’t figure out all the lifetimes of the references in the signature."
        },
        {
          "kind": "text",
          "content": "Because the third rule really only applies in method signatures, we’ll look at\nlifetimes in that context next to see why the third rule means we don’t have to\nannotate lifetimes in method signatures very often."
        },
        {
          "kind": "text",
          "content": "### Lifetime Annotations in Method Definitions"
        },
        {
          "kind": "text",
          "content": "When we implement methods on a struct with lifetimes, we use the same syntax as\nthat of generic type parameters, as shown in Listing 10-11. Where we declare and\nuse the lifetime parameters depends on whether they’re related to the struct\nfields or the method parameters and return values."
        },
        {
          "kind": "text",
          "content": "Lifetime names for struct fields always need to be declared after the `impl`\nkeyword and then used after the struct’s name because those lifetimes are part\nof the struct’s type."
        },
        {
          "kind": "text",
          "content": "In method signatures inside the `impl` block, references might be tied to the\nlifetime of references in the struct’s fields, or they might be independent. In\naddition, the lifetime elision rules often make it so that lifetime annotations\naren’t necessary in method signatures. Let’s look at some examples using the\nstruct named `ImportantExcerpt` that we defined in Listing 10-24."
        },
        {
          "kind": "text",
          "content": "First we’ll use a method named `level` whose only parameter is a reference to\n`self` and whose return value is an `i32`, which is not a reference to anything:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-10-lifetimes-on-methods/src/main.rs:1st}}"
          }
        },
        {
          "kind": "text",
          "content": "The lifetime parameter declaration after `impl` and its use after the type name\nare required, but we’re not required to annotate the lifetime of the reference\nto `self` because of the first elision rule."
        },
        {
          "kind": "text",
          "content": "Here is an example where the third lifetime elision rule applies:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-10-lifetimes-on-methods/src/main.rs:3rd}}"
          }
        },
        {
          "kind": "text",
          "content": "There are two input lifetimes, so Rust applies the first lifetime elision rule\nand gives both `&self` and `announcement` their own lifetimes. Then, because\none of the parameters is `&self`, the return type gets the lifetime of `&self`,\nand all lifetimes have been accounted for."
        },
        {
          "kind": "text",
          "content": "### The Static Lifetime"
        },
        {
          "kind": "text",
          "content": "One special lifetime we need to discuss is `'static`, which denotes that the\naffected reference _can_ live for the entire duration of the program. All\nstring literals have the `'static` lifetime, which we can annotate as follows:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let s: &'static str = \"I have a static lifetime.\";"
          }
        },
        {
          "kind": "text",
          "content": "The text of this string is stored directly in the program’s binary, which is\nalways available. Therefore, the lifetime of all string literals is `'static`."
        },
        {
          "kind": "text",
          "content": "You might see suggestions in error messages to use the `'static` lifetime. But\nbefore specifying `'static` as the lifetime for a reference, think about\nwhether the reference you have actually lives the entire lifetime of your\nprogram or not, and whether you want it to. Most of the time, an error message\nsuggesting the `'static` lifetime results from attempting to create a dangling\nreference or a mismatch of the available lifetimes. In such cases, the solution\nis to fix those problems, not to specify the `'static` lifetime."
        },
        {
          "kind": "text",
          "content": "### Generic Type Parameters, Trait Bounds, and Lifetimes Together"
        },
        {
          "kind": "text",
          "content": "Let’s briefly look at the syntax of specifying generic type parameters, trait\nbounds, and lifetimes all in one function!"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-11-generics-traits-and-lifetimes/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This is the `longest` function from Listing 10-21 that returns the longer of\ntwo string slices. But now it has an extra parameter named `ann` of the generic\ntype `T`, which can be filled in by any type that implements the `Display`\ntrait as specified by the `where` clause. This extra parameter will be printed\nusing `{}`, which is why the `Display` trait bound is necessary. Because\nlifetimes are a type of generic, the declarations of the lifetime parameter\n`'a` and the generic type parameter `T` go in the same list inside the angle\nbrackets after the function name."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "a91417cd-cd6d-416b-b72d-4af6b3fb2fd6",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "If a reference has a lifetime `'static`, then this means:\n",
                  "distractors": [
                    "The data under the reference cannot be mutated",
                    "The data under the reference lives in the static region of memory",
                    "The data under the reference is not dynamic"
                  ]
                },
                "answer": {
                  "answer": "The data under the reference is never deallocated"
                },
                "context": "`'static` means \"live for the entire program\", and so data under a static reference must never be deallocated. While in practice `'static` references are\nusually not mutable, the meaning of the `'static` lifetime has no essential relationship to mutability.\n"
              },
              {
                "id": "e521409a-6cbd-48f5-bee0-7fa7f17cc562",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following un-annotated function signature.\n\n```\nstruct Foo<'a> {\n  bar: &'a i32\n}\n\nfn baz(f: Foo) -> &i32 { /* ... */ }\n```\n\nWill Rust accept this function signature? If so, what lifetimes will it infer?\n",
                  "distractors": [
                    "Rust will reject this function signature",
                    "```\nfn baz(f: Foo) -> &i32\n```\n  ",
                    "```\nfn baz<'a>(f: Foo<'a>) -> &i32\n```\n  ",
                    "```\nfn baz<'a>(f: Foo) -> &'a i32\n```\n  "
                  ],
                  "answerIndex": 4
                },
                "answer": {
                  "answer": "```\nfn baz<'a>(f: Foo<'a>) -> &'a i32\n```\n  "
                },
                "context": "The struct takes a single lifetime parameter, and the output has a single lifetime, so Rust assumes they are the same.\n"
              },
              {
                "id": "d03748df-8dcf-4ec8-bd30-341927544665",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following un-annotated function signature.\n\n```\nstruct Foo<'a> {\n  bar: &'a i32\n}\n\n// Foo changed to &Foo\nfn baz(f: &Foo) -> &i32 { /* ... */ }\n```\n\nWill Rust accept this function signature? If so, what lifetimes will it infer?\n",
                  "distractors": [
                    "```\nfn baz(f: &Foo) -> &i32\n```\n  ",
                    "```\nfn baz<'a>(f: &Foo<'a>) -> &'a i32\n```\n  ",
                    "```\nfn baz<'a>(f: &'a Foo) -> &'a i32\n```\n  ",
                    "```\nfn baz<'a, 'b>(f: &'a Foo<'b>) -> &'a i32\n```\n  ",
                    "```\nfn baz<'a, 'b>(f: &'a Foo<'b>) -> &'b i32\n```\n  "
                  ],
                  "answerIndex": 0
                },
                "answer": {
                  "answer": "Rust will reject this function signature"
                },
                "context": "Rust will not compile this program, because it is ambiguous whether the lifetime of the output is tied to\nthe lifetime of `&Foo` or the reference `Foo.bar`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Summary"
        },
        {
          "kind": "text",
          "content": "We covered a lot in this chapter! Now that you know about generic type\nparameters, traits and trait bounds, and generic lifetime parameters, you’re\nready to write code without repetition that works in many different situations.\nGeneric type parameters let you apply the code to different types. Traits and\ntrait bounds ensure that even though the types are generic, they’ll have the\nbehavior the code needs. You learned how to use lifetime annotations to ensure\nthat this flexible code won’t have any dangling references. And all of this\nanalysis happens at compile time, which doesn’t affect runtime performance!"
        },
        {
          "kind": "text",
          "content": "Believe it or not, there is much more to learn on the topics we discussed in\nthis chapter: Chapter 18 discusses trait objects, which are another way to use\ntraits. There are also more complex scenarios involving lifetime annotations\nthat you will only need in very advanced scenarios; for those, you should read\nthe [Rust Reference][reference]. But next, you’ll learn how to write tests in\nRust so you can make sure your code is working the way it should."
        },
        {
          "kind": "text",
          "content": "[references-and-borrowing]: ch04-02-references-and-borrowing.html#references-and-borrowing\n[string-slices-as-parameters]: ch04-04-slices.html#string-slices-as-parameters\n[reference]: ../reference/index.html\n[lifetime-permissions]: ch04-02-references-and-borrowing.html#permissions-are-returned-at-the-end-of-a-references-lifetime"
        }
      ]
    },
    {
      "title": "Ownership Inventory #3",
      "file": "ch10-04-inventory.md",
      "elements": [
        {
          "kind": "text",
          "content": "The Ownership Inventory is a series of quizzes that test your understanding of ownership in real-world scenarios. These scenarios are inspired by common StackOverflow questions about Rust."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "9ff33b87-38e2-471b-8ca4-9c31a6431376",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Returns the n-th largest element in a slice\nfn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {\n    elems.sort();\n    let t = &elems[n];\n    return t.clone();\n}\n```\n\nIf you tried to compile this program, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "cannot move out of shared reference for `clone`",
                    "cannot move out of shared reference in expression `&elems[n]`",
                    "the lifetime of `T` must outlive `&[T]`"
                  ]
                },
                "answer": {
                  "answer": "cannot borrow `elems` as mutable for `sort`"
                },
                "context": "The method `slice::sort` expects a mutable reference to a slice, but\ninstead gets an immutable reference.\n"
              },
              {
                "id": "3ee8d846-d282-4de1-8e83-5ca0bc44fc13",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Returns the n-th largest element in a slice\nfn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {\n    elems.sort();\n    let t = &elems[n];\n    return t.clone();\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0596]: cannot borrow `*elems` as mutable, as it is behind a `&` reference\n --> test.rs:3:5\n  |\n3 |     elems.sort();\n  |     ^^^^^^^^^^^^ `elems` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.\n",
                  "distractors": [
                    "```\nlet v = vec![5, 4, 3, 2, 1];\nfind_nth(&v, 10);\n```\n",
                    "```\nlet v = vec![5, 4, 3, 2, 1];\nfind_nth(&v, 0);\nprintln!(\"{}\", v[0]);\n```\n",
                    "```\nlet v = vec![5, 4, 3, 2, 1];\nlet n = &v[0];\nfind_nth(&v, 0);\nprintln!(\"{}\", n);\n```\n"
                  ]
                },
                "answer": {
                  "answer": [
                    "None of these programs"
                  ]
                },
                "context": "This program is technically memory-safe because `slice::sort` is only capable of moving\nelements around, not freeing them. For instance, `&v[0]` is guaranteed to point to \n*some* number after calling `find_nth`, even if it is not the *original* number.\n\nNote that `find_nth(&v, 10)` does not cause undefined behavior because Rust performs checks\non array accesses, so evaluating `&v[10]` will panic.\n"
              },
              {
                "id": "d070eb9e-4527-453a-8c9b-698739a3dd6a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Returns the n-th largest element in a slice\nfn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {\n    elems.sort();\n    let t = &elems[n];\n    return t.clone();\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\nfn find_nth<T: Ord + Clone>(`[elems: &mut [T]]`, n: usize) -> T {\n    elems.sort();\n    let t = &elems[n];\n    return t.clone();\n}\n```\n",
                    "```ide\nfn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {\n    `[let mut elems = elems.to_vec();]`\n    elems.sort();\n    let t = &elems[n];\n    return t.clone();\n}\n```\n",
                    "```ide\nfn find_nth<`[T: Ord]`>(`[mut elems: Vec<T>]`, n: usize) -> T {\n    elems.sort();\n    let t = `[elems.remove(n)]`;\n    return `[t]`;\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\nfn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {\n    `[let mut elem_refs: Vec<&T> = elems.iter().collect();]`\n    `[elem_refs.sort();]`\n    let t = `[elem_refs[n]]`;\n    return t.clone();\n}\n```\n"
                },
                "context": "A function like `find_nth` is clearly intended to be a read-only function, i.e. to\nextract some property of the input sequence. Any solution which mutates or drops the input therefore does not preserve the original function's intention, even if\nit is more efficient than creating an auxiliary vector. \n\nCreating a `Vec<&T>` is preferable to creating a `Vec<T>`, since if `T` is large, then\n`elems.to_vec()` could be expensive. However, if we knew that `T: Copy`, then `to_vec`\nwould be preferable to reduce the number of pointer dereferences within `elems.sort()`.\n"
              },
              {
                "id": "95979d75-5823-4059-a1cf-7e0eba69b41a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\nstruct TestResult {\n    /// Student's scores on a test\n    scores: Vec<usize>,\n\n    /// A possible value to curve all scores\n    curve: Option<usize>\n}\nimpl TestResult {  \n    pub fn get_curve(&self) -> &Option<usize> { \n        &self.curve \n    }\n\n    /// If there is a curve, then increments all \n    /// scores by the curve\n    pub fn apply_curve(&mut self) {\n        if let Some(curve) = self.get_curve() {\n            for score in self.scores.iter_mut() {\n                *score += *curve;\n            }\n        }\n    }\n}\n```\n\nIf you tried to compile this program, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "in `get_curve`, cannot return a reference to a local variable `self.curve`",
                    "in `apply_curve`, cannot borrow `self` as immutable for `get_curve`",
                    "in `apply_curve`, `*score` cannot be mutated"
                  ]
                },
                "answer": {
                  "answer": "in `apply_curve`, cannot borrow `self.scores` as mutable for `iter_mut`"
                },
                "context": "Due to lifetime elision, the function `get_curve` has the type signature `get_curve<'a>(&'a self) -> &'a Option<usize>`. \nThis means that a call to `self.get_curve()` extends the entire borrow on `self`, not just on `self.curve`.\nTherefore `self` is immutably borrowed inside the scope of `let Some(curve) = ...`, and `self.scores.iter_mut()`\ncannot be called.\n"
              },
              {
                "id": "dcb42a15-d9b7-437d-95ec-f000b64ce277",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\nstruct TestResult {\n    /// Student's scores on a test\n    scores: Vec<usize>,\n\n    /// A possible value to curve all scores\n    curve: Option<usize>\n}\nimpl TestResult {  \n    pub fn get_curve(&self) -> &Option<usize> { \n        &self.curve \n    }\n\n    /// If there is a curve, then increments all \n    /// scores by the curve\n    pub fn apply_curve(&mut self) {\n        if let Some(curve) = self.get_curve() {\n            for score in self.scores.iter_mut() {\n                *score += *curve;\n            }\n        }\n    }\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0502]: cannot borrow `self.scores` as mutable because it is also borrowed as immutable\n  --> test.rs:17:26\n   |\n16 |         if let Some(curve) = self.get_curve() {\n   |                              ---------------- immutable borrow occurs here\n17 |             for score in self.scores.iter_mut() {\n   |                          ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n18 |                 *score += *curve;\n   |                           ------ immutable borrow later used here\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.\n",
                  "distractors": [
                    "```\nlet mut result = TestResult { \n    scores: vec![20, 50, 30], \n    curve: Some(10) \n};\nresult.apply_curve();\n```\n",
                    "```\nlet mut result = TestResult { \n    scores: vec![20, 50, 30], \n    curve: Some(10) \n};\nlet x = &result.scores[0];\nresult.apply_curve();\nprintln!(\"{}\", x);\n```\n",
                    "```\nlet mut result = TestResult { \n    scores: vec![20, 50, 30], \n    curve: Some(10) \n};\nresult.apply_curve();\nprintln!(\"{:?}\", result.scores);\n```\n"
                  ]
                },
                "answer": {
                  "answer": [
                    "None of these programs"
                  ]
                },
                "context": "This program is actually safe as written. It is a limitation of the borrow checker to not understand that `get_curve`\nonly borrows `curve`, and doesn't affect `scores`. However, in theory if `get_curve` were changed to return a reference\nto something with `self.scores`, then memory safety could potentially be violated.\n"
              },
              {
                "id": "aa93c497-9864-4799-b69b-7de42c158f2a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 2:**\n\n```ide\nstruct TestResult {\n    /// Student's scores on a test\n    scores: Vec<usize>,\n\n    /// A possible value to curve all scores\n    curve: Option<usize>\n}\nimpl TestResult {  \n    pub fn get_curve(&self) -> &Option<usize> { \n        &self.curve \n    }\n\n    /// If there is a curve, then increments all \n    /// scores by the curve\n    pub fn apply_curve(&mut self) {\n        if let Some(curve) = self.get_curve() {\n            for score in self.scores.iter_mut() {\n                *score += *curve;\n            }\n        }\n    }\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\npub fn apply_curve(&mut self) {\n    if let Some(curve) = self.get_curve()`[.as_ref()]` {\n        for score in self.scores.iter_mut() {\n            *score += *curve;\n        }\n    }\n}\n```\n",
                    "```ide\npub fn apply_curve(&mut self) {\n    if let Some(curve) = self.get_curve() {\n        for score in self.scores`[.clone()]`.iter_mut() {\n            *score += *curve;\n        }\n    }\n}\n```\n",
                    "```ide\npub fn apply_curve(&mut self) {\n    if let Some(curve) = self.get_curve() {\n        for score in self.scores`[.iter()]` {\n            *score += *curve;\n        }\n    }\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\npub fn apply_curve(&mut self) {\n    if let Some(curve) = `[self.curve]` {\n        for score in self.scores.iter_mut() {\n            *score += curve;\n        }\n    }\n}\n```\n"
                },
                "context": "By inlining the definition of `get_curve` into `apply_curve`, the borrow checker understands that `self.curve` is not `self.scores`,\nso it allows the function to compile. This is a common workaround for this type of borrow checker limitation.\n\nAnother option is to leverage the fact that `self.curve` is cheap to copy and use [`Option::copied`](https://doc.rust-lang.org/std/option/enum.Option.html#method.copied), \nwhich would release the borrow on `self` as soon as `.copied()` is called.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Writing Automated Tests",
      "file": "ch11-00-testing.md",
      "elements": [
        {
          "kind": "text",
          "content": "In his 1972 essay “The Humble Programmer,” Edsger W. Dijkstra said that “program\ntesting can be a very effective way to show the presence of bugs, but it is\nhopelessly inadequate for showing their absence.” That doesn’t mean we shouldn’t\ntry to test as much as we can!"
        },
        {
          "kind": "text",
          "content": "Correctness in our programs is the extent to which our code does what we intend\nit to do. Rust is designed with a high degree of concern about the correctness\nof programs, but correctness is complex and not easy to prove. Rust’s type\nsystem shoulders a huge part of this burden, but the type system cannot catch\neverything. As such, Rust includes support for writing automated software tests."
        },
        {
          "kind": "text",
          "content": "Say we write a function `add_two` that adds 2 to whatever number is passed to\nit. This function’s signature accepts an integer as a parameter and returns an\ninteger as a result. When we implement and compile that function, Rust does all\nthe type checking and borrow checking that you’ve learned so far to ensure\nthat, for instance, we aren’t passing a `String` value or an invalid reference\nto this function. But Rust _can’t_ check that this function will do precisely\nwhat we intend, which is return the parameter plus 2 rather than, say, the\nparameter plus 10 or the parameter minus 50! That’s where tests come in."
        },
        {
          "kind": "text",
          "content": "We can write tests that assert, for example, that when we pass `3` to the\n`add_two` function, the returned value is `5`. We can run these tests whenever\nwe make changes to our code to make sure any existing correct behavior has not\nchanged."
        },
        {
          "kind": "text",
          "content": "Testing is a complex skill: although we can’t cover in one chapter every detail\nabout how to write good tests, in this chapter we will discuss the mechanics of\nRust’s testing facilities. We’ll talk about the annotations and macros\navailable to you when writing your tests, the default behavior and options\nprovided for running your tests, and how to organize tests into unit tests and\nintegration tests."
        }
      ]
    },
    {
      "title": "How to Write Tests",
      "file": "ch11-01-writing-tests.md",
      "elements": [
        {
          "kind": "text",
          "content": "Tests are Rust functions that verify that the non-test code is functioning in\nthe expected manner. The bodies of test functions typically perform these three\nactions:"
        },
        {
          "kind": "text",
          "content": "- Set up any needed data or state.\n- Run the code you want to test.\n- Assert that the results are what you expect."
        },
        {
          "kind": "text",
          "content": "Let’s look at the features Rust provides specifically for writing tests that\ntake these actions, which include the `test` attribute, a few macros, and the\n`should_panic` attribute."
        },
        {
          "kind": "text",
          "content": "### The Anatomy of a Test Function"
        },
        {
          "kind": "text",
          "content": "At its simplest, a test in Rust is a function that’s annotated with the `test`\nattribute. Attributes are metadata about pieces of Rust code; one example is\nthe `derive` attribute we used with structs in Chapter 5. To change a function\ninto a test function, add `#[test]` on the line before `fn`. When you run your\ntests with the `cargo test` command, Rust builds a test runner binary that runs\nthe annotated functions and reports on whether each test function passes or\nfails."
        },
        {
          "kind": "text",
          "content": "Whenever we make a new library project with Cargo, a test module with a test\nfunction in it is automatically generated for us. This module gives you a\ntemplate for writing your tests so you don’t have to look up the exact\nstructure and syntax every time you start a new project. You can add as many\nadditional test functions and as many test modules as you want!"
        },
        {
          "kind": "text",
          "content": "We’ll explore some aspects of how tests work by experimenting with the template\ntest before we actually test any code. Then we’ll write some real-world tests\nthat call some code that we’ve written and assert that its behavior is correct."
        },
        {
          "kind": "text",
          "content": "Let’s create a new library project called `adder` that will add two numbers:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new adder --lib\n     Created library `adder` project\n$ cd adder"
          }
        },
        {
          "kind": "text",
          "content": "The contents of the _src/lib.rs_ file in your `adder` library should look like\nListing 11-1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-1\" file-name=\"src/lib.rs\" caption=\"The code generated automatically by `cargo new`\">"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch11-writing-automated-tests\nrm -rf listing-11-01\ncargo new listing-11-01 --lib --name adder\ncd listing-11-01\necho \"$ cargo test\" > output.txt\nRUSTFLAGS=\"-A unused_variables -A dead_code\" RUST_TEST_THREADS=1 cargo test >> output.txt 2>&1\ngit diff output.txt # commit any relevant changes; discard irrelevant ones\ncd ../../..\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The file starts with an example `add` function, so that we have something\nto test."
        },
        {
          "kind": "text",
          "content": "For now, let’s focus solely on the `it_works` function. Note the `#[test]`\nannotation: this attribute indicates this is a test function, so the test\nrunner knows to treat this function as a test. We might also have non-test\nfunctions in the `tests` module to help set up common scenarios or perform\ncommon operations, so we always need to indicate which functions are tests."
        },
        {
          "kind": "text",
          "content": "The example function body uses the `assert_eq!` macro to assert that `result`,\nwhich contains the result of calling `add` with 2 and 2, equals 4. This\nassertion serves as an example of the format for a typical test. Let’s run it\nto see that this test passes."
        },
        {
          "kind": "text",
          "content": "The `cargo test` command runs all tests in our project, as shown in Listing\n11-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-2\" caption=\"The output from running the automatically generated test\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-01/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Cargo compiled and ran the test. We see the line `running 1 test`. The next\nline shows the name of the generated test function, called `tests::it_works`,\nand that the result of running that test is `ok`. The overall summary `test\nresult: ok.` means that all the tests passed, and the portion that reads `1\npassed; 0 failed` totals the number of tests that passed or failed."
        },
        {
          "kind": "text",
          "content": "It’s possible to mark a test as ignored so it doesn’t run in a particular\ninstance; we’ll cover that in the [“Ignoring Some Tests Unless Specifically\nRequested”][ignoring]<!-- ignore --> section later in this chapter. Because we\nhaven’t done that here, the summary shows `0 ignored`. We can also pass an\nargument to the `cargo test` command to run only tests whose name matches a\nstring; this is called _filtering_ and we’ll cover that in the [“Running a\nSubset of Tests by Name”][subset]<!-- ignore --> section. Here we haven’t\nfiltered the tests being run, so the end of the summary shows `0 filtered out`."
        },
        {
          "kind": "text",
          "content": "The `0 measured` statistic is for benchmark tests that measure performance.\nBenchmark tests are, as of this writing, only available in nightly Rust. See\n[the documentation about benchmark tests][bench] to learn more."
        },
        {
          "kind": "text",
          "content": "We can pass an argument to the `cargo test` command to run only tests whose\nname matches a string; this is called *filtering* and we’ll cover that in the\n[“Running a Subset of Tests by Name”][subset]<!-- ignore --> section. Here we\nhaven’t filtered the tests being run, so the end of the summary shows `0\nfiltered out`."
        },
        {
          "kind": "text",
          "content": "The next part of the test output starting at `Doc-tests adder` is for the\nresults of any documentation tests. We don’t have any documentation tests yet,\nbut Rust can compile any code examples that appear in our API documentation.\nThis feature helps keep your docs and your code in sync! We’ll discuss how to\nwrite documentation tests in the [“Documentation Comments as\nTests”][doc-comments]<!-- ignore --> section of Chapter 14. For now, we’ll\nignore the `Doc-tests` output."
        },
        {
          "kind": "text",
          "content": "Let’s start to customize the test to our own needs. First, change the name of\nthe `it_works` function to a different name, such as `exploration`, like so:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Then run `cargo test` again. The output now shows `exploration` instead of\n`it_works`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Now we’ll add another test, but this time we’ll make a test that fails! Tests\nfail when something in the test function panics. Each test is run in a new\nthread, and when the main thread sees that a test thread has died, the test is\nmarked as failed. In Chapter 9, we talked about how the simplest way to panic\nis to call the `panic!` macro. Enter the new test as a function named\n`another`, so your _src/lib.rs_ file looks like Listing 11-3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-3\" file-name=\"src/lib.rs\" caption=\"Adding a second test that will fail because we call the `panic!` macro\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "panics",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-03/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Run the tests again using `cargo test`. The output should look like Listing\n11-4, which shows that our `exploration` test passed and `another` failed."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-4\" caption=\"Test results when one test passes and one test fails\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-03/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\nrg panicked listings/ch11-writing-automated-tests/listing-11-03/output.txt\ncheck the line number of the panic matches the line number in the following paragraph\n-->"
        },
        {
          "kind": "text",
          "content": "Instead of `ok`, the line `test tests::another` shows `FAILED`. Two new\nsections appear between the individual results and the summary: the first\ndisplays the detailed reason for each test failure. In this case, we get the\ndetails that `another` failed because it `panicked at 'Make this test fail'` on\nline 17 in the _src/lib.rs_ file. The next section lists just the names of all\nthe failing tests, which is useful when there are lots of tests and lots of\ndetailed failing test output. We can use the name of a failing test to run just\nthat test to more easily debug it; we’ll talk more about ways to run tests in\nthe [“Controlling How Tests Are Run”][controlling-how-tests-are-run]<!-- ignore\n--> section."
        },
        {
          "kind": "text",
          "content": "The summary line displays at the end: overall, our test result is `FAILED`. We\nhad one test pass and one test fail."
        },
        {
          "kind": "text",
          "content": "Now that you’ve seen what the test results look like in different scenarios,\nlet’s look at some macros other than `panic!` that are useful in tests."
        },
        {
          "kind": "text",
          "content": "### Checking Results with the `assert!` Macro"
        },
        {
          "kind": "text",
          "content": "The `assert!` macro, provided by the standard library, is useful when you want\nto ensure that some condition in a test evaluates to `true`. We give the\n`assert!` macro an argument that evaluates to a Boolean. If the value is\n`true`, nothing happens and the test passes. If the value is `false`, the\n`assert!` macro calls `panic!` to cause the test to fail. Using the `assert!`\nmacro helps us check that our code is functioning in the way we intend."
        },
        {
          "kind": "text",
          "content": "In Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold`\nmethod, which are repeated here in Listing 11-5. Let’s put this code in the\n_src/lib.rs_ file, then write some tests for it using the `assert!` macro."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-5\" file-name=\"src/lib.rs\" caption=\"The `Rectangle` struct and its `can_hold` method from Chapter 5\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-05/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `can_hold` method returns a Boolean, which means it’s a perfect use case\nfor the `assert!` macro. In Listing 11-6, we write a test that exercises the\n`can_hold` method by creating a `Rectangle` instance that has a width of 8 and\na height of 7 and asserting that it can hold another `Rectangle` instance that\nhas a width of 5 and a height of 1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-6\" file-name=\"src/lib.rs\" caption=\"A test for `can_hold` that checks whether a larger rectangle can indeed hold a smaller rectangle\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-06/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note the `use super::*;` line inside the `tests` module. The `tests` module is\na regular module that follows the usual visibility rules we covered in Chapter\n7 in the [“Paths for Referring to an Item in the Module\nTree”][paths-for-referring-to-an-item-in-the-module-tree]<!-- ignore -->\nsection. Because the `tests` module is an inner module, we need to bring the\ncode under test in the outer module into the scope of the inner module. We use\na glob here, so anything we define in the outer module is available to this\n`tests` module."
        },
        {
          "kind": "text",
          "content": "We’ve named our test `larger_can_hold_smaller`, and we’ve created the two\n`Rectangle` instances that we need. Then we called the `assert!` macro and\npassed it the result of calling `larger.can_hold(&smaller)`. This expression is\nsupposed to return `true`, so our test should pass. Let’s find out!"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-06/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "It does pass! Let’s add another test, this time asserting that a smaller\nrectangle cannot hold a larger rectangle:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Because the correct result of the `can_hold` function in this case is `false`,\nwe need to negate that result before we pass it to the `assert!` macro. As a\nresult, our test will pass if `can_hold` returns `false`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Two tests that pass! Now let’s see what happens to our test results when we\nintroduce a bug in our code. We’ll change the implementation of the `can_hold`\nmethod by replacing the greater-than sign with a less-than sign when it\ncompares the widths:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "not_desired_behavior",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Running the tests now produces the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Our tests caught the bug! Because `larger.width` is `8` and `smaller.width` is\n`5`, the comparison of the widths in `can_hold` now returns `false`: 8 is not\nless than 5."
        },
        {
          "kind": "text",
          "content": "### Testing Equality with the `assert_eq!` and `assert_ne!` Macros"
        },
        {
          "kind": "text",
          "content": "A common way to verify functionality is to test for equality between the result\nof the code under test and the value you expect the code to return. You could\ndo this by using the `assert!` macro and passing it an expression using the\n`==` operator. However, this is such a common test that the standard library\nprovides a pair of macros—`assert_eq!` and `assert_ne!`—to perform this test\nmore conveniently. These macros compare two arguments for equality or\ninequality, respectively. They’ll also print the two values if the assertion\nfails, which makes it easier to see _why_ the test failed; conversely, the\n`assert!` macro only indicates that it got a `false` value for the `==`\nexpression, without printing the values that led to the `false` value."
        },
        {
          "kind": "text",
          "content": "In Listing 11-7, we write a function named `add_two` that adds `2` to its\nparameter, then we test this function using the `assert_eq!` macro."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-7\" file-name=\"src/lib.rs\" caption=\"Testing the function `add_two` using the `assert_eq!` macro\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-07/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s check that it passes!"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-07/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We create a variable named `result` that holds the result of calling\n`add_two(2)`. Then we pass `result` and `4` as the arguments to `assert_eq!`.\nThe output line for this test is `test tests::it_adds_two ... ok`, and the `ok`\ntext indicates that our test passed!"
        },
        {
          "kind": "text",
          "content": "Let’s introduce a bug into our code to see what `assert_eq!` looks like when it\nfails. Change the implementation of the `add_two` function to instead add `3`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "not_desired_behavior",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Run the tests again:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Our test caught the bug! The `it_adds_two` test failed, and the message tells us\nthat the assertion that failed was ``assertion `left == right` failed`` and what\nthe `left` and `right` values are. This message helps us start debugging: the\n`left` argument, where we had the result of calling `add_two(2)`, was `5` but\nthe `right` argument was `4`. You can imagine that this would be especially\nhelpful when we have a lot of tests going on."
        },
        {
          "kind": "text",
          "content": "Note that in some languages and test frameworks, the parameters to equality\nassertion functions are called `expected` and `actual`, and the order in which\nwe specify the arguments matters. However, in Rust, they’re called `left` and\n`right`, and the order in which we specify the value we expect and the value the\ncode produces doesn’t matter. We could write the assertion in this test as\n`assert_eq!(add_two(2), result)`, which would result in the same failure message\nthat displays `` assertion failed: `(left == right)` ``."
        },
        {
          "kind": "text",
          "content": "The `assert_ne!` macro will pass if the two values we give it are not equal and\nfail if they’re equal. This macro is most useful for cases when we’re not sure\nwhat a value _will_ be, but we know what the value definitely _shouldn’t_ be.\nFor example, if we’re testing a function that is guaranteed to change its input\nin some way, but the way in which the input is changed depends on the day of\nthe week that we run our tests, the best thing to assert might be that the\noutput of the function is not equal to the input."
        },
        {
          "kind": "text",
          "content": "Under the surface, the `assert_eq!` and `assert_ne!` macros use the operators\n`==` and `!=`, respectively. When the assertions fail, these macros print their\narguments using debug formatting, which means the values being compared must\nimplement the `PartialEq` and `Debug` traits. All primitive types and most of\nthe standard library types implement these traits. For structs and enums that\nyou define yourself, you’ll need to implement `PartialEq` to assert equality of\nthose types. You’ll also need to implement `Debug` to print the values when the\nassertion fails. Because both traits are derivable traits, as mentioned in\nListing 5-12 in Chapter 5, this is usually as straightforward as adding the\n`#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See\nAppendix C, [“Derivable Traits,”][derivable-traits]<!-- ignore --> for more\ndetails about these and other derivable traits."
        },
        {
          "kind": "text",
          "content": "### Adding Custom Failure Messages"
        },
        {
          "kind": "text",
          "content": "You can also add a custom message to be printed with the failure message as\noptional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any\narguments specified after the required arguments are passed along to the\n`format!` macro (discussed in [“Concatenation with the `+` Operator or the\n`format!` Macro”][concatenation-with-the--operator-or-the-format-macro]<!--\nignore --> in Chapter 8), so you can pass a format string that contains `{}`\nplaceholders and values to go in those placeholders. Custom messages are useful\nfor documenting what an assertion means; when a test fails, you’ll have a better\nidea of what the problem is with the code."
        },
        {
          "kind": "text",
          "content": "For example, let’s say we have a function that greets people by name and we\nwant to test that the name we pass into the function appears in the output:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-05-greeter/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "The requirements for this program haven’t been agreed upon yet, and we’re\npretty sure the `Hello` text at the beginning of the greeting will change. We\ndecided we don’t want to have to update the test when the requirements change,\nso instead of checking for exact equality to the value returned from the\n`greeting` function, we’ll just assert that the output contains the text of the\ninput parameter."
        },
        {
          "kind": "text",
          "content": "Now let’s introduce a bug into this code by changing `greeting` to exclude\n`name` to see what the default test failure looks like:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "not_desired_behavior",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Running this test produces the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This result just indicates that the assertion failed and which line the\nassertion is on. A more useful failure message would print the value from the\n`greeting` function. Let’s add a custom failure message composed of a format\nstring with a placeholder filled in with the actual value we got from the\n`greeting` function:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Now when we run the test, we’ll get a more informative error message:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We can see the value we actually got in the test output, which would help us\ndebug what happened instead of what we were expecting to happen."
        },
        {
          "kind": "text",
          "content": "### Checking for Panics with `should_panic`"
        },
        {
          "kind": "text",
          "content": "In addition to checking return values, it’s important to check that our code\nhandles error conditions as we expect. For example, consider the `Guess` type\nthat we created in Chapter 9, Listing 9-13. Other code that uses `Guess`\ndepends on the guarantee that `Guess` instances will contain only values\nbetween 1 and 100. We can write a test that ensures that attempting to create a\n`Guess` instance with a value outside that range panics."
        },
        {
          "kind": "text",
          "content": "We do this by adding the attribute `should_panic` to our test function. The\ntest passes if the code inside the function panics; the test fails if the code\ninside the function doesn’t panic."
        },
        {
          "kind": "text",
          "content": "Listing 11-8 shows a test that checks that the error conditions of `Guess::new`\nhappen when we expect them to."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-8\" file-name=\"src/lib.rs\" caption=\"Testing that a condition will cause a `panic!`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-08/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We place the `#[should_panic]` attribute after the `#[test]` attribute and\nbefore the test function it applies to. Let’s look at the result when this test\npasses:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-08/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Looks good! Now let’s introduce a bug in our code by removing the condition\nthat the `new` function will panic if the value is greater than 100:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "not_desired_behavior",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "When we run the test in Listing 11-8, it will fail:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We don’t get a very helpful message in this case, but when we look at the test\nfunction, we see that it’s annotated with `#[should_panic]`. The failure we got\nmeans that the code in the test function did not cause a panic."
        },
        {
          "kind": "text",
          "content": "Tests that use `should_panic` can be imprecise. A `should_panic` test would\npass even if the test panics for a different reason from the one we were\nexpecting. To make `should_panic` tests more precise, we can add an optional\n`expected` parameter to the `should_panic` attribute. The test harness will\nmake sure that the failure message contains the provided text. For example,\nconsider the modified code for `Guess` in Listing 11-9 where the `new` function\npanics with different messages depending on whether the value is too small or\ntoo large."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-9\" file-name=\"src/lib.rs\" caption=\"Testing for a `panic!` with a panic message containing a specified substring\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-09/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This test will pass because the value we put in the `should_panic` attribute’s\n`expected` parameter is a substring of the message that the `Guess::new`\nfunction panics with. We could have specified the entire panic message that we\nexpect, which in this case would be `Guess value must be less than or equal to\n100, got 200`. What you choose to specify depends on how much of the panic\nmessage is unique or dynamic and how precise you want your test to be. In this\ncase, a substring of the panic message is enough to ensure that the code in the\ntest function executes the `else if value > 100` case."
        },
        {
          "kind": "text",
          "content": "To see what happens when a `should_panic` test with an `expected` message\nfails, let’s again introduce a bug into our code by swapping the bodies of the\n`if value < 1` and the `else if value > 100` blocks:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "not_desired_behavior"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This time when we run the `should_panic` test, it will fail:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The failure message indicates that this test did indeed panic as we expected,\nbut the panic message did not include the expected string `less than or equal\nto 100`. The panic message that we did get in this case was `Guess value must\nbe greater than or equal to 1, got 200.` Now we can start figuring out where\nour bug is!"
        },
        {
          "kind": "text",
          "content": "### Using `Result<T, E>` in Tests"
        },
        {
          "kind": "text",
          "content": "Our tests so far all panic when they fail. We can also write tests that use\n`Result<T, E>`! Here’s the test from Listing 11-1, rewritten to use `Result<T,\nE>` and return an `Err` instead of panicking:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-10-result-in-tests/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The `it_works` function now has the `Result<(), String>` return type. In the\nbody of the function, rather than calling the `assert_eq!` macro, we return\n`Ok(())` when the test passes and an `Err` with a `String` inside when the test\nfails."
        },
        {
          "kind": "text",
          "content": "Writing tests so they return a `Result<T, E>` enables you to use the question\nmark operator in the body of tests, which can be a convenient way to write\ntests that should fail if any operation within them returns an `Err` variant."
        },
        {
          "kind": "text",
          "content": "You can’t use the `#[should_panic]` annotation on tests that use `Result<T,\nE>`. To assert that an operation returns an `Err` variant, _don’t_ use the\nquestion mark operator on the `Result<T, E>` value. Instead, use\n`assert!(value.is_err())`."
        },
        {
          "kind": "text",
          "content": "Now that you know several ways to write tests, let’s look at what is happening\nwhen we run our tests and explore the different options we can use with `cargo\ntest`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "7a7bb518-b06e-4756-9510-6a8d0d1c84fa",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "What is the annotation you add to a function to indicate that it's a unit test?"
                },
                "answer": {
                  "answer": "#[test]"
                },
                "context": "This informs the cargo testing harness to treat the function as a test and not library code.\n"
              },
              {
                "id": "cd77485f-723a-4978-8da6-c4ca3df44c44",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Let's say you have a function with the type signature:\n\n```\nfn f(x: usize) -> Result<usize, String>;\n```\n\nAnd you want to test that `f(0)` should return `Err(_)`. \nWhich of the following is NOT a valid way to test that?\n",
                  "distractors": [
                    "```\n#[test]\nfn test() {\n  assert!(f(0).is_err());\n}\n```\n  ",
                    "```\n#[test]\n#[should_panic]\nfn test() { \n  f(0).unwrap();\n}\n```\n  ",
                    "```\n#[test]\nfn test() {\n  assert!(match f(0) {\n    Ok(_) => false,\n    Err(_) => true\n  });  \n}\n```\n  "
                  ]
                },
                "answer": {
                  "answer": "```\n#[test]\n#[should_err]\nfn test() -> Result<usize, String> {\n  f(0)\n}\n```\n  "
                },
                "context": "`should_err` does not exist in Rust &mdash; any test that returns a `Result` must return `Ok` to pass.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[concatenation-with-the--operator-or-the-format-macro]: ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro\n[bench]: ../unstable-book/library-features/test.html\n[ignoring]: ch11-02-running-tests.html#ignoring-some-tests-unless-specifically-requested\n[subset]: ch11-02-running-tests.html#running-a-subset-of-tests-by-name\n[controlling-how-tests-are-run]: ch11-02-running-tests.html#controlling-how-tests-are-run\n[derivable-traits]: appendix-03-derivable-traits.html\n[doc-comments]: ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests\n[paths-for-referring-to-an-item-in-the-module-tree]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html"
        }
      ]
    },
    {
      "title": "Controlling How Tests Are Run",
      "file": "ch11-02-running-tests.md",
      "elements": [
        {
          "kind": "text",
          "content": "Just as `cargo run` compiles your code and then runs the resultant binary,\n`cargo test` compiles your code in test mode and runs the resultant test\nbinary. The default behavior of the binary produced by `cargo test` is to run\nall the tests in parallel and capture output generated during test runs,\npreventing the output from being displayed and making it easier to read the\noutput related to the test results. You can, however, specify command line\noptions to change this default behavior."
        },
        {
          "kind": "text",
          "content": "Some command line options go to `cargo test`, and some go to the resultant test\nbinary. To separate these two types of arguments, you list the arguments that\ngo to `cargo test` followed by the separator `--` and then the ones that go to\nthe test binary. Running `cargo test --help` displays the options you can use\nwith `cargo test`, and running `cargo test -- --help` displays the options you\ncan use after the separator. Those options are also documented in [the “Tests”\nsection][tests] of the [the rustc book][rustc]."
        },
        {
          "kind": "text",
          "content": "[tests]: https://doc.rust-lang.org/rustc/tests/index.html\n[rustc]: https://doc.rust-lang.org/rustc/index.html"
        },
        {
          "kind": "text",
          "content": "### Running Tests in Parallel or Consecutively"
        },
        {
          "kind": "text",
          "content": "When you run multiple tests, by default they run in parallel using threads,\nmeaning they finish running faster and you get feedback quicker. Because the\ntests are running at the same time, you must make sure your tests don’t depend\non each other or on any shared state, including a shared environment, such as\nthe current working directory or environment variables."
        },
        {
          "kind": "text",
          "content": "For example, say each of your tests runs some code that creates a file on disk\nnamed _test-output.txt_ and writes some data to that file. Then each test reads\nthe data in that file and asserts that the file contains a particular value,\nwhich is different in each test. Because the tests run at the same time, one\ntest might overwrite the file in the time between another test writing and\nreading the file. The second test will then fail, not because the code is\nincorrect but because the tests have interfered with each other while running\nin parallel. One solution is to make sure each test writes to a different file;\nanother solution is to run the tests one at a time."
        },
        {
          "kind": "text",
          "content": "If you don’t want to run the tests in parallel or if you want more fine-grained\ncontrol over the number of threads used, you can send the `--test-threads` flag\nand the number of threads you want to use to the test binary. Take a look at\nthe following example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo test -- --test-threads=1"
          }
        },
        {
          "kind": "text",
          "content": "We set the number of test threads to `1`, telling the program not to use any\nparallelism. Running the tests using one thread will take longer than running\nthem in parallel, but the tests won’t interfere with each other if they share\nstate."
        },
        {
          "kind": "text",
          "content": "### Showing Function Output"
        },
        {
          "kind": "text",
          "content": "By default, if a test passes, Rust’s test library captures anything printed to\nstandard output. For example, if we call `println!` in a test and the test\npasses, we won’t see the `println!` output in the terminal; we’ll see only the\nline that indicates the test passed. If a test fails, we’ll see whatever was\nprinted to standard output with the rest of the failure message."
        },
        {
          "kind": "text",
          "content": "As an example, Listing 11-10 has a silly function that prints the value of its\nparameter and returns 10, as well as a test that passes and a test that fails."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-10\" file-name=\"src/lib.rs\" caption=\"Tests for a function that calls `println!`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "panics",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-10/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we run these tests with `cargo test`, we’ll see the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-10/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Note that nowhere in this output do we see `I got the value 4`, which is\nprinted when the test that passes runs. That output has been captured. The\noutput from the test that failed, `I got the value 8`, appears in the section\nof the test summary output, which also shows the cause of the test failure."
        },
        {
          "kind": "text",
          "content": "If we want to see printed values for passing tests as well, we can tell Rust to\nalso show the output of successful tests with `--show-output`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo test -- --show-output"
          }
        },
        {
          "kind": "text",
          "content": "When we run the tests in Listing 11-10 again with the `--show-output` flag, we\nsee the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/output-only-01-show-output/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "### Running a Subset of Tests by Name"
        },
        {
          "kind": "text",
          "content": "Sometimes, running a full test suite can take a long time. If you’re working on\ncode in a particular area, you might want to run only the tests pertaining to\nthat code. You can choose which tests to run by passing `cargo test` the name\nor names of the test(s) you want to run as an argument."
        },
        {
          "kind": "text",
          "content": "To demonstrate how to run a subset of tests, we’ll first create three tests for\nour `add_two` function, as shown in Listing 11-11, and choose which ones to run."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-11\" file-name=\"src/lib.rs\" caption=\"Three tests with three different names\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-11/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If we run the tests without passing any arguments, as we saw earlier, all the\ntests will run in parallel:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-11/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "#### Running Single Tests"
        },
        {
          "kind": "text",
          "content": "We can pass the name of any test function to `cargo test` to run only that test:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/output-only-02-single-test/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Only the test with the name `one_hundred` ran; the other two tests didn’t match\nthat name. The test output lets us know we had more tests that didn’t run by\ndisplaying `2 filtered out` at the end."
        },
        {
          "kind": "text",
          "content": "We can’t specify the names of multiple tests in this way; only the first value\ngiven to `cargo test` will be used. But there is a way to run multiple tests."
        },
        {
          "kind": "text",
          "content": "#### Filtering to Run Multiple Tests"
        },
        {
          "kind": "text",
          "content": "We can specify part of a test name, and any test whose name matches that value\nwill be run. For example, because two of our tests’ names contain `add`, we can\nrun those two by running `cargo test add`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/output-only-03-multiple-tests/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This command ran all tests with `add` in the name and filtered out the test\nnamed `one_hundred`. Also note that the module in which a test appears becomes\npart of the test’s name, so we can run all the tests in a module by filtering\non the module’s name."
        },
        {
          "kind": "text",
          "content": "### Ignoring Some Tests Unless Specifically Requested"
        },
        {
          "kind": "text",
          "content": "Sometimes a few specific tests can be very time-consuming to execute, so you\nmight want to exclude them during most runs of `cargo test`. Rather than\nlisting as arguments all tests you do want to run, you can instead annotate the\ntime-consuming tests using the `ignore` attribute to exclude them, as shown\nhere:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "After `#[test]`, we add the `#[ignore]` line to the test we want to exclude.\nNow when we run our tests, `it_works` runs, but `expensive_test` doesn’t:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The `expensive_test` function is listed as `ignored`. If we want to run only\nthe ignored tests, we can use `cargo test -- --ignored`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/output-only-04-running-ignored/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "By controlling which tests run, you can make sure your `cargo test` results\nwill be returned quickly. When you’re at a point where it makes sense to check\nthe results of the `ignored` tests and you have time to wait for the results,\nyou can run `cargo test -- --ignored` instead. If you want to run all tests\nwhether they’re ignored or not, you can run `cargo test -- --include-ignored`."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "affe428d-0a8e-430b-9567-99e6b7563c0f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "When running `cargo test` with no additional configuration, which of the following actions may not work correctly if done by multiple tests?\n",
                  "distractors": [
                    "Logging strings to stdout",
                    "Failing via panics",
                    "Reading data from a single database"
                  ]
                },
                "answer": {
                  "answer": "Writing text to a single file"
                },
                "context": "Tests are run in parallel by default, so actions which are not thread-safe (like writing to a single file) may cause a race condition.\n"
              },
              {
                "id": "19e292f4-4bc4-4868-a58a-edf62c3e3b2a",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Consider a program with the following unit test:\n\n```\n#[test]\nfn test_the_logger() { /* ... */ }\n\n#[test]\nfn test_the_database() { /* ... */ }\n\n#[test]\nfn test_logger_and_database() { /* ... */ }\n```\n\nWhat is the *shortest* string you can pass to `cargo test <the_string>` such that *only* `test_the_logger` and `test_the_database` are executed?\n"
                },
                "answer": {
                  "answer": "h"
                },
                "context": "The shortest substring string that is not contained in `test_logger_and_database` but is contained in `test_the_logger` and `test_the_database`\nis \"h\" (the middle character of \"the\").\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Test Organization",
      "file": "ch11-03-test-organization.md",
      "elements": [
        {
          "kind": "text",
          "content": "As mentioned at the start of the chapter, testing is a complex discipline, and\ndifferent people use different terminology and organization. The Rust community\nthinks about tests in terms of two main categories: unit tests and integration\ntests. _Unit tests_ are small and more focused, testing one module in isolation\nat a time, and can test private interfaces. _Integration tests_ are entirely\nexternal to your library and use your code in the same way any other external\ncode would, using only the public interface and potentially exercising multiple\nmodules per test."
        },
        {
          "kind": "text",
          "content": "Writing both kinds of tests is important to ensure that the pieces of your\nlibrary are doing what you expect them to, separately and together."
        },
        {
          "kind": "text",
          "content": "### Unit Tests"
        },
        {
          "kind": "text",
          "content": "The purpose of unit tests is to test each unit of code in isolation from the\nrest of the code to quickly pinpoint where code is and isn’t working as\nexpected. You’ll put unit tests in the _src_ directory in each file with the\ncode that they’re testing. The convention is to create a module named `tests`\nin each file to contain the test functions and to annotate the module with\n`cfg(test)`."
        },
        {
          "kind": "text",
          "content": "#### The Tests Module and `#[cfg(test)]`"
        },
        {
          "kind": "text",
          "content": "The `#[cfg(test)]` annotation on the `tests` module tells Rust to compile and\nrun the test code only when you run `cargo test`, not when you run `cargo\nbuild`. This saves compile time when you only want to build the library and\nsaves space in the resultant compiled artifact because the tests are not\nincluded. You’ll see that because integration tests go in a different\ndirectory, they don’t need the `#[cfg(test)]` annotation. However, because unit\ntests go in the same files as the code, you’ll use `#[cfg(test)]` to specify\nthat they shouldn’t be included in the compiled result."
        },
        {
          "kind": "text",
          "content": "Recall that when we generated the new `adder` project in the first section of\nthis chapter, Cargo generated this code for us:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "On the automatically generated `tests` module, the attribute `cfg` stands for\n_configuration_ and tells Rust that the following item should only be included\ngiven a certain configuration option. In this case, the configuration option is\n`test`, which is provided by Rust for compiling and running tests. By using the\n`cfg` attribute, Cargo compiles our test code only if we actively run the tests\nwith `cargo test`. This includes any helper functions that might be within this\nmodule, in addition to the functions annotated with `#[test]`."
        },
        {
          "kind": "text",
          "content": "#### Testing Private Functions"
        },
        {
          "kind": "text",
          "content": "There’s debate within the testing community about whether or not private\nfunctions should be tested directly, and other languages make it difficult or\nimpossible to test private functions. Regardless of which testing ideology you\nadhere to, Rust’s privacy rules do allow you to test private functions.\nConsider the code in Listing 11-12 with the private function `internal_adder`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-12\" file-name=\"src/lib.rs\" caption=\"Testing a private function\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-12/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that the `internal_adder` function is not marked as `pub`. Tests are just\nRust code, and the `tests` module is just another module. As we discussed in\n[“Paths for Referring to an Item in the Module Tree”][paths]<!-- ignore -->,\nitems in child modules can use the items in their ancestor modules. In this\ntest, we bring all of the `tests` module’s parent’s items into scope with `use\nsuper::*`, and then the test can call `internal_adder`. If you don’t think\nprivate functions should be tested, there’s nothing in Rust that will compel you\nto do so."
        },
        {
          "kind": "text",
          "content": "### Integration Tests"
        },
        {
          "kind": "text",
          "content": "In Rust, integration tests are entirely external to your library. They use your\nlibrary in the same way any other code would, which means they can only call\nfunctions that are part of your library’s public API. Their purpose is to test\nwhether many parts of your library work together correctly. Units of code that\nwork correctly on their own could have problems when integrated, so test\ncoverage of the integrated code is important as well. To create integration\ntests, you first need a _tests_ directory."
        },
        {
          "kind": "text",
          "content": "#### The _tests_ Directory"
        },
        {
          "kind": "text",
          "content": "We create a _tests_ directory at the top level of our project directory, next\nto _src_. Cargo knows to look for integration test files in this directory. We\ncan then make as many test files as we want, and Cargo will compile each of the\nfiles as an individual crate."
        },
        {
          "kind": "text",
          "content": "Let’s create an integration test. With the code in Listing 11-12 still in the\n_src/lib.rs_ file, make a _tests_ directory, and create a new file named\n_tests/integration_test.rs_. Your directory structure should look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "adder\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    └── integration_test.rs"
          }
        },
        {
          "kind": "text",
          "content": "Enter the code in Listing 11-13 into the _tests/integration_test.rs_ file."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"11-13\" file-name=\"tests/integration_test.rs\" caption=\"An integration test of a function in the `adder` crate\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-13/tests/integration_test.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Each file in the _tests_ directory is a separate crate, so we need to bring our\nlibrary into each test crate’s scope. For that reason we add `use\nadder::add_two;` at the top of the code, which we didn’t need in the unit tests."
        },
        {
          "kind": "text",
          "content": "We don’t need to annotate any code in _tests/integration_test.rs_ with\n`#[cfg(test)]`. Cargo treats the _tests_ directory specially and compiles files\nin this directory only when we run `cargo test`. Run `cargo test` now:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/listing-11-13/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The three sections of output include the unit tests, the integration test, and\nthe doc tests. Note that if any test in a section fails, the following sections\nwill not be run. For example, if a unit test fails, there won’t be any output\nfor integration and doc tests because those tests will only be run if all unit\ntests are passing."
        },
        {
          "kind": "text",
          "content": "The first section for the unit tests is the same as we’ve been seeing: one line\nfor each unit test (one named `internal` that we added in Listing 11-12) and\nthen a summary line for the unit tests."
        },
        {
          "kind": "text",
          "content": "The integration tests section starts with the line `Running\ntests/integration_test.rs`. Next, there is a line for each test function in\nthat integration test and a summary line for the results of the integration\ntest just before the `Doc-tests adder` section starts."
        },
        {
          "kind": "text",
          "content": "Each integration test file has its own section, so if we add more files in the\n_tests_ directory, there will be more integration test sections."
        },
        {
          "kind": "text",
          "content": "We can still run a particular integration test function by specifying the test\nfunction’s name as an argument to `cargo test`. To run all the tests in a\nparticular integration test file, use the `--test` argument of `cargo test`\nfollowed by the name of the file:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/output-only-05-single-integration/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This command runs only the tests in the _tests/integration_test.rs_ file."
        },
        {
          "kind": "text",
          "content": "#### Submodules in Integration Tests"
        },
        {
          "kind": "text",
          "content": "As you add more integration tests, you might want to make more files in the\n_tests_ directory to help organize them; for example, you can group the test\nfunctions by the functionality they’re testing. As mentioned earlier, each file\nin the _tests_ directory is compiled as its own separate crate, which is useful\nfor creating separate scopes to more closely imitate the way end users will be\nusing your crate. However, this means files in the _tests_ directory don’t\nshare the same behavior as files in _src_ do, as you learned in Chapter 7\nregarding how to separate code into modules and files."
        },
        {
          "kind": "text",
          "content": "The different behavior of _tests_ directory files is most noticeable when you\nhave a set of helper functions to use in multiple integration test files and\nyou try to follow the steps in the [“Separating Modules into Different\nFiles”][separating-modules-into-files]<!-- ignore --> section of Chapter 7 to\nextract them into a common module. For example, if we create _tests/common.rs_\nand place a function named `setup` in it, we can add some code to `setup` that\nwe want to call from multiple test functions in multiple test files:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: tests/common.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/tests/common.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "When we run the tests again, we’ll see a new section in the test output for the\n_common.rs_ file, even though this file doesn’t contain any test functions nor\ndid we call the `setup` function from anywhere:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Having `common` appear in the test results with `running 0 tests` displayed for\nit is not what we wanted. We just wanted to share some code with the other\nintegration test files. To avoid having `common` appear in the test output,\ninstead of creating _tests/common.rs_, we’ll create _tests/common/mod.rs_. The\nproject directory now looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "├── Cargo.lock\n├── Cargo.toml\n├── src\n│   └── lib.rs\n└── tests\n    ├── common\n    │   └── mod.rs\n    └── integration_test.rs"
          }
        },
        {
          "kind": "text",
          "content": "This is the older naming convention that Rust also understands that we mentioned\nin [“Alternate File Paths”][alt-paths]<!-- ignore --> in Chapter 7. Naming the\nfile this way tells Rust not to treat the `common` module as an integration test\nfile. When we move the `setup` function code into _tests/common/mod.rs_ and\ndelete the _tests/common.rs_ file, the section in the test output will no longer\nappear. Files in subdirectories of the _tests_ directory don’t get compiled as\nseparate crates or have sections in the test output."
        },
        {
          "kind": "text",
          "content": "After we’ve created _tests/common/mod.rs_, we can use it from any of the\nintegration test files as a module. Here’s an example of calling the `setup`\nfunction from the `it_adds_two` test in _tests/integration_test.rs_:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: tests/integration_test.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-13-fix-shared-test-code-problem/tests/integration_test.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Note that the `mod common;` declaration is the same as the module declaration\nwe demonstrated in Listing 7-21. Then, in the test function, we can call the\n`common::setup()` function."
        },
        {
          "kind": "text",
          "content": "#### Integration Tests for Binary Crates"
        },
        {
          "kind": "text",
          "content": "If our project is a binary crate that only contains a _src/main.rs_ file and\ndoesn’t have a _src/lib.rs_ file, we can’t create integration tests in the\n_tests_ directory and bring functions defined in the _src/main.rs_ file into\nscope with a `use` statement. Only library crates expose functions that other\ncrates can use; binary crates are meant to be run on their own."
        },
        {
          "kind": "text",
          "content": "This is one of the reasons Rust projects that provide a binary have a\nstraightforward _src/main.rs_ file that calls logic that lives in the\n_src/lib.rs_ file. Using that structure, integration tests _can_ test the\nlibrary crate with `use` to make the important functionality available. If the\nimportant functionality works, the small amount of code in the _src/main.rs_\nfile will work as well, and that small amount of code doesn’t need to be tested."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Rust’s testing features provide a way to specify how code should function to\nensure it continues to work as you expect, even as you make changes. Unit tests\nexercise different parts of a library separately and can test private\nimplementation details. Integration tests check that many parts of the library\nwork together correctly, and they use the library’s public API to test the code\nin the same way external code will use it. Even though Rust’s type system and\nownership rules help prevent some kinds of bugs, tests are still important to\nreduce logic bugs having to do with how your code is expected to behave."
        },
        {
          "kind": "text",
          "content": "Let’s combine the knowledge you learned in this chapter and in previous\nchapters to work on a project!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "3da96b29-d975-4cd8-a8eb-b1a6bd9b5c0a",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following is NOT a good reason to wrap unit tests in `#[cfg(test)] mod tests { ... }`?\n",
                  "distractors": [
                    "It can reduce the size of generated compiler artifacts",
                    "It can improve compile times",
                    "It separates test helper functions from library code"
                  ]
                },
                "answer": {
                  "answer": "It gives your tests access to private functions"
                },
                "context": "All unit tests in a given file have access to that file's private functions, regardless of being in a `mod tests` or not.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[paths]: ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\n[separating-modules-into-files]: ch07-05-separating-modules-into-different-files.html\n[alt-paths]: ch07-05-separating-modules-into-different-files.html#alternate-file-paths"
        }
      ]
    },
    {
      "title": "An I/O Project: Building a Command Line Program",
      "file": "ch12-00-an-io-project.md",
      "elements": [
        {
          "kind": "text",
          "content": "This chapter is a recap of the many skills you’ve learned so far and an\nexploration of a few more standard library features. We’ll build a command line\ntool that interacts with file and command line input/output to practice some of\nthe Rust concepts you now have under your belt."
        },
        {
          "kind": "text",
          "content": "> **Note:** there are no quizzes in this chapter, since it is just supposed to be a hands-on walkthrough."
        },
        {
          "kind": "text",
          "content": "Rust’s speed, safety, single binary output, and cross-platform support make it\nan ideal language for creating command line tools, so for our project, we’ll\nmake our own version of the classic command line search tool `grep`\n(**g**lobally search a **r**egular **e**xpression and **p**rint). In the\nsimplest use case, `grep` searches a specified file for a specified string. To\ndo so, `grep` takes as its arguments a file path and a string. Then it reads\nthe file, finds lines in that file that contain the string argument, and prints\nthose lines."
        },
        {
          "kind": "text",
          "content": "Along the way, we’ll show how to make our command line tool use the terminal\nfeatures that many other command line tools use. We’ll read the value of an\nenvironment variable to allow the user to configure the behavior of our tool.\nWe’ll also print error messages to the standard error console stream (`stderr`)\ninstead of standard output (`stdout`) so that, for example, the user can\nredirect successful output to a file while still seeing error messages onscreen."
        },
        {
          "kind": "text",
          "content": "One Rust community member, Andrew Gallant, has already created a fully\nfeatured, very fast version of `grep`, called `ripgrep`. By comparison, our\nversion will be fairly simple, but this chapter will give you some of the\nbackground knowledge you need to understand a real-world project such as\n`ripgrep`."
        },
        {
          "kind": "text",
          "content": "Our `grep` project will combine a number of concepts you’ve learned so far:"
        },
        {
          "kind": "text",
          "content": "- Organizing code ([Chapter 7][ch7]<!-- ignore -->)\n- Using vectors and strings ([Chapter 8][ch8]<!-- ignore -->)\n- Handling errors ([Chapter 9][ch9]<!-- ignore -->)\n- Using traits and lifetimes where appropriate ([Chapter 10][ch10]<!-- ignore -->)\n- Writing tests ([Chapter 11][ch11]<!-- ignore -->)"
        },
        {
          "kind": "text",
          "content": "We’ll also briefly introduce closures, iterators, and trait objects, which\n[Chapter 13][ch13]<!-- ignore --> and [Chapter 18][ch18]<!-- ignore --> will\ncover in detail."
        },
        {
          "kind": "text",
          "content": "[ch7]: ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\n[ch8]: ch08-00-common-collections.html\n[ch9]: ch09-00-error-handling.html\n[ch10]: ch10-00-generics.html\n[ch11]: ch11-00-testing.html\n[ch13]: ch13-00-functional-features.html\n[ch18]: ch18-00-oop.html"
        }
      ]
    },
    {
      "title": "Accepting Command Line Arguments",
      "file": "ch12-01-accepting-command-line-arguments.md",
      "elements": [
        {
          "kind": "text",
          "content": "Let’s create a new project with, as always, `cargo new`. We’ll call our project\n`minigrep` to distinguish it from the `grep` tool that you might already have\non your system."
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new minigrep\n     Created binary (application) `minigrep` project\n$ cd minigrep"
          }
        },
        {
          "kind": "text",
          "content": "The first task is to make `minigrep` accept its two command line arguments: the\nfile path and a string to search for. That is, we want to be able to run our\nprogram with `cargo run`, two hyphens to indicate the following arguments are\nfor our program rather than for `cargo`, a string to search for, and a path to\na file to search in, like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run -- searchstring example-filename.txt"
          }
        },
        {
          "kind": "text",
          "content": "Right now, the program generated by `cargo new` cannot process arguments we\ngive it. Some existing libraries on [crates.io](https://crates.io/) can help\nwith writing a program that accepts command line arguments, but because you’re\njust learning this concept, let’s implement this capability ourselves."
        },
        {
          "kind": "text",
          "content": "### Reading the Argument Values"
        },
        {
          "kind": "text",
          "content": "To enable `minigrep` to read the values of command line arguments we pass to\nit, we’ll need the `std::env::args` function provided in Rust’s standard\nlibrary. This function returns an iterator of the command line arguments passed\nto `minigrep`. We’ll cover iterators fully in [Chapter 13][ch13]<!-- ignore\n-->. For now, you only need to know two details about iterators: iterators\nproduce a series of values, and we can call the `collect` method on an iterator\nto turn it into a collection, such as a vector, that contains all the elements\nthe iterator produces."
        },
        {
          "kind": "text",
          "content": "The code in Listing 12-1 allows your `minigrep` program to read any command\nline arguments passed to it, and then collect the values into a vector."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-1\" file-name=\"src/main.rs\" caption=\"Collecting the command line arguments into a vector and printing them\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First we bring the `std::env` module into scope with a `use` statement so we\ncan use its `args` function. Notice that the `std::env::args` function is\nnested in two levels of modules. As we discussed in [Chapter\n7][ch7-idiomatic-use]<!-- ignore -->, in cases where the desired function is\nnested in more than one module, we’ve chosen to bring the parent module into\nscope rather than the function. By doing so, we can easily use other functions\nfrom `std::env`. It’s also less ambiguous than adding `use std::env::args` and\nthen calling the function with just `args`, because `args` might easily be\nmistaken for a function that’s defined in the current module."
        },
        {
          "kind": "text",
          "content": "> ### The `args` Function and Invalid Unicode\n>\n> Note that `std::env::args` will panic if any argument contains invalid\n> Unicode. If your program needs to accept arguments containing invalid\n> Unicode, use `std::env::args_os` instead. That function returns an iterator\n> that produces `OsString` values instead of `String` values. We’ve chosen to\n> use `std::env::args` here for simplicity because `OsString` values differ per\n> platform and are more complex to work with than `String` values."
        },
        {
          "kind": "text",
          "content": "On the first line of `main`, we call `env::args`, and we immediately use\n`collect` to turn the iterator into a vector containing all the values produced\nby the iterator. We can use the `collect` function to create many kinds of\ncollections, so we explicitly annotate the type of `args` to specify that we\nwant a vector of strings. Although you very rarely need to annotate types in\nRust, `collect` is one function you do often need to annotate because Rust\nisn’t able to infer the kind of collection you want."
        },
        {
          "kind": "text",
          "content": "Finally, we print the vector using the debug macro. Let’s try running the code\nfirst with no arguments and then with two arguments:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-01/output.txt}}"
          }
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/output-only-01-with-args/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Notice that the first value in the vector is `\"target/debug/minigrep\"`, which\nis the name of our binary. This matches the behavior of the arguments list in\nC, letting programs use the name by which they were invoked in their execution.\nIt’s often convenient to have access to the program name in case you want to\nprint it in messages or change the behavior of the program based on what\ncommand line alias was used to invoke the program. But for the purposes of this\nchapter, we’ll ignore it and save only the two arguments we need."
        },
        {
          "kind": "text",
          "content": "### Saving the Argument Values in Variables"
        },
        {
          "kind": "text",
          "content": "The program is currently able to access the values specified as command line\narguments. Now we need to save the values of the two arguments in variables so\nwe can use the values throughout the rest of the program. We do that in Listing\n12-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-2\" file-name=\"src/main.rs\" caption=\"Creating variables to hold the query argument and file path argument\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-02/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As we saw when we printed the vector, the program’s name takes up the first\nvalue in the vector at `args[0]`, so we’re starting arguments at index 1. The\nfirst argument `minigrep` takes is the string we’re searching for, so we put a\nreference to the first argument in the variable `query`. The second argument\nwill be the file path, so we put a reference to the second argument in the\nvariable `file_path`."
        },
        {
          "kind": "text",
          "content": "We temporarily print the values of these variables to prove that the code is\nworking as we intend. Let’s run this program again with the arguments `test`\nand `sample.txt`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-02/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Great, the program is working! The values of the arguments we need are being\nsaved into the right variables. Later we’ll add some error handling to deal\nwith certain potential erroneous situations, such as when the user provides no\narguments; for now, we’ll ignore that situation and work on adding file-reading\ncapabilities instead."
        },
        {
          "kind": "text",
          "content": "[ch13]: ch13-00-functional-features.html\n[ch7-idiomatic-use]: ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths"
        }
      ]
    },
    {
      "title": "Reading a File",
      "file": "ch12-02-reading-a-file.md",
      "elements": [
        {
          "kind": "text",
          "content": "Now we’ll add functionality to read the file specified in the `file_path`\nargument. First we need a sample file to test it with: we’ll use a file with a\nsmall amount of text over multiple lines with some repeated words. Listing 12-3\nhas an Emily Dickinson poem that will work well! Create a file called\n_poem.txt_ at the root level of your project, and enter the poem “I’m Nobody!\nWho are you?”"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-3\" file-name=\"poem.txt\" caption=\"A poem by Emily Dickinson makes a good test case.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-03/poem.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With the text in place, edit _src/main.rs_ and add code to read the file, as\nshown in Listing 12-4."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-4\" file-name=\"src/main.rs\" caption=\"Reading the contents of the file specified by the second argument\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First we bring in a relevant part of the standard library with a `use`\nstatement: we need `std::fs` to handle files."
        },
        {
          "kind": "text",
          "content": "In `main`, the new statement `fs::read_to_string` takes the `file_path`, opens\nthat file, and returns a value of type `std::io::Result<String>` that contains\nthe file’s contents."
        },
        {
          "kind": "text",
          "content": "After that, we again add a temporary `println!` statement that prints the value\nof `contents` after the file is read, so we can check that the program is\nworking so far."
        },
        {
          "kind": "text",
          "content": "Let’s run this code with any string as the first command line argument (because\nwe haven’t implemented the searching part yet) and the _poem.txt_ file as the\nsecond argument:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Great! The code read and then printed the contents of the file. But the code\nhas a few flaws. At the moment, the `main` function has multiple\nresponsibilities: generally, functions are clearer and easier to maintain if\neach function is responsible for only one idea. The other problem is that we’re\nnot handling errors as well as we could. The program is still small, so these\nflaws aren’t a big problem, but as the program grows, it will be harder to fix\nthem cleanly. It’s a good practice to begin refactoring early on when\ndeveloping a program because it’s much easier to refactor smaller amounts of\ncode. We’ll do that next."
        }
      ]
    },
    {
      "title": "Refactoring to Improve Modularity and Error Handling",
      "file": "ch12-03-improving-error-handling-and-modularity.md",
      "elements": [
        {
          "kind": "text",
          "content": "To improve our program, we’ll fix four problems that have to do with the\nprogram’s structure and how it’s handling potential errors. First, our `main`\nfunction now performs two tasks: it parses arguments and reads files. As our\nprogram grows, the number of separate tasks the `main` function handles will\nincrease. As a function gains responsibilities, it becomes more difficult to\nreason about, harder to test, and harder to change without breaking one of its\nparts. It’s best to separate functionality so each function is responsible for\none task."
        },
        {
          "kind": "text",
          "content": "This issue also ties into the second problem: although `query` and `file_path`\nare configuration variables to our program, variables like `contents` are used\nto perform the program’s logic. The longer `main` becomes, the more variables\nwe’ll need to bring into scope; the more variables we have in scope, the harder\nit will be to keep track of the purpose of each. It’s best to group the\nconfiguration variables into one structure to make their purpose clear."
        },
        {
          "kind": "text",
          "content": "The third problem is that we’ve used `expect` to print an error message when\nreading the file fails, but the error message just prints `Should have been\nable to read the file`. Reading a file can fail in a number of ways: for\nexample, the file could be missing, or we might not have permission to open it.\nRight now, regardless of the situation, we’d print the same error message for\neverything, which wouldn’t give the user any information!"
        },
        {
          "kind": "text",
          "content": "Fourth, we use `expect` to handle an error, and if the user runs our program\nwithout specifying enough arguments, they’ll get an `index out of bounds` error\nfrom Rust that doesn’t clearly explain the problem. It would be best if all the\nerror-handling code were in one place so future maintainers had only one place\nto consult the code if the error-handling logic needed to change. Having all the\nerror-handling code in one place will also ensure that we’re printing messages\nthat will be meaningful to our end users."
        },
        {
          "kind": "text",
          "content": "Let’s address these four problems by refactoring our project."
        },
        {
          "kind": "text",
          "content": "### Separation of Concerns for Binary Projects"
        },
        {
          "kind": "text",
          "content": "The organizational problem of allocating responsibility for multiple tasks to\nthe `main` function is common to many binary projects. As a result, the Rust\ncommunity has developed guidelines for splitting the separate concerns of a\nbinary program when `main` starts getting large. This process has the following\nsteps:"
        },
        {
          "kind": "text",
          "content": "- Split your program into a _main.rs_ file and a _lib.rs_ file and move your\nprogram’s logic to _lib.rs_.\n- As long as your command line parsing logic is small, it can remain in\n_main.rs_.\n- When the command line parsing logic starts getting complicated, extract it\nfrom _main.rs_ and move it to _lib.rs_."
        },
        {
          "kind": "text",
          "content": "The responsibilities that remain in the `main` function after this process\nshould be limited to the following:"
        },
        {
          "kind": "text",
          "content": "- Calling the command line parsing logic with the argument values\n- Setting up any other configuration\n- Calling a `run` function in _lib.rs_\n- Handling the error if `run` returns an error"
        },
        {
          "kind": "text",
          "content": "This pattern is about separating concerns: _main.rs_ handles running the\nprogram and _lib.rs_ handles all the logic of the task at hand. Because you\ncan’t test the `main` function directly, this structure lets you test all of\nyour program’s logic by moving it into functions in _lib.rs_. The code that\nremains in _main.rs_ will be small enough to verify its correctness by reading\nit. Let’s rework our program by following this process."
        },
        {
          "kind": "text",
          "content": "#### Extracting the Argument Parser"
        },
        {
          "kind": "text",
          "content": "We’ll extract the functionality for parsing arguments into a function that\n`main` will call to prepare for moving the command line parsing logic to\n_src/lib.rs_. Listing 12-5 shows the new start of `main` that calls a new\nfunction `parse_config`, which we’ll define in _src/main.rs_ for the moment."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-5\" file-name=\"src/main.rs\" caption=\"Extracting a `parse_config` function from `main`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’re still collecting the command line arguments into a vector, but instead of\nassigning the argument value at index 1 to the variable `query` and the\nargument value at index 2 to the variable `file_path` within the `main`\nfunction, we pass the whole vector to the `parse_config` function. The\n`parse_config` function then holds the logic that determines which argument\ngoes in which variable and passes the values back to `main`. We still create\nthe `query` and `file_path` variables in `main`, but `main` no longer has the\nresponsibility of determining how the command line arguments and variables\ncorrespond."
        },
        {
          "kind": "text",
          "content": "This rework may seem like overkill for our small program, but we’re refactoring\nin small, incremental steps. After making this change, run the program again to\nverify that the argument parsing still works. It’s good to check your progress\noften, to help identify the cause of problems when they occur."
        },
        {
          "kind": "text",
          "content": "#### Grouping Configuration Values"
        },
        {
          "kind": "text",
          "content": "We can take another small step to improve the `parse_config` function further.\nAt the moment, we’re returning a tuple, but then we immediately break that\ntuple into individual parts again. This is a sign that perhaps we don’t have\nthe right abstraction yet."
        },
        {
          "kind": "text",
          "content": "Another indicator that shows there’s room for improvement is the `config` part\nof `parse_config`, which implies that the two values we return are related and\nare both part of one configuration value. We’re not currently conveying this\nmeaning in the structure of the data other than by grouping the two values into\na tuple; we’ll instead put the two values into one struct and give each of the\nstruct fields a meaningful name. Doing so will make it easier for future\nmaintainers of this code to understand how the different values relate to each\nother and what their purpose is."
        },
        {
          "kind": "text",
          "content": "Listing 12-6 shows the improvements to the `parse_config` function."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-6\" file-name=\"src/main.rs\" caption=\"Refactoring `parse_config` to return an instance of a `Config` struct\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve added a struct named `Config` defined to have fields named `query` and\n`file_path`. The signature of `parse_config` now indicates that it returns a\n`Config` value. In the body of `parse_config`, where we used to return\nstring slices that reference `String` values in `args`, we now define `Config`\nto contain owned `String` values. The `args` variable in `main` is the owner of\nthe argument values and is only letting the `parse_config` function borrow\nthem, which means we’d violate Rust’s borrowing rules if `Config` tried to take\nownership of the values in `args`."
        },
        {
          "kind": "text",
          "content": "There are a number of ways we could manage the `String` data; the easiest,\nthough somewhat inefficient, route is to call the `clone` method on the values.\nThis will make a full copy of the data for the `Config` instance to own, which\ntakes more time and memory than storing a reference to the string data.\nHowever, cloning the data also makes our code very straightforward because we\ndon’t have to manage the lifetimes of the references; in this circumstance,\ngiving up a little performance to gain simplicity is a worthwhile trade-off."
        },
        {
          "kind": "text",
          "content": "> ### The Trade-Offs of Using `clone`\n>\n> There’s a tendency among many Rustaceans to avoid using `clone` to fix\n> ownership problems because of its runtime cost. In\n> [Chapter 13][ch13]<!-- ignore -->, you’ll learn how to use more efficient\n> methods in this type of situation. But for now, it’s okay to copy a few\n> strings to continue making progress because you’ll make these copies only\n> once and your file path and query string are very small. It’s better to have\n> a working program that’s a bit inefficient than to try to hyperoptimize code\n> on your first pass. As you become more experienced with Rust, it’ll be\n> easier to start with the most efficient solution, but for now, it’s\n> perfectly acceptable to call `clone`."
        },
        {
          "kind": "text",
          "content": "We’ve updated `main` so it places the instance of `Config` returned by\n`parse_config` into a variable named `config`, and we updated the code that\npreviously used the separate `query` and `file_path` variables so it now uses\nthe fields on the `Config` struct instead."
        },
        {
          "kind": "text",
          "content": "Now our code more clearly conveys that `query` and `file_path` are related and\nthat their purpose is to configure how the program will work. Any code that\nuses these values knows to find them in the `config` instance in the fields\nnamed for their purpose."
        },
        {
          "kind": "text",
          "content": "#### Creating a Constructor for `Config`"
        },
        {
          "kind": "text",
          "content": "So far, we’ve extracted the logic responsible for parsing the command line\narguments from `main` and placed it in the `parse_config` function. Doing so\nhelped us see that the `query` and `file_path` values were related, and that\nrelationship should be conveyed in our code. We then added a `Config` struct to\nname the related purpose of `query` and `file_path` and to be able to return the\nvalues’ names as struct field names from the `parse_config` function."
        },
        {
          "kind": "text",
          "content": "So now that the purpose of the `parse_config` function is to create a `Config`\ninstance, we can change `parse_config` from a plain function to a function\nnamed `new` that is associated with the `Config` struct. Making this change\nwill make the code more idiomatic. We can create instances of types in the\nstandard library, such as `String`, by calling `String::new`. Similarly, by\nchanging `parse_config` into a `new` function associated with `Config`, we’ll\nbe able to create instances of `Config` by calling `Config::new`. Listing 12-7\nshows the changes we need to make."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-7\" file-name=\"src/main.rs\" caption=\"Changing `parse_config` into `Config::new`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve updated `main` where we were calling `parse_config` to instead call\n`Config::new`. We’ve changed the name of `parse_config` to `new` and moved it\nwithin an `impl` block, which associates the `new` function with `Config`. Try\ncompiling this code again to make sure it works."
        },
        {
          "kind": "text",
          "content": "### Fixing the Error Handling"
        },
        {
          "kind": "text",
          "content": "Now we’ll work on fixing our error handling. Recall that attempting to access\nthe values in the `args` vector at index 1 or index 2 will cause the program to\npanic if the vector contains fewer than three items. Try running the program\nwithout any arguments; it will look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-07/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The line `index out of bounds: the len is 1 but the index is 1` is an error\nmessage intended for programmers. It won’t help our end users understand what\nthey should do instead. Let’s fix that now."
        },
        {
          "kind": "text",
          "content": "#### Improving the Error Message"
        },
        {
          "kind": "text",
          "content": "In Listing 12-8, we add a check in the `new` function that will verify that the\nslice is long enough before accessing index 1 and index 2. If the slice isn’t\nlong enough, the program panics and displays a better error message."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-8\" file-name=\"src/main.rs\" caption=\"Adding a check for the number of arguments\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code is similar to [the `Guess::new` function we wrote in Listing\n9-13][ch9-custom-types]<!-- ignore -->, where we called `panic!` when the\n`value` argument was out of the range of valid values. Instead of checking for\na range of values here, we’re checking that the length of `args` is at least\n`3` and the rest of the function can operate under the assumption that this\ncondition has been met. If `args` has fewer than three items, this condition\nwill be `true`, and we call the `panic!` macro to end the program immediately."
        },
        {
          "kind": "text",
          "content": "With these extra few lines of code in `new`, let’s run the program without any\narguments again to see what the error looks like now:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-08/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This output is better: we now have a reasonable error message. However, we also\nhave extraneous information we don’t want to give to our users. Perhaps the\ntechnique we used in Listing 9-13 isn’t the best one to use here: a call to\n`panic!` is more appropriate for a programming problem than a usage problem,\n[as discussed in Chapter 9][ch9-error-guidelines]<!-- ignore -->. Instead,\nwe’ll use the other technique you learned about in Chapter 9—[returning a\n`Result`][ch9-result]<!-- ignore --> that indicates either success or an error."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"returning-a-result-from-new-instead-of-calling-panic\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Returning a `Result` Instead of Calling `panic!`"
        },
        {
          "kind": "text",
          "content": "We can instead return a `Result` value that will contain a `Config` instance in\nthe successful case and will describe the problem in the error case. We’re also\ngoing to change the function name from `new` to `build` because many\nprogrammers expect `new` functions to never fail. When `Config::build` is\ncommunicating to `main`, we can use the `Result` type to signal there was a\nproblem. Then we can change `main` to convert an `Err` variant into a more\npractical error for our users without the surrounding text about `thread\n'main'` and `RUST_BACKTRACE` that a call to `panic!` causes."
        },
        {
          "kind": "text",
          "content": "Listing 12-9 shows the changes we need to make to the return value of the\nfunction we’re now calling `Config::build` and the body of the function needed\nto return a `Result`. Note that this won’t compile until we update `main` as\nwell, which we’ll do in the next listing."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-9\" file-name=\"src/main.rs\" caption=\"Returning a `Result` from `Config::build`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Our `build` function returns a `Result` with a `Config` instance in the success\ncase and a string literal in the error case. Our error values will always be\nstring literals that have the `'static` lifetime."
        },
        {
          "kind": "text",
          "content": "We’ve made two changes in the body of the function: instead of calling `panic!`\nwhen the user doesn’t pass enough arguments, we now return an `Err` value, and\nwe’ve wrapped the `Config` return value in an `Ok`. These changes make the\nfunction conform to its new type signature."
        },
        {
          "kind": "text",
          "content": "Returning an `Err` value from `Config::build` allows the `main` function to\nhandle the `Result` value returned from the `build` function and exit the\nprocess more cleanly in the error case."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"calling-confignew-and-handling-errors\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Calling `Config::build` and Handling Errors"
        },
        {
          "kind": "text",
          "content": "To handle the error case and print a user-friendly message, we need to update\n`main` to handle the `Result` being returned by `Config::build`, as shown in\nListing 12-10. We’ll also take the responsibility of exiting the command line\ntool with a nonzero error code away from `panic!` and instead implement it by\nhand. A nonzero exit status is a convention to signal to the process that\ncalled our program that the program exited with an error state."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-10\" file-name=\"src/main.rs\" caption=\"Exiting with an error code if building a `Config` fails\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-10/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In this listing, we’ve used a method we haven’t covered in detail yet:\n`unwrap_or_else`, which is defined on `Result<T, E>` by the standard library.\nUsing `unwrap_or_else` allows us to define some custom, non-`panic!` error\nhandling. If the `Result` is an `Ok` value, this method’s behavior is similar\nto `unwrap`: it returns the inner value that `Ok` is wrapping. However, if the\nvalue is an `Err` value, this method calls the code in the _closure_, which is\nan anonymous function we define and pass as an argument to `unwrap_or_else`.\nWe’ll cover closures in more detail in [Chapter 13][ch13]<!-- ignore -->. For\nnow, you just need to know that `unwrap_or_else` will pass the inner value of\nthe `Err`, which in this case is the static string `\"not enough arguments\"`\nthat we added in Listing 12-9, to our closure in the argument `err` that\nappears between the vertical pipes. The code in the closure can then use the\n`err` value when it runs."
        },
        {
          "kind": "text",
          "content": "We’ve added a new `use` line to bring `process` from the standard library into\nscope. The code in the closure that will be run in the error case is only two\nlines: we print the `err` value and then call `process::exit`. The\n`process::exit` function will stop the program immediately and return the\nnumber that was passed as the exit status code. This is similar to the\n`panic!`-based handling we used in Listing 12-8, but we no longer get all the\nextra output. Let’s try it:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-10/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Great! This output is much friendlier for our users."
        },
        {
          "kind": "text",
          "content": "### Extracting Logic from `main`"
        },
        {
          "kind": "text",
          "content": "Now that we’ve finished refactoring the configuration parsing, let’s turn to\nthe program’s logic. As we stated in [“Separation of Concerns for Binary\nProjects”](#separation-of-concerns-for-binary-projects)<!-- ignore -->, we’ll\nextract a function named `run` that will hold all the logic currently in the\n`main` function that isn’t involved with setting up configuration or handling\nerrors. When we’re done, `main` will be concise and easy to verify by\ninspection, and we’ll be able to write tests for all the other logic."
        },
        {
          "kind": "text",
          "content": "Listing 12-11 shows the extracted `run` function. For now, we’re just making\nthe small, incremental improvement of extracting the function. We’re still\ndefining the function in _src/main.rs_."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-11\" file-name=\"src/main.rs\" caption=\"Extracting a `run` function containing the rest of the program logic\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `run` function now contains all the remaining logic from `main`, starting\nfrom reading the file. The `run` function takes the `Config` instance as an\nargument."
        },
        {
          "kind": "text",
          "content": "#### Returning Errors from the `run` Function"
        },
        {
          "kind": "text",
          "content": "With the remaining program logic separated into the `run` function, we can\nimprove the error handling, as we did with `Config::build` in Listing 12-9.\nInstead of allowing the program to panic by calling `expect`, the `run`\nfunction will return a `Result<T, E>` when something goes wrong. This will let\nus further consolidate the logic around handling errors into `main` in a\nuser-friendly way. Listing 12-12 shows the changes we need to make to the\nsignature and body of `run`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-12\" file-name=\"src/main.rs\" caption=\"Changing the `run` function to return `Result`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-12/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve made three significant changes here. First, we changed the return type of\nthe `run` function to `Result<(), Box<dyn Error>>`. This function previously\nreturned the unit type, `()`, and we keep that as the value returned in the\n`Ok` case."
        },
        {
          "kind": "text",
          "content": "For the error type, we used the _trait object_ `Box<dyn Error>` (and we’ve\nbrought `std::error::Error` into scope with a `use` statement at the top).\nWe’ll cover trait objects in [Chapter 18][ch18]<!-- ignore -->. For now, just\nknow that `Box<dyn Error>` means the function will return a type that\nimplements the `Error` trait, but we don’t have to specify what particular type\nthe return value will be. This gives us flexibility to return error values that\nmay be of different types in different error cases. The `dyn` keyword is short\nfor _dynamic_."
        },
        {
          "kind": "text",
          "content": "Second, we’ve removed the call to `expect` in favor of the `?` operator, as we\ntalked about in [Chapter 9][ch9-question-mark]<!-- ignore -->. Rather than\n`panic!` on an error, `?` will return the error value from the current function\nfor the caller to handle."
        },
        {
          "kind": "text",
          "content": "Third, the `run` function now returns an `Ok` value in the success case.\nWe’ve declared the `run` function’s success type as `()` in the signature,\nwhich means we need to wrap the unit type value in the `Ok` value. This\n`Ok(())` syntax might look a bit strange at first, but using `()` like this is\nthe idiomatic way to indicate that we’re calling `run` for its side effects\nonly; it doesn’t return a value we need."
        },
        {
          "kind": "text",
          "content": "When you run this code, it will compile but will display a warning:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-12/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust tells us that our code ignored the `Result` value and the `Result` value\nmight indicate that an error occurred. But we’re not checking to see whether or\nnot there was an error, and the compiler reminds us that we probably meant to\nhave some error-handling code here! Let’s rectify that problem now."
        },
        {
          "kind": "text",
          "content": "#### Handling Errors Returned from `run` in `main`"
        },
        {
          "kind": "text",
          "content": "We’ll check for errors and handle them using a technique similar to one we used\nwith `Config::build` in Listing 12-10, but with a slight difference:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-01-handling-errors-in-main/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We use `if let` rather than `unwrap_or_else` to check whether `run` returns an\n`Err` value and to call `process::exit(1)` if it does. The `run` function\ndoesn’t return a value that we want to `unwrap` in the same way that\n`Config::build` returns the `Config` instance. Because `run` returns `()` in\nthe success case, we only care about detecting an error, so we don’t need\n`unwrap_or_else` to return the unwrapped value, which would only be `()`."
        },
        {
          "kind": "text",
          "content": "The bodies of the `if let` and the `unwrap_or_else` functions are the same in\nboth cases: we print the error and exit."
        },
        {
          "kind": "text",
          "content": "### Splitting Code into a Library Crate"
        },
        {
          "kind": "text",
          "content": "Our `minigrep` project is looking good so far! Now we’ll split the\n_src/main.rs_ file and put some code into the _src/lib.rs_ file. That way, we\ncan test the code and have a _src/main.rs_ file with fewer responsibilities."
        },
        {
          "kind": "text",
          "content": "Let’s move all the code that isn’t in the `main` function from _src/main.rs_ to\n_src/lib.rs_:"
        },
        {
          "kind": "text",
          "content": "- The `run` function definition\n- The relevant `use` statements\n- The definition of `Config`\n- The `Config::build` function definition"
        },
        {
          "kind": "text",
          "content": "The contents of _src/lib.rs_ should have the signatures shown in Listing 12-13\n(we’ve omitted the bodies of the functions for brevity). Note that this won’t\ncompile until we modify _src/main.rs_ in Listing 12-14."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-13\" file-name=\"src/lib.rs\" caption=\"Moving `Config` and `run` into *src/lib.rs*\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-13/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve made liberal use of the `pub` keyword: on `Config`, on its fields and its\n`build` method, and on the `run` function. We now have a library crate that has\na public API we can test!"
        },
        {
          "kind": "text",
          "content": "Now we need to bring the code we moved to _src/lib.rs_ into the scope of the\nbinary crate in _src/main.rs_, as shown in Listing 12-14."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-14\" file-name=\"src/main.rs\" caption=\"Using the `minigrep` library crate in *src/main.rs*\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-14/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We add a `use minigrep::Config` line to bring the `Config` type from the\nlibrary crate into the binary crate’s scope, and we prefix the `run` function\nwith our crate name. Now all the functionality should be connected and should\nwork. Run the program with `cargo run` and make sure everything works correctly."
        },
        {
          "kind": "text",
          "content": "Whew! That was a lot of work, but we’ve set ourselves up for success in the\nfuture. Now it’s much easier to handle errors, and we’ve made the code more\nmodular. Almost all of our work will be done in _src/lib.rs_ from here on out."
        },
        {
          "kind": "text",
          "content": "Let’s take advantage of this newfound modularity by doing something that would\nhave been difficult with the old code but is easy with the new code: we’ll\nwrite some tests!"
        },
        {
          "kind": "text",
          "content": "[ch13]: ch13-00-functional-features.html\n[ch9-custom-types]: ch09-03-to-panic-or-not-to-panic.html#creating-custom-types-for-validation\n[ch9-error-guidelines]: ch09-03-to-panic-or-not-to-panic.html#guidelines-for-error-handling\n[ch9-result]: ch09-02-recoverable-errors-with-result.html\n[ch18]: ch18-00-oop.html\n[ch9-question-mark]: ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator"
        }
      ]
    },
    {
      "title": "Developing the Library’s Functionality with Test-Driven Development",
      "file": "ch12-04-testing-the-librarys-functionality.md",
      "elements": [
        {
          "kind": "text",
          "content": "Now that we’ve extracted the logic into _src/lib.rs_ and left the argument\ncollecting and error handling in _src/main.rs_, it’s much easier to write tests\nfor the core functionality of our code. We can call functions directly with\nvarious arguments and check return values without having to call our binary\nfrom the command line."
        },
        {
          "kind": "text",
          "content": "In this section, we’ll add the searching logic to the `minigrep` program using\nthe test-driven development (TDD) process with the following steps:"
        },
        {
          "kind": "text",
          "content": "1. Write a test that fails and run it to make sure it fails for the reason you\nexpect.\n2. Write or modify just enough code to make the new test pass.\n3. Refactor the code you just added or changed and make sure the tests continue\nto pass.\n4. Repeat from step 1!"
        },
        {
          "kind": "text",
          "content": "Though it’s just one of many ways to write software, TDD can help drive code\ndesign. Writing the test before you write the code that makes the test pass\nhelps to maintain high test coverage throughout the process."
        },
        {
          "kind": "text",
          "content": "We’ll test-drive the implementation of the functionality that will actually do\nthe searching for the query string in the file contents and produce a list of\nlines that match the query. We’ll add this functionality in a function called\n`search`."
        },
        {
          "kind": "text",
          "content": "### Writing a Failing Test"
        },
        {
          "kind": "text",
          "content": "Because we don’t need them anymore, let’s remove the `println!` statements from\n_src/lib.rs_ and _src/main.rs_ that we used to check the program’s behavior.\nThen, in _src/lib.rs_, we’ll add a `tests` module with a test function, as we\ndid in [Chapter 11][ch11-anatomy]<!-- ignore -->. The test function specifies\nthe behavior we want the `search` function to have: it will take a query and\nthe text to search, and it will return only the lines from the text that\ncontain the query. Listing 12-15 shows this test, which won’t compile yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-15\" file-name=\"src/lib.rs\" caption=\"Creating a failing test for the `search` function we wish we had\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-15/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This test searches for the string `\"duct\"`. The text we’re searching is three\nlines, only one of which contains `\"duct\"` (note that the backslash after the\nopening double quote tells Rust not to put a newline character at the beginning\nof the contents of this string literal). We assert that the value returned from\nthe `search` function contains only the line we expect."
        },
        {
          "kind": "text",
          "content": "We aren’t yet able to run this test and watch it fail because the test doesn’t\neven compile: the `search` function doesn’t exist yet! In accordance with TDD\nprinciples, we’ll add just enough code to get the test to compile and run by\nadding a definition of the `search` function that always returns an empty\nvector, as shown in Listing 12-16. Then the test should compile and fail\nbecause an empty vector doesn’t match a vector containing the line `\"safe,\nfast, productive.\"`"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-16\" file-name=\"src/lib.rs\" caption=\"Defining just enough of the `search` function so our test will compile\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-16/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Notice that we need to define an explicit lifetime `'a` in the signature of\n`search` and use that lifetime with the `contents` argument and the return\nvalue. Recall in [Chapter 10][ch10-lifetimes]<!-- ignore --> that the lifetime\nparameters specify which argument lifetime is connected to the lifetime of the\nreturn value. In this case, we indicate that the returned vector should contain\nstring slices that reference slices of the argument `contents` (rather than the\nargument `query`)."
        },
        {
          "kind": "text",
          "content": "In other words, we tell Rust that the data returned by the `search` function\nwill live as long as the data passed into the `search` function in the\n`contents` argument. This is important! The data referenced _by_ a slice needs\nto be valid for the reference to be valid; if the compiler assumes we’re making\nstring slices of `query` rather than `contents`, it will do its safety checking\nincorrectly."
        },
        {
          "kind": "text",
          "content": "If we forget the lifetime annotations and try to compile this function, we’ll\nget this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/output-only-02-missing-lifetimes/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust can’t possibly know which of the two arguments we need, so we need to tell\nit explicitly. Because `contents` is the argument that contains all of our text\nand we want to return the parts of that text that match, we know `contents` is\nthe argument that should be connected to the return value using the lifetime\nsyntax."
        },
        {
          "kind": "text",
          "content": "Other programming languages don’t require you to connect arguments to return\nvalues in the signature, but this practice will get easier over time. You might\nwant to compare this example with the examples in the [“Validating References\nwith Lifetimes”][validating-references-with-lifetimes]<!-- ignore --> section\nin Chapter 10."
        },
        {
          "kind": "text",
          "content": "Now let’s run the test:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-16/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Great, the test fails, exactly as we expected. Let’s get the test to pass!"
        },
        {
          "kind": "text",
          "content": "### Writing Code to Pass the Test"
        },
        {
          "kind": "text",
          "content": "Currently, our test is failing because we always return an empty vector. To fix\nthat and implement `search`, our program needs to follow these steps:"
        },
        {
          "kind": "text",
          "content": "1. Iterate through each line of the contents.\n2. Check whether the line contains our query string.\n3. If it does, add it to the list of values we’re returning.\n4. If it doesn’t, do nothing.\n5. Return the list of results that match."
        },
        {
          "kind": "text",
          "content": "Let’s work through each step, starting with iterating through lines."
        },
        {
          "kind": "text",
          "content": "#### Iterating Through Lines with the `lines` Method"
        },
        {
          "kind": "text",
          "content": "Rust has a helpful method to handle line-by-line iteration of strings,\nconveniently named `lines`, that works as shown in Listing 12-17. Note that\nthis won’t compile yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-17\" file-name=\"src/lib.rs\" caption=\"Iterating through each line in `contents`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-17/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `lines` method returns an iterator. We’ll talk about iterators in depth in\n[Chapter 13][ch13-iterators]<!-- ignore -->, but recall that you saw this way\nof using an iterator in [Listing 3-5][ch3-iter]<!-- ignore -->, where we used a\n`for` loop with an iterator to run some code on each item in a collection."
        },
        {
          "kind": "text",
          "content": "#### Searching Each Line for the Query"
        },
        {
          "kind": "text",
          "content": "Next, we’ll check whether the current line contains our query string.\nFortunately, strings have a helpful method named `contains` that does this for\nus! Add a call to the `contains` method in the `search` function, as shown in\nListing 12-18. Note that this still won’t compile yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-18\" file-name=\"src/lib.rs\" caption=\"Adding functionality to see whether the line contains the string in `query`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-18/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "At the moment, we’re building up functionality. To get the code to compile, we\nneed to return a value from the body as we indicated we would in the function\nsignature."
        },
        {
          "kind": "text",
          "content": "#### Storing Matching Lines"
        },
        {
          "kind": "text",
          "content": "To finish this function, we need a way to store the matching lines that we want\nto return. For that, we can make a mutable vector before the `for` loop and\ncall the `push` method to store a `line` in the vector. After the `for` loop,\nwe return the vector, as shown in Listing 12-19."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-19\" file-name=\"src/lib.rs\" caption=\"Storing the lines that match so we can return them\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Now the `search` function should return only the lines that contain `query`,\nand our test should pass. Let’s run the test:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-19/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Our test passed, so we know it works!"
        },
        {
          "kind": "text",
          "content": "At this point, we could consider opportunities for refactoring the\nimplementation of the search function while keeping the tests passing to\nmaintain the same functionality. The code in the search function isn’t too bad,\nbut it doesn’t take advantage of some useful features of iterators. We’ll\nreturn to this example in [Chapter 13][ch13-iterators]<!-- ignore -->, where\nwe’ll explore iterators in detail, and look at how to improve it."
        },
        {
          "kind": "text",
          "content": "#### Using the `search` Function in the `run` Function"
        },
        {
          "kind": "text",
          "content": "Now that the `search` function is working and tested, we need to call `search`\nfrom our `run` function. We need to pass the `config.query` value and the\n`contents` that `run` reads from the file to the `search` function. Then `run`\nwill print each line returned from `search`:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We’re still using a `for` loop to return each line from `search` and print it."
        },
        {
          "kind": "text",
          "content": "Now the entire program should work! Let’s try it out, first with a word that\nshould return exactly one line from the Emily Dickinson poem: _frog_."
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Cool! Now let’s try a word that will match multiple lines, like _body_:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/output-only-03-multiple-matches/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "And finally, let’s make sure that we don’t get any lines when we search for a\nword that isn’t anywhere in the poem, such as _monomorphization_:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/output-only-04-no-matches/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Excellent! We’ve built our own mini version of a classic tool and learned a lot\nabout how to structure applications. We’ve also learned a bit about file input\nand output, lifetimes, testing, and command line parsing."
        },
        {
          "kind": "text",
          "content": "To round out this project, we’ll briefly demonstrate how to work with\nenvironment variables and how to print to standard error, both of which are\nuseful when you’re writing command line programs."
        },
        {
          "kind": "text",
          "content": "[validating-references-with-lifetimes]: ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\n[ch11-anatomy]: ch11-01-writing-tests.html#the-anatomy-of-a-test-function\n[ch10-lifetimes]: ch10-03-lifetime-syntax.html\n[ch3-iter]: ch03-05-control-flow.html#looping-through-a-collection-with-for\n[ch13-iterators]: ch13-02-iterators.html"
        }
      ]
    },
    {
      "title": "Working with Environment Variables",
      "file": "ch12-05-working-with-environment-variables.md",
      "elements": [
        {
          "kind": "text",
          "content": "We’ll improve `minigrep` by adding an extra feature: an option for\ncase-insensitive searching that the user can turn on via an environment\nvariable. We could make this feature a command line option and require that\nusers enter it each time they want it to apply, but by instead making it an\nenvironment variable, we allow our users to set the environment variable once\nand have all their searches be case insensitive in that terminal session."
        },
        {
          "kind": "text",
          "content": "### Writing a Failing Test for the Case-Insensitive `search` Function"
        },
        {
          "kind": "text",
          "content": "We first add a new `search_case_insensitive` function that will be called when\nthe environment variable has a value. We’ll continue to follow the TDD process,\nso the first step is again to write a failing test. We’ll add a new test for\nthe new `search_case_insensitive` function and rename our old test from\n`one_result` to `case_sensitive` to clarify the differences between the two\ntests, as shown in Listing 12-20."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-20\" file-name=\"src/lib.rs\" caption=\"Adding a new failing test for the case-insensitive function we’re about to add\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-20/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that we’ve edited the old test’s `contents` too. We’ve added a new line\nwith the text `\"Duct tape.\"` using a capital _D_ that shouldn’t match the query\n`\"duct\"` when we’re searching in a case-sensitive manner. Changing the old test\nin this way helps ensure that we don’t accidentally break the case-sensitive\nsearch functionality that we’ve already implemented. This test should pass now\nand should continue to pass as we work on the case-insensitive search."
        },
        {
          "kind": "text",
          "content": "The new test for the case-_insensitive_ search uses `\"rUsT\"` as its query. In\nthe `search_case_insensitive` function we’re about to add, the query `\"rUsT\"`\nshould match the line containing `\"Rust:\"` with a capital _R_ and match the\nline `\"Trust me.\"` even though both have different casing from the query. This\nis our failing test, and it will fail to compile because we haven’t yet defined\nthe `search_case_insensitive` function. Feel free to add a skeleton\nimplementation that always returns an empty vector, similar to the way we did\nfor the `search` function in Listing 12-16 to see the test compile and fail."
        },
        {
          "kind": "text",
          "content": "### Implementing the `search_case_insensitive` Function"
        },
        {
          "kind": "text",
          "content": "The `search_case_insensitive` function, shown in Listing 12-21, will be almost\nthe same as the `search` function. The only difference is that we’ll lowercase\nthe `query` and each `line` so that whatever the case of the input arguments,\nthey’ll be the same case when we check whether the line contains the query."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-21\" file-name=\"src/lib.rs\" caption=\"Defining the `search_case_insensitive` function to lowercase the query and the line before comparing them\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-21/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First we lowercase the `query` string and store it in a new variable with the\nsame name, shadowing the original `query`. Calling `to_lowercase` on the query\nis necessary so that no matter whether the user’s query is `\"rust\"`, `\"RUST\"`,\n`\"Rust\"`, or `\"rUsT\"`, we’ll treat the query as if it were `\"rust\"` and be\ninsensitive to the case. While `to_lowercase` will handle basic Unicode, it\nwon’t be 100% accurate. If we were writing a real application, we’d want to do a\nbit more work here, but this section is about environment variables, not\nUnicode, so we’ll leave it at that here."
        },
        {
          "kind": "text",
          "content": "Note that `query` is now a `String` rather than a string slice because calling\n`to_lowercase` creates new data rather than referencing existing data. Say the\nquery is `\"rUsT\"`, as an example: that string slice doesn’t contain a lowercase\n`u` or `t` for us to use, so we have to allocate a new `String` containing\n`\"rust\"`. When we pass `query` as an argument to the `contains` method now, we\nneed to add an ampersand because the signature of `contains` is defined to take\na string slice."
        },
        {
          "kind": "text",
          "content": "Next, we add a call to `to_lowercase` on each `line` to lowercase all\ncharacters. Now that we’ve converted `line` and `query` to lowercase, we’ll\nfind matches no matter what the case of the query is."
        },
        {
          "kind": "text",
          "content": "Let’s see if this implementation passes the tests:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-21/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Great! They passed. Now, let’s call the new `search_case_insensitive` function\nfrom the `run` function. First we’ll add a configuration option to the `Config`\nstruct to switch between case-sensitive and case-insensitive search. Adding\nthis field will cause compiler errors because we aren’t initializing this field\nanywhere yet:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We added the `ignore_case` field that holds a Boolean. Next, we need the `run`\nfunction to check the `ignore_case` field’s value and use that to decide\nwhether to call the `search` function or the `search_case_insensitive`\nfunction, as shown in Listing 12-22. This still won’t compile yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-22\" file-name=\"src/lib.rs\" caption=\"Calling either `search` or `search_case_insensitive` based on the value in `config.ignore_case`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:there}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Finally, we need to check for the environment variable. The functions for\nworking with environment variables are in the `env` module in the standard\nlibrary, so we bring that module into scope at the top of _src/lib.rs_. Then\nwe’ll use the `var` function from the `env` module to check to see if any value\nhas been set for an environment variable named `IGNORE_CASE`, as shown in\nListing 12-23."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-23\" file-name=\"src/lib.rs\" caption=\"Checking for any value in an environment variable named `IGNORE_CASE`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-23/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we create a new variable, `ignore_case`. To set its value, we call the\n`env::var` function and pass it the name of the `IGNORE_CASE` environment\nvariable. The `env::var` function returns a `Result` that will be the\nsuccessful `Ok` variant that contains the value of the environment variable if\nthe environment variable is set to any value. It will return the `Err` variant\nif the environment variable is not set."
        },
        {
          "kind": "text",
          "content": "We’re using the `is_ok` method on the `Result` to check whether the environment\nvariable is set, which means the program should do a case-insensitive search.\nIf the `IGNORE_CASE` environment variable isn’t set to anything, `is_ok` will\nreturn `false` and the program will perform a case-sensitive search. We don’t\ncare about the _value_ of the environment variable, just whether it’s set or\nunset, so we’re checking `is_ok` rather than using `unwrap`, `expect`, or any\nof the other methods we’ve seen on `Result`."
        },
        {
          "kind": "text",
          "content": "We pass the value in the `ignore_case` variable to the `Config` instance so the\n`run` function can read that value and decide whether to call\n`search_case_insensitive` or `search`, as we implemented in Listing 12-22."
        },
        {
          "kind": "text",
          "content": "Let’s give it a try! First we’ll run our program without the environment\nvariable set and with the query `to`, which should match any line that contains\nthe word _to_ in all lowercase:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch12-an-io-project/listing-12-23/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Looks like that still works! Now let’s run the program with `IGNORE_CASE` set\nto `1` but with the same query _to_:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ IGNORE_CASE=1 cargo run -- to poem.txt"
          }
        },
        {
          "kind": "text",
          "content": "If you’re using PowerShell, you will need to set the environment variable and\nrun the program as separate commands:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "PS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt"
          }
        },
        {
          "kind": "text",
          "content": "This will make `IGNORE_CASE` persist for the remainder of your shell session.\nIt can be unset with the `Remove-Item` cmdlet:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "PS> Remove-Item Env:IGNORE_CASE"
          }
        },
        {
          "kind": "text",
          "content": "We should get lines that contain _to_ that might have uppercase letters:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch12-an-io-project/listing-12-23\nIGNORE_CASE=1 cargo run -- to poem.txt\ncan't extract because of the environment variable\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "Are you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!"
          }
        },
        {
          "kind": "text",
          "content": "Excellent, we also got lines containing _To_! Our `minigrep` program can now do\ncase-insensitive searching controlled by an environment variable. Now you know\nhow to manage options set using either command line arguments or environment\nvariables."
        },
        {
          "kind": "text",
          "content": "Some programs allow arguments _and_ environment variables for the same\nconfiguration. In those cases, the programs decide that one or the other takes\nprecedence. For another exercise on your own, try controlling case sensitivity\nthrough either a command line argument or an environment variable. Decide\nwhether the command line argument or the environment variable should take\nprecedence if the program is run with one set to case sensitive and one set to\nignore case."
        },
        {
          "kind": "text",
          "content": "The `std::env` module contains many more useful features for dealing with\nenvironment variables: check out its documentation to see what is available."
        }
      ]
    },
    {
      "title": "Writing Error Messages to Standard Error Instead of Standard Output",
      "file": "ch12-06-writing-to-stderr-instead-of-stdout.md",
      "elements": [
        {
          "kind": "text",
          "content": "At the moment, we’re writing all of our output to the terminal using the\n`println!` macro. In most terminals, there are two kinds of output: _standard\noutput_ (`stdout`) for general information and _standard error_ (`stderr`) for\nerror messages. This distinction enables users to choose to direct the\nsuccessful output of a program to a file but still print error messages to the\nscreen."
        },
        {
          "kind": "text",
          "content": "The `println!` macro is only capable of printing to standard output, so we have\nto use something else to print to standard error."
        },
        {
          "kind": "text",
          "content": "### Checking Where Errors Are Written"
        },
        {
          "kind": "text",
          "content": "First let’s observe how the content printed by `minigrep` is currently being\nwritten to standard output, including any error messages we want to write to\nstandard error instead. We’ll do that by redirecting the standard output stream\nto a file while intentionally causing an error. We won’t redirect the standard\nerror stream, so any content sent to standard error will continue to display on\nthe screen."
        },
        {
          "kind": "text",
          "content": "Command line programs are expected to send error messages to the standard error\nstream so we can still see error messages on the screen even if we redirect the\nstandard output stream to a file. Our program is not currently well behaved:\nwe’re about to see that it saves the error message output to a file instead!"
        },
        {
          "kind": "text",
          "content": "To demonstrate this behavior, we’ll run the program with `>` and the file path,\n_output.txt_, that we want to redirect the standard output stream to. We won’t\npass any arguments, which should cause an error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run > output.txt"
          }
        },
        {
          "kind": "text",
          "content": "The `>` syntax tells the shell to write the contents of standard output to\n_output.txt_ instead of the screen. We didn’t see the error message we were\nexpecting printed to the screen, so that means it must have ended up in the\nfile. This is what _output.txt_ contains:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Problem parsing arguments: not enough arguments"
          }
        },
        {
          "kind": "text",
          "content": "Yup, our error message is being printed to standard output. It’s much more\nuseful for error messages like this to be printed to standard error so only\ndata from a successful run ends up in the file. We’ll change that."
        },
        {
          "kind": "text",
          "content": "### Printing Errors to Standard Error"
        },
        {
          "kind": "text",
          "content": "We’ll use the code in Listing 12-24 to change how error messages are printed.\nBecause of the refactoring we did earlier in this chapter, all the code that\nprints error messages is in one function, `main`. The standard library provides\nthe `eprintln!` macro that prints to the standard error stream, so let’s change\nthe two places we were calling `println!` to print errors to use `eprintln!`\ninstead."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"12-24\" file-name=\"src/main.rs\" caption=\"Writing error messages to standard error instead of standard output using `eprintln!`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-24/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s now run the program again in the same way, without any arguments and\nredirecting standard output with `>`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run > output.txt\nProblem parsing arguments: not enough arguments"
          }
        },
        {
          "kind": "text",
          "content": "Now we see the error onscreen and _output.txt_ contains nothing, which is the\nbehavior we expect of command line programs."
        },
        {
          "kind": "text",
          "content": "Let’s run the program again with arguments that don’t cause an error but still\nredirect standard output to a file, like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run -- to poem.txt > output.txt"
          }
        },
        {
          "kind": "text",
          "content": "We won’t see any output to the terminal, and _output.txt_ will contain our\nresults:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: output.txt</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Are you nobody, too?\nHow dreary to be somebody!"
          }
        },
        {
          "kind": "text",
          "content": "This demonstrates that we’re now using standard output for successful output\nand standard error for error output as appropriate."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "This chapter recapped some of the major concepts you’ve learned so far and\ncovered how to perform common I/O operations in Rust. By using command line\narguments, files, environment variables, and the `eprintln!` macro for printing\nerrors, you’re now prepared to write command line applications. Combined with\nthe concepts in previous chapters, your code will be well organized, store data\neffectively in the appropriate data structures, handle errors nicely, and be\nwell tested."
        },
        {
          "kind": "text",
          "content": "Next, we’ll explore some Rust features that were influenced by functional\nlanguages: closures and iterators."
        }
      ]
    },
    {
      "title": "Functional Language Features: Iterators and Closures",
      "file": "ch13-00-functional-features.md",
      "elements": [
        {
          "kind": "text",
          "content": "Rust’s design has taken inspiration from many existing languages and\ntechniques, and one significant influence is _functional programming_.\nProgramming in a functional style often includes using functions as values by\npassing them in arguments, returning them from other functions, assigning them\nto variables for later execution, and so forth."
        },
        {
          "kind": "text",
          "content": "In this chapter, we won’t debate the issue of what functional programming is or\nisn’t but will instead discuss some features of Rust that are similar to\nfeatures in many languages often referred to as functional."
        },
        {
          "kind": "text",
          "content": "More specifically, we’ll cover:"
        },
        {
          "kind": "text",
          "content": "- _Closures_, a function-like construct you can store in a variable\n- _Iterators_, a way of processing a series of elements\n- How to use closures and iterators to improve the I/O project in Chapter 12\n- The performance of closures and iterators (spoiler alert: they’re faster than\nyou might think!)"
        },
        {
          "kind": "text",
          "content": "We’ve already covered some other Rust features, such as pattern matching and\nenums, that are also influenced by the functional style. Because mastering\nclosures and iterators is an important part of writing idiomatic, fast Rust\ncode, we’ll devote this entire chapter to them."
        }
      ]
    },
    {
      "title": "Closures: Anonymous Functions That Capture Their Environment",
      "file": "ch13-01-closures.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old heading. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"closures-anonymous-functions-that-can-capture-their-environment\"></a>"
        },
        {
          "kind": "text",
          "content": "Rust’s closures are anonymous functions you can save in a variable or pass as\narguments to other functions. You can create the closure in one place and then\ncall the closure elsewhere to evaluate it in a different context. Unlike\nfunctions, closures can capture values from the scope in which they’re defined.\nWe’ll demonstrate how these closure features allow for code reuse and behavior\ncustomization."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"creating-an-abstraction-of-behavior-with-closures\"></a>\n<a id=\"refactoring-using-functions\"></a>\n<a id=\"refactoring-with-closures-to-store-code\"></a>"
        },
        {
          "kind": "text",
          "content": "### Capturing the Environment with Closures"
        },
        {
          "kind": "text",
          "content": "We’ll first examine how we can use closures to capture values from the\nenvironment they’re defined in for later use. Here’s the scenario: Every so\noften, our t-shirt company gives away an exclusive, limited-edition shirt to\nsomeone on our mailing list as a promotion. People on the mailing list can\noptionally add their favorite color to their profile. If the person chosen for\na free shirt has their favorite color set, they get that color shirt. If the\nperson hasn’t specified a favorite color, they get whatever color the company\ncurrently has the most of."
        },
        {
          "kind": "text",
          "content": "There are many ways to implement this. For this example, we’re going to use an\nenum called `ShirtColor` that has the variants `Red` and `Blue` (limiting the\nnumber of colors available for simplicity). We represent the company’s\ninventory with an `Inventory` struct that has a field named `shirts` that\ncontains a `Vec<ShirtColor>` representing the shirt colors currently in stock.\nThe method `giveaway` defined on `Inventory` gets the optional shirt\ncolor preference of the free shirt winner, and returns the shirt color the\nperson will get. This setup is shown in Listing 13-1:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-1\" file-name=\"src/main.rs\" caption=\"Shirt company giveaway situation\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `store` defined in `main` has two blue shirts and one red shirt remaining\nto distribute for this limited-edition promotion. We call the `giveaway` method\nfor a user with a preference for a red shirt and a user without any preference."
        },
        {
          "kind": "text",
          "content": "Again, this code could be implemented in many ways, and here, to focus on\nclosures, we’ve stuck to concepts you’ve already learned, except for the body of\nthe `giveaway` method that uses a closure. In the `giveaway` method, we get the\nuser preference as a parameter of type `Option<ShirtColor>` and call the\n`unwrap_or_else` method on `user_preference`. The [`unwrap_or_else` method on\n`Option<T>`][unwrap-or-else]<!-- ignore --> is defined by the standard library.\nIt takes one argument: a closure without any arguments that returns a value `T`\n(the same type stored in the `Some` variant of the `Option<T>`, in this case\n`ShirtColor`). If the `Option<T>` is the `Some` variant, `unwrap_or_else`\nreturns the value from within the `Some`. If the `Option<T>` is the `None`\nvariant, `unwrap_or_else` calls the closure and returns the value returned by\nthe closure."
        },
        {
          "kind": "text",
          "content": "We specify the closure expression `|| self.most_stocked()` as the argument to\n`unwrap_or_else`. This is a closure that takes no parameters itself (if the\nclosure had parameters, they would appear between the two vertical bars). The\nbody of the closure calls `self.most_stocked()`. We’re defining the closure\nhere, and the implementation of `unwrap_or_else` will evaluate the closure\nlater if the result is needed."
        },
        {
          "kind": "text",
          "content": "Running this code prints:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-01/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "One interesting aspect here is that we’ve passed a closure that calls\n`self.most_stocked()` on the current `Inventory` instance. The standard library\ndidn’t need to know anything about the `Inventory` or `ShirtColor` types we\ndefined, or the logic we want to use in this scenario. The closure captures an\nimmutable reference to the `self` `Inventory` instance and passes it with the\ncode we specify to the `unwrap_or_else` method. Functions, on the other hand,\nare not able to capture their environment in this way."
        },
        {
          "kind": "text",
          "content": "### Closure Type Inference and Annotation"
        },
        {
          "kind": "text",
          "content": "There are more differences between functions and closures. Closures don’t\nusually require you to annotate the types of the parameters or the return value\nlike `fn` functions do. Type annotations are required on functions because the\ntypes are part of an explicit interface exposed to your users. Defining this\ninterface rigidly is important for ensuring that everyone agrees on what types\nof values a function uses and returns. Closures, on the other hand, aren’t used\nin an exposed interface like this: they’re stored in variables and used without\nnaming them and exposing them to users of our library."
        },
        {
          "kind": "text",
          "content": "Closures are typically short and relevant only within a narrow context rather\nthan in any arbitrary scenario. Within these limited contexts, the compiler can\ninfer the types of the parameters and the return type, similar to how it’s able\nto infer the types of most variables (there are rare cases where the compiler\nneeds closure type annotations too)."
        },
        {
          "kind": "text",
          "content": "As with variables, we can add type annotations if we want to increase\nexplicitness and clarity at the cost of being more verbose than is strictly\nnecessary. Annotating the types for a closure would look like the definition\nshown in Listing 13-2. In this example, we’re defining a closure and storing it\nin a variable rather than defining the closure in the spot we pass it as an\nargument as we did in Listing 13-1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-2\" file-name=\"src/main.rs\" caption=\"Adding optional type annotations of the parameter and return value types in the closure\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With type annotations added, the syntax of closures looks more similar to the\nsyntax of functions. Here we define a function that adds 1 to its parameter and\na closure that has the same behavior, for comparison. We’ve added some spaces\nto line up the relevant parts. This illustrates how closure syntax is similar\nto function syntax except for the use of pipes and the amount of syntax that is\noptional:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "fn  add_one_v1   (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x|             { x + 1 };\nlet add_one_v4 = |x|               x + 1  ;"
          }
        },
        {
          "kind": "text",
          "content": "The first line shows a function definition, and the second line shows a fully\nannotated closure definition. In the third line, we remove the type annotations\nfrom the closure definition. In the fourth line, we remove the brackets, which\nare optional because the closure body has only one expression. These are all\nvalid definitions that will produce the same behavior when they’re called. The\n`add_one_v3` and `add_one_v4` lines require the closures to be evaluated to be\nable to compile because the types will be inferred from their usage. This is\nsimilar to `let v = Vec::new();` needing either type annotations or values of\nsome type to be inserted into the `Vec` for Rust to be able to infer the type."
        },
        {
          "kind": "text",
          "content": "For closure definitions, the compiler will infer one concrete type for each of\ntheir parameters and for their return value. For instance, Listing 13-3 shows\nthe definition of a short closure that just returns the value it receives as a\nparameter. This closure isn’t very useful except for the purposes of this\nexample. Note that we haven’t added any type annotations to the definition.\nBecause there are no type annotations, we can call the closure with any type,\nwhich we’ve done here with `String` the first time. If we then try to call\n`example_closure` with an integer, we’ll get an error."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-3\" file-name=\"src/main.rs\" caption=\"Attempting to call a closure whose types are inferred with two different types\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The compiler gives us this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-03/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The first time we call `example_closure` with the `String` value, the compiler\ninfers the type of `x` and the return type of the closure to be `String`. Those\ntypes are then locked into the closure in `example_closure`, and we get a type\nerror when we next try to use a different type with the same closure."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "e6cbd582-9692-4045-a984-8770a12e1b95",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following best describes the rationale for why Rust will infer the types of arguments/returns for closures, but not top-level functions?\n",
                  "distractors": [
                    "Due to the halting problem, it is mathematically impossible for Rust to infer the types of top-level functions",
                    "For backwards compatibility with older versions of Rust",
                    "Anything assignable to a variable can be type-inferred, and top-level functions cannot be assigned to a variable"
                  ]
                },
                "answer": {
                  "answer": "Top-level functions can be part of a library's external interface, while closures cannot be directly exposed"
                },
                "context": "Rust could, in theory, provide type inference for top-level functions. Functional languages like Haskell and OCaml have this feature.\nHowever, Rust designers made the conscious decision to require type annotations on top-level functions to promote clarity at the \ninterface level: a function will always have exactly the type it says it has.\n"
              },
              {
                "id": "f844d1c2-3f63-4cdb-b16e-6e818e996e0d",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Rust permits pattern matching within closure arguments, including the use of the underscore. For example, you could write the following:\n\n```rust\nlet f = |_| (); // sometimes called the \"toilet closure\"\nlet s = String::from(\"Hello\");\nf(s);\n```\n\nWhich of the following best describes the relationship between `f` and `s` in this program?\n",
                  "distractors": [
                    "`f` has no effect on `s`",
                    "`f` reads `s` and then throws away the result",
                    "`f` captures `s` in its environment"
                  ]
                },
                "answer": {
                  "answer": "`f` causes `s` to be immediately dropped"
                },
                "context": "The toilet closure is similar to [`std::mem::drop`](https://doc.rust-lang.org/std/mem/fn.drop.html), i.e. a function that moves\nan argument and causes it to be dropped.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Capturing References or Moving Ownership"
        },
        {
          "kind": "text",
          "content": "Closures can capture values from their environment in three ways, which\ndirectly map to the three ways a function can take a parameter: borrowing\nimmutably, borrowing mutably, and taking ownership. The closure will decide\nwhich of these to use based on what the body of the function does with the\ncaptured values."
        },
        {
          "kind": "text",
          "content": "In Listing 13-4, we define a closure that captures an immutable reference to\nthe vector named `list` because it only needs an immutable reference to print\nthe value:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-4\" file-name=\"src/main.rs\" caption=\"Defining and calling a closure that captures an immutable reference\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-04/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This example also illustrates that a variable can bind to a closure definition,\nand we can later call the closure by using the variable name and parentheses as\nif the variable name were a function name."
        },
        {
          "kind": "text",
          "content": "Because we can have multiple immutable references to `list` at the same time,\n`list` is still accessible from the code before the closure definition, after\nthe closure definition but before the closure is called, and after the closure\nis called. This code compiles, runs, and prints:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-04/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Next, in Listing 13-5, we change the closure body so that it adds an element to\nthe `list` vector. The closure now captures a mutable reference:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-5\" file-name=\"src/main.rs\" caption=\"Defining and calling a closure that captures a mutable reference\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-05/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code compiles, runs, and prints:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-05/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Note that there’s no longer a `println!` between the definition and the call of\nthe `borrows_mutably` closure: when `borrows_mutably` is defined, it captures a\nmutable reference to `list`. We don’t use the closure again after the closure\nis called, so the mutable borrow ends. Between the closure definition and the\nclosure call, an immutable borrow to print isn’t allowed because no other\nborrows are allowed when there’s a mutable borrow. Try adding a `println!`\nthere to see what error message you get!"
        },
        {
          "kind": "text",
          "content": "If you want to force the closure to take ownership of the values it uses in the\nenvironment even though the body of the closure doesn’t strictly need\nownership, you can use the `move` keyword before the parameter list."
        },
        {
          "kind": "text",
          "content": "This technique is mostly useful when passing a closure to a new thread to move\nthe data so that it’s owned by the new thread. We’ll discuss threads and why\nyou would want to use them in detail in Chapter 16 when we talk about\nconcurrency, but for now, let’s briefly explore spawning a new thread using a\nclosure that needs the `move` keyword. Listing 13-6 shows Listing 13-4 modified\nto print the vector in a new thread rather than in the main thread:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-6\" file-name=\"src/main.rs\" caption=\"Using `move` to force the closure for the thread to take ownership of `list`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-06/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We spawn a new thread, giving the thread a closure to run as an argument. The\nclosure body prints out the list. In Listing 13-4, the closure only captured\n`list` using an immutable reference because that's the least amount of access\nto `list` needed to print it. In this example, even though the closure body\nstill only needs an immutable reference, we need to specify that `list` should\nbe moved into the closure by putting the `move` keyword at the beginning of the\nclosure definition. The new thread might finish before the rest of the main\nthread finishes, or the main thread might finish first. If the main thread\nmaintained ownership of `list` but ended before the new thread did and dropped\n`list`, the immutable reference in the thread would be invalid. Therefore, the\ncompiler requires that `list` be moved into the closure given to the new thread\nso the reference will be valid. Try removing the `move` keyword or using `list`\nin the main thread after the closure is defined to see what compiler errors you\nget!"
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"storing-closures-using-generic-parameters-and-the-fn-traits\"></a>\n<a id=\"limitations-of-the-cacher-implementation\"></a>\n<a id=\"moving-captured-values-out-of-the-closure-and-the-fn-traits\"></a>"
        },
        {
          "kind": "text",
          "content": "### Moving Captured Values Out of Closures and the `Fn` Traits"
        },
        {
          "kind": "text",
          "content": "Once a closure has captured a reference or captured ownership of a value from\nthe environment where the closure is defined (thus affecting what, if anything,\nis moved _into_ the closure), the code in the body of the closure defines what\nhappens to the references or values when the closure is evaluated later (thus\naffecting what, if anything, is moved _out of_ the closure). A closure body can\ndo any of the following: move a captured value out of the closure, mutate the\ncaptured value, neither move nor mutate the value, or capture nothing from the\nenvironment to begin with."
        },
        {
          "kind": "text",
          "content": "The way a closure captures and handles values from the environment affects\nwhich traits the closure implements, and traits are how functions and structs\ncan specify what kinds of closures they can use. Closures will automatically\nimplement one, two, or all three of these `Fn` traits, in an additive fashion,\ndepending on how the closure’s body handles the values:"
        },
        {
          "kind": "text",
          "content": "1. `FnOnce` applies to closures that can be called once. All closures implement\nat least this trait because all closures can be called. A closure that moves\ncaptured values out of its body will only implement `FnOnce` and none of the\nother `Fn` traits, because it can only be called once.\n2. `FnMut` applies to closures that don’t move captured values out of their\nbody, but that might mutate the captured values. These closures can be\ncalled more than once.\n3. `Fn` applies to closures that don’t move captured values out of their body\nand that don’t mutate captured values, as well as closures that capture\nnothing from their environment. These closures can be called more than once\nwithout mutating their environment, which is important in cases such as\ncalling a closure multiple times concurrently."
        },
        {
          "kind": "text",
          "content": "Let’s look at the definition of the `unwrap_or_else` method on `Option<T>` that\nwe used in Listing 13-1:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "impl<T> Option<T> {\n    pub fn unwrap_or_else<F>(self, f: F) -> T\n    where\n        F: FnOnce() -> T\n    {\n        match self {\n            Some(x) => x,\n            None => f(),\n        }\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "Recall that `T` is the generic type representing the type of the value in the\n`Some` variant of an `Option`. That type `T` is also the return type of the\n`unwrap_or_else` function: code that calls `unwrap_or_else` on an\n`Option<String>`, for example, will get a `String`."
        },
        {
          "kind": "text",
          "content": "Next, notice that the `unwrap_or_else` function has the additional generic type\nparameter `F`. The `F` type is the type of the parameter named `f`, which is\nthe closure we provide when calling `unwrap_or_else`."
        },
        {
          "kind": "text",
          "content": "The trait bound specified on the generic type `F` is `FnOnce() -> T`, which\nmeans `F` must be able to be called once, take no arguments, and return a `T`.\nUsing `FnOnce` in the trait bound expresses the constraint that\n`unwrap_or_else` is only going to call `f` at most one time. In the body of\n`unwrap_or_else`, we can see that if the `Option` is `Some`, `f` won’t be\ncalled. If the `Option` is `None`, `f` will be called once. Because all\nclosures implement `FnOnce`, `unwrap_or_else` accepts all three kinds of\nclosures and is as flexible as it can be."
        },
        {
          "kind": "text",
          "content": "> Note: If what we want to do doesn’t require capturing a value from the\n> environment, we can use the name of a function rather than a closure. For\n> example, we could call `unwrap_or_else(Vec::new)` on a `Option<Vec<T>>` value\n> to get a new, empty vector if the value is `None`. The compiler automatically\n> implements whichever of the `Fn` traits is applicable for a function\n> definition."
        },
        {
          "kind": "text",
          "content": "Now let’s look at the standard library method `sort_by_key` defined on slices,\nto see how that differs from `unwrap_or_else` and why `sort_by_key` uses\n`FnMut` instead of `FnOnce` for the trait bound. The closure gets one argument\nin the form of a reference to the current item in the slice being considered,\nand returns a value of type `K` that can be ordered. This function is useful\nwhen you want to sort a slice by a particular attribute of each item. In\nListing 13-7, we have a list of `Rectangle` instances and we use `sort_by_key`\nto order them by their `width` attribute from low to high:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-7\" file-name=\"src/main.rs\" caption=\"Using `sort_by_key` to order rectangles by width\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-07/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code prints:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-07/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The reason `sort_by_key` is defined to take an `FnMut` closure is that it calls\nthe closure multiple times: once for each item in the slice. The closure `|r|\nr.width` doesn’t capture, mutate, or move out anything from its environment, so\nit meets the trait bound requirements."
        },
        {
          "kind": "text",
          "content": "In contrast, Listing 13-8 shows an example of a closure that implements just\nthe `FnOnce` trait, because it moves a value out of the environment. The\ncompiler won’t let us use this closure with `sort_by_key`:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-8\" file-name=\"src/main.rs\" caption=\"Attempting to use an `FnOnce` closure with `sort_by_key`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-08/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This is a contrived, convoluted way (that doesn’t work) to try and count the\nnumber of times `sort_by_key` calls the closure when sorting `list`. This code\nattempts to do this counting by pushing `value`—a `String` from the closure’s\nenvironment—into the `sort_operations` vector. The closure captures `value` and\nthen moves `value` out of the closure by transferring ownership of `value` to\nthe `sort_operations` vector. This closure can be called once; trying to call\nit a second time wouldn’t work because `value` would no longer be in the\nenvironment to be pushed into `sort_operations` again! Therefore, this closure\nonly implements `FnOnce`. When we try to compile this code, we get this error\nthat `value` can’t be moved out of the closure because the closure must\nimplement `FnMut`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-08/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error points to the line in the closure body that moves `value` out of the\nenvironment. To fix this, we need to change the closure body so that it doesn’t\nmove values out of the environment. Keeping a counter in the environment and\nincrementing its value in the closure body is a more straightforward way to\ncount the number of times the closure is called. The closure in Listing 13-9\nworks with `sort_by_key` because it is only capturing a mutable reference to the\n`num_sort_operations` counter and can therefore be called more than once:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-9\" file-name=\"src/main.rs\" caption=\"Using an `FnMut` closure with `sort_by_key` is allowed\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-09/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "<!-- TODO: consider adding a section on the use<> operator -->"
        },
        {
          "kind": "text",
          "content": "In sum, the `Fn` traits are important when defining or using functions or types that\nmake use of closures. In the next section, we’ll discuss iterators. Many\niterator methods take closure arguments, so keep these closure details in mind\nas we continue!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "a055fa7c-89e2-467e-8458-62cbf3ffb8bf",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let mut s = String::from(\"Hello\");\n    let mut add_suffix = || s.push_str(\" world\");\n    println!(\"{s}\");\n    add_suffix();\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 5
                },
                "context": "`add_suffix` mutably borrows `s` between its definition and use, so the `println` (a read of `s`) is invalid.\n"
              },
              {
                "id": "266d3cb3-de76-4b91-bd13-c3d6cb9e7fd7",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let mut s = String::from(\"Hello\");\n    let add_suffix = |s: &mut String| s.push_str(\" world\");\n    println!(\"{s}\");\n    add_suffix(&mut s);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "Hello"
                },
                "context": "Because `add_suffix` does not capture `s`, it is fine to read `s` before mutating it with `add_suffix`.\n"
              },
              {
                "id": "0f298680-d870-47a1-962c-1c668f75cb68",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following API:\n\n```rust\n/// Executes a function with a mutable reference to each element of a vector\nfn for_each_mut<T, F: ___(&mut T)>(v: &mut Vec<T>, mut f: F) {\n    for x in v.iter_mut() {\n        f(x);\n    }\n}\n```\n\nWhich of the following function traits is most appropriate to fill in the blank?\n",
                  "distractors": [
                    "`Fn`",
                    "`FnOnce`"
                  ]
                },
                "answer": {
                  "answer": "`FnMut`"
                },
                "context": "`f` is called multiple times so `FnOnce` is not appropriate. Both `Fn` and `FnMut` can work, and `FnMut` is less restrictive, so `FnMut` is most appropriate.\n"
              },
              {
                "id": "65f574b1-b418-4abe-852e-8b14d88368a7",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following API:\n\n```rust\npub struct Analyzer<F> {\n    postprocess: F\n}\n\nimpl<F: ___(i32) -> i32> Analyzer<F> {\n    fn process(&self, n: i32) -> i32 { /* .. */ }\n    pub fn pipeline(&self, n: i32) -> i32 {\n        let n = self.process(n);\n        (self.postprocess)(n)\n    }\n}\n```\n\nWhich of the following function traits is most appropriate to fill in the blank?\n",
                  "distractors": [
                    "`FnMut`",
                    "`FnOnce`"
                  ]
                },
                "answer": {
                  "answer": "`Fn`"
                },
                "context": "`pipeline` could be called multiple times, so `FnOnce` is not appropriate.\n`pipeline` takes an immutable reference to `self`, if `postprocess` were `FnMut`, it could not be called within `pipeline`.\nTherefore `Fn` is most appropriate here.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[unwrap-or-else]: https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else\n[lifetime elision]: ch10-03-lifetime-syntax.html#lifetime-elision"
        }
      ]
    },
    {
      "title": "Processing a Series of Items with Iterators",
      "file": "ch13-02-iterators.md",
      "elements": [
        {
          "kind": "text",
          "content": "The iterator pattern allows you to perform some task on a sequence of items in\nturn. An iterator is responsible for the logic of iterating over each item and\ndetermining when the sequence has finished. When you use iterators, you don’t\nhave to reimplement that logic yourself."
        },
        {
          "kind": "text",
          "content": "In Rust, iterators are _lazy_, meaning they have no effect until you call\nmethods that consume the iterator to use it up. For example, the code in\nListing 13-10 creates an iterator over the items in the vector `v1` by calling\nthe `iter` method defined on `Vec<T>`. This code by itself doesn’t do anything\nuseful."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-10\" file-name=\"src/main.rs\" caption=\"Creating an iterator\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-10/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The iterator is stored in the `v1_iter` variable. Once we’ve created an\niterator, we can use it in a variety of ways. In Listing 3-5 in Chapter 3, we\niterated over an array using a `for` loop to execute some code on each of its\nitems. Under the hood this implicitly created and then consumed an iterator,\nbut we glossed over how exactly that works until now."
        },
        {
          "kind": "text",
          "content": "In the example in Listing 13-11, we separate the creation of the iterator from\nthe use of the iterator in the `for` loop. When the `for` loop is called using\nthe iterator in `v1_iter`, each element in the iterator is used in one\niteration of the loop, which prints out each value."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-11\" file-name=\"src/main.rs\" caption=\"Using an iterator in a `for` loop\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In languages that don’t have iterators provided by their standard libraries,\nyou would likely write this same functionality by starting a variable at index\n0, using that variable to index into the vector to get a value, and\nincrementing the variable value in a loop until it reached the total number of\nitems in the vector."
        },
        {
          "kind": "text",
          "content": "Iterators handle all of that logic for you, cutting down on repetitive code you\ncould potentially mess up. Iterators give you more flexibility to use the same\nlogic with many different kinds of sequences, not just data structures you can\nindex into, like vectors. Let’s examine how iterators do that."
        },
        {
          "kind": "text",
          "content": "### The `Iterator` Trait and the `next` Method"
        },
        {
          "kind": "text",
          "content": "All iterators implement a trait named `Iterator` that is defined in the\nstandard library. The definition of the trait looks like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "pub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n\n    // methods with default implementations elided\n}"
          }
        },
        {
          "kind": "text",
          "content": "Notice that this definition uses some new syntax: `type Item` and `Self::Item`,\nwhich are defining an _associated type_ with this trait. We’ll talk about\nassociated types in depth in Chapter 20. For now, all you need to know is that\nthis code says implementing the `Iterator` trait requires that you also define\nan `Item` type, and this `Item` type is used in the return type of the `next`\nmethod. In other words, the `Item` type will be the type returned from the\niterator."
        },
        {
          "kind": "text",
          "content": "The `Iterator` trait only requires implementors to define one method: the\n`next` method, which returns one item of the iterator at a time, wrapped in\n`Some` and, when iteration is over, returns `None`."
        },
        {
          "kind": "text",
          "content": "We can call the `next` method on iterators directly; Listing 13-12 demonstrates\nwhat values are returned from repeated calls to `next` on the iterator created\nfrom the vector."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-12\" file-name=\"src/lib.rs\" caption=\"Calling the `next` method on an iterator\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-12/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that we needed to make `v1_iter` mutable: calling the `next` method on an\niterator changes internal state that the iterator uses to keep track of where\nit is in the sequence. In other words, this code _consumes_, or uses up, the\niterator. Each call to `next` eats up an item from the iterator. We didn’t need\nto make `v1_iter` mutable when we used a `for` loop because the loop took\nownership of `v1_iter` and made it mutable behind the scenes."
        },
        {
          "kind": "text",
          "content": "Also note that the values we get from the calls to `next` are immutable\nreferences to the values in the vector. The `iter` method produces an iterator\nover immutable references. If we want to create an iterator that takes\nownership of `v1` and returns owned values, we can call `into_iter` instead of\n`iter`. Similarly, if we want to iterate over mutable references, we can call\n`iter_mut` instead of `iter`."
        },
        {
          "kind": "text",
          "content": "### Methods That Consume the Iterator"
        },
        {
          "kind": "text",
          "content": "The `Iterator` trait has a number of different methods with default\nimplementations provided by the standard library; you can find out about these\nmethods by looking in the standard library API documentation for the `Iterator`\ntrait. Some of these methods call the `next` method in their definition, which\nis why you’re required to implement the `next` method when implementing the\n`Iterator` trait."
        },
        {
          "kind": "text",
          "content": "Methods that call `next` are called _consuming adapters_ because calling them\nuses up the iterator. One example is the `sum` method, which takes ownership of\nthe iterator and iterates through the items by repeatedly calling `next`, thus\nconsuming the iterator. As it iterates through, it adds each item to a running\ntotal and returns the total when iteration is complete. Listing 13-13 has a\ntest illustrating a use of the `sum` method."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-13\" file-name=\"src/lib.rs\" caption=\"Calling the `sum` method to get the total of all items in the iterator\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-13/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We aren’t allowed to use `v1_iter` after the call to `sum` because `sum` takes\nownership of the iterator we call it on."
        },
        {
          "kind": "text",
          "content": "### Methods that Produce Other Iterators"
        },
        {
          "kind": "text",
          "content": "_Iterator adapters_ are methods defined on the `Iterator` trait that don’t\nconsume the iterator. Instead, they produce different iterators by changing\nsome aspect of the original iterator."
        },
        {
          "kind": "text",
          "content": "Listing 13-14 shows an example of calling the iterator adapter method `map`,\nwhich takes a closure to call on each item as the items are iterated through.\nThe `map` method returns a new iterator that produces the modified items. The\nclosure here creates a new iterator in which each item from the vector will be\nincremented by 1:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-14\" file-name=\"src/main.rs\" caption=\"Calling the iterator adapter `map` to create a new iterator\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "not_desired_behavior"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-14/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "However, this code produces a warning:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch13-functional-features/listing-13-14/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The code in Listing 13-14 doesn’t do anything; the closure we’ve specified\nnever gets called. The warning reminds us why: iterator adapters are lazy, and\nwe need to consume the iterator here."
        },
        {
          "kind": "text",
          "content": "To fix this warning and consume the iterator, we’ll use the `collect` method,\nwhich we used in Chapter 12 with `env::args` in Listing 12-1. This method\nconsumes the iterator and collects the resultant values into a collection data\ntype."
        },
        {
          "kind": "text",
          "content": "In Listing 13-15, we collect the results of iterating over the iterator that’s\nreturned from the call to `map` into a vector. This vector will end up\ncontaining each item from the original vector, incremented by 1."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-15\" file-name=\"src/main.rs\" caption=\"Calling the `map` method to create a new iterator and then calling the `collect` method to consume the new iterator and create a vector\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-15/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because `map` takes a closure, we can specify any operation we want to perform\non each item. This is a great example of how closures let you customize some\nbehavior while reusing the iteration behavior that the `Iterator` trait\nprovides."
        },
        {
          "kind": "text",
          "content": "You can chain multiple calls to iterator adapters to perform complex actions in\na readable way. But because all iterators are lazy, you have to call one of the\nconsuming adapter methods to get results from calls to iterator adapters."
        },
        {
          "kind": "text",
          "content": "### Using Closures That Capture Their Environment"
        },
        {
          "kind": "text",
          "content": "Many iterator adapters take closures as arguments, and commonly the closures\nwe’ll specify as arguments to iterator adapters will be closures that capture\ntheir environment."
        },
        {
          "kind": "text",
          "content": "For this example, we’ll use the `filter` method that takes a closure. The\nclosure gets an item from the iterator and returns a `bool`. If the closure\nreturns `true`, the value will be included in the iteration produced by\n`filter`. If the closure returns `false`, the value won’t be included."
        },
        {
          "kind": "text",
          "content": "In Listing 13-16, we use `filter` with a closure that captures the `shoe_size`\nvariable from its environment to iterate over a collection of `Shoe` struct\ninstances. It will return only shoes that are the specified size."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-16\" file-name=\"src/lib.rs\" caption=\"Using the `filter` method with a closure that captures `shoe_size`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-16/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `shoes_in_size` function takes ownership of a vector of shoes and a shoe\nsize as parameters. It returns a vector containing only shoes of the specified\nsize."
        },
        {
          "kind": "text",
          "content": "In the body of `shoes_in_size`, we call `into_iter` to create an iterator\nthat takes ownership of the vector. Then we call `filter` to adapt that\niterator into a new iterator that only contains elements for which the closure\nreturns `true`."
        },
        {
          "kind": "text",
          "content": "The closure captures the `shoe_size` parameter from the environment and\ncompares the value with each shoe’s size, keeping only shoes of the size\nspecified. Finally, calling `collect` gathers the values returned by the\nadapted iterator into a vector that’s returned by the function."
        },
        {
          "kind": "text",
          "content": "The test shows that when we call `shoes_in_size`, we get back only shoes\nthat have the same size as the value we specified."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "d50dd9fb-f84c-4748-9e45-cd3dc8d5fb47",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following best describes why iterators are described as \"lazy\"?\n",
                  "distractors": [
                    "An iterator creates a copy of each item it iterates over",
                    "An iterator takes ownership of the sequence of items it is iterating over",
                    "An iterator will only iterate over a given number of items"
                  ]
                },
                "answer": {
                  "answer": "An iterator has no effect until you call methods that extract elements from the iterator"
                },
                "context": "Lazy generally means \"does not do work until asked\", and iterators do not perform any computation until\n`Iterator::next` is called.\n"
              },
              {
                "id": "19eac65e-44ad-4349-9632-47bdbb519d46",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "True/false: these two code snippets are semantically equivalent where `iter` is an iterator.\n\nSnippet 1:\n```\nwhile let Some(x) = iter.next() {\n    f(x);\n}\n```\n\nSnippet 2:\n```\nfor x in iter {\n    f(x);\n}\n```\n",
                  "distractors": [
                    "False"
                  ]
                },
                "answer": {
                  "answer": "True"
                },
                "context": "The for-loop is a syntactic sugar for the `while let`, which is itself a sugar for `loop` and `break`.\n"
              },
              {
                "id": "ff652580-b487-4379-bd70-652f5803321d",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let v = vec![1, 2, 3, 4];\n    let a: Vec<_> = v.iter().filter(|x: &&i32| *x % 2 == 0).map(|x: &i32| x * 2).collect();\n    let b: Vec<_> = v.iter().map(|x: &i32| x * 2).filter(|x: &i32| x % 2 == 0).collect();\n    println!(\"{} {}\", a[0], b[0]);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "4 2"
                },
                "context": "The order of iterators matters &mdash; a filter and a map is not the same as a map and a filter!\n\nYou might wonder why the first filter uses `*x` and the second filter does not. \n`v.iter()` produces an `Iterator<Item = &i32>`. The `.filter()` call takes an `Iterator<Item = T>` as input,\nand passes `&T` to its predicate. Therefore `x: &&i32` on line 3. The Rust standard library implements the\nremainder operator `%` for `&i32` on the left-hand side ([see the docs](https://doc.rust-lang.org/std/ops/trait.Rem.html#impl-Rem%3Ci32%3E-for-%26'a+i32)),\nbut not for `&&i32`. So we have to dereference `x` once to use it in the expression `*x % 2`.\n\nBy contrast on line 4, when `.map()` takes an `Iterator<Item = T>` as input, it passes `T` to its closure.\nTherefore the closure in `map` takes `&i32` as input. The multiplication operator `*` is implemented for `&i32`,\nso `x` does not need to be dereferenced in `x * 2`. The operation `x * 2` produces a value of type `i32`, so\nthe result of the map is an `Iterator<Item = i32>`. The `filter` then takes `x : &i32`, which also does not need\na dereference to do `x % 2`. Now you know!\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Improving Our I/O Project",
      "file": "ch13-03-improving-our-io-project.md",
      "elements": [
        {
          "kind": "text",
          "content": "With this new knowledge about iterators, we can improve the I/O project in\nChapter 12 by using iterators to make places in the code clearer and more\nconcise. Let’s look at how iterators can improve our implementation of the\n`Config::build` function and the `search` function."
        },
        {
          "kind": "text",
          "content": "### Removing a `clone` Using an Iterator"
        },
        {
          "kind": "text",
          "content": "In Listing 12-6, we added code that took a slice of `String` values and created\nan instance of the `Config` struct by indexing into the slice and cloning the\nvalues, allowing the `Config` struct to own those values. In Listing 13-17,\nwe’ve reproduced the implementation of the `Config::build` function as it was\nin Listing 12-23."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-17\" file-name=\"src/lib.rs\" caption=\"Reproduction of the `Config::build` function from Listing 12-23\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-12-23-reproduced/src/lib.rs:ch13}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "At the time, we said not to worry about the inefficient `clone` calls because\nwe would remove them in the future. Well, that time is now!"
        },
        {
          "kind": "text",
          "content": "We needed `clone` here because we have a slice with `String` elements in the\nparameter `args`, but the `build` function doesn’t own `args`. To return\nownership of a `Config` instance, we had to clone the values from the `query`\nand `file_path` fields of `Config` so the `Config` instance can own its values."
        },
        {
          "kind": "text",
          "content": "With our new knowledge about iterators, we can change the `build` function to\ntake ownership of an iterator as its argument instead of borrowing a slice.\nWe’ll use the iterator functionality instead of the code that checks the length\nof the slice and indexes into specific locations. This will clarify what the\n`Config::build` function is doing because the iterator will access the values."
        },
        {
          "kind": "text",
          "content": "Once `Config::build` takes ownership of the iterator and stops using indexing\noperations that borrow, we can move the `String` values from the iterator into\n`Config` rather than calling `clone` and making a new allocation."
        },
        {
          "kind": "text",
          "content": "#### Using the Returned Iterator Directly"
        },
        {
          "kind": "text",
          "content": "Open your I/O project’s _src/main.rs_ file, which should look like this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-12-24-reproduced/src/main.rs:ch13}}"
          }
        },
        {
          "kind": "text",
          "content": "We’ll first change the start of the `main` function that we had in Listing\n12-24 to the code in Listing 13-18, which this time uses an iterator. This\nwon’t compile until we update `Config::build` as well."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-18\" file-name=\"src/main.rs\" caption=\"Passing the return value of `env::args` to `Config::build`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-18/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `env::args` function returns an iterator! Rather than collecting the\niterator values into a vector and then passing a slice to `Config::build`, now\nwe’re passing ownership of the iterator returned from `env::args` to\n`Config::build` directly."
        },
        {
          "kind": "text",
          "content": "Next, we need to update the definition of `Config::build`. In your I/O\nproject’s _src/lib.rs_ file, let’s change the signature of `Config::build` to\nlook like Listing 13-19. This still won’t compile because we need to update the\nfunction body."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-19\" file-name=\"src/lib.rs\" caption=\"Updating the signature of `Config::build` to expect an iterator\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-19/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The standard library documentation for the `env::args` function shows that the\ntype of the iterator it returns is `std::env::Args`, and that type implements\nthe `Iterator` trait and returns `String` values."
        },
        {
          "kind": "text",
          "content": "We’ve updated the signature of the `Config::build` function so the parameter\n`args` has a generic type with the trait bounds `impl Iterator<Item = String>`\ninstead of `&[String]`. This usage of the `impl Trait` syntax we discussed in\nthe [“Traits as Parameters”][impl-trait]<!-- ignore --> section of Chapter 10\nmeans that `args` can be any type that implements the `Iterator` trait and\nreturns `String` items."
        },
        {
          "kind": "text",
          "content": "Because we’re taking ownership of `args` and we’ll be mutating `args` by\niterating over it, we can add the `mut` keyword into the specification of the\n`args` parameter to make it mutable."
        },
        {
          "kind": "text",
          "content": "#### Using `Iterator` Trait Methods Instead of Indexing"
        },
        {
          "kind": "text",
          "content": "Next, we’ll fix the body of `Config::build`. Because `args` implements the\n`Iterator` trait, we know we can call the `next` method on it! Listing 13-20\nupdates the code from Listing 12-23 to use the `next` method."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-20\" file-name=\"src/lib.rs\" caption=\"Changing the body of `Config::build` to use iterator methods\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-20/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Remember that the first value in the return value of `env::args` is the name of\nthe program. We want to ignore that and get to the next value, so first we call\n`next` and do nothing with the return value. Then we call `next` to get the\nvalue we want to put in the `query` field of `Config`. If `next` returns `Some`,\nwe use a `match` to extract the value. If it returns `None`, it means not enough\narguments were given and we return early with an `Err` value. We do the same\nthing for the `file_path` value."
        },
        {
          "kind": "text",
          "content": "### Making Code Clearer with Iterator Adapters"
        },
        {
          "kind": "text",
          "content": "We can also take advantage of iterators in the `search` function in our I/O\nproject, which is reproduced here in Listing 13-21 as it was in Listing 12-19:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-21\" file-name=\"src/lib.rs\" caption=\"The implementation of the `search` function from Listing 12-19\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:ch13}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We can write this code in a more concise way using iterator adapter methods.\nDoing so also lets us avoid having a mutable intermediate `results` vector. The\nfunctional programming style prefers to minimize the amount of mutable state to\nmake code clearer. Removing the mutable state might enable a future enhancement\nto make searching happen in parallel, because we wouldn’t have to manage\nconcurrent access to the `results` vector. Listing 13-22 shows this change:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"13-22\" file-name=\"src/lib.rs\" caption=\"Using iterator adapter methods in the implementation of the `search` function\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch13-functional-features/listing-13-22/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Recall that the purpose of the `search` function is to return all lines in\n`contents` that contain the `query`. Similar to the `filter` example in Listing\n13-16, this code uses the `filter` adapter to keep only the lines for which\n`line.contains(query)` returns `true` for. We then collect the matching lines\ninto another vector with `collect`. Much simpler! Feel free to make the same\nchange to use iterator methods in the `search_case_insensitive` function as\nwell."
        },
        {
          "kind": "text",
          "content": "### Choosing Between Loops or Iterators"
        },
        {
          "kind": "text",
          "content": "The next logical question is which style you should choose in your own code and\nwhy: the original implementation in Listing 13-21 or the version using\niterators in Listing 13-22. Most Rust programmers prefer to use the iterator\nstyle. It’s a bit tougher to get the hang of at first, but once you get a feel\nfor the various iterator adapters and what they do, iterators can be easier to\nunderstand. Instead of fiddling with the various bits of looping and building\nnew vectors, the code focuses on the high-level objective of the loop. This\nabstracts away some of the commonplace code so it’s easier to see the concepts\nthat are unique to this code, such as the filtering condition each element in\nthe iterator must pass."
        },
        {
          "kind": "text",
          "content": "But are the two implementations truly equivalent? The intuitive assumption\nmight be that the lower-level loop will be faster. Let’s talk about performance."
        },
        {
          "kind": "text",
          "content": "[impl-trait]: ch10-02-traits.html#traits-as-parameters"
        }
      ]
    },
    {
      "title": "Comparing Performance: Loops vs. Iterators",
      "file": "ch13-04-performance.md",
      "elements": [
        {
          "kind": "text",
          "content": "To determine whether to use loops or iterators, you need to know which\nimplementation is faster: the version of the `search` function with an explicit\n`for` loop or the version with iterators."
        },
        {
          "kind": "text",
          "content": "We ran a benchmark by loading the entire contents of _The Adventures of\nSherlock Holmes_ by Sir Arthur Conan Doyle into a `String` and looking for the\nword _the_ in the contents. Here are the results of the benchmark on the\nversion of `search` using the `for` loop and the version using iterators:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "test bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)\ntest bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)"
          }
        },
        {
          "kind": "text",
          "content": "The two implementations have similar performance! We won’t explain the\nbenchmark code here, because the point is not to prove that the two versions\nare equivalent but to get a general sense of how these two implementations\ncompare performance-wise."
        },
        {
          "kind": "text",
          "content": "For a more comprehensive benchmark, you should check using various texts of\nvarious sizes as the `contents`, different words and words of different lengths\nas the `query`, and all kinds of other variations. The point is this:\niterators, although a high-level abstraction, get compiled down to roughly the\nsame code as if you’d written the lower-level code yourself. Iterators are one\nof Rust’s _zero-cost abstractions_, by which we mean that using the abstraction\nimposes no additional runtime overhead. This is analogous to how Bjarne\nStroustrup, the original designer and implementor of C++, defines\n_zero-overhead_ in “Foundations of C++” (2012):"
        },
        {
          "kind": "text",
          "content": "> In general, C++ implementations obey the zero-overhead principle: What you\n> don’t use, you don’t pay for. And further: What you do use, you couldn’t hand\n> code any better."
        },
        {
          "kind": "text",
          "content": "As another example, the following code is taken from an audio decoder. The\ndecoding algorithm uses the linear prediction mathematical operation to\nestimate future values based on a linear function of the previous samples. This\ncode uses an iterator chain to do some math on three variables in scope: a\n`buffer` slice of data, an array of 12 `coefficients`, and an amount by which\nto shift data in `qlp_shift`. We’ve declared the variables within this example\nbut not given them any values; although this code doesn’t have much meaning\noutside of its context, it’s still a concise, real-world example of how Rust\ntranslates high-level ideas to low-level code."
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let buffer: &mut [i32];\nlet coefficients: [i64; 12];\nlet qlp_shift: i16;\n\nfor i in 12..buffer.len() {\n    let prediction = coefficients.iter()\n                                 .zip(&buffer[i - 12..i])\n                                 .map(|(&c, &s)| c * s as i64)\n                                 .sum::<i64>() >> qlp_shift;\n    let delta = buffer[i];\n    buffer[i] = prediction as i32 + delta;\n}"
          }
        },
        {
          "kind": "text",
          "content": "To calculate the value of `prediction`, this code iterates through each of the\n12 values in `coefficients` and uses the `zip` method to pair the coefficient\nvalues with the previous 12 values in `buffer`. Then, for each pair, we\nmultiply the values together, sum all the results, and shift the bits in the\nsum `qlp_shift` bits to the right."
        },
        {
          "kind": "text",
          "content": "Calculations in applications like audio decoders often prioritize performance\nmost highly. Here, we’re creating an iterator, using two adapters, and then\nconsuming the value. What assembly code would this Rust code compile to? Well,\nas of this writing, it compiles down to the same assembly you’d write by hand.\nThere’s no loop at all corresponding to the iteration over the values in\n`coefficients`: Rust knows that there are 12 iterations, so it “unrolls” the\nloop. _Unrolling_ is an optimization that removes the overhead of the loop\ncontrolling code and instead generates repetitive code for each iteration of\nthe loop."
        },
        {
          "kind": "text",
          "content": "All of the coefficients get stored in registers, which means accessing the\nvalues is very fast. There are no bounds checks on the array access at runtime.\nAll these optimizations that Rust is able to apply make the resultant code\nextremely efficient. Now that you know this, you can use iterators and closures\nwithout fear! They make code seem like it’s higher level but don’t impose a\nruntime performance penalty for doing so."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Closures and iterators are Rust features inspired by functional programming\nlanguage ideas. They contribute to Rust’s capability to clearly express\nhigh-level ideas at low-level performance. The implementations of closures and\niterators are such that runtime performance is not affected. This is part of\nRust’s goal to strive to provide zero-cost abstractions."
        },
        {
          "kind": "text",
          "content": "Now that we’ve improved the expressiveness of our I/O project, let’s look at\nsome more features of `cargo` that will help us share the project with the\nworld."
        }
      ]
    },
    {
      "title": "More About Cargo and Crates.io",
      "file": "ch14-00-more-about-cargo.md",
      "elements": [
        {
          "kind": "text",
          "content": "So far we’ve used only the most basic features of Cargo to build, run, and test\nour code, but it can do a lot more. In this chapter, we’ll discuss some of its\nother, more advanced features to show you how to do the following:"
        },
        {
          "kind": "text",
          "content": "- Customize your build through release profiles\n- Publish libraries on [crates.io](https://crates.io/)<!-- ignore -->\n- Organize large projects with workspaces\n- Install binaries from [crates.io](https://crates.io/)<!-- ignore -->\n- Extend Cargo using custom commands"
        },
        {
          "kind": "text",
          "content": "Cargo can do even more than the functionality we cover in this chapter, so for\na full explanation of all its features, see [its documentation](https://doc.rust-lang.org/cargo/)."
        }
      ]
    },
    {
      "title": "Customizing Builds with Release Profiles",
      "file": "ch14-01-release-profiles.md",
      "elements": [
        {
          "kind": "text",
          "content": "In Rust, _release profiles_ are predefined and customizable profiles with\ndifferent configurations that allow a programmer to have more control over\nvarious options for compiling code. Each profile is configured independently of\nthe others."
        },
        {
          "kind": "text",
          "content": "Cargo has two main profiles: the `dev` profile Cargo uses when you run `cargo\nbuild` and the `release` profile Cargo uses when you run `cargo build\n--release`. The `dev` profile is defined with good defaults for development,\nand the `release` profile has good defaults for release builds."
        },
        {
          "kind": "text",
          "content": "These profile names might be familiar from the output of your builds:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\nanywhere, run:\ncargo build\ncargo build --release\nand ensure output below is accurate\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n$ cargo build --release\n    Finished `release` profile [optimized] target(s) in 0.32s"
          }
        },
        {
          "kind": "text",
          "content": "The `dev` and `release` are these different profiles used by the compiler."
        },
        {
          "kind": "text",
          "content": "Cargo has default settings for each of the profiles that apply when you haven't\nexplicitly added any `[profile.*]` sections in the project’s _Cargo.toml_ file.\nBy adding `[profile.*]` sections for any profile you want to customize, you\noverride any subset of the default settings. For example, here are the default\nvalues for the `opt-level` setting for the `dev` and `release` profiles:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level = 3"
          }
        },
        {
          "kind": "text",
          "content": "The `opt-level` setting controls the number of optimizations Rust will apply to\nyour code, with a range of 0 to 3. Applying more optimizations extends\ncompiling time, so if you’re in development and compiling your code often,\nyou’ll want fewer optimizations to compile faster even if the resultant code\nruns slower. The default `opt-level` for `dev` is therefore `0`. When you’re\nready to release your code, it’s best to spend more time compiling. You’ll only\ncompile in release mode once, but you’ll run the compiled program many times,\nso release mode trades longer compile time for code that runs faster. That is\nwhy the default `opt-level` for the `release` profile is `3`."
        },
        {
          "kind": "text",
          "content": "You can override a default setting by adding a different value for it in\n_Cargo.toml_. For example, if we want to use optimization level 1 in the\ndevelopment profile, we can add these two lines to our project’s _Cargo.toml_\nfile:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[profile.dev]\nopt-level = 1"
          }
        },
        {
          "kind": "text",
          "content": "This code overrides the default setting of `0`. Now when we run `cargo build`,\nCargo will use the defaults for the `dev` profile plus our customization to\n`opt-level`. Because we set `opt-level` to `1`, Cargo will apply more\noptimizations than the default, but not as many as in a release build."
        },
        {
          "kind": "text",
          "content": "For the full list of configuration options and defaults for each profile, see\n[Cargo’s documentation](https://doc.rust-lang.org/cargo/reference/profiles.html)."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "c753bc38-0dc1-44d5-8b06-136fdbbc26d2",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "When you run `cargo build` with no additional flags, which profile is used by default?\n",
                  "distractors": [
                    "`release`",
                    "`build`"
                  ]
                },
                "answer": {
                  "answer": "`dev`"
                },
                "context": "To minimize compile times, the default profile is `dev`. You should add `--release` if you want the `release` profile\nfor longer compile times but faster code execution. (There is no `build` profile).\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Publishing a Crate to Crates.io",
      "file": "ch14-02-publishing-to-crates-io.md",
      "elements": [
        {
          "kind": "text",
          "content": "We’ve used packages from [crates.io](https://crates.io/)<!-- ignore --> as\ndependencies of our project, but you can also share your code with other people\nby publishing your own packages. The crate registry at\n[crates.io](https://crates.io/)<!-- ignore --> distributes the source code of\nyour packages, so it primarily hosts code that is open source."
        },
        {
          "kind": "text",
          "content": "Rust and Cargo have features that make your published package easier for people\nto find and use. We’ll talk about some of these features next and then explain\nhow to publish a package."
        },
        {
          "kind": "text",
          "content": "### Making Useful Documentation Comments"
        },
        {
          "kind": "text",
          "content": "Accurately documenting your packages will help other users know how and when to\nuse them, so it’s worth investing the time to write documentation. In Chapter\n3, we discussed how to comment Rust code using two slashes, `//`. Rust also has\na particular kind of comment for documentation, known conveniently as a\n_documentation comment_, that will generate HTML documentation. The HTML\ndisplays the contents of documentation comments for public API items intended\nfor programmers interested in knowing how to _use_ your crate as opposed to how\nyour crate is _implemented_."
        },
        {
          "kind": "text",
          "content": "Documentation comments use three slashes, `///`, instead of two and support\nMarkdown notation for formatting the text. Place documentation comments just\nbefore the item they’re documenting. Listing 14-1 shows documentation comments\nfor an `add_one` function in a crate named `my_crate`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-1\" file-name=\"src/lib.rs\" caption=\"A documentation comment for a function\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-01/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we give a description of what the `add_one` function does, start a\nsection with the heading `Examples`, and then provide code that demonstrates\nhow to use the `add_one` function. We can generate the HTML documentation from\nthis documentation comment by running `cargo doc`. This command runs the\n`rustdoc` tool distributed with Rust and puts the generated HTML documentation\nin the _target/doc_ directory."
        },
        {
          "kind": "text",
          "content": "For convenience, running `cargo doc --open` will build the HTML for your\ncurrent crate’s documentation (as well as the documentation for all of your\ncrate’s dependencies) and open the result in a web browser. Navigate to the\n`add_one` function and you’ll see how the text in the documentation comments is\nrendered, as shown in Figure 14-1:"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Rendered HTML documentation for the `add_one` function of `my_crate`\" src=\"img/trpl14-01.png\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 14-1: HTML documentation for the `add_one`\nfunction</span>"
        },
        {
          "kind": "text",
          "content": "#### Commonly Used Sections"
        },
        {
          "kind": "text",
          "content": "We used the `# Examples` Markdown heading in Listing 14-1 to create a section\nin the HTML with the title “Examples.” Here are some other sections that crate\nauthors commonly use in their documentation:"
        },
        {
          "kind": "text",
          "content": "- **Panics**: The scenarios in which the function being documented could\npanic. Callers of the function who don’t want their programs to panic should\nmake sure they don’t call the function in these situations.\n- **Errors**: If the function returns a `Result`, describing the kinds of\nerrors that might occur and what conditions might cause those errors to be\nreturned can be helpful to callers so they can write code to handle the\ndifferent kinds of errors in different ways.\n- **Safety**: If the function is `unsafe` to call (we discuss unsafety in\nChapter 20), there should be a section explaining why the function is unsafe\nand covering the invariants that the function expects callers to uphold."
        },
        {
          "kind": "text",
          "content": "Most documentation comments don’t need all of these sections, but this is a\ngood checklist to remind you of the aspects of your code users will be\ninterested in knowing about."
        },
        {
          "kind": "text",
          "content": "#### Documentation Comments as Tests"
        },
        {
          "kind": "text",
          "content": "Adding example code blocks in your documentation comments can help demonstrate\nhow to use your library, and doing so has an additional bonus: running `cargo\ntest` will run the code examples in your documentation as tests! Nothing is\nbetter than documentation with examples. But nothing is worse than examples\nthat don’t work because the code has changed since the documentation was\nwritten. If we run `cargo test` with the documentation for the `add_one`\nfunction from Listing 14-1, we will see a section in the test results that looks\nlike this:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo test\ncopy just the doc-tests section below\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s"
          }
        },
        {
          "kind": "text",
          "content": "Now, if we change either the function or the example so the `assert_eq!` in the\nexample panics and run `cargo test` again, we’ll see that the doc tests catch\nthat the example and the code are out of sync with each other!"
        },
        {
          "kind": "text",
          "content": "#### Commenting Contained Items"
        },
        {
          "kind": "text",
          "content": "The style of doc comment `//!` adds documentation to the item that contains the\ncomments rather than to the items following the comments. We typically use\nthese doc comments inside the crate root file (_src/lib.rs_ by convention) or\ninside a module to document the crate or the module as a whole."
        },
        {
          "kind": "text",
          "content": "For example, to add documentation that describes the purpose of the `my_crate`\ncrate that contains the `add_one` function, we add documentation comments that\nstart with `//!` to the beginning of the _src/lib.rs_ file, as shown in Listing\n14-2:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-2\" file-name=\"src/lib.rs\" caption=\"Documentation for the `my_crate` crate as a whole\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-02/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Notice there isn’t any code after the last line that begins with `//!`. Because\nwe started the comments with `//!` instead of `///`, we’re documenting the item\nthat contains this comment rather than an item that follows this comment. In\nthis case, that item is the _src/lib.rs_ file, which is the crate root. These\ncomments describe the entire crate."
        },
        {
          "kind": "text",
          "content": "When we run `cargo doc --open`, these comments will display on the front\npage of the documentation for `my_crate` above the list of public items in the\ncrate, as shown in Figure 14-2."
        },
        {
          "kind": "text",
          "content": "<img alt=\"Rendered HTML documentation with a comment for the crate as a whole\" src=\"img/trpl14-02.png\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 14-2: Rendered documentation for `my_crate`,\nincluding the comment describing the crate as a whole</span>"
        },
        {
          "kind": "text",
          "content": "Documentation comments within items are useful for describing crates and\nmodules especially. Use them to explain the overall purpose of the container to\nhelp your users understand the crate’s organization."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "e2df0a8a-7bdd-40a3-9918-e4a856978cbb",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are publishing a library, and you want to write documentation about the entire library at the top of the `lib.rs` file.\nThe documentation should be prefixed with the following comment syntax:\n",
                  "distractors": [
                    "`///`",
                    "`//`"
                  ]
                },
                "answer": {
                  "answer": "`//!`"
                },
                "context": "`//!` is appropriate for module-level documentation, while `///` is for documenting individual items like functions.\n"
              },
              {
                "id": "cfb65011-0578-4032-8aaa-b346b091602b",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are creating a library `worldly` with the following function `lib.rs`:\n\n    /// Adds the string \"world\" to `s`.\n    ///\n    /// # Example\n    /// ```\n    /// let mut s = String::new();\n    /// worldly::add_world(&mut s);\n    /// assert_eq!(s, \"Hello world\");\n    /// ```\n    pub fn add_world(s: &mut String) {\n        s.push_str(\"world\");\n    }\n\n    #[test]\n    fn test_add_world() {\n        let mut s = String::new();\n        add_world(&mut s);\n        assert_eq!(s, \"world\");\n    }\n\nIf you run `cargo test`, will any test fail?\n",
                  "distractors": [
                    "No"
                  ]
                },
                "answer": {
                  "answer": "Yes"
                },
                "context": "The incorrect example will be run as a doc-test, and cause `cargo test` to fail.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "### Exporting a Convenient Public API with `pub use`"
        },
        {
          "kind": "text",
          "content": "The structure of your public API is a major consideration when publishing a\ncrate. People who use your crate are less familiar with the structure than you\nare and might have difficulty finding the pieces they want to use if your crate\nhas a large module hierarchy."
        },
        {
          "kind": "text",
          "content": "In Chapter 7, we covered how to make items public using the `pub` keyword, and\nbring items into a scope with the `use` keyword. However, the structure that\nmakes sense to you while you’re developing a crate might not be very convenient\nfor your users. You might want to organize your structs in a hierarchy\ncontaining multiple levels, but then people who want to use a type you’ve\ndefined deep in the hierarchy might have trouble finding out that type exists.\nThey might also be annoyed at having to enter `use`\n`my_crate::some_module::another_module::UsefulType;` rather than `use`\n`my_crate::UsefulType;`."
        },
        {
          "kind": "text",
          "content": "The good news is that if the structure _isn’t_ convenient for others to use\nfrom another library, you don’t have to rearrange your internal organization:\ninstead, you can re-export items to make a public structure that’s different\nfrom your private structure by using `pub use`. *Re-exporting* takes a public\nitem in one location and makes it public in another location, as if it were\ndefined in the other location instead."
        },
        {
          "kind": "text",
          "content": "For example, say we made a library named `art` for modeling artistic concepts.\nWithin this library are two modules: a `kinds` module containing two enums\nnamed `PrimaryColor` and `SecondaryColor` and a `utils` module containing a\nfunction named `mix`, as shown in Listing 14-3:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-3\" file-name=\"src/lib.rs\" caption=\"An `art` library with items organized into `kinds` and `utils` modules\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "test_harness"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-03/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Figure 14-3 shows what the front page of the documentation for this crate\ngenerated by `cargo doc` would look like:"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules\" src=\"img/trpl14-03.png\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 14-3: Front page of the documentation for `art`\nthat lists the `kinds` and `utils` modules</span>"
        },
        {
          "kind": "text",
          "content": "Note that the `PrimaryColor` and `SecondaryColor` types aren’t listed on the\nfront page, nor is the `mix` function. We have to click `kinds` and `utils` to\nsee them."
        },
        {
          "kind": "text",
          "content": "Another crate that depends on this library would need `use` statements that\nbring the items from `art` into scope, specifying the module structure that’s\ncurrently defined. Listing 14-4 shows an example of a crate that uses the\n`PrimaryColor` and `mix` items from the `art` crate:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-4\" file-name=\"src/main.rs\" caption=\"A crate using the `art` crate’s items with its internal structure exported\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-04/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The author of the code in Listing 14-4, which uses the `art` crate, had to\nfigure out that `PrimaryColor` is in the `kinds` module and `mix` is in the\n`utils` module. The module structure of the `art` crate is more relevant to\ndevelopers working on the `art` crate than to those using it. The internal\nstructure doesn’t contain any useful information for someone trying to\nunderstand how to use the `art` crate, but rather causes confusion because\ndevelopers who use it have to figure out where to look, and must specify the\nmodule names in the `use` statements."
        },
        {
          "kind": "text",
          "content": "To remove the internal organization from the public API, we can modify the\n`art` crate code in Listing 14-3 to add `pub use` statements to re-export the\nitems at the top level, as shown in Listing 14-5:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-5\" file-name=\"src/lib.rs\" caption=\"Adding `pub use` statements to re-export items\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-05/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The API documentation that `cargo doc` generates for this crate will now list\nand link re-exports on the front page, as shown in Figure 14-4, making the\n`PrimaryColor` and `SecondaryColor` types and the `mix` function easier to find."
        },
        {
          "kind": "text",
          "content": "<img alt=\"Rendered documentation for the `art` crate with the re-exports on the front page\" src=\"img/trpl14-04.png\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 14-4: The front page of the documentation for `art`\nthat lists the re-exports</span>"
        },
        {
          "kind": "text",
          "content": "The `art` crate users can still see and use the internal structure from Listing\n14-3 as demonstrated in Listing 14-4, or they can use the more convenient\nstructure in Listing 14-5, as shown in Listing 14-6:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-6\" file-name=\"src/main.rs\" caption=\"A program using the re-exported items from the `art` crate\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In cases where there are many nested modules, re-exporting the types at the top\nlevel with `pub use` can make a significant difference in the experience of\npeople who use the crate. Another common use of `pub use` is to re-export\ndefinitions of a dependency in the current crate to make that crate's\ndefinitions part of your crate’s public API."
        },
        {
          "kind": "text",
          "content": "Creating a useful public API structure is more of an art than a science, and\nyou can iterate to find the API that works best for your users. Choosing `pub\nuse` gives you flexibility in how you structure your crate internally and\ndecouples that internal structure from what you present to your users. Look at\nsome of the code of crates you’ve installed to see if their internal structure\ndiffers from their public API."
        },
        {
          "kind": "text",
          "content": "### Setting Up a Crates.io Account"
        },
        {
          "kind": "text",
          "content": "Before you can publish any crates, you need to create an account on\n[crates.io](https://crates.io/)<!-- ignore --> and get an API token. To do so,\nvisit the home page at [crates.io](https://crates.io/)<!-- ignore --> and log\nin via a GitHub account. (The GitHub account is currently a requirement, but\nthe site might support other ways of creating an account in the future.) Once\nyou’re logged in, visit your account settings at\n[https://crates.io/me/](https://crates.io/me/)<!-- ignore --> and retrieve your\nAPI key. Then run the `cargo login` command and paste your API key when prompted, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo login\nabcdefghijklmnopqrstuvwxyz012345"
          }
        },
        {
          "kind": "text",
          "content": "This command will inform Cargo of your API token and store it locally in\n_~/.cargo/credentials_. Note that this token is a _secret_: do not share it\nwith anyone else. If you do share it with anyone for any reason, you should\nrevoke it and generate a new token on [crates.io](https://crates.io/)<!-- ignore\n-->."
        },
        {
          "kind": "text",
          "content": "### Adding Metadata to a New Crate"
        },
        {
          "kind": "text",
          "content": "Let’s say you have a crate you want to publish. Before publishing, you’ll need\nto add some metadata in the `[package]` section of the crate’s _Cargo.toml_\nfile."
        },
        {
          "kind": "text",
          "content": "Your crate will need a unique name. While you’re working on a crate locally,\nyou can name a crate whatever you’d like. However, crate names on\n[crates.io](https://crates.io/)<!-- ignore --> are allocated on a first-come,\nfirst-served basis. Once a crate name is taken, no one else can publish a crate\nwith that name. Before attempting to publish a crate, search for the name you\nwant to use. If the name has been used, you will need to find another name and\nedit the `name` field in the _Cargo.toml_ file under the `[package]` section to\nuse the new name for publishing, like so:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[package]\nname = \"guessing_game\""
          }
        },
        {
          "kind": "text",
          "content": "Even if you’ve chosen a unique name, when you run `cargo publish` to publish\nthe crate at this point, you’ll get a warning and then an error:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\nCreate a new package with an unregistered name, making no further modifications\nto the generated package, so it is missing the description and license fields.\ncargo publish\ncopy just the relevant lines below\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo publish\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error (status 400 Bad Request): missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for more information on configuring these fields"
          }
        },
        {
          "kind": "text",
          "content": "This results in an error because you’re missing some crucial information: a\ndescription and license are required so people will know what your crate does\nand under what terms they can use it. In _Cargo.toml_, add a description that's\njust a sentence or two, because it will appear with your crate in search\nresults. For the `license` field, you need to give a _license identifier value_.\nThe [Linux Foundation’s Software Package Data Exchange (SPDX)][spdx] lists the\nidentifiers you can use for this value. For example, to specify that you’ve\nlicensed your crate using the MIT License, add the `MIT` identifier:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[package]\nname = \"guessing_game\"\nlicense = \"MIT\""
          }
        },
        {
          "kind": "text",
          "content": "If you want to use a license that doesn’t appear in the SPDX, you need to place\nthe text of that license in a file, include the file in your project, and then\nuse `license-file` to specify the name of that file instead of using the\n`license` key."
        },
        {
          "kind": "text",
          "content": "Guidance on which license is appropriate for your project is beyond the scope\nof this book. Many people in the Rust community license their projects in the\nsame way as Rust by using a dual license of `MIT OR Apache-2.0`. This practice\ndemonstrates that you can also specify multiple license identifiers separated\nby `OR` to have multiple licenses for your project."
        },
        {
          "kind": "text",
          "content": "With a unique name, the version, your description, and a license added, the\n_Cargo.toml_ file for a project that is ready to publish might look like this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2024\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\"\n\n[dependencies]"
          }
        },
        {
          "kind": "text",
          "content": "[Cargo’s documentation](https://doc.rust-lang.org/cargo/) describes other\nmetadata you can specify to ensure others can discover and use your crate more\neasily."
        },
        {
          "kind": "text",
          "content": "### Publishing to Crates.io"
        },
        {
          "kind": "text",
          "content": "Now that you’ve created an account, saved your API token, chosen a name for\nyour crate, and specified the required metadata, you’re ready to publish!\nPublishing a crate uploads a specific version to\n[crates.io](https://crates.io/)<!-- ignore --> for others to use."
        },
        {
          "kind": "text",
          "content": "Be careful, because a publish is _permanent_. The version can never be\noverwritten, and the code cannot be deleted. One major goal of\n[crates.io](https://crates.io/)<!-- ignore --> is to act as a permanent archive\nof code so that builds of all projects that depend on crates from\n[crates.io](https://crates.io/)<!-- ignore --> will continue to work. Allowing\nversion deletions would make fulfilling that goal impossible. However, there is\nno limit to the number of crate versions you can publish."
        },
        {
          "kind": "text",
          "content": "Run the `cargo publish` command again. It should succeed now:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ngo to some valid crate, publish a new version\ncargo publish\ncopy just the relevant lines below\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo publish\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)"
          }
        },
        {
          "kind": "text",
          "content": "Congratulations! You’ve now shared your code with the Rust community, and\nanyone can easily add your crate as a dependency of their project."
        },
        {
          "kind": "text",
          "content": "### Publishing a New Version of an Existing Crate"
        },
        {
          "kind": "text",
          "content": "When you’ve made changes to your crate and are ready to release a new version,\nyou change the `version` value specified in your _Cargo.toml_ file and\nrepublish. Use the [Semantic Versioning rules][semver] to decide what an\nappropriate next version number is based on the kinds of changes you’ve made.\nThen run `cargo publish` to upload the new version."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"removing-versions-from-cratesio-with-cargo-yank\"></a>"
        },
        {
          "kind": "text",
          "content": "### Deprecating Versions from Crates.io with `cargo yank`"
        },
        {
          "kind": "text",
          "content": "Although you can’t remove previous versions of a crate, you can prevent any\nfuture projects from adding them as a new dependency. This is useful when a\ncrate version is broken for one reason or another. In such situations, Cargo\nsupports yanking a crate version."
        },
        {
          "kind": "text",
          "content": "_Yanking_ a version prevents new projects from depending on that version while\nallowing all existing projects that depend on it to continue. Essentially, a\nyank means that all projects with a _Cargo.lock_ will not break, and any future\n_Cargo.lock_ files generated will not use the yanked version."
        },
        {
          "kind": "text",
          "content": "To yank a version of a crate, in the directory of the crate that you’ve\npreviously published, run `cargo yank` and specify which version you want to\nyank. For example, if we've published a crate named `guessing_game` version\n1.0.1 and we want to yank it, in the project directory for `guessing_game` we'd\nrun:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration:\ncargo yank carol-test --version 2.1.0\ncargo yank carol-test --version 2.1.0 --undo\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo yank --vers 1.0.1\n    Updating crates.io index\n        Yank guessing_game@1.0.1"
          }
        },
        {
          "kind": "text",
          "content": "By adding `--undo` to the command, you can also undo a yank and allow projects\nto start depending on a version again:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo yank --vers 1.0.1 --undo\n    Updating crates.io index\n      Unyank guessing_game@1.0.1"
          }
        },
        {
          "kind": "text",
          "content": "A yank _does not_ delete any code. It cannot, for example, delete accidentally\nuploaded secrets. If that happens, you must reset those secrets immediately."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "7e4eeb62-55c2-443b-a8cc-fba060501245",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are publishing a library `foobar v0.1.0`. After running `cargo publish`, you realize there is a bug in one\nof your functions. Which of the following best describes how to overwrite the published crate at the same `v0.1.0` version?\n",
                  "distractors": [
                    "Add the flag `--overwrite-published` to the `cargo publish` command",
                    "Login to Crates.io and delete `v0.1.0` of the published crate",
                    "Run `cargo yank` and then run `cargo publish`"
                  ]
                },
                "answer": {
                  "answer": "It is impossible to overwrite a published crate at a given version"
                },
                "context": "Crates.io does not allow overwriting of published versions. The best option in these situations is to yank the buggy version\nand then publish a new version such as `v0.1.1`.\n"
              },
              {
                "id": "84ac16a8-2460-4baf-8913-06da6e3603e6",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following steps is NOT required to publish a crate to Crates.io?\n",
                  "distractors": [
                    "Adding a license to the `[package]` section of `Cargo.toml`",
                    "Registering and logging in to Crates.io",
                    "Selecting a crate name that is not registered on Crates.io"
                  ]
                },
                "answer": {
                  "answer": "Adding documentation to each public function in the crate"
                },
                "context": "Adding documentation to public functions is certainly recommended, but not required by default. Note that if you\nwant Rust to treat undocumented code as an error, you can add the following statement at the root of your library:\n\n```\n#![deny(missing_docs)]\n```\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[spdx]: http://spdx.org/licenses/\n[semver]: http://semver.org/"
        }
      ]
    },
    {
      "title": "Cargo Workspaces",
      "file": "ch14-03-cargo-workspaces.md",
      "elements": [
        {
          "kind": "text",
          "content": "In Chapter 12, we built a package that included a binary crate and a library\ncrate. As your project develops, you might find that the library crate\ncontinues to get bigger and you want to split your package further into\nmultiple library crates. Cargo offers a feature called _workspaces_ that can\nhelp manage multiple related packages that are developed in tandem."
        },
        {
          "kind": "text",
          "content": "### Creating a Workspace"
        },
        {
          "kind": "text",
          "content": "A _workspace_ is a set of packages that share the same _Cargo.lock_ and output\ndirectory. Let’s make a project using a workspace—we’ll use trivial code so we\ncan concentrate on the structure of the workspace. There are multiple ways to\nstructure a workspace, so we'll just show one common way. We’ll have a\nworkspace containing a binary and two libraries. The binary, which will provide\nthe main functionality, will depend on the two libraries. One library will\nprovide an `add_one` function and the other library an `add_two` function.\nThese three crates will be part of the same workspace. We’ll start by creating\na new directory for the workspace:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ mkdir add\n$ cd add"
          }
        },
        {
          "kind": "text",
          "content": "Next, in the _add_ directory, we create the _Cargo.toml_ file that will\nconfigure the entire workspace. This file won’t have a `[package]` section.\nInstead, it will start with a `[workspace]` section that will allow us to add\nmembers to the workspace. We also make a point to use the latest and greatest\nversion of Cargo’s resolver algorithm in our workspace by setting the\n`resolver` to `\"3\"`."
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch14-more-about-cargo/no-listing-01-workspace/add/Cargo.toml}}"
          }
        },
        {
          "kind": "text",
          "content": "Next, we’ll create the `adder` binary crate by running `cargo new` within the\n_add_ directory:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-01-adder-crate/add\nremove `members = [\"adder\"]` from Cargo.toml\nrm -rf adder\ncargo new adder\ncopy output below\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new adder\n    Creating binary (application) `adder` package\n      Adding `adder` as member of workspace at `file:///projects/add`"
          }
        },
        {
          "kind": "text",
          "content": "Running `cargo new` inside a workspace also automatically adds the newly created\npackage to the `members` key in the `[workspace]` definition in the workspace\n`Cargo.toml`, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch14-more-about-cargo/output-only-01-adder-crate/add/Cargo.toml}}"
          }
        },
        {
          "kind": "text",
          "content": "At this point, we can build the workspace by running `cargo build`. The files\nin your _add_ directory should look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "├── Cargo.lock\n├── Cargo.toml\n├── adder\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── target"
          }
        },
        {
          "kind": "text",
          "content": "The workspace has one _target_ directory at the top level that the compiled\nartifacts will be placed into; the `adder` package doesn’t have its own\n_target_ directory. Even if we were to run `cargo build` from inside the\n_adder_ directory, the compiled artifacts would still end up in _add/target_\nrather than _add/adder/target_. Cargo structures the _target_ directory in a\nworkspace like this because the crates in a workspace are meant to depend on\neach other. If each crate had its own _target_ directory, each crate would have\nto recompile each of the other crates in the workspace to place the artifacts\nin its own _target_ directory. By sharing one _target_ directory, the crates\ncan avoid unnecessary rebuilding."
        },
        {
          "kind": "text",
          "content": "### Creating the Second Package in the Workspace"
        },
        {
          "kind": "text",
          "content": "Next, let’s create another member package in the workspace and call it\n`add_one`. Generate a new library crate named `add_one`:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-02-add-one/add\nremove `\"add_one\"` from `members` list in Cargo.toml\nrm -rf add_one\ncargo new add_one --lib\ncopy output below\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new add_one --lib\n    Creating library `add_one` package\n      Adding `add_one` as member of workspace at `file:///projects/add`"
          }
        },
        {
          "kind": "text",
          "content": "The top-level _Cargo.toml_ will now include the _add_one_ path in the `members`\nlist:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/Cargo.toml}}"
          }
        },
        {
          "kind": "text",
          "content": "Your _add_ directory should now have these directories and files:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "├── Cargo.lock\n├── Cargo.toml\n├── add_one\n│   ├── Cargo.toml\n│   └── src\n│       └── lib.rs\n├── adder\n│   ├── Cargo.toml\n│   └── src\n│       └── main.rs\n└── target"
          }
        },
        {
          "kind": "text",
          "content": "In the _add_one/src/lib.rs_ file, let’s add an `add_one` function:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: add_one/src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/add_one/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Now we can have the `adder` package with our binary depend on the `add_one`\npackage that has our library. First we’ll need to add a path dependency on\n`add_one` to _adder/Cargo.toml_."
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: adder/Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/adder/Cargo.toml:6:7}}"
          }
        },
        {
          "kind": "text",
          "content": "Cargo doesn’t assume that crates in a workspace will depend on each other, so\nwe need to be explicit about the dependency relationships."
        },
        {
          "kind": "text",
          "content": "Next, let’s use the `add_one` function (from the `add_one` crate) in the\n`adder` crate. Open the _adder/src/main.rs_ file and change the `main`\nfunction to call the `add_one` function, as in Listing 14-7."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"14-7\" file-name=\"adder/src/main.rs\" caption=\"Using the `add_one` library crate in the `adder` crate\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-07/add/adder/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s build the workspace by running `cargo build` in the top-level _add_\ndirectory!"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s"
          }
        },
        {
          "kind": "text",
          "content": "To run the binary crate from the _add_ directory, we can specify which\npackage in the workspace we want to run by using the `-p` argument and the\npackage name with `cargo run`:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo run -p adder\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run -p adder\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running `target/debug/adder`\nHello, world! 10 plus one is 11!"
          }
        },
        {
          "kind": "text",
          "content": "This runs the code in _adder/src/main.rs_, which depends on the `add_one` crate."
        },
        {
          "kind": "text",
          "content": "#### Depending on an External Package in a Workspace"
        },
        {
          "kind": "text",
          "content": "Notice that the workspace has only one _Cargo.lock_ file at the top level,\nrather than having a _Cargo.lock_ in each crate’s directory. This ensures that\nall crates are using the same version of all dependencies. If we add the `rand`\npackage to the _adder/Cargo.toml_ and _add_one/Cargo.toml_ files, Cargo will\nresolve both of those to one version of `rand` and record that in the one\n_Cargo.lock_. Making all crates in the workspace use the same dependencies\nmeans the crates will always be compatible with each other. Let’s add the\n`rand` crate to the `[dependencies]` section in the _add_one/Cargo.toml_ file\nso we can use the `rand` crate in the `add_one` crate:"
        },
        {
          "kind": "text",
          "content": "<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n-->"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: add_one/Cargo.toml</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add/add_one/Cargo.toml:6:7}}"
          }
        },
        {
          "kind": "text",
          "content": "We can now add `use rand;` to the _add_one/src/lib.rs_ file, and building the\nwhole workspace by running `cargo build` in the _add_ directory will bring in\nand compile the `rand` crate. We will get one warning because we aren’t\nreferring to the `rand` we brought into scope:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n   --snip--\n   Compiling rand v0.8.5\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\nwarning: unused import: `rand`\n --> add_one/src/lib.rs:1:5\n  |\n1 | use rand;\n  |     ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `add_one` (lib) generated 1 warning (run `cargo fix --lib -p add_one` to apply 1 suggestion)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.95s"
          }
        },
        {
          "kind": "text",
          "content": "The top-level _Cargo.lock_ now contains information about the dependency of\n`add_one` on `rand`. However, even though `rand` is used somewhere in the\nworkspace, we can’t use it in other crates in the workspace unless we add\n`rand` to their _Cargo.toml_ files as well. For example, if we add `use rand;`\nto the _adder/src/main.rs_ file for the `adder` package, we’ll get an error:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-03-use-rand/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n  --snip--\n   Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand`\n --> adder/src/main.rs:2:5\n  |\n2 | use rand;\n  |     ^^^^ no external crate `rand`"
          }
        },
        {
          "kind": "text",
          "content": "To fix this, edit the _Cargo.toml_ file for the `adder` package and indicate\nthat `rand` is a dependency for it as well. Building the `adder` package will\nadd `rand` to the list of dependencies for `adder` in _Cargo.lock_, but no\nadditional copies of `rand` will be downloaded. Cargo will ensure that every\ncrate in every package in the workspace using the `rand` package will use the\nsame version as long as they specify compatible versions of `rand`, saving us\nspace and ensuring that the crates in the workspace will be compatible with each\nother."
        },
        {
          "kind": "text",
          "content": "If crates in the workspace specify incompatible versions of the same dependency,\nCargo will resolve each of them, but will still try to resolve as few versions\nas possible."
        },
        {
          "kind": "text",
          "content": "Note that Cargo only ensures compatibility within the rules of [Semantic Versioning].\nFor example, say a workspace has one crate that depends on `rand` 0.8.0, and another crate\nthat depends on `rand` 0.8.1. The semver rules say that 0.8.1 is compatible with 0.8.0,\nso both crates will depend on 0.8.1 (or potentially a more recent patch, like 0.8.2). But if\none crate depends on `rand` 0.7.0 and another on `rand` 0.8.0, those versions are semver-incompatible.\nTherefore, Cargo will use a different version of `rand` for each crate."
        },
        {
          "kind": "text",
          "content": "#### Adding a Test to a Workspace"
        },
        {
          "kind": "text",
          "content": "For another enhancement, let’s add a test of the `add_one::add_one` function\nwithin the `add_one` crate:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: add_one/src/lib.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add/add_one/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "Now run `cargo test` in the top-level _add_ directory. Running `cargo test` in\na workspace structured like this one will run the tests for all the crates in\nthe workspace:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test\ncopy output below; the output updating script doesn't handle subdirectories in\npaths properly\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo test\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.20s\n     Running unittests src/lib.rs (target/debug/deps/add_one-93c49ee75dc46543)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/adder-3a47283c568d2b6a)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s"
          }
        },
        {
          "kind": "text",
          "content": "The first section of the output shows that the `it_works` test in the `add_one`\ncrate passed. The next section shows that zero tests were found in the `adder`\ncrate, and then the last section shows zero documentation tests were found in\nthe `add_one` crate."
        },
        {
          "kind": "text",
          "content": "We can also run tests for one particular crate in a workspace from the\ntop-level directory by using the `-p` flag and specifying the name of the crate\nwe want to test:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test -p add_one\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo test -p add_one\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests src/lib.rs (target/debug/deps/add_one-93c49ee75dc46543)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s"
          }
        },
        {
          "kind": "text",
          "content": "This output shows `cargo test` only ran the tests for the `add_one` crate and\ndidn’t run the `adder` crate tests."
        },
        {
          "kind": "text",
          "content": "If you publish the crates in the workspace to [crates.io](https://crates.io/),\neach crate in the workspace will need to be published separately. Like `cargo\ntest`, we can publish a particular crate in our workspace by using the `-p`\nflag and specifying the name of the crate we want to publish."
        },
        {
          "kind": "text",
          "content": "For additional practice, add an `add_two` crate to this workspace in a similar\nway as the `add_one` crate!"
        },
        {
          "kind": "text",
          "content": "As your project grows, consider using a workspace: it enables you to work with\nsmaller, easier-to-understand components than one big blob of code. Furthermore,\nkeeping the crates in a workspace can make coordination between crates easier if\nthey are often changed at the same time."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "20846719-fe7b-48b8-abfd-9c5f1174472f",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider a workspace with the following structure:\n\n```\n├── Cargo.lock\n├── Cargo.toml\n└── crates\n    ├── a\n    |   ├── lib.rs\n    |   └── Cargo.toml\n    └── b\n        ├── lib.rs\n        └── Cargo.toml\n```\n\nWith the following content in each file:\n\n```\n// crates/b/lib.rs\npub fn f() {}\n```\n\n```toml\n# crates/a/Cargo.toml\n[dependencies]\nb = {path = \"../b\"}\n```\n\nWhich of the following is the correct path to refer to `f` inside of `a/lib.rs`?\n",
                  "distractors": [
                    "`crates::b::f`",
                    "`workspace::b::f`",
                    "`super::b::f`"
                  ]
                },
                "answer": {
                  "answer": "`b::f`"
                },
                "context": "From the perspective of `a`, `b` is an external crate like any other, so you don't use a prefix to access its items.\n"
              },
              {
                "id": "bc8a69b2-d9a8-4438-8657-391c3fda5ed9",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Consider a workspace with three packages `a`, `b`, and `c`. Their respective manifests are:\n\n```toml\n# a/Cargo.toml\n[dependencies]\nrand = \"0.8.4\"\n\n# b/Cargo.toml\n[dependencies]\nrand = \"0.7.3\"\n\n# c/Cargo.toml\n[dependencies]\nrand = \"0.8.5\"\n```\n\nHow many different versions of `rand` will be used when compiling all packages in the workspace? \nWrite your answer as a digit, e.g. 0, 1, so on.\n"
                },
                "answer": {
                  "answer": "2"
                },
                "context": "According to the rules of semantic versioning, `a` and `c` will both share the latest patch of the minor version `0.8`.\n`b` will use the latest patch of the minor version `0.7`. So two versions in total will be used.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[Semantic Versioning]: https://semver.org/"
        }
      ]
    },
    {
      "title": "Installing Binaries with `cargo install`",
      "file": "ch14-04-installing-binaries.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"installing-binaries-from-cratesio-with-cargo-install\"></a>"
        },
        {
          "kind": "text",
          "content": "The `cargo install` command allows you to install and use binary crates\nlocally. This isn’t intended to replace system packages; it’s meant to be a\nconvenient way for Rust developers to install tools that others have shared on\n[crates.io](https://crates.io/)<!-- ignore -->. Note that you can only install\npackages that have binary targets. A _binary target_ is the runnable program\nthat is created if the crate has a _src/main.rs_ file or another file specified\nas a binary, as opposed to a library target that isn’t runnable on its own but\nis suitable for including within other programs. Usually, crates have\ninformation in the _README_ file about whether a crate is a library, has a\nbinary target, or both."
        },
        {
          "kind": "text",
          "content": "All binaries installed with `cargo install` are stored in the installation\nroot’s _bin_ folder. If you installed Rust using _rustup.rs_ and don’t have any\ncustom configurations, this directory will be *$HOME/.cargo/bin*. Ensure that\ndirectory is in your `$PATH`to be able to run programs you’ve installed with`cargo install`."
        },
        {
          "kind": "text",
          "content": "For example, in Chapter 12 we mentioned that there’s a Rust implementation of\nthe `grep` tool called `ripgrep` for searching files. To install `ripgrep`, we\ncan run the following:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncargo install something you don't have, copy relevant output below\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo install ripgrep\n    Updating crates.io index\n  Downloaded ripgrep v14.1.1\n  Downloaded 1 crate (213.6 KB) in 0.40s\n  Installing ripgrep v14.1.1\n--snip--\n   Compiling grep v0.3.2\n    Finished `release` profile [optimized + debuginfo] target(s) in 6.73s\n  Installing ~/.cargo/bin/rg\n   Installed package `ripgrep v14.1.1` (executable `rg`)"
          }
        },
        {
          "kind": "text",
          "content": "The second-to-last line of the output shows the location and the name of the\ninstalled binary, which in the case of `ripgrep` is `rg`. As long as the\ninstallation directory is in your `$PATH`, as mentioned previously, you can\nthen run `rg --help` and start using a faster, Rustier tool for searching files!"
        }
      ]
    },
    {
      "title": "Extending Cargo with Custom Commands",
      "file": "ch14-05-extending-cargo.md",
      "elements": [
        {
          "kind": "text",
          "content": "Cargo is designed so you can extend it with new subcommands without having to\nmodify it. If a binary in your `$PATH` is named `cargo-something`, you can run\nit as if it were a Cargo subcommand by running `cargo something`. Custom\ncommands like this are also listed when you run `cargo --list`. Being able to\nuse `cargo install` to install extensions and then run them just like the\nbuilt-in Cargo tools is a super convenient benefit of Cargo’s design!"
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Sharing code with Cargo and [crates.io](https://crates.io/)<!-- ignore --> is\npart of what makes the Rust ecosystem useful for many different tasks. Rust’s\nstandard library is small and stable, but crates are easy to share, use, and\nimprove on a timeline different from that of the language. Don’t be shy about\nsharing code that’s useful to you on [crates.io](https://crates.io/)<!-- ignore\n-->; it’s likely that it will be useful to someone else as well!"
        }
      ]
    },
    {
      "title": "Smart Pointers",
      "file": "ch15-00-smart-pointers.md",
      "elements": [
        {
          "kind": "text",
          "content": "A _pointer_ is a general concept for a variable that contains an address in\nmemory. This address refers to, or “points at,” some other data. The most\ncommon kind of pointer in Rust is a reference, which you learned about in\nChapter 4. References are indicated by the `&` symbol and borrow the value they\npoint to. They don’t have any special capabilities other than referring to\ndata, and they have no overhead."
        },
        {
          "kind": "text",
          "content": "_Smart pointers_, on the other hand, are data structures that act like a\npointer but also have additional metadata and capabilities. The concept of\nsmart pointers isn’t unique to Rust: smart pointers originated in C++ and exist\nin other languages as well. Rust has a variety of smart pointers defined in the\nstandard library that provide functionality beyond that provided by references.\nTo explore the general concept, we’ll look at a couple of different examples of\nsmart pointers, including a _reference counting_ smart pointer type. This\npointer enables you to allow data to have multiple owners by keeping track of\nthe number of owners and, when no owners remain, cleaning up the data."
        },
        {
          "kind": "text",
          "content": "Rust, with its concept of ownership and borrowing, has an additional difference\nbetween references and smart pointers: while references only borrow data, in\nmany cases smart pointers _own_ the data they point to."
        },
        {
          "kind": "text",
          "content": "Though we didn’t call them as such at the time, we’ve already encountered a few\nsmart pointers in this book, including `String` and `Vec<T>` in Chapter 8. Both\nof these types count as smart pointers because they own some memory and allow\nyou to manipulate it. They also have metadata and extra capabilities or\nguarantees. `String`, for example, stores its capacity as metadata and has the\nextra ability to ensure its data will always be valid UTF-8."
        },
        {
          "kind": "text",
          "content": "Smart pointers are usually implemented using structs. Unlike an ordinary\nstruct, smart pointers implement the `Deref` and `Drop` traits. The `Deref`\ntrait allows an instance of the smart pointer struct to behave like a reference\nso you can write your code to work with either references or smart pointers.\nThe `Drop` trait allows you to customize the code that’s run when an instance\nof the smart pointer goes out of scope. In this chapter, we’ll discuss both of\nthese traits and demonstrate why they’re important to smart pointers."
        },
        {
          "kind": "text",
          "content": "Given that the smart pointer pattern is a general design pattern used\nfrequently in Rust, this chapter won’t cover every existing smart pointer. Many\nlibraries have their own smart pointers, and you can even write your own. We’ll\ncover the most common smart pointers in the standard library:"
        },
        {
          "kind": "text",
          "content": "- `Box<T>`, for allocating values on the heap\n- `Rc<T>`, a reference counting type that enables multiple ownership\n- `Ref<T>` and `RefMut<T>`, accessed through `RefCell<T>`, a type that enforces\nthe borrowing rules at runtime instead of compile time"
        },
        {
          "kind": "text",
          "content": "In addition, we’ll cover the _interior mutability_ pattern where an immutable\ntype exposes an API for mutating an interior value. We’ll also discuss\n_reference cycles_: how they can leak memory and how to prevent them."
        },
        {
          "kind": "text",
          "content": "Let’s dive in!"
        }
      ]
    },
    {
      "title": "Using `Box<T>` to Point to Data on the Heap",
      "file": "ch15-01-box.md",
      "elements": [
        {
          "kind": "text",
          "content": "The most straightforward smart pointer is a _box_, whose type is written\n`Box<T>`. Boxes allow you to store data on the heap rather than the stack. What\nremains on the stack is the pointer to the heap data. Refer to Chapter 4 to\nreview the difference between the stack and the heap."
        },
        {
          "kind": "text",
          "content": "Boxes don’t have performance overhead, other than storing their data on the\nheap instead of on the stack. But they don’t have many extra capabilities\neither. You’ll use them most often in these situations:"
        },
        {
          "kind": "text",
          "content": "- When you have a type whose size can’t be known at compile time and you want\nto use a value of that type in a context that requires an exact size\n- When you have a large amount of data and you want to transfer ownership but\nensure the data won’t be copied when you do so\n- When you want to own a value and you care only that it’s a type that\nimplements a particular trait rather than being of a specific type"
        },
        {
          "kind": "text",
          "content": "We’ll demonstrate the first situation in [“Enabling Recursive Types with\nBoxes”](#enabling-recursive-types-with-boxes)<!-- ignore -->. In the second\ncase, transferring ownership of a large amount of data can take a long time\nbecause the data is copied around on the stack. To improve performance in this\nsituation, we can store the large amount of data on the heap in a box. Then,\nonly the small amount of pointer data is copied around on the stack, while the\ndata it references stays in one place on the heap. The third case is known as a\n_trait object_, and [“Using Trait Objects That Allow for Values of Different\nTypes,”][trait-objects]<!-- ignore --> in Chapter 18 is devoted to that topic.\nSo what you learn here you’ll apply again in that section!"
        },
        {
          "kind": "text",
          "content": "### Using `Box<T>` to Store Data on the Heap"
        },
        {
          "kind": "text",
          "content": "Before we discuss the heap storage use case for `Box<T>`, we’ll cover the\nsyntax and how to interact with values stored within a `Box<T>`."
        },
        {
          "kind": "text",
          "content": "Listing 15-1 shows how to use a box to store an `i32` value on the heap."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-1\" file-name=\"src/main.rs\" caption=\"Storing an `i32` value on the heap using a box\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We define the variable `b` to have the value of a `Box` that points to the\nvalue `5`, which is allocated on the heap. This program will print `b = 5`; in\nthis case, we can access the data in the box similarly to how we would if this\ndata were on the stack. Just like any owned value, when a box goes out of\nscope, as `b` does at the end of `main`, it will be deallocated. The\ndeallocation happens both for the box (stored on the stack) and the data it\npoints to (stored on the heap)."
        },
        {
          "kind": "text",
          "content": "Putting a single value on the heap isn’t very useful, so you won’t use boxes by\nthemselves in this way very often. Having values like a single `i32` on the\nstack, where they’re stored by default, is more appropriate in the majority of\nsituations. Let’s look at a case where boxes allow us to define types that we\nwouldn’t be allowed to if we didn’t have boxes."
        },
        {
          "kind": "text",
          "content": "### Enabling Recursive Types with Boxes"
        },
        {
          "kind": "text",
          "content": "A value of a _recursive type_ can have another value of the same type as part of\nitself. Recursive types pose an issue because Rust needs to know at compile time\nhow much space a type takes up. However, the nesting of values of recursive\ntypes could theoretically continue infinitely, so Rust can’t know how much space\nthe value needs. Because boxes have a known size, we can enable recursive types\nby inserting a box in the recursive type definition."
        },
        {
          "kind": "text",
          "content": "As an example of a recursive type, let’s explore the _cons list_. This is a data\ntype commonly found in functional programming languages. The cons list type\nwe’ll define is straightforward except for the recursion; therefore, the\nconcepts in the example we’ll work with will be useful any time you get into\nmore complex situations involving recursive types."
        },
        {
          "kind": "text",
          "content": "#### More Information About the Cons List"
        },
        {
          "kind": "text",
          "content": "A _cons list_ is a data structure that comes from the Lisp programming language\nand its dialects, is made up of nested pairs, and is the Lisp version of a\nlinked list. Its name comes from the `cons` function (short for _construct\nfunction_) in Lisp that constructs a new pair from its two arguments. By\ncalling `cons` on a pair consisting of a value and another pair, we can\nconstruct cons lists made up of recursive pairs."
        },
        {
          "kind": "text",
          "content": "For example, here’s a pseudocode representation of a cons list containing the\nlist `1, 2, 3` with each pair in parentheses:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "(1, (2, (3, Nil)))"
          }
        },
        {
          "kind": "text",
          "content": "Each item in a cons list contains two elements: the value of the current item\nand the next item. The last item in the list contains only a value called `Nil`\nwithout a next item. A cons list is produced by recursively calling the `cons`\nfunction. The canonical name to denote the base case of the recursion is `Nil`.\nNote that this is not the same as the “null” or “nil” concept discussed in\nChapter 6, which is an invalid or absent value."
        },
        {
          "kind": "text",
          "content": "The cons list isn’t a commonly used data structure in Rust. Most of the time\nwhen you have a list of items in Rust, `Vec<T>` is a better choice to use.\nOther, more complex recursive data types _are_ useful in various situations,\nbut by starting with the cons list in this chapter, we can explore how boxes\nlet us define a recursive data type without much distraction."
        },
        {
          "kind": "text",
          "content": "Listing 15-2 contains an enum definition for a cons list. Note that this code\nwon’t compile yet because the `List` type doesn’t have a known size, which\nwe’ll demonstrate."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-2\" file-name=\"src/main.rs\" caption=\"The first attempt at defining an enum to represent a cons list data structure of `i32` values\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "> Note: We’re implementing a cons list that holds only `i32` values for the\n> purposes of this example. We could have implemented it using generics, as we\n> discussed in Chapter 10, to define a cons list type that could store values of\n> any type."
        },
        {
          "kind": "text",
          "content": "Using the `List` type to store the list `1, 2, 3` would look like the code in\nListing 15-3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-3\" file-name=\"src/main.rs\" caption=\"Using the `List` enum to store the list `1, 2, 3`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The first `Cons` value holds `1` and another `List` value. This `List` value is\nanother `Cons` value that holds `2` and another `List` value. This `List` value\nis one more `Cons` value that holds `3` and a `List` value, which is finally\n`Nil`, the non-recursive variant that signals the end of the list."
        },
        {
          "kind": "text",
          "content": "If we try to compile the code in Listing 15-3, we get the error shown in\nListing 15-4."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-4\" file-name=\"output.txt\" caption=\"The error we get when attempting to define a recursive enum\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-03/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The error shows this type “has infinite size.” The reason is that we’ve defined\n`List` with a variant that is recursive: it holds another value of itself\ndirectly. As a result, Rust can’t figure out how much space it needs to store a\n`List` value. Let’s break down why we get this error. First we’ll look at how\nRust decides how much space it needs to store a value of a non-recursive type."
        },
        {
          "kind": "text",
          "content": "#### Computing the Size of a Non-Recursive Type"
        },
        {
          "kind": "text",
          "content": "Recall the `Message` enum we defined in Listing 6-2 when we discussed enum\ndefinitions in Chapter 6:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "To determine how much space to allocate for a `Message` value, Rust goes\nthrough each of the variants to see which variant needs the most space. Rust\nsees that `Message::Quit` doesn’t need any space, `Message::Move` needs enough\nspace to store two `i32` values, and so forth. Because only one variant will be\nused, the most space a `Message` value will need is the space it would take to\nstore the largest of its variants."
        },
        {
          "kind": "text",
          "content": "Contrast this with what happens when Rust tries to determine how much space a\nrecursive type like the `List` enum in Listing 15-2 needs. The compiler starts\nby looking at the `Cons` variant, which holds a value of type `i32` and a value\nof type `List`. Therefore, `Cons` needs an amount of space equal to the size of\nan `i32` plus the size of a `List`. To figure out how much memory the `List`\ntype needs, the compiler looks at the variants, starting with the `Cons`\nvariant. The `Cons` variant holds a value of type `i32` and a value of type\n`List`, and this process continues infinitely, as shown in Figure 15-1."
        },
        {
          "kind": "text",
          "content": "<img alt=\"An infinite Cons list\" src=\"img/trpl15-01.svg\" class=\"center\" style=\"width: 50%;\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 15-1: An infinite `List` consisting of infinite\n`Cons` variants</span>"
        },
        {
          "kind": "text",
          "content": "#### Using `Box<T>` to Get a Recursive Type with a Known Size"
        },
        {
          "kind": "text",
          "content": "Because Rust can’t figure out how much space to allocate for recursively\ndefined types, the compiler gives an error with this helpful suggestion:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\nafter doing automatic regeneration, look at listings/ch15-smart-pointers/listing-15-03/output.txt and copy the relevant line\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n  |\n2 |     Cons(i32, Box<List>),\n  |               ++++    +"
          }
        },
        {
          "kind": "text",
          "content": "In this suggestion, _indirection_ means that instead of storing a value\ndirectly, we should change the data structure to store the value indirectly by\nstoring a pointer to the value instead."
        },
        {
          "kind": "text",
          "content": "Because a `Box<T>` is a pointer, Rust always knows how much space a `Box<T>`\nneeds: a pointer’s size doesn’t change based on the amount of data it’s\npointing to. This means we can put a `Box<T>` inside the `Cons` variant instead\nof another `List` value directly. The `Box<T>` will point to the next `List`\nvalue that will be on the heap rather than inside the `Cons` variant.\nConceptually, we still have a list, created with lists holding other lists, but\nthis implementation is now more like placing the items next to one another\nrather than inside one another."
        },
        {
          "kind": "text",
          "content": "We can change the definition of the `List` enum in Listing 15-2 and the usage\nof the `List` in Listing 15-3 to the code in Listing 15-5, which will compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-5\" file-name=\"src/main.rs\" caption=\"Definition of `List` that uses `Box<T>` in order to have a known size\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-05/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `Cons` variant needs the size of an `i32` plus the space to store the\nbox’s pointer data. The `Nil` variant stores no values, so it needs less space\nthan the `Cons` variant. We now know that any `List` value will take up the\nsize of an `i32` plus the size of a box’s pointer data. By using a box, we’ve\nbroken the infinite, recursive chain, so the compiler can figure out the size\nit needs to store a `List` value. Figure 15-2 shows what the `Cons` variant\nlooks like now."
        },
        {
          "kind": "text",
          "content": "<img alt=\"A finite Cons list\" src=\"img/trpl15-02.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 15-2: A `List` that is not infinitely sized\nbecause `Cons` holds a `Box`</span>"
        },
        {
          "kind": "text",
          "content": "Boxes provide only the indirection and heap allocation; they don’t have any\nother special capabilities, like those we’ll see with the other smart pointer\ntypes. They also don’t have the performance overhead that these special\ncapabilities incur, so they can be useful in cases like the cons list where the\nindirection is the only feature we need. We’ll look at more use cases for boxes\nin Chapter 18."
        },
        {
          "kind": "text",
          "content": "The `Box<T>` type is a smart pointer because it implements the `Deref` trait,\nwhich allows `Box<T>` values to be treated like references. When a `Box<T>`\nvalue goes out of scope, the heap data that the box is pointing to is cleaned\nup as well because of the `Drop` trait implementation. These two traits will be\neven more important to the functionality provided by the other smart pointer\ntypes we’ll discuss in the rest of this chapter. Let’s explore these two traits\nin more detail."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "6f3c2a68-24f7-439b-9fe0-426abd27e487",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let mut n = 1;\n    let b = Box::new(&mut n);\n    **b += 1;\n    println!(\"{}\", n);\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "2"
                },
                "context": "A box can hold a mutable reference, so dereferencing `b` twice gets back to `n`.\n"
              },
              {
                "id": "57595a80-c79f-4aae-a1d4-cdaf212d7c21",
                "type": "ShortAnswer",
                "prompt": {
                  "prompt": "Say we have a program with a variable:\n\n```\nlet x: [Box<(usize, usize)>; 4] = /* ... */\n```\n\nFor a compile target with a 64-bit architecture, what is the minimum possible size in memory (in bytes) of `x` on the stack? \nWrite your answer in digits, e.g. 0, 1, so on.\n"
                },
                "answer": {
                  "answer": "32"
                },
                "context": "A box contains a pointer, which is 8 bytes on a 64-bit architecture. An array of 4 pointers is therefore at least 4 * 8 = 32 bytes.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[trait-objects]: ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types"
        }
      ]
    },
    {
      "title": "Treating Smart Pointers Like Regular References with `Deref`",
      "file": "ch15-02-deref.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"treating-smart-pointers-like-regular-references-with-the-deref-trait\"></a>"
        },
        {
          "kind": "text",
          "content": "Implementing the `Deref` trait allows you to customize the behavior of the\n_dereference operator_ `*` (not to be confused with the multiplication or glob\noperator). By implementing `Deref` in such a way that a smart pointer can be\ntreated like a regular reference, you can write code that operates on\nreferences and use that code with smart pointers too."
        },
        {
          "kind": "text",
          "content": "Let’s first look at how the dereference operator works with regular references.\nThen we’ll try to define a custom type that behaves like `Box<T>`, and see why\nthe dereference operator doesn’t work like a reference on our newly defined\ntype. We’ll explore how implementing the `Deref` trait makes it possible for\nsmart pointers to work in ways similar to references. Then we’ll look at\nRust’s _deref coercion_ feature and how it lets us work with either references\nor smart pointers."
        },
        {
          "kind": "text",
          "content": "> Note: There’s one big difference between the `MyBox<T>` type we’re about to\n> build and the real `Box<T>`: our version will not store its data on the heap.\n> We are focusing this example on `Deref`, so where the data is actually stored\n> is less important than the pointer-like behavior."
        },
        {
          "kind": "text",
          "content": "<!-- Old links, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"following-the-pointer-to-the-value-with-the-dereference-operator\"></a>\n<a id=\"following-the-pointer-to-the-value\"></a>"
        },
        {
          "kind": "text",
          "content": "### Following the Reference to the Value"
        },
        {
          "kind": "text",
          "content": "A regular reference is a type of pointer, and one way to think of a pointer is\nas an arrow to a value stored somewhere else. In Listing 15-6, we create a\nreference to an `i32` value and then use the dereference operator to follow the\nreference to the value."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-6\" file-name=\"src/main.rs\" caption=\"Using the dereference operator to follow a reference to an `i32` value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-06/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The variable `x` holds an `i32` value `5`. We set `y` equal to a reference to\n`x`. We can assert that `x` is equal to `5`. However, if we want to make an\nassertion about the value in `y`, we have to use `*y` to follow the reference\nto the value it’s pointing to (hence _dereference_) so the compiler can compare\nthe actual value. Once we dereference `y`, we have access to the integer value\n`y` is pointing to that we can compare with `5`."
        },
        {
          "kind": "text",
          "content": "If we tried to write `assert_eq!(5, y);` instead, we would get this compilation\nerror:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/output-only-01-comparing-to-reference/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Comparing a number and a reference to a number isn’t allowed because they’re\ndifferent types. We must use the dereference operator to follow the reference\nto the value it’s pointing to."
        },
        {
          "kind": "text",
          "content": "### Using `Box<T>` Like a Reference"
        },
        {
          "kind": "text",
          "content": "We can rewrite the code in Listing 15-6 to use a `Box<T>` instead of a\nreference; the dereference operator used on the `Box<T>` in Listing 15-7\nfunctions in the same way as the dereference operator used on the reference in\nListing 15-6:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-7\" file-name=\"src/main.rs\" caption=\"Using the dereference operator on a `Box<i32>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-07/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The main difference between Listing 15-7 and Listing 15-6 is that here we set\n`y` to be an instance of a box pointing to a copied value of `x` rather than a\nreference pointing to the value of `x`. In the last assertion, we can use the\ndereference operator to follow the box’s pointer in the same way that we did\nwhen `y` was a reference. Next, we’ll explore what is special about `Box<T>`\nthat enables us to use the dereference operator by defining our own type."
        },
        {
          "kind": "text",
          "content": "### Defining Our Own Smart Pointer"
        },
        {
          "kind": "text",
          "content": "Let’s build a smart pointer similar to the `Box<T>` type provided by the\nstandard library to experience how smart pointers behave differently from\nreferences by default. Then we’ll look at how to add the ability to use the\ndereference operator."
        },
        {
          "kind": "text",
          "content": "The `Box<T>` type is ultimately defined as a tuple struct with one element, so\nListing 15-8 defines a `MyBox<T>` type in the same way. We’ll also define a\n`new` function to match the `new` function defined on `Box<T>`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-8\" file-name=\"src/main.rs\" caption=\"Defining a `MyBox<T>` type\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We define a struct named `MyBox` and declare a generic parameter `T` because\nwe want our type to hold values of any type. The `MyBox` type is a tuple struct\nwith one element of type `T`. The `MyBox::new` function takes one parameter of\ntype `T` and returns a `MyBox` instance that holds the value passed in."
        },
        {
          "kind": "text",
          "content": "Let’s try adding the `main` function in Listing 15-7 to Listing 15-8 and\nchanging it to use the `MyBox<T>` type we’ve defined instead of `Box<T>`. The\ncode in Listing 15-9 won’t compile because Rust doesn’t know how to dereference\n`MyBox`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-9\" file-name=\"src/main.rs\" caption=\"Attempting to use `MyBox<T>` in the same way we used references and `Box<T>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here’s the resultant compilation error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-09/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Our `MyBox<T>` type can’t be dereferenced because we haven’t implemented that\nability on our type. To enable dereferencing with the `*` operator, we\nimplement the `Deref` trait."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"treating-a-type-like-a-reference-by-implementing-the-deref-trait\"></a>"
        },
        {
          "kind": "text",
          "content": "### Implementing the `Deref` Trait"
        },
        {
          "kind": "text",
          "content": "As discussed in [“Implementing a Trait on a Type”][impl-trait]<!-- ignore --> in\nChapter 10, to implement a trait, we need to provide implementations for the\ntrait’s required methods. The `Deref` trait, provided by the standard library,\nrequires us to implement one method named `deref` that borrows `self` and\nreturns a reference to the inner data. Listing 15-10 contains an implementation\nof `Deref` to add to the definition of `MyBox<T>`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-10\" file-name=\"src/main.rs\" caption=\"Implementing `Deref` on `MyBox<T>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-10/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `type Target = T;` syntax defines an associated type for the `Deref`\ntrait to use. Associated types are a slightly different way of declaring a\ngeneric parameter, but you don’t need to worry about them for now; we’ll cover\nthem in more detail in Chapter 20."
        },
        {
          "kind": "text",
          "content": "We fill in the body of the `deref` method with `&self.0` so `deref` returns a\nreference to the value we want to access with the `*` operator; recall from\n[“Using Tuple Structs Without Named Fields to Create Different\nTypes”][tuple-structs]<!-- ignore --> in Chapter 5 that `.0` accesses the first\nvalue in a tuple struct. The `main` function in Listing 15-9 that calls `*` on\nthe `MyBox<T>` value now compiles, and the assertions pass!"
        },
        {
          "kind": "text",
          "content": "Without the `Deref` trait, the compiler can only dereference `&` references.\nThe `deref` method gives the compiler the ability to take a value of any type\nthat implements `Deref` and call the `deref` method to get an `&` reference that\nit knows how to dereference."
        },
        {
          "kind": "text",
          "content": "When we entered `*y` in Listing 15-9, behind the scenes Rust actually ran this\ncode:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "*(y.deref())"
          }
        },
        {
          "kind": "text",
          "content": "Rust substitutes the `*` operator with a call to the `deref` method and then a\nplain dereference so we don’t have to think about whether or not we need to\ncall the `deref` method. This Rust feature lets us write code that functions\nidentically whether we have a regular reference or a type that implements\n`Deref`."
        },
        {
          "kind": "text",
          "content": "The reason the `deref` method returns a reference to a value, and that the\nplain dereference outside the parentheses in `*(y.deref())` is still necessary,\nhas to do with the ownership system. If the `deref` method returned the value\ndirectly instead of a reference to the value, the value would be moved out of\n`self`. We don’t want to take ownership of the inner value inside `MyBox<T>` in\nthis case or in most cases where we use the dereference operator."
        },
        {
          "kind": "text",
          "content": "Note that the `*` operator is replaced with a call to the `deref` method and\nthen a call to the `*` operator just once, each time we use a `*` in our code.\nBecause the substitution of the `*` operator does not recurse infinitely, we\nend up with data of type `i32`, which matches the `5` in `assert_eq!` in\nListing 15-9."
        },
        {
          "kind": "text",
          "content": "### Implicit Deref Coercions with Functions and Methods"
        },
        {
          "kind": "text",
          "content": "_Deref coercion_ converts a reference to a type that implements the `Deref`\ntrait into a reference to another type. For example, deref coercion can convert\n`&String` to `&str` because `String` implements the `Deref` trait such that it\nreturns `&str`. Deref coercion is a convenience Rust performs on arguments to\nfunctions and methods, and works only on types that implement the `Deref`\ntrait. It happens automatically when we pass a reference to a particular type’s\nvalue as an argument to a function or method that doesn’t match the parameter\ntype in the function or method definition. A sequence of calls to the `deref`\nmethod converts the type we provided into the type the parameter needs."
        },
        {
          "kind": "text",
          "content": "Deref coercion was added to Rust so that programmers writing function and\nmethod calls don’t need to add as many explicit references and dereferences\nwith `&` and `*`. The deref coercion feature also lets us write more code that\ncan work for either references or smart pointers."
        },
        {
          "kind": "text",
          "content": "To see deref coercion in action, let’s use the `MyBox<T>` type we defined in\nListing 15-8 as well as the implementation of `Deref` that we added in Listing\n15-10. Listing 15-11 shows the definition of a function that has a string slice\nparameter."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-11\" file-name=\"src/main.rs\" caption=\"A `hello` function that has the parameter `name` of type `&str`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We can call the `hello` function with a string slice as an argument, such as\n`hello(\"Rust\");`, for example. Deref coercion makes it possible to call `hello`\nwith a reference to a value of type `MyBox<String>`, as shown in Listing 15-12."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-12\" file-name=\"src/main.rs\" caption=\"Calling `hello` with a reference to a `MyBox<String>` value, which works because of deref coercion\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-12/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here we’re calling the `hello` function with the argument `&m`, which is a\nreference to a `MyBox<String>` value. Because we implemented the `Deref` trait\non `MyBox<T>` in Listing 15-10, Rust can turn `&MyBox<String>` into `&String`\nby calling `deref`. The standard library provides an implementation of `Deref`\non `String` that returns a string slice, and this is in the API documentation\nfor `Deref`. Rust calls `deref` again to turn the `&String` into `&str`, which\nmatches the `hello` function’s definition."
        },
        {
          "kind": "text",
          "content": "If Rust didn’t implement deref coercion, we would have to write the code in\nListing 15-13 instead of the code in Listing 15-12 to call `hello` with a value\nof type `&MyBox<String>`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-13\" file-name=\"src/main.rs\" caption=\"The code we would have to write if Rust didn’t have deref coercion\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-13/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `(*m)` dereferences the `MyBox<String>` into a `String`. Then the `&` and\n`[..]` take a string slice of the `String` that is equal to the whole string to\nmatch the signature of `hello`. This code without deref coercions is harder to\nread, write, and understand with all of these symbols involved. Deref coercion\nallows Rust to handle these conversions for us automatically."
        },
        {
          "kind": "text",
          "content": "When the `Deref` trait is defined for the types involved, Rust will analyze the\ntypes and use `Deref::deref` as many times as necessary to get a reference to\nmatch the parameter’s type. The number of times that `Deref::deref` needs to be\ninserted is resolved at compile time, so there is no runtime penalty for taking\nadvantage of deref coercion!"
        },
        {
          "kind": "text",
          "content": "### How Deref Coercion Interacts with Mutability"
        },
        {
          "kind": "text",
          "content": "Similar to how you use the `Deref` trait to override the `*` operator on\nimmutable references, you can use the `DerefMut` trait to override the `*`\noperator on mutable references."
        },
        {
          "kind": "text",
          "content": "Rust does deref coercion when it finds types and trait implementations in three\ncases:"
        },
        {
          "kind": "text",
          "content": "1. From `&T` to `&U` when `T: Deref<Target=U>`\n2. From `&mut T` to `&mut U` when `T: DerefMut<Target=U>`\n3. From `&mut T` to `&U` when `T: Deref<Target=U>`"
        },
        {
          "kind": "text",
          "content": "The first two cases are the same except that the second implements mutability.\nThe first case states that if you have a `&T`, and `T` implements `Deref` to\nsome type `U`, you can get a `&U` transparently. The second case states that the\nsame deref coercion happens for mutable references."
        },
        {
          "kind": "text",
          "content": "The third case is trickier: Rust will also coerce a mutable reference to an\nimmutable one. But the reverse is _not_ possible: immutable references will\nnever coerce to mutable references. Because of the borrowing rules, if you have\na mutable reference, that mutable reference must be the only reference to that\ndata (otherwise, the program wouldn’t compile). Converting one mutable\nreference to one immutable reference will never break the borrowing rules.\nConverting an immutable reference to a mutable reference would require that the\ninitial immutable reference is the only immutable reference to that data, but\nthe borrowing rules don’t guarantee that. Therefore, Rust can’t make the\nassumption that converting an immutable reference to a mutable reference is\npossible."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "f4971d37-55d5-48c5-9966-a28b54ed3bee",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::ops::Deref;\n\n#[derive(Clone, Copy)]\nstruct AccessLogger(i32);\n\nimpl Deref for AccessLogger {\n    type Target = i32;\n    fn deref(&self) -> &Self::Target {\n        println!(\"deref\");\n        &self.0\n    }\n}\n\nfn main() {\n  let n = AccessLogger(-1);\n  let x = *n + 1;\n  let n2 = n;\n  println!(\"{} {}\", x, *n)\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "deref\nderef\n0 -1\n"
                },
                "context": "The `AccessLogger` will print \"deref\" every time `n` is dereferenced, which occurs twice.\nNote that copying `n` to `n2` does not dereference `n`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[impl-trait]: ch10-02-traits.html#implementing-a-trait-on-a-type\n[tuple-structs]: ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types"
        }
      ]
    },
    {
      "title": "Running Code on Cleanup with the `Drop` Trait",
      "file": "ch15-03-drop.md",
      "elements": [
        {
          "kind": "text",
          "content": "The second trait important to the smart pointer pattern is `Drop`, which lets\nyou customize what happens when a value is about to go out of scope. You can\nprovide an implementation for the `Drop` trait on any type, and that code can\nbe used to release resources like files or network connections."
        },
        {
          "kind": "text",
          "content": "We’re introducing `Drop` in the context of smart pointers because the\nfunctionality of the `Drop` trait is almost always used when implementing a\nsmart pointer. For example, when a `Box<T>` is dropped it will deallocate the\nspace on the heap that the box points to."
        },
        {
          "kind": "text",
          "content": "In some languages, for some types, the programmer must call code to free memory\nor resources every time they finish using an instance of those types. Examples\ninclude file handles, sockets, and locks. If they forget, the system might\nbecome overloaded and crash. In Rust, you can specify that a particular bit of\ncode be run whenever a value goes out of scope, and the compiler will insert\nthis code automatically. As a result, you don’t need to be careful about\nplacing cleanup code everywhere in a program that an instance of a particular\ntype is finished with—you still won’t leak resources!"
        },
        {
          "kind": "text",
          "content": "You specify the code to run when a value goes out of scope by implementing the\n`Drop` trait. The `Drop` trait requires you to implement one method named\n`drop` that takes a mutable reference to `self`. To see when Rust calls `drop`,\nlet’s implement `drop` with `println!` statements for now."
        },
        {
          "kind": "text",
          "content": "Listing 15-14 shows a `CustomSmartPointer` struct whose only custom\nfunctionality is that it will print `Dropping CustomSmartPointer!` when the\ninstance goes out of scope, to show when Rust runs the `drop` method."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-14\" file-name=\"src/main.rs\" caption=\"A `CustomSmartPointer` struct that implements the `Drop` trait where we would put our cleanup code\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-14/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `Drop` trait is included in the prelude, so we don’t need to bring it into\nscope. We implement the `Drop` trait on `CustomSmartPointer` and provide an\nimplementation for the `drop` method that calls `println!`. The body of the\n`drop` method is where you would place any logic that you wanted to run when an\ninstance of your type goes out of scope. We’re printing some text here to\ndemonstrate visually when Rust will call `drop`."
        },
        {
          "kind": "text",
          "content": "In `main`, we create two instances of `CustomSmartPointer` and then print\n`CustomSmartPointers created`. At the end of `main`, our instances of\n`CustomSmartPointer` will go out of scope, and Rust will call the code we put\nin the `drop` method, printing our final message. Note that we didn’t need to\ncall the `drop` method explicitly."
        },
        {
          "kind": "text",
          "content": "When we run this program, we’ll see the following output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-14/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust automatically called `drop` for us when our instances went out of scope,\ncalling the code we specified. Variables are dropped in the reverse order of\ntheir creation, so `d` was dropped before `c`. This example’s purpose is to\ngive you a visual guide to how the `drop` method works; usually you would\nspecify the cleanup code that your type needs to run rather than a print\nmessage."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"dropping-a-value-early-with-std-mem-drop\"></a>"
        },
        {
          "kind": "text",
          "content": "Unfortunately, it’s not straightforward to disable the automatic `drop`\nfunctionality. Disabling `drop` isn’t usually necessary; the whole point of the\n`Drop` trait is that it’s taken care of automatically. Occasionally, however,\nyou might want to clean up a value early. One example is when using smart\npointers that manage locks: you might want to force the `drop` method that\nreleases the lock so that other code in the same scope can acquire the lock.\nRust doesn’t let you call the `Drop` trait’s `drop` method manually; instead,\nyou have to call the `std::mem::drop` function provided by the standard library\nif you want to force a value to be dropped before the end of its scope."
        },
        {
          "kind": "text",
          "content": "If we try to call the `Drop` trait’s `drop` method manually by modifying the\n`main` function from Listing 15-14, as shown in Listing 15-15, we’ll get a\ncompiler error."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-15\" file-name=\"src/main.rs\" caption=\"Attempting to call the `drop` method from the `Drop` trait manually to clean up early\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-15/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we try to compile this code, we’ll get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-15/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This error message states that we’re not allowed to explicitly call `drop`. The\nerror message uses the term _destructor_, which is the general programming term\nfor a function that cleans up an instance. A _destructor_ is analogous to a\n_constructor_, which creates an instance. The `drop` function in Rust is one\nparticular destructor."
        },
        {
          "kind": "text",
          "content": "Rust doesn’t let us call `drop` explicitly because Rust would still\nautomatically call `drop` on the value at the end of `main`. This would cause a\n_double free_ error because Rust would be trying to clean up the same value\ntwice."
        },
        {
          "kind": "text",
          "content": "We can’t disable the automatic insertion of `drop` when a value goes out of\nscope, and we can’t call the `drop` method explicitly. So, if we need to force\na value to be cleaned up early, we use the `std::mem::drop` function."
        },
        {
          "kind": "text",
          "content": "The `std::mem::drop` function is different from the `drop` method in the `Drop`\ntrait. We call it by passing as an argument the value we want to force-drop.\nThe function is in the prelude, so we can modify `main` in Listing 15-15 to\ncall the `drop` function, as shown in Listing 15-16."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-16\" file-name=\"src/main.rs\" caption=\"Calling `std::mem::drop` to explicitly drop a value before it goes out of scope\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-16/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Running this code will print the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-16/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The text ``Dropping CustomSmartPointer with data `some data`!`` is printed\nbetween the `CustomSmartPointer created.` and `CustomSmartPointer dropped\nbefore the end of main.` text, showing that the `drop` method code is called to\ndrop `c` at that point."
        },
        {
          "kind": "text",
          "content": "You can use code specified in a `Drop` trait implementation in many ways to\nmake cleanup convenient and safe: for instance, you could use it to create your\nown memory allocator! With the `Drop` trait and Rust’s ownership system, you\ndon’t have to remember to clean up because Rust does it automatically."
        },
        {
          "kind": "text",
          "content": "You also don’t have to worry about problems resulting from accidentally\ncleaning up values still in use: the ownership system that makes sure\nreferences are always valid also ensures that `drop` gets called only once when\nthe value is no longer being used."
        },
        {
          "kind": "text",
          "content": "Now that we’ve examined `Box<T>` and some of the characteristics of smart\npointers, let’s look at a few other smart pointers defined in the standard\nlibrary."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8282968d-b1d3-42b4-b128-f97b951db4c6",
                "type": "Tracing",
                "prompt": {
                  "program": "struct Example(i32);\nimpl Drop for Example {\n    fn drop(&mut self) {\n        self.0 += 1;\n        println!(\"drop {}\", self.0);\n    }\n}\nfn main() {\n    let e = Example(0);\n    drop(e);\n    drop(e);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 11
                },
                "context": "An owned value cannot be dropped twice, so it is a compiler error to call a drop the second time.\n"
              },
              {
                "id": "b9121273-1c1e-4e99-9cff-a23f845aaeeb",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider this snippet that allocates a string:\n\n```rust\nfn main() {\n    let mut s = String::new();\n    ____\n}\n```\n\nWhich of the following are valid operations to fill in the underscore that would cause `s` to be dropped?\n",
                  "distractors": [
                    "`s.drop();`"
                  ]
                },
                "answer": {
                  "answer": [
                    "`drop(s);`",
                    "`(|_| ())(s);`",
                    "`{ s };`"
                  ]
                },
                "context": "Any use of `s` that moves it and discards the result will cause `s` to be dropped. However, `s.drop()` cannot be\ncalled directly.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "`Rc<T>`, the Reference Counted Smart Pointer",
      "file": "ch15-04-rc.md",
      "elements": [
        {
          "kind": "text",
          "content": "In the majority of cases, ownership is clear: you know exactly which variable\nowns a given value. However, there are cases when a single value might have\nmultiple owners. For example, in graph data structures, multiple edges might\npoint to the same node, and that node is conceptually owned by all of the edges\nthat point to it. A node shouldn’t be cleaned up unless it doesn’t have any\nedges pointing to it and so has no owners."
        },
        {
          "kind": "text",
          "content": "You have to enable multiple ownership explicitly by using the Rust type\n`Rc<T>`, which is an abbreviation for _reference counting_. The `Rc<T>` type\nkeeps track of the number of references to a value to determine whether or not\nthe value is still in use. If there are zero references to a value, the value\ncan be cleaned up without any references becoming invalid."
        },
        {
          "kind": "text",
          "content": "Imagine `Rc<T>` as a TV in a family room. When one person enters to watch TV,\nthey turn it on. Others can come into the room and watch the TV. When the last\nperson leaves the room, they turn off the TV because it’s no longer being used.\nIf someone turns off the TV while others are still watching it, there would be\nan uproar from the remaining TV watchers!"
        },
        {
          "kind": "text",
          "content": "We use the `Rc<T>` type when we want to allocate some data on the heap for\nmultiple parts of our program to read and we can’t determine at compile time\nwhich part will finish using the data last. If we knew which part would finish\nlast, we could just make that part the data’s owner, and the normal ownership\nrules enforced at compile time would take effect."
        },
        {
          "kind": "text",
          "content": "Note that `Rc<T>` is only for use in single-threaded scenarios. When we discuss\nconcurrency in Chapter 16, we’ll cover how to do reference counting in\nmultithreaded programs."
        },
        {
          "kind": "text",
          "content": "### Using `Rc<T>` to Share Data"
        },
        {
          "kind": "text",
          "content": "Let’s return to our cons list example in Listing 15-5. Recall that we defined\nit using `Box<T>`. This time, we’ll create two lists that both share ownership\nof a third list. Conceptually, this looks similar to Figure 15-3."
        },
        {
          "kind": "text",
          "content": "<img alt=\"Two lists that share ownership of a third list\" src=\"img/trpl15-03.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 15-3: Two lists, `b` and `c`, sharing ownership of\na third list, `a`</span>"
        },
        {
          "kind": "text",
          "content": "We’ll create list `a` that contains `5` and then `10`. Then we’ll make two more\nlists: `b` that starts with `3` and `c` that starts with `4`. Both `b` and `c`\nlists will then continue on to the first `a` list containing `5` and `10`. In\nother words, both lists will share the first list containing `5` and `10`."
        },
        {
          "kind": "text",
          "content": "Trying to implement this scenario using our definition of `List` with `Box<T>`\nwon’t work, as shown in Listing 15-17:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-17\" file-name=\"src/main.rs\" caption=\"Demonstrating we’re not allowed to have two lists using `Box<T>` that try to share ownership of a third list\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-17/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we compile this code, we get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-17/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The `Cons` variants own the data they hold, so when we create the `b` list, `a`\nis moved into `b` and `b` owns `a`. Then, when we try to use `a` again when\ncreating `c`, we’re not allowed to because `a` has been moved."
        },
        {
          "kind": "text",
          "content": "We could change the definition of `Cons` to hold references instead, but then\nwe would have to specify lifetime parameters. By specifying lifetime\nparameters, we would be specifying that every element in the list will live at\nleast as long as the entire list. This is the case for the elements and lists\nin Listing 15-17, but not in every scenario."
        },
        {
          "kind": "text",
          "content": "Instead, we’ll change our definition of `List` to use `Rc<T>` in place of\n`Box<T>`, as shown in Listing 15-18. Each `Cons` variant will now hold a value\nand an `Rc<T>` pointing to a `List`. When we create `b`, instead of taking\nownership of `a`, we’ll clone the `Rc<List>` that `a` is holding, thereby\nincreasing the number of references from one to two and letting `a` and `b`\nshare ownership of the data in that `Rc<List>`. We’ll also clone `a` when\ncreating `c`, increasing the number of references from two to three. Every time\nwe call `Rc::clone`, the reference count to the data within the `Rc<List>` will\nincrease, and the data won’t be cleaned up unless there are zero references to\nit."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-18\" file-name=\"src/main.rs\" caption=\"A definition of `List` that uses `Rc<T>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-18/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We need to add a `use` statement to bring `Rc<T>` into scope because it’s not\nin the prelude. In `main`, we create the list holding 5 and 10 and store it in\na new `Rc<List>` in `a`. Then when we create `b` and `c`, we call the\n`Rc::clone` function and pass a reference to the `Rc<List>` in `a` as an\nargument."
        },
        {
          "kind": "text",
          "content": "We could have called `a.clone()` rather than `Rc::clone(&a)`, but Rust’s\nconvention is to use `Rc::clone` in this case. The implementation of\n`Rc::clone` doesn’t make a deep copy of all the data like most types’\nimplementations of `clone` do. The call to `Rc::clone` only increments the\nreference count, which doesn’t take much time. Deep copies of data can take a\nlot of time. By using `Rc::clone` for reference counting, we can visually\ndistinguish between the deep-copy kinds of clones and the kinds of clones that\nincrease the reference count. When looking for performance problems in the\ncode, we only need to consider the deep-copy clones and can disregard calls to\n`Rc::clone`."
        },
        {
          "kind": "text",
          "content": "### Cloning an `Rc<T>` Increases the Reference Count"
        },
        {
          "kind": "text",
          "content": "Let’s change our working example in Listing 15-18 so we can see the reference\ncounts changing as we create and drop references to the `Rc<List>` in `a`."
        },
        {
          "kind": "text",
          "content": "In Listing 15-19, we’ll change `main` so it has an inner scope around list `c`;\nthen we can see how the reference count changes when `c` goes out of scope."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-19\" file-name=\"src/main.rs\" caption=\"Printing the reference count\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-19/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "At each point in the program where the reference count changes, we print the\nreference count, which we get by calling the `Rc::strong_count` function. This\nfunction is named `strong_count` rather than `count` because the `Rc<T>` type\nalso has a `weak_count`; we’ll see what `weak_count` is used for in [“Preventing\nReference Cycles Using `Weak<T>`”][preventing-ref-cycles]<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "This code prints the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-19/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We can see that the `Rc<List>` in `a` has an initial reference count of 1; then\neach time we call `clone`, the count goes up by 1. When `c` goes out of scope,\nthe count goes down by 1. We don’t have to call a function to decrease the\nreference count like we have to call `Rc::clone` to increase the reference\ncount: the implementation of the `Drop` trait decreases the reference count\nautomatically when an `Rc<T>` value goes out of scope."
        },
        {
          "kind": "text",
          "content": "What we can’t see in this example is that when `b` and then `a` go out of scope\nat the end of `main`, the count is then 0, and the `Rc<List>` is cleaned up\ncompletely. Using `Rc<T>` allows a single value to have multiple owners, and\nthe count ensures that the value remains valid as long as any of the owners\nstill exist."
        },
        {
          "kind": "text",
          "content": "Via immutable references, `Rc<T>` allows you to share data between multiple\nparts of your program for reading only. If `Rc<T>` allowed you to have multiple\nmutable references too, you might violate one of the borrowing rules discussed\nin Chapter 4: multiple mutable borrows to the same place can cause data races\nand inconsistencies. But being able to mutate data is very useful! In the next\nsection, we’ll discuss the interior mutability pattern and the `RefCell<T>`\ntype that you can use in conjunction with an `Rc<T>` to work with this\nimmutability restriction."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "e127342d-7ad2-4730-b930-774411e1872d",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::rc::Rc;\nfn main() {\n    let n = Rc::new(1);\n    let mut n2 = Rc::clone(&n);\n    *n2 += 1;\n    println!(\"{}\", n);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 5
                },
                "context": "Data inside an `Rc` cannot be mutated without the use of interior mutability (seen next section). `Rc` enforces this property\nby implementing the `Deref` trait, but not implementing the `DerefMut` trait.\n"
              },
              {
                "id": "3b43eb45-3400-4555-b605-9ae1cde7c80c",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::rc::Rc;\nstruct Example;\nimpl Drop for Example {\n    fn drop(&mut self) {\n        println!(\"drop\");\n    }\n}\nfn main() {\n    let x = Rc::new(Example);    \n    let y = Rc::clone(&x);    \n    println!(\"A\");\n    drop(x);\n    println!(\"B\");\n    drop(y);    \n    println!(\"C\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "A\nB\ndrop\nC\n"
                },
                "context": "The value inside a reference-counted pointer is only ever dropped once, so \"drop\" is only printed once.\nThe initial `drop(x)` decrements the reference count, but does not drop the value because `y` is still live.\nThen dropping `y` finds that the reference count is 0, and drops `Example`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[preventing-ref-cycles]: ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt"
        }
      ]
    },
    {
      "title": "`RefCell<T>` and the Interior Mutability Pattern",
      "file": "ch15-05-interior-mutability.md",
      "elements": [
        {
          "kind": "text",
          "content": "_Interior mutability_ is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data; normally, this\naction is disallowed by the borrowing rules. To mutate data, the pattern uses\n`unsafe` code inside a data structure to bend Rust’s usual rules that govern\nmutation and borrowing. Unsafe code indicates to the compiler that we’re\nchecking the rules manually instead of relying on the compiler to check them\nfor us; we will discuss unsafe code more in Chapter 20."
        },
        {
          "kind": "text",
          "content": "We can use types that use the interior mutability pattern only when we can\nensure that the borrowing rules will be followed at runtime, even though the\ncompiler can’t guarantee that. The `unsafe` code involved is then wrapped in a\nsafe API, and the outer type is still immutable."
        },
        {
          "kind": "text",
          "content": "Let’s explore this concept by looking at the `RefCell<T>` type that follows the\ninterior mutability pattern."
        },
        {
          "kind": "text",
          "content": "### Enforcing Borrowing Rules at Runtime with `RefCell<T>`"
        },
        {
          "kind": "text",
          "content": "Unlike `Rc<T>`, the `RefCell<T>` type represents single ownership over the data\nit holds. So what makes `RefCell<T>` different from a type like `Box<T>`?\nRecall the borrowing rules you learned in Chapter 4:"
        },
        {
          "kind": "text",
          "content": "- At any given time, you can have _either_ one mutable reference or any number\nof immutable references (but not both).\n- References must always be valid."
        },
        {
          "kind": "text",
          "content": "With references and `Box<T>`, the borrowing rules’ invariants are enforced at\ncompile time. With `RefCell<T>`, these invariants are enforced _at runtime_.\nWith references, if you break these rules, you’ll get a compiler error. With\n`RefCell<T>`, if you break these rules, your program will panic and exit."
        },
        {
          "kind": "text",
          "content": "The advantages of checking the borrowing rules at compile time are that errors\nwill be caught sooner in the development process, and there is no impact on\nruntime performance because all the analysis is completed beforehand. For those\nreasons, checking the borrowing rules at compile time is the best choice in the\nmajority of cases, which is why this is Rust’s default."
        },
        {
          "kind": "text",
          "content": "The advantage of checking the borrowing rules at runtime instead is that\ncertain memory-safe scenarios are then allowed, where they would’ve been\ndisallowed by the compile-time checks. Static analysis, like the Rust compiler,\nis inherently conservative. Some properties of code are impossible to detect by\nanalyzing the code: the most famous example is the Halting Problem, which is\nbeyond the scope of this book but is an interesting topic to research."
        },
        {
          "kind": "text",
          "content": "Because some analysis is impossible, if the Rust compiler can’t be sure the\ncode complies with the ownership rules, it might reject a correct program; in\nthis way, it’s conservative. If Rust accepted an incorrect program, users\nwouldn’t be able to trust in the guarantees Rust makes. However, if Rust\nrejects a correct program, the programmer will be inconvenienced, but nothing\ncatastrophic can occur. The `RefCell<T>` type is useful when you’re sure your\ncode follows the borrowing rules but the compiler is unable to understand and\nguarantee that."
        },
        {
          "kind": "text",
          "content": "Similar to `Rc<T>`, `RefCell<T>` is only for use in single-threaded scenarios\nand will give you a compile-time error if you try using it in a multithreaded\ncontext. We’ll talk about how to get the functionality of `RefCell<T>` in a\nmultithreaded program in Chapter 16."
        },
        {
          "kind": "text",
          "content": "Here is a recap of the reasons to choose `Box<T>`, `Rc<T>`, or `RefCell<T>`:"
        },
        {
          "kind": "text",
          "content": "- `Rc<T>` enables multiple owners of the same data; `Box<T>` and `RefCell<T>`\nhave single owners.\n- `Box<T>` allows immutable or mutable borrows checked at compile time; `Rc<T>`\nallows only immutable borrows checked at compile time; `RefCell<T>` allows\nimmutable or mutable borrows checked at runtime.\n- Because `RefCell<T>` allows mutable borrows checked at runtime, you can\nmutate the value inside the `RefCell<T>` even when the `RefCell<T>` is\nimmutable."
        },
        {
          "kind": "text",
          "content": "Mutating the value inside an immutable value is the _interior mutability_\npattern. Let’s look at a situation in which interior mutability is useful and\nexamine how it’s possible."
        },
        {
          "kind": "text",
          "content": "### Interior Mutability: A Mutable Borrow to an Immutable Value"
        },
        {
          "kind": "text",
          "content": "A consequence of the borrowing rules is that when you have an immutable value,\nyou can’t borrow it mutably. For example, this code won’t compile:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/no-listing-01-cant-borrow-immutable-as-mutable/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "If you tried to compile this code, you’d get the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/no-listing-01-cant-borrow-immutable-as-mutable/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "However, there are situations in which it would be useful for a value to mutate\nitself in its methods but appear immutable to other code. Code outside the\nvalue’s methods would not be able to mutate the value. Using `RefCell<T>` is\none way to get the ability to have interior mutability, but `RefCell<T>`\ndoesn’t get around the borrowing rules completely: the borrow checker in the\ncompiler allows this interior mutability, and the borrowing rules are checked\nat runtime instead. If you violate the rules, you’ll get a `panic!` instead of\na compiler error."
        },
        {
          "kind": "text",
          "content": "Let’s work through a practical example where we can use `RefCell<T>` to mutate\nan immutable value and see why that is useful."
        },
        {
          "kind": "text",
          "content": "#### A Use Case for Interior Mutability: Mock Objects"
        },
        {
          "kind": "text",
          "content": "Sometimes during testing a programmer will use a type in place of another type,\nin order to observe particular behavior and assert that it’s implemented\ncorrectly. This placeholder type is called a _test double_. Think of it in the\nsense of a stunt double in filmmaking, where a person steps in and substitutes\nfor an actor to do a particularly tricky scene. Test doubles stand in for other\ntypes when we’re running tests. _Mock objects_ are specific types of test\ndoubles that record what happens during a test so you can assert that the\ncorrect actions took place."
        },
        {
          "kind": "text",
          "content": "Rust doesn’t have objects in the same sense as other languages have objects,\nand Rust doesn’t have mock object functionality built into the standard library\nas some other languages do. However, you can definitely create a struct that\nwill serve the same purposes as a mock object."
        },
        {
          "kind": "text",
          "content": "Here’s the scenario we’ll test: we’ll create a library that tracks a value\nagainst a maximum value and sends messages based on how close to the maximum\nvalue the current value is. This library could be used to keep track of a\nuser’s quota for the number of API calls they’re allowed to make, for example."
        },
        {
          "kind": "text",
          "content": "Our library will only provide the functionality of tracking how close to the\nmaximum a value is and what the messages should be at what times. Applications\nthat use our library will be expected to provide the mechanism for sending the\nmessages: the application could put a message in the application, send an email,\nsend a text message, or do something else. The library doesn’t need to know that\ndetail. All it needs is something that implements a trait we’ll provide called\n`Messenger`. Listing 15-20 shows the library code."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-20\" file-name=\"src/lib.rs\" caption=\"A library to keep track of how close a value is to a maximum value and warn when the value is at certain levels\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-20/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "One important part of this code is that the `Messenger` trait has one method\ncalled `send` that takes an immutable reference to `self` and the text of the\nmessage. This trait is the interface our mock object needs to implement so that\nthe mock can be used in the same way a real object is. The other important part\nis that we want to test the behavior of the `set_value` method on the\n`LimitTracker`. We can change what we pass in for the `value` parameter, but\n`set_value` doesn’t return anything for us to make assertions on. We want to be\nable to say that if we create a `LimitTracker` with something that implements\nthe `Messenger` trait and a particular value for `max`, when we pass different\nnumbers for `value`, the messenger is told to send the appropriate messages."
        },
        {
          "kind": "text",
          "content": "We need a mock object that, instead of sending an email or text message when we\ncall `send`, will only keep track of the messages it’s told to send. We can\ncreate a new instance of the mock object, create a `LimitTracker` that uses the\nmock object, call the `set_value` method on `LimitTracker`, and then check that\nthe mock object has the messages we expect. Listing 15-21 shows an attempt to\nimplement a mock object to do just that, but the borrow checker won’t allow it."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-21\" file-name=\"src/lib.rs\" caption=\"An attempt to implement a `MockMessenger` that isn’t allowed by the borrow checker\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-21/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This test code defines a `MockMessenger` struct that has a `sent_messages`\nfield with a `Vec` of `String` values to keep track of the messages it’s told\nto send. We also define an associated function `new` to make it convenient to\ncreate new `MockMessenger` values that start with an empty list of messages. We\nthen implement the `Messenger` trait for `MockMessenger` so we can give a\n`MockMessenger` to a `LimitTracker`. In the definition of the `send` method, we\ntake the message passed in as a parameter and store it in the `MockMessenger`\nlist of `sent_messages`."
        },
        {
          "kind": "text",
          "content": "In the test, we’re testing what happens when the `LimitTracker` is told to set\n`value` to something that is more than 75 percent of the `max` value. First, we\ncreate a new `MockMessenger`, which will start with an empty list of messages.\nThen we create a new `LimitTracker` and give it a reference to the new\n`MockMessenger` and a `max` value of `100`. We call the `set_value` method on\nthe `LimitTracker` with a value of `80`, which is more than 75 percent of 100.\nThen we assert that the list of messages that the `MockMessenger` is keeping\ntrack of should now have one message in it."
        },
        {
          "kind": "text",
          "content": "However, there’s one problem with this test, as shown here:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-21/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We can’t modify the `MockMessenger` to keep track of the messages, because the\n`send` method takes an immutable reference to `self`. We also can’t take the\nsuggestion from the error text to use `&mut self` in both the `impl` method and\nthe `trait` definition. We do not want to change the `Messenger` trait solely\nfor the sake of testing. Instead, we need to find a way to make our test code\nwork correctly with our existing design."
        },
        {
          "kind": "text",
          "content": "This is a situation in which interior mutability can help! We’ll store the\n`sent_messages` within a `RefCell<T>`, and then the `send` method will be\nable to modify `sent_messages` to store the messages we’ve seen. Listing 15-22\nshows what that looks like."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-22\" file-name=\"src/lib.rs\" caption=\"Using `RefCell<T>` to mutate an inner value while the outer value is considered immutable\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-22/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `sent_messages` field is now of type `RefCell<Vec<String>>` instead of\n`Vec<String>`. In the `new` function, we create a new `RefCell<Vec<String>>`\ninstance around the empty vector."
        },
        {
          "kind": "text",
          "content": "For the implementation of the `send` method, the first parameter is still an\nimmutable borrow of `self`, which matches the trait definition. We call\n`borrow_mut` on the `RefCell<Vec<String>>` in `self.sent_messages` to get a\nmutable reference to the value inside the `RefCell<Vec<String>>`, which is the\nvector. Then we can call `push` on the mutable reference to the vector to keep\ntrack of the messages sent during the test."
        },
        {
          "kind": "text",
          "content": "The last change we have to make is in the assertion: to see how many items are\nin the inner vector, we call `borrow` on the `RefCell<Vec<String>>` to get an\nimmutable reference to the vector."
        },
        {
          "kind": "text",
          "content": "Now that you’ve seen how to use `RefCell<T>`, let’s dig into how it works!"
        },
        {
          "kind": "text",
          "content": "#### Keeping Track of Borrows at Runtime with `RefCell<T>`"
        },
        {
          "kind": "text",
          "content": "When creating immutable and mutable references, we use the `&` and `&mut`\nsyntax, respectively. With `RefCell<T>`, we use the `borrow` and `borrow_mut`\nmethods, which are part of the safe API that belongs to `RefCell<T>`. The\n`borrow` method returns the smart pointer type `Ref<T>`, and `borrow_mut`\nreturns the smart pointer type `RefMut<T>`. Both types implement `Deref`, so we\ncan treat them like regular references."
        },
        {
          "kind": "text",
          "content": "The `RefCell<T>` keeps track of how many `Ref<T>` and `RefMut<T>` smart\npointers are currently active. Every time we call `borrow`, the `RefCell<T>`\nincreases its count of how many immutable borrows are active. When a `Ref<T>`\nvalue goes out of scope, the count of immutable borrows goes down by 1. Just\nlike the compile-time borrowing rules, `RefCell<T>` lets us have many immutable\nborrows or one mutable borrow at any point in time."
        },
        {
          "kind": "text",
          "content": "If we try to violate these rules, rather than getting a compiler error as we\nwould with references, the implementation of `RefCell<T>` will panic at\nruntime. Listing 15-23 shows a modification of the implementation of `send` in\nListing 15-22. We’re deliberately trying to create two mutable borrows active\nfor the same scope to illustrate that `RefCell<T>` prevents us from doing this\nat runtime."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-23\" file-name=\"src/lib.rs\" caption=\"Creating two mutable references in the same scope to see that `RefCell<T>` will panic\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "panics"
            ],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-23/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We create a variable `one_borrow` for the `RefMut<T>` smart pointer returned\nfrom `borrow_mut`. Then we create another mutable borrow in the same way in the\nvariable `two_borrow`. This makes two mutable references in the same scope,\nwhich isn’t allowed. When we run the tests for our library, the code in Listing\n15-23 will compile without any errors, but the test will fail:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-23/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Notice that the code panicked with the message `already borrowed:\nBorrowMutError`. This is how `RefCell<T>` handles violations of the borrowing\nrules at runtime."
        },
        {
          "kind": "text",
          "content": "Choosing to catch borrowing errors at runtime rather than compile time, as\nwe’ve done here, means you’d potentially be finding mistakes in your code later\nin the development process: possibly not until your code was deployed to\nproduction. Also, your code would incur a small runtime performance penalty as\na result of keeping track of the borrows at runtime rather than compile time.\nHowever, using `RefCell<T>` makes it possible to write a mock object that can\nmodify itself to keep track of the messages it has seen while you’re using it\nin a context where only immutable values are allowed. You can use `RefCell<T>`\ndespite its trade-offs to get more functionality than regular references\nprovide."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"having-multiple-owners-of-mutable-data-by-combining-rc-t-and-ref-cell-t\"></a>"
        },
        {
          "kind": "text",
          "content": "### Allowing Multiple Owners of Mutable Data with `Rc<T>` and `RefCell<T>`"
        },
        {
          "kind": "text",
          "content": "A common way to use `RefCell<T>` is in combination with `Rc<T>`. Recall that\n`Rc<T>` lets you have multiple owners of some data, but it only gives immutable\naccess to that data. If you have an `Rc<T>` that holds a `RefCell<T>`, you can\nget a value that can have multiple owners _and_ that you can mutate!"
        },
        {
          "kind": "text",
          "content": "For example, recall the cons list example in Listing 15-18 where we used `Rc<T>`\nto allow multiple lists to share ownership of another list. Because `Rc<T>`\nholds only immutable values, we can’t change any of the values in the list once\nwe’ve created them. Let’s add in `RefCell<T>` for its ability to change the\nvalues in the lists. Listing 15-24 shows that by using a `RefCell<T>` in the\n`Cons` definition, we can modify the value stored in all the lists."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-24\" file-name=\"src/main.rs\" caption=\"Using `Rc<RefCell<i32>>` to create a `List` that we can mutate\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-24/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We create a value that is an instance of `Rc<RefCell<i32>>` and store it in a\nvariable named `value` so we can access it directly later. Then we create a\n`List` in `a` with a `Cons` variant that holds `value`. We need to clone\n`value` so both `a` and `value` have ownership of the inner `5` value rather\nthan transferring ownership from `value` to `a` or having `a` borrow from\n`value`."
        },
        {
          "kind": "text",
          "content": "We wrap the list `a` in an `Rc<T>` so that when we create lists `b` and `c`,\nthey can both refer to `a`, which is what we did in Listing 15-18."
        },
        {
          "kind": "text",
          "content": "After we’ve created the lists in `a`, `b`, and `c`, we want to add 10 to the\nvalue in `value`. We do this by calling `borrow_mut` on `value`, which uses the\nautomatic dereferencing feature we discussed in Chapter 4 to\ndereference the `Rc<T>` to the inner `RefCell<T>` value. The `borrow_mut`\nmethod returns a `RefMut<T>` smart pointer, and we use the dereference operator\non it and change the inner value."
        },
        {
          "kind": "text",
          "content": "When we print `a`, `b`, and `c`, we can see that they all have the modified\nvalue of `15` rather than `5`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-24/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This technique is pretty neat! By using `RefCell<T>`, we have an outwardly\nimmutable `List` value. But we can use the methods on `RefCell<T>` that provide\naccess to its interior mutability so we can modify our data when we need to.\nThe runtime checks of the borrowing rules protect us from data races, and it’s\nsometimes worth trading a bit of speed for this flexibility in our data\nstructures. Note that `RefCell<T>` does not work for multithreaded code!\n`Mutex<T>` is the thread-safe version of `RefCell<T>`, and we’ll discuss\n`Mutex<T>` in Chapter 16."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "01904807-74c7-41ad-8d8b-cfb30e5ce10c",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following best describes the concept of *interior mutability* in Rust?\n",
                  "distractors": [
                    "Wrapping `unsafe` code in a safe API",
                    "Allowing data on the inside of a data structure to be mutated",
                    "Using the borrow checker to enforce memory safety at runtime"
                  ]
                },
                "answer": {
                  "answer": "Allowing data to be mutated through an immutable reference"
                },
                "context": "The main idea of interior mutability is taking a value of type `&T` and being able to \nsafely mutate data within `T`.\n"
              },
              {
                "id": "380cd865-76c5-419c-8961-af4c59d2ab71",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider an API that tracks the number of calls to a particular method:\n\n```\nstruct Api {\n    count: ???\n}\n\nimpl Api {\n    fn some_method(&self) {\n        // increment count\n        // rest of the method...\n    }    \n}\n```\n\nSay the count is represented as a `usize`. Which of the following would be the most appropriate wrapper type\nto use for this situation?\n",
                  "distractors": [
                    "`Rc<usize>`",
                    "`Box<usize>`",
                    "None, `usize` is fine"
                  ]
                },
                "answer": {
                  "answer": "`RefCell<usize>`"
                },
                "context": "Here a `RefCell` is useful to mutate an internal field even though `some_method` takes\nan immutable reference as input. If the internal field is just an integer, an even better choice of type\nwould be `Cell<usize>` or `AtomicUsize`.\n"
              },
              {
                "id": "d4ae1b8e-79a7-4485-828f-fb30cdeb29d5",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following incorrect implementation of a `RefCell` that does not check\nwhether the interior value is borrowed:\n\n```\nuse std::cell::UnsafeCell;\nstruct BadRefCell<T>(UnsafeCell<T>);\nimpl<T> BadRefCell<T> {\n    pub fn borrow_mut(&self) -> &mut T {\n        unsafe { &mut *self.0.get() }\n    }\n}\n```\n\nNow say we have a `BadRefCell` like this:\n\n```\nlet v = BadRefCell(UnsafeCell::new(vec![1, 2, 3]));\n```\n\nWhich of the following snippets would violate memory safety using this API?\n",
                  "distractors": [
                    "```\ndrop(v.borrow_mut());\ndrop(v.borrow_mut());\n```\n",
                    "```\nlet v1 = v.borrow_mut();\nlet v2 = v.borrow_mut();\nv1.push(0);\nv2.push(0);\n```\n",
                    "```\nv.borrow_mut().push(0);\nlet n = v.borrow_mut()[0];\nprintln!(\"{n}\");\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```\nlet v1 = v.borrow_mut();\nlet n = &v1[0];\nv.borrow_mut().push(0);\nprintln!(\"{n}\");\n```\n"
                },
                "context": "The `BadRefCell` allows us to have two mutable references to the underlying data at the same time,\nwhich permits a memory safety violation like reallocating a vector while holding a reference to its contents.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[wheres-the---operator]: ch05-03-method-syntax.html#wheres-the---operator"
        }
      ]
    },
    {
      "title": "Reference Cycles Can Leak Memory",
      "file": "ch15-06-reference-cycles.md",
      "elements": [
        {
          "kind": "text",
          "content": "Rust’s memory safety guarantees make it difficult, but not impossible, to\naccidentally create memory that is never cleaned up (known as a _memory leak_).\nPreventing memory leaks entirely is not one of Rust’s guarantees, meaning\nmemory leaks are memory safe in Rust. We can see that Rust allows memory leaks\nby using `Rc<T>` and `RefCell<T>`: it’s possible to create references where\nitems refer to each other in a cycle. This creates memory leaks because the\nreference count of each item in the cycle will never reach 0, and the values\nwill never be dropped."
        },
        {
          "kind": "text",
          "content": "### Creating a Reference Cycle"
        },
        {
          "kind": "text",
          "content": "Let’s look at how a reference cycle might happen and how to prevent it,\nstarting with the definition of the `List` enum and a `tail` method in Listing\n15-25."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-25\" file-name=\"src/main.rs\" caption=\"A cons list definition that holds a `RefCell<T>` so we can modify what a `Cons` variant is referring to\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-25/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’re using another variation of the `List` definition from Listing 15-5. The\nsecond element in the `Cons` variant is now `RefCell<Rc<List>>`, meaning that\ninstead of having the ability to modify the `i32` value as we did in Listing\n15-24, we want to modify the `List` value a `Cons` variant is pointing to.\nWe’re also adding a `tail` method to make it convenient for us to access the\nsecond item if we have a `Cons` variant."
        },
        {
          "kind": "text",
          "content": "In Listing 15-26, we’re adding a `main` function that uses the definitions in\nListing 15-25. This code creates a list in `a` and a list in `b` that points to\nthe list in `a`. Then it modifies the list in `a` to point to `b`, creating a\nreference cycle. There are `println!` statements along the way to show what the\nreference counts are at various points in this process."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-26\" file-name=\"src/main.rs\" caption=\"Creating a reference cycle of two `List` values pointing to each other\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-26/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We create an `Rc<List>` instance holding a `List` value in the variable `a`\nwith an initial list of `5, Nil`. We then create an `Rc<List>` instance holding\nanother `List` value in the variable `b` that contains the value `10` and points\nto the list in `a`."
        },
        {
          "kind": "text",
          "content": "We modify `a` so it points to `b` instead of `Nil`, creating a cycle. We do\nthat by using the `tail` method to get a reference to the `RefCell<Rc<List>>`\nin `a`, which we put in the variable `link`. Then we use the `borrow_mut`\nmethod on the `RefCell<Rc<List>>` to change the value inside from an `Rc<List>`\nthat holds a `Nil` value to the `Rc<List>` in `b`."
        },
        {
          "kind": "text",
          "content": "When we run this code, keeping the last `println!` commented out for the\nmoment, we’ll get this output:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch15-smart-pointers/listing-15-26/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The reference count of the `Rc<List>` instances in both `a` and `b` is 2 after\nwe change the list in `a` to point to `b`. At the end of `main`, Rust drops the\nvariable `b`, which decreases the reference count of the `b` `Rc<List>` instance\nfrom 2 to 1. The memory that `Rc<List>` has on the heap won’t be dropped at\nthis point, because its reference count is 1, not 0. Then Rust drops `a`, which\ndecreases the reference count of the `a` `Rc<List>` instance from 2 to 1 as\nwell. This instance’s memory can’t be dropped either, because the other\n`Rc<List>` instance still refers to it. The memory allocated to the list will\nremain uncollected forever. To visualize this reference cycle, we’ve created the\ndiagram in Figure 15-4."
        },
        {
          "kind": "text",
          "content": "<img alt=\"Reference cycle of lists\" src=\"img/trpl15-04.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 15-4: A reference cycle of lists `a` and `b`\npointing to each other</span>"
        },
        {
          "kind": "text",
          "content": "If you uncomment the last `println!` and run the program, Rust will try to print\nthis cycle with `a` pointing to `b` pointing to `a` and so forth until it\noverflows the stack."
        },
        {
          "kind": "text",
          "content": "Compared to a real-world program, the consequences of creating a reference cycle\nin this example aren’t very dire: right after we create the reference cycle,\nthe program ends. However, if a more complex program allocated lots of memory\nin a cycle and held onto it for a long time, the program would use more memory\nthan it needed and might overwhelm the system, causing it to run out of\navailable memory."
        },
        {
          "kind": "text",
          "content": "Creating reference cycles is not easily done, but it’s not impossible either.\nIf you have `RefCell<T>` values that contain `Rc<T>` values or similar nested\ncombinations of types with interior mutability and reference counting, you must\nensure that you don’t create cycles; you can’t rely on Rust to catch them.\nCreating a reference cycle would be a logic bug in your program that you should\nuse automated tests, code reviews, and other software development practices to\nminimize."
        },
        {
          "kind": "text",
          "content": "Another solution for avoiding reference cycles is reorganizing your data\nstructures so that some references express ownership and some references don’t.\nAs a result, you can have cycles made up of some ownership relationships and\nsome non-ownership relationships, and only the ownership relationships affect\nwhether or not a value can be dropped. In Listing 15-25, we always want `Cons`\nvariants to own their list, so reorganizing the data structure isn’t possible.\nLet’s look at an example using graphs made up of parent nodes and child nodes\nto see when non-ownership relationships are an appropriate way to prevent\nreference cycles."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"preventing-reference-cycles-turning-an-rct-into-a-weakt\"></a>"
        },
        {
          "kind": "text",
          "content": "### Preventing Reference Cycles Using `Weak<T>`"
        },
        {
          "kind": "text",
          "content": "So far, we’ve demonstrated that calling `Rc::clone` increases the `strong_count`\nof an `Rc<T>` instance, and an `Rc<T>` instance is only cleaned up if its\n`strong_count` is 0. You can also create a _weak reference_ to the value within\nan `Rc<T>` instance by calling `Rc::downgrade` and passing a reference to the\n`Rc<T>`. Strong references are how you can share ownership of an `Rc<T>`\ninstance. Weak references don’t express an ownership relationship, and their\ncount doesn’t affect when an `Rc<T>` instance is cleaned up. They won’t cause a\nreference cycle because any cycle involving some weak references will be broken\nonce the strong reference count of values involved is 0."
        },
        {
          "kind": "text",
          "content": "When you call `Rc::downgrade`, you get a smart pointer of type `Weak<T>`.\nInstead of increasing the `strong_count` in the `Rc<T>` instance by 1, calling\n`Rc::downgrade` increases the `weak_count` by 1. The `Rc<T>` type uses\n`weak_count` to keep track of how many `Weak<T>` references exist, similar to\n`strong_count`. The difference is the `weak_count` doesn’t need to be 0 for the\n`Rc<T>` instance to be cleaned up."
        },
        {
          "kind": "text",
          "content": "Because the value that `Weak<T>` references might have been dropped, to do\nanything with the value that a `Weak<T>` is pointing to you must make sure the\nvalue still exists. Do this by calling the `upgrade` method on a `Weak<T>`\ninstance, which will return an `Option<Rc<T>>`. You’ll get a result of `Some`\nif the `Rc<T>` value has not been dropped yet and a result of `None` if the\n`Rc<T>` value has been dropped. Because `upgrade` returns an `Option<Rc<T>>`,\nRust will ensure that the `Some` case and the `None` case are handled, and\nthere won’t be an invalid pointer."
        },
        {
          "kind": "text",
          "content": "As an example, rather than using a list whose items know only about the next\nitem, we’ll create a tree whose items know about their children items _and_\ntheir parent items."
        },
        {
          "kind": "text",
          "content": "#### Creating a Tree Data Structure: A `Node` with Child Nodes"
        },
        {
          "kind": "text",
          "content": "To start, we’ll build a tree with nodes that know about their child nodes.\nWe’ll create a struct named `Node` that holds its own `i32` value as well as\nreferences to its children `Node` values:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-27/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We want a `Node` to own its children, and we want to share that ownership with\nvariables so we can access each `Node` in the tree directly. To do this, we\ndefine the `Vec<T>` items to be values of type `Rc<Node>`. We also want to\nmodify which nodes are children of another node, so we have a `RefCell<T>` in\n`children` around the `Vec<Rc<Node>>`."
        },
        {
          "kind": "text",
          "content": "Next, we’ll use our struct definition and create one `Node` instance named\n`leaf` with the value `3` and no children, and another instance named `branch`\nwith the value `5` and `leaf` as one of its children, as shown in Listing 15-27."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-27\" file-name=\"src/main.rs\" caption=\"Creating a `leaf` node with no children and a `branch` node with `leaf` as one of its children\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-27/src/main.rs:there}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We clone the `Rc<Node>` in `leaf` and store that in `branch`, meaning the\n`Node` in `leaf` now has two owners: `leaf` and `branch`. We can get from\n`branch` to `leaf` through `branch.children`, but there’s no way to get from\n`leaf` to `branch`. The reason is that `leaf` has no reference to `branch` and\ndoesn’t know they’re related. We want `leaf` to know that `branch` is its\nparent. We’ll do that next."
        },
        {
          "kind": "text",
          "content": "#### Adding a Reference from a Child to Its Parent"
        },
        {
          "kind": "text",
          "content": "To make the child node aware of its parent, we need to add a `parent` field to\nour `Node` struct definition. The trouble is in deciding what the type of\n`parent` should be. We know it can’t contain an `Rc<T>` because that would\ncreate a reference cycle with `leaf.parent` pointing to `branch` and\n`branch.children` pointing to `leaf`, which would cause their `strong_count`\nvalues to never be 0."
        },
        {
          "kind": "text",
          "content": "Thinking about the relationships another way, a parent node should own its\nchildren: if a parent node is dropped, its child nodes should be dropped as\nwell. However, a child should not own its parent: if we drop a child node, the\nparent should still exist. This is a case for weak references!"
        },
        {
          "kind": "text",
          "content": "So, instead of `Rc<T>`, we’ll make the type of `parent` use `Weak<T>`,\nspecifically a `RefCell<Weak<Node>>`. Now our `Node` struct definition looks\nlike this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-28/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "A node will be able to refer to its parent node but doesn’t own its parent.\nIn Listing 15-28, we update `main` to use this new definition so the `leaf`\nnode will have a way to refer to its parent, `branch`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-28\" file-name=\"src/main.rs\" caption=\"A `leaf` node with a weak reference to its parent node `branch`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-28/src/main.rs:there}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Creating the `leaf` node looks similar to Listing 15-27 with the exception of\nthe `parent` field: `leaf` starts out without a parent, so we create a new,\nempty `Weak<Node>` reference instance."
        },
        {
          "kind": "text",
          "content": "At this point, when we try to get a reference to the parent of `leaf` by using\nthe `upgrade` method, we get a `None` value. We see this in the output from the\nfirst `println!` statement:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "leaf parent = None"
          }
        },
        {
          "kind": "text",
          "content": "When we create the `branch` node, it will also have a new `Weak<Node>`\nreference in the `parent` field, because `branch` doesn’t have a parent node.\nWe still have `leaf` as one of the children of `branch`. Once we have the\n`Node` instance in `branch`, we can modify `leaf` to give it a `Weak<Node>`\nreference to its parent. We use the `borrow_mut` method on the\n`RefCell<Weak<Node>>` in the `parent` field of `leaf`, and then we use the\n`Rc::downgrade` function to create a `Weak<Node>` reference to `branch` from\nthe `Rc<Node>` in `branch`."
        },
        {
          "kind": "text",
          "content": "When we print the parent of `leaf` again, this time we’ll get a `Some` variant\nholding `branch`: now `leaf` can access its parent! When we print `leaf`, we\nalso avoid the cycle that eventually ended in a stack overflow like we had in\nListing 15-26; the `Weak<Node>` references are printed as `(Weak)`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } })"
          }
        },
        {
          "kind": "text",
          "content": "The lack of infinite output indicates that this code didn’t create a reference\ncycle. We can also tell this by looking at the values we get from calling\n`Rc::strong_count` and `Rc::weak_count`."
        },
        {
          "kind": "text",
          "content": "#### Visualizing Changes to `strong_count` and `weak_count`"
        },
        {
          "kind": "text",
          "content": "Let’s look at how the `strong_count` and `weak_count` values of the `Rc<Node>`\ninstances change by creating a new inner scope and moving the creation of\n`branch` into that scope. By doing so, we can see what happens when `branch` is\ncreated and then dropped when it goes out of scope. The modifications are shown\nin Listing 15-29."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"15-29\" file-name=\"src/main.rs\" caption=\"Creating `branch` in an inner scope and examining strong and weak reference counts\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-29/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "After `leaf` is created, its `Rc<Node>` has a strong count of 1 and a weak\ncount of 0. In the inner scope, we create `branch` and associate it with\n`leaf`, at which point when we print the counts, the `Rc<Node>` in `branch`\nwill have a strong count of 1 and a weak count of 1 (for `leaf.parent` pointing\nto `branch` with a `Weak<Node>`). When we print the counts in `leaf`, we’ll see\nit will have a strong count of 2 because `branch` now has a clone of the\n`Rc<Node>` of `leaf` stored in `branch.children`, but will still have a weak\ncount of 0."
        },
        {
          "kind": "text",
          "content": "When the inner scope ends, `branch` goes out of scope and the strong count of\nthe `Rc<Node>` decreases to 0, so its `Node` is dropped. The weak count of 1\nfrom `leaf.parent` has no bearing on whether or not `Node` is dropped, so we\ndon’t get any memory leaks!"
        },
        {
          "kind": "text",
          "content": "If we try to access the parent of `leaf` after the end of the scope, we’ll get\n`None` again. At the end of the program, the `Rc<Node>` in `leaf` has a strong\ncount of 1 and a weak count of 0, because the variable `leaf` is now the only\nreference to the `Rc<Node>` again."
        },
        {
          "kind": "text",
          "content": "All of the logic that manages the counts and value dropping is built into\n`Rc<T>` and `Weak<T>` and their implementations of the `Drop` trait. By\nspecifying that the relationship from a child to its parent should be a\n`Weak<T>` reference in the definition of `Node`, you’re able to have parent\nnodes point to child nodes and vice versa without creating a reference cycle\nand memory leaks."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "This chapter covered how to use smart pointers to make different guarantees and\ntrade-offs from those Rust makes by default with regular references. The\n`Box<T>` type has a known size and points to data allocated on the heap. The\n`Rc<T>` type keeps track of the number of references to data on the heap so\nthat data can have multiple owners. The `RefCell<T>` type with its interior\nmutability gives us a type that we can use when we need an immutable type but\nneed to change an inner value of that type; it also enforces the borrowing\nrules at runtime instead of at compile time."
        },
        {
          "kind": "text",
          "content": "Also discussed were the `Deref` and `Drop` traits, which enable a lot of the\nfunctionality of smart pointers. We explored reference cycles that can cause\nmemory leaks and how to prevent them using `Weak<T>`."
        },
        {
          "kind": "text",
          "content": "If this chapter has piqued your interest and you want to implement your own\nsmart pointers, check out [“The Rustonomicon”][nomicon] for more useful\ninformation."
        },
        {
          "kind": "text",
          "content": "Next, we’ll talk about concurrency in Rust. You’ll even learn about a few new\nsmart pointers."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "e3a093e2-4809-4aa1-95b4-427833d8d23d",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::rc::Rc;\nfn main() {\n    let r1 = Rc::new(0);\n    let r4 = {\n        let r2 = Rc::clone(&r1);\n        Rc::downgrade(&r2)\n    };\n    let r5 = Rc::clone(&r1);\n    let r6 = r4.upgrade();\n    println!(\"{} {}\", Rc::strong_count(&r1), Rc::weak_count(&r1));\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "3 1"
                },
                "context": "The three strong refs are `r1`, `r5`, and `r6`. The one weak ref is `r4`, which is dropped at the end of `main`.\n`r2` is dropped at the end of its scope.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[nomicon]: https://doc.rust-lang.org/nomicon/index.html"
        }
      ]
    },
    {
      "title": "Fearless Concurrency",
      "file": "ch16-00-concurrency.md",
      "elements": [
        {
          "kind": "text",
          "content": "Handling concurrent programming safely and efficiently is another of Rust’s\nmajor goals. _Concurrent programming_, in which different parts of a program\nexecute independently, and _parallel programming_, in which different parts of\na program execute at the same time, are becoming increasingly important as more\ncomputers take advantage of their multiple processors. Historically,\nprogramming in these contexts has been difficult and error prone. Rust hopes to\nchange that."
        },
        {
          "kind": "text",
          "content": "Initially, the Rust team thought that ensuring memory safety and preventing\nconcurrency problems were two separate challenges to be solved with different\nmethods. Over time, the team discovered that the ownership and type systems are\na powerful set of tools to help manage memory safety _and_ concurrency\nproblems! By leveraging ownership and type checking, many concurrency errors\nare compile-time errors in Rust rather than runtime errors. Therefore, rather\nthan making you spend lots of time trying to reproduce the exact circumstances\nunder which a runtime concurrency bug occurs, incorrect code will refuse to\ncompile and present an error explaining the problem. As a result, you can fix\nyour code while you’re working on it rather than potentially after it has been\nshipped to production. We’ve nicknamed this aspect of Rust _fearless_\n_concurrency_. Fearless concurrency allows you to write code that is free of\nsubtle bugs and is easy to refactor without introducing new bugs."
        },
        {
          "kind": "text",
          "content": "> Note: For simplicity’s sake, we’ll refer to many of the problems as\n> _concurrent_ rather than being more precise by saying _concurrent and/or\n> parallel_. For this chapter, please mentally substitute _concurrent\n> and/or parallel_ whenever we use _concurrent_. In the next chapter, where the\n> distinction matters more, we’ll be more specific."
        },
        {
          "kind": "text",
          "content": "Many languages are dogmatic about the solutions they offer for handling\nconcurrent problems. For example, Erlang has elegant functionality for\nmessage-passing concurrency but has only obscure ways to share state between\nthreads. Supporting only a subset of possible solutions is a reasonable\nstrategy for higher-level languages, because a higher-level language promises\nbenefits from giving up some control to gain abstractions. However, lower-level\nlanguages are expected to provide the solution with the best performance in any\ngiven situation and have fewer abstractions over the hardware. Therefore, Rust\noffers a variety of tools for modeling problems in whatever way is appropriate\nfor your situation and requirements."
        },
        {
          "kind": "text",
          "content": "Here are the topics we’ll cover in this chapter:"
        },
        {
          "kind": "text",
          "content": "- How to create threads to run multiple pieces of code at the same time\n- _Message-passing_ concurrency, where channels send messages between threads\n- _Shared-state_ concurrency, where multiple threads have access to some piece\nof data\n- The `Sync` and `Send` traits, which extend Rust’s concurrency guarantees to\nuser-defined types as well as types provided by the standard library"
        }
      ]
    },
    {
      "title": "Using Threads to Run Code Simultaneously",
      "file": "ch16-01-threads.md",
      "elements": [
        {
          "kind": "text",
          "content": "In most current operating systems, an executed program’s code is run in a\n_process_, and the operating system will manage multiple processes at once.\nWithin a program, you can also have independent parts that run simultaneously.\nThe features that run these independent parts are called _threads_. For\nexample, a web server could have multiple threads so that it can respond to\nmore than one request at the same time."
        },
        {
          "kind": "text",
          "content": "Splitting the computation in your program into multiple threads to run multiple\ntasks at the same time can improve performance, but it also adds complexity.\nBecause threads can run simultaneously, there’s no inherent guarantee about the\norder in which parts of your code on different threads will run. This can lead\nto problems, such as:"
        },
        {
          "kind": "text",
          "content": "- Race conditions, in which threads are accessing data or resources in an\ninconsistent order\n- Deadlocks, in which two threads are waiting for each other, preventing both\nthreads from continuing\n- Bugs that happen only in certain situations and are hard to reproduce and fix\nreliably"
        },
        {
          "kind": "text",
          "content": "Rust attempts to mitigate the negative effects of using threads, but\nprogramming in a multithreaded context still takes careful thought and requires\na code structure that is different from that in programs running in a single\nthread."
        },
        {
          "kind": "text",
          "content": "Programming languages implement threads in a few different ways, and many\noperating systems provide an API the language can call for creating new threads.\nThe Rust standard library uses a _1:1_ model of thread implementation, whereby a\nprogram uses one operating system thread per one language thread. There are\ncrates that implement other models of threading that make different tradeoffs to\nthe 1:1 model. (Rust’s async system, which we will see in the next chapter,\nprovides another approach to concurrency as well.)"
        },
        {
          "kind": "text",
          "content": "### Creating a New Thread with `spawn`"
        },
        {
          "kind": "text",
          "content": "To create a new thread, we call the `thread::spawn` function and pass it a\nclosure (we talked about closures in Chapter 13) containing the code we want to\nrun in the new thread. The example in Listing 16-1 prints some text from a main\nthread and other text from a new thread:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-1\" file-name=\"src/main.rs\" caption=\"Creating a new thread to print one thing while the main thread prints something else\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that when the main thread of a Rust program completes, all spawned threads\nare shut down, whether or not they have finished running. The output from this\nprogram might be a little different every time, but it will look similar to the\nfollowing:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "hi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!"
          }
        },
        {
          "kind": "text",
          "content": "The calls to `thread::sleep` force a thread to stop its execution for a short\nduration, allowing a different thread to run. The threads will probably take\nturns, but that isn’t guaranteed: it depends on how your operating system\nschedules the threads. In this run, the main thread printed first, even though\nthe print statement from the spawned thread appears first in the code. And even\nthough we told the spawned thread to print until `i` is `9`, it only got to `5`\nbefore the main thread shut down."
        },
        {
          "kind": "text",
          "content": "If you run this code and only see output from the main thread, or don’t see any\noverlap, try increasing the numbers in the ranges to create more opportunities\nfor the operating system to switch between the threads."
        },
        {
          "kind": "text",
          "content": "### Waiting for All Threads to Finish Using `join` Handles"
        },
        {
          "kind": "text",
          "content": "The code in Listing 16-1 not only stops the spawned thread prematurely most of\nthe time due to the main thread ending, but because there is no guarantee on\nthe order in which threads run, we also can’t guarantee that the spawned thread\nwill get to run at all!"
        },
        {
          "kind": "text",
          "content": "We can fix the problem of the spawned thread not running or ending prematurely\nby saving the return value of `thread::spawn` in a variable. The return type of\n`thread::spawn` is `JoinHandle<T>`. A `JoinHandle<T>` is an owned value that,\nwhen we call the `join` method on it, will wait for its thread to finish.\nListing 16-2 shows how to use the `JoinHandle<T>` of the thread we created in\nListing 16-1 and how to call `join` to make sure the spawned thread finishes\nbefore `main` exits."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-2\" file-name=\"src/main.rs\" caption=\"Saving a `JoinHandle<T>` from `thread::spawn` to guarantee the thread is run to completion\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-02/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Calling `join` on the handle blocks the thread currently running until the\nthread represented by the handle terminates. _Blocking_ a thread means that\nthread is prevented from performing work or exiting. Because we’ve put the call\nto `join` after the main thread’s `for` loop, running Listing 16-2 should\nproduce output similar to this:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "hi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!"
          }
        },
        {
          "kind": "text",
          "content": "The two threads continue alternating, but the main thread waits because of the\ncall to `handle.join()` and does not end until the spawned thread is finished."
        },
        {
          "kind": "text",
          "content": "But let’s see what happens when we instead move `handle.join()` before the\n`for` loop in `main`, like this:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/no-listing-01-join-too-early/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The main thread will wait for the spawned thread to finish and then run its\n`for` loop, so the output won’t be interleaved anymore, as shown here:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "hi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread!"
          }
        },
        {
          "kind": "text",
          "content": "Small details, such as where `join` is called, can affect whether or not your\nthreads run at the same time."
        },
        {
          "kind": "text",
          "content": "### Using `move` Closures with Threads"
        },
        {
          "kind": "text",
          "content": "We'll often use the `move` keyword with closures passed to `thread::spawn`\nbecause the closure will then take ownership of the values it uses from the\nenvironment, thus transferring ownership of those values from one thread to\nanother. In [“Capturing the Environment With Closures”][capture]<!-- ignore -->\nin Chapter 13, we discussed `move` in the context of closures. Now, we’ll\nconcentrate more on the interaction between `move` and `thread::spawn`."
        },
        {
          "kind": "text",
          "content": "Notice in Listing 16-1 that the closure we pass to `thread::spawn` takes no\narguments: we’re not using any data from the main thread in the spawned\nthread’s code. To use data from the main thread in the spawned thread, the\nspawned thread’s closure must capture the values it needs. Listing 16-3 shows\nan attempt to create a vector in the main thread and use it in the spawned\nthread. However, this won’t work yet, as you’ll see in a moment."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-3\" file-name=\"src/main.rs\" caption=\"Attempting to use a vector created by the main thread in another thread\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-03/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The closure uses `v`, so it will capture `v` and make it part of the closure’s\nenvironment. Because `thread::spawn` runs this closure in a new thread, we\nshould be able to access `v` inside that new thread. But when we compile this\nexample, we get the following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch16-fearless-concurrency/listing-16-03/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust _infers_ how to capture `v`, and because `println!` only needs a reference\nto `v`, the closure tries to borrow `v`. However, there’s a problem: Rust can’t\ntell how long the spawned thread will run, so it doesn’t know whether the\nreference to `v` will always be valid."
        },
        {
          "kind": "text",
          "content": "Listing 16-4 provides a scenario that’s more likely to have a reference to `v`\nthat won’t be valid:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-4\" file-name=\"src/main.rs\" caption=\"A thread with a closure that attempts to capture a reference to `v` from a main thread that drops `v`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-04/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If Rust allowed us to run this code, there’s a possibility that the spawned\nthread would be immediately put in the background without running at all. The\nspawned thread has a reference to `v` inside, but the main thread immediately\ndrops `v`, using the `drop` function we discussed in Chapter 15. Then, when the\nspawned thread starts to execute, `v` is no longer valid, so a reference to it\nis also invalid. Oh no!"
        },
        {
          "kind": "text",
          "content": "To fix the compiler error in Listing 16-3, we can use the error message’s\nadvice:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\nafter automatic regeneration, look at listings/ch16-fearless-concurrency/listing-16-03/output.txt and copy the relevant part\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++"
          }
        },
        {
          "kind": "text",
          "content": "By adding the `move` keyword before the closure, we force the closure to take\nownership of the values it’s using rather than allowing Rust to infer that it\nshould borrow the values. The modification to Listing 16-3 shown in Listing\n16-5 will compile and run as we intend."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-5\" file-name=\"src/main.rs\" caption=\"Using the `move` keyword to force a closure to take ownership of the values it uses\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-05/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We might be tempted to try the same thing to fix the code in Listing 16-4 where\nthe main thread called `drop` by using a `move` closure. However, this fix will\nnot work because what Listing 16-4 is trying to do is disallowed for a\ndifferent reason. If we added `move` to the closure, we would move `v` into the\nclosure’s environment, and we could no longer call `drop` on it in the main\nthread. We would get this compiler error instead:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch16-fearless-concurrency/output-only-01-move-drop/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust’s ownership rules have saved us again! We got an error from the code in\nListing 16-3 because Rust was being conservative and only borrowing `v` for the\nthread, which meant the main thread could theoretically invalidate the spawned\nthread’s reference. By telling Rust to move ownership of `v` to the spawned\nthread, we’re guaranteeing to Rust that the main thread won’t use `v` anymore.\nIf we change Listing 16-4 in the same way, we’re then violating the ownership\nrules when we try to use `v` in the main thread. The `move` keyword overrides\nRust’s conservative default of borrowing; it doesn’t let us violate the\nownership rules."
        },
        {
          "kind": "text",
          "content": "Now that we’ve covered what threads are and the methods supplied by the thread\nAPI, let’s look at some situations in which we can use threads."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "53cb3740-2962-4379-a25f-a65e72812a95",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::thread;\nfn main() {\n    let mut n = 1;\n    let t = thread::spawn(move || {\n        n = n + 1;\n        thread::spawn(move || {\n            n = n + 1;\n        })\n    });\n    n = n + 1;\n    t.join().unwrap().join().unwrap();\n    println!(\"{n}\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "2"
                },
                "context": "The `move` keyword causes `n` to be copied into the closure, so the assignments\n`n = n + 1` within `thread::spawn` have no effect on the outer `n`.\n"
              },
              {
                "id": "c2a84e6d-8143-4944-bf20-b00e49144ac9",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider this example from the text where a vector is improperly captured by a thread:\n\n```\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(|| {\n        println!(\"Here's a vector: {:?}\", v);\n    });\n\n    handle.join().unwrap();\n}\n```\n\nThe Rust compiler includes this diagnostic:\n\n```text\nnote: function requires argument type to outlive `'static`\n --> src/main.rs:6:18\n  |\n6 |       let handle = thread::spawn(|| {\n  |  __________________^\n7 | |         println!(\"Here's a vector: {:?}\", v);\n8 | |     });\n  | |______^\n```\n\nRecall that `'static` is the lifetime of references that are valid for the entire program's duration.\n\nWhich of the following best describes the note \"function requires argument type to outlive `'static`\"?\n",
                  "distractors": [
                    "The closure passed to `thread::spawn` is not allowed to take any arguments",
                    "The vector `v` contains values that do not outlive `'static`",
                    "A closure may only capture string constants of type `&'static str`"
                  ]
                },
                "answer": {
                  "answer": "Rust doesn't know how long a thread will run, so the thread's captures must live forever"
                },
                "context": "If a closure captures a reference to a value that lived less than `'static`, it's possible that the thread would live \nlonger than the value and violate memory safety. Note that [`thread::scope`](https://doc.rust-lang.org/std/thread/fn.scope.html) \ncan be used to allow threads to capture non-static references by statically limiting the lifetime of the thread.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[capture]: ch13-01-closures.html#capturing-the-environment-with-closures"
        }
      ]
    },
    {
      "title": "Using Message Passing to Transfer Data Between Threads",
      "file": "ch16-02-message-passing.md",
      "elements": [
        {
          "kind": "text",
          "content": "One increasingly popular approach to ensuring safe concurrency is _message\npassing_, where threads or actors communicate by sending each other messages\ncontaining data. Here’s the idea in a slogan from [the Go language documentation](https://golang.org/doc/effective_go.html#concurrency):\n“Do not communicate by sharing memory; instead, share memory by communicating.”"
        },
        {
          "kind": "text",
          "content": "To accomplish message-sending concurrency, Rust's standard library provides an\nimplementation of channels. A _channel_ is a general programming concept by\nwhich data is sent from one thread to another."
        },
        {
          "kind": "text",
          "content": "You can imagine a channel in programming as being like a directional channel of\nwater, such as a stream or a river. If you put something like a rubber duck\ninto a river, it will travel downstream to the end of the waterway."
        },
        {
          "kind": "text",
          "content": "A channel has two halves: a transmitter and a receiver. The transmitter half is\nthe upstream location where you put the rubber duck into the river, and the\nreceiver half is where the rubber duck ends up downstream. One part of your\ncode calls methods on the transmitter with the data you want to send, and\nanother part checks the receiving end for arriving messages. A channel is said\nto be _closed_ if either the transmitter or receiver half is dropped."
        },
        {
          "kind": "text",
          "content": "Here, we’ll work up to a program that has one thread to generate values and\nsend them down a channel, and another thread that will receive the values and\nprint them out. We’ll be sending simple values between threads using a channel\nto illustrate the feature. Once you’re familiar with the technique, you could\nuse channels for any threads that need to communicate with each other, such as\na chat system or a system where many threads perform parts of a calculation and\nsend the parts to one thread that aggregates the results."
        },
        {
          "kind": "text",
          "content": "First, in Listing 16-6, we’ll create a channel but not do anything with it.\nNote that this won’t compile yet because Rust can’t tell what type of values we\nwant to send over the channel."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-6\" file-name=\"src/main.rs\" caption=\"Creating a channel and assigning the two halves to `tx` and `rx`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-06/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We create a new channel using the `mpsc::channel` function; `mpsc` stands for\n_multiple producer, single consumer_. In short, the way Rust’s standard library\nimplements channels means a channel can have multiple _sending_ ends that\nproduce values but only one _receiving_ end that consumes those values. Imagine\nmultiple streams flowing together into one big river: everything sent down any\nof the streams will end up in one river at the end. We’ll start with a single\nproducer for now, but we’ll add multiple producers when we get this example\nworking."
        },
        {
          "kind": "text",
          "content": "The `mpsc::channel` function returns a tuple, the first element of which is the\nsending end—the transmitter—and the second element of which is the receiving\nend—the receiver. The abbreviations `tx` and `rx` are traditionally used in many\nfields for _transmitter_ and _receiver_, respectively, so we name our variables\nas such to indicate each end. We’re using a `let` statement with a pattern that\ndestructures the tuples; we’ll discuss the use of patterns in `let` statements\nand destructuring in Chapter 19. For now, know that using a `let` statement this\nway is a convenient approach to extract the pieces of the tuple returned by\n`mpsc::channel`."
        },
        {
          "kind": "text",
          "content": "Let’s move the transmitting end into a spawned thread and have it send one\nstring so the spawned thread is communicating with the main thread, as shown in\nListing 16-7. This is like putting a rubber duck in the river upstream or\nsending a chat message from one thread to another."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-7\" file-name=\"src/main.rs\" caption='Moving `tx` to a spawned thread and sending `\"hi\"`'>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-07/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Again, we’re using `thread::spawn` to create a new thread and then using `move`\nto move `tx` into the closure so the spawned thread owns `tx`. The spawned\nthread needs to own the transmitter to be able to send messages through the\nchannel."
        },
        {
          "kind": "text",
          "content": "The transmitter has a `send` method that takes the value we want to send. The\n`send` method returns a `Result<T, E>` type, so if the receiver has already\nbeen dropped and there’s nowhere to send a value, the send operation will\nreturn an error. In this example, we’re calling `unwrap` to panic in case of an\nerror. But in a real application, we would handle it properly: return to\nChapter 9 to review strategies for proper error handling."
        },
        {
          "kind": "text",
          "content": "In Listing 16-8, we’ll get the value from the receiver in the main thread. This\nis like retrieving the rubber duck from the water at the end of the river or\nreceiving a chat message."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-8\" file-name=\"src/main.rs\" caption='Receiving the value `\"hi\"` in the main thread and printing it'>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-08/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The receiver has two useful methods: `recv` and `try_recv`. We’re using `recv`,\nshort for _receive_, which will block the main thread’s execution and wait\nuntil a value is sent down the channel. Once a value is sent, `recv` will\nreturn it in a `Result<T, E>`. When the transmitter closes, `recv` will return\nan error to signal that no more values will be coming."
        },
        {
          "kind": "text",
          "content": "The `try_recv` method doesn’t block, but will instead return a `Result<T, E>`\nimmediately: an `Ok` value holding a message if one is available and an `Err`\nvalue if there aren’t any messages this time. Using `try_recv` is useful if\nthis thread has other work to do while waiting for messages: we could write a\nloop that calls `try_recv` every so often, handles a message if one is\navailable, and otherwise does other work for a little while until checking\nagain."
        },
        {
          "kind": "text",
          "content": "We’ve used `recv` in this example for simplicity; we don’t have any other work\nfor the main thread to do other than wait for messages, so blocking the main\nthread is appropriate."
        },
        {
          "kind": "text",
          "content": "When we run the code in Listing 16-8, we’ll see the value printed from the main\nthread:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Got: hi"
          }
        },
        {
          "kind": "text",
          "content": "Perfect!"
        },
        {
          "kind": "text",
          "content": "### Channels and Ownership Transference"
        },
        {
          "kind": "text",
          "content": "The ownership rules play a vital role in message sending because they help you\nwrite safe, concurrent code. Preventing errors in concurrent programming is the\nadvantage of thinking about ownership throughout your Rust programs. Let’s do\nan experiment to show how channels and ownership work together to prevent\nproblems: we’ll try to use a `val` value in the spawned thread _after_ we’ve\nsent it down the channel. Try compiling the code in Listing 16-9 to see why\nthis code isn’t allowed."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-9\" file-name=\"src/main.rs\" caption=\"Attempting to use `val` after we’ve sent it down the channel\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-09/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we try to print `val` after we’ve sent it down the channel via `tx.send`.\nAllowing this would be a bad idea: once the value has been sent to another\nthread, that thread could modify or drop it before we try to use the value\nagain. Potentially, the other thread’s modifications could cause errors or\nunexpected results due to inconsistent or nonexistent data. However, Rust gives\nus an error if we try to compile the code in Listing 16-9:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch16-fearless-concurrency/listing-16-09/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Our concurrency mistake has caused a compile time error. The `send` function\ntakes ownership of its parameter, and when the value is moved, the receiver\ntakes ownership of it. This stops us from accidentally using the value again\nafter sending it; the ownership system checks that everything is okay."
        },
        {
          "kind": "text",
          "content": "### Sending Multiple Values and Seeing the Receiver Waiting"
        },
        {
          "kind": "text",
          "content": "The code in Listing 16-8 compiled and ran, but it didn’t clearly show us that\ntwo separate threads were talking to each other over the channel. In Listing\n16-10 we’ve made some modifications that will prove the code in Listing 16-8 is\nrunning concurrently: the spawned thread will now send multiple messages and\npause for a second between each message."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-10\" file-name=\"src/main.rs\" caption=\"Sending multiple messages and pausing between each one\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-10/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This time, the spawned thread has a vector of strings that we want to send to\nthe main thread. We iterate over them, sending each individually, and pause\nbetween each by calling the `thread::sleep` function with a `Duration` value of\none second."
        },
        {
          "kind": "text",
          "content": "In the main thread, we’re not calling the `recv` function explicitly anymore:\ninstead, we’re treating `rx` as an iterator. For each value received, we’re\nprinting it. When the channel is closed, iteration will end."
        },
        {
          "kind": "text",
          "content": "When running the code in Listing 16-10, you should see the following output\nwith a one-second pause in between each line:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Got: hi\nGot: from\nGot: the\nGot: thread"
          }
        },
        {
          "kind": "text",
          "content": "Because we don’t have any code that pauses or delays in the `for` loop in the\nmain thread, we can tell that the main thread is waiting to receive values from\nthe spawned thread."
        },
        {
          "kind": "text",
          "content": "### Creating Multiple Producers by Cloning the Transmitter"
        },
        {
          "kind": "text",
          "content": "Earlier we mentioned that `mpsc` was an acronym for _multiple producer,\nsingle consumer_. Let’s put `mpsc` to use and expand the code in Listing 16-10\nto create multiple threads that all send values to the same receiver. We can do\nso by cloning the transmitter, as shown in Listing 16-11."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-11\" file-name=\"src/main.rs\" caption=\"Sending multiple messages from multiple producers\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This time, before we create the first spawned thread, we call `clone` on the\ntransmitter. This will give us a new transmitter we can pass to the first\nspawned thread. We pass the original transmitter to a second spawned thread.\nThis gives us two threads, each sending different messages to the one receiver."
        },
        {
          "kind": "text",
          "content": "When you run the code, your output should look something like this:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Got: hi\nGot: more\nGot: from\nGot: messages\nGot: for\nGot: the\nGot: thread\nGot: you"
          }
        },
        {
          "kind": "text",
          "content": "You might see the values in another order, depending on your system. This is\nwhat makes concurrency interesting as well as difficult. If you experiment with\n`thread::sleep`, giving it various values in the different threads, each run\nwill be more nondeterministic and create different output each time."
        },
        {
          "kind": "text",
          "content": "Now that we’ve looked at how channels work, let’s look at a different method of\nconcurrency."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5b117680-87a5-4b18-abba-3415602477eb",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::{sync::mpsc, thread};\n\nenum ClientMessage { Incr, Get, Quit }\nenum ServerMessage { Get(usize) }\n\nfn main() {\n    let (server_tx, client_rx) = mpsc::channel();\n    let (client_tx, server_rx) = mpsc::channel();\n    let server = thread::spawn(move || {\n        let mut n = 0;\n        loop {\n            match server_rx.recv().unwrap() {\n                ClientMessage::Quit => break,\n                ClientMessage::Incr => n += 1,\n                ClientMessage::Get => server_tx.send(ServerMessage::Get(n)).unwrap()\n            }\n        }\n    });\n\n    for msg in [ClientMessage::Incr, ClientMessage::Get, ClientMessage::Quit] {\n        client_tx.send(msg).unwrap();\n    }\n\n    if let ServerMessage::Get(n) = client_rx.recv().unwrap() {\n        println!(\"{}\", n)\n    }\n\n    server.join().unwrap();\n}\n\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "1"
                },
                "context": "This is an example of how to use enums to send different kinds of messages over a channel.\nHere, the client increments a number, retrieves the number, then exits the server.\n"
              },
              {
                "id": "94934f0f-4db9-48ee-b63e-198ad1a9ffc8",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::{sync::mpsc, thread};\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n    thread::spawn(move || {\n        let s = String::from(\"Hello world\");\n        tx.send(s.clone()).unwrap();\n        tx.send(s.len()).unwrap();\n    });\n    let s = rx.recv().unwrap();\n    let n = rx.recv().unwrap();\n    println!(\"{s} {n}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 8
                },
                "context": "Channels can only send values of a single type, so `tx.send(s.len())` is a type error.\nIf you want to send values of multiple types, you can use either an enum or the \n[`Any`](https://doc.rust-lang.org/std/any/trait.Any.html) trait.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Shared-State Concurrency",
      "file": "ch16-03-shared-state.md",
      "elements": [
        {
          "kind": "text",
          "content": "Message passing is a fine way to handle concurrency, but it’s not the only\nway. Another method would be for multiple threads to access the same shared\ndata. Consider this part of the slogan from the Go language documentation\nagain: “Do not communicate by sharing memory.”"
        },
        {
          "kind": "text",
          "content": "What would communicating by sharing memory look like? In addition, why would\nmessage-passing enthusiasts caution not to use memory sharing?"
        },
        {
          "kind": "text",
          "content": "In a way, channels in any programming language are similar to single ownership,\nbecause once you transfer a value down a channel, you should no longer use that\nvalue. Shared-memory concurrency is like multiple ownership: multiple threads\ncan access the same memory location at the same time. As you saw in Chapter 15,\nwhere smart pointers made multiple ownership possible, multiple ownership can\nadd complexity because these different owners need managing. Rust’s type system\nand ownership rules greatly assist in getting this management correct. For an\nexample, let’s look at mutexes, one of the more common concurrency primitives\nfor shared memory."
        },
        {
          "kind": "text",
          "content": "### Using Mutexes to Allow Access to Data from One Thread at a Time"
        },
        {
          "kind": "text",
          "content": "_Mutex_ is an abbreviation for _mutual exclusion_, as in a mutex allows only\none thread to access some data at any given time. To access the data in a\nmutex, a thread must first signal that it wants access by asking to acquire the\nmutex’s _lock_. The lock is a data structure that is part of the mutex that\nkeeps track of who currently has exclusive access to the data. Therefore, the\nmutex is described as _guarding_ the data it holds via the locking system."
        },
        {
          "kind": "text",
          "content": "Mutexes have a reputation for being difficult to use because you have to\nremember two rules:"
        },
        {
          "kind": "text",
          "content": "1. You must attempt to acquire the lock before using the data.\n2. When you’re done with the data that the mutex guards, you must unlock the\ndata so other threads can acquire the lock."
        },
        {
          "kind": "text",
          "content": "For a real-world metaphor for a mutex, imagine a panel discussion at a\nconference with only one microphone. Before a panelist can speak, they have to\nask or signal that they want to use the microphone. When they get the\nmicrophone, they can talk for as long as they want to and then hand the\nmicrophone to the next panelist who requests to speak. If a panelist forgets to\nhand the microphone off when they’re finished with it, no one else is able to\nspeak. If management of the shared microphone goes wrong, the panel won’t work\nas planned!"
        },
        {
          "kind": "text",
          "content": "Management of mutexes can be incredibly tricky to get right, which is why so\nmany people are enthusiastic about channels. However, thanks to Rust’s type\nsystem and ownership rules, you can’t get locking and unlocking wrong."
        },
        {
          "kind": "text",
          "content": "#### The API of `Mutex<T>`"
        },
        {
          "kind": "text",
          "content": "As an example of how to use a mutex, let’s start by using a mutex in a\nsingle-threaded context, as shown in Listing 16-12."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-12\" file-name=\"src/main.rs\" caption=\"Exploring the API of `Mutex<T>` in a single-threaded context for simplicity\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-12/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As with many types, we create a `Mutex<T>` using the associated function `new`.\nTo access the data inside the mutex, we use the `lock` method to acquire the\nlock. This call will block the current thread so it can’t do any work until\nit’s our turn to have the lock."
        },
        {
          "kind": "text",
          "content": "The call to `lock` would fail if another thread holding the lock panicked. In\nthat case, no one would ever be able to get the lock, so we’ve chosen to\n`unwrap` and have this thread panic if we’re in that situation."
        },
        {
          "kind": "text",
          "content": "After we’ve acquired the lock, we can treat the return value, named `num` in\nthis case, as a mutable reference to the data inside. The type system ensures\nthat we acquire a lock before using the value in `m`. The type of `m` is\n`Mutex<i32>`, not `i32`, so we _must_ call `lock` to be able to use the `i32`\nvalue. We can’t forget; the type system won’t let us access the inner `i32`\notherwise."
        },
        {
          "kind": "text",
          "content": "As you might suspect, `Mutex<T>` is a smart pointer. More accurately, the call\nto `lock` _returns_ a smart pointer called `MutexGuard`, wrapped in a\n`LockResult` that we handled with the call to `unwrap`. The `MutexGuard` smart\npointer implements `Deref` to point at our inner data; the smart pointer also\nhas a `Drop` implementation that releases the lock automatically when a\n`MutexGuard` goes out of scope, which happens at the end of the inner scope. As\na result, we don’t risk forgetting to release the lock and blocking the mutex\nfrom being used by other threads, because the lock release happens\nautomatically."
        },
        {
          "kind": "text",
          "content": "After dropping the lock, we can print the mutex value and see that we were able\nto change the inner `i32` to 6."
        },
        {
          "kind": "text",
          "content": "#### Sharing a `Mutex<T>` Between Multiple Threads"
        },
        {
          "kind": "text",
          "content": "Now let’s try to share a value between multiple threads using `Mutex<T>`. We’ll\nspin up 10 threads and have them each increment a counter value by 1, so the\ncounter goes from 0 to 10. The example in Listing 16-13 will have a compiler\nerror, and we’ll use that error to learn more about using `Mutex<T>` and how\nRust helps us use it correctly."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-13\" file-name=\"src/main.rs\" caption=\"Ten threads, each incrementing a counter guarded by a `Mutex<T>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-13/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We create a `counter` variable to hold an `i32` inside a `Mutex<T>`, as we did\nin Listing 16-12. Next, we create 10 threads by iterating over a range of\nnumbers. We use `thread::spawn` and give all the threads the same closure: one\nthat moves the counter into the thread, acquires a lock on the `Mutex<T>` by\ncalling the `lock` method, and then adds 1 to the value in the mutex. When a\nthread finishes running its closure, `num` will go out of scope and release the\nlock so another thread can acquire it."
        },
        {
          "kind": "text",
          "content": "In the main thread, we collect all the join handles. Then, as we did in Listing\n16-2, we call `join` on each handle to make sure all the threads finish. At\nthat point, the main thread will acquire the lock and print the result of this\nprogram."
        },
        {
          "kind": "text",
          "content": "We hinted that this example wouldn’t compile. Now let’s find out why!"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch16-fearless-concurrency/listing-16-13/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error message states that the `counter` value was moved in the previous\niteration of the loop. Rust is telling us that we can’t move the ownership\nof lock `counter` into multiple threads. Let’s fix the compiler error with the\nmultiple-ownership method we discussed in Chapter 15."
        },
        {
          "kind": "text",
          "content": "#### Multiple Ownership with Multiple Threads"
        },
        {
          "kind": "text",
          "content": "In Chapter 15, we gave a value to multiple owners by using the smart pointer\n`Rc<T>` to create a reference counted value. Let’s do the same here and see\nwhat happens. We’ll wrap the `Mutex<T>` in `Rc<T>` in Listing 16-14 and clone\nthe `Rc<T>` before moving ownership to the thread."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-14\" file-name=\"src/main.rs\" caption=\"Attempting to use `Rc<T>` to allow multiple threads to own the `Mutex<T>`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-14/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Once again, we compile and get… different errors! The compiler is teaching us a\nlot."
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch16-fearless-concurrency/listing-16-14/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Wow, that error message is very wordy! Here’s the important part to focus on:\n`` `Rc<Mutex<i32>>` cannot be sent between threads safely ``. The compiler is\nalso telling us the reason why: `` the trait `Send` is not implemented for\n`Rc<Mutex<i32>>` ``. We’ll talk about `Send` in the next section: it’s one of\nthe traits that ensures the types we use with threads are meant for use in\nconcurrent situations."
        },
        {
          "kind": "text",
          "content": "Unfortunately, `Rc<T>` is not safe to share across threads. When `Rc<T>`\nmanages the reference count, it adds to the count for each call to `clone` and\nsubtracts from the count when each clone is dropped. But it doesn’t use any\nconcurrency primitives to make sure that changes to the count can’t be\ninterrupted by another thread. This could lead to wrong counts—subtle bugs that\ncould in turn lead to memory leaks or a value being dropped before we’re done\nwith it. What we need is a type that is exactly like `Rc<T>` but one that makes\nchanges to the reference count in a thread-safe way."
        },
        {
          "kind": "text",
          "content": "#### Atomic Reference Counting with `Arc<T>`"
        },
        {
          "kind": "text",
          "content": "Fortunately, `Arc<T>` _is_ a type like `Rc<T>` that is safe to use in\nconcurrent situations. The _a_ stands for _atomic_, meaning it’s an _atomically\nreference-counted_ type. Atomics are an additional kind of concurrency\nprimitive that we won’t cover in detail here: see the standard library\ndocumentation for [`std::sync::atomic`][atomic]<!-- ignore --> for more\ndetails. At this point, you just need to know that atomics work like primitive\ntypes but are safe to share across threads."
        },
        {
          "kind": "text",
          "content": "You might then wonder why all primitive types aren’t atomic and why standard\nlibrary types aren’t implemented to use `Arc<T>` by default. The reason is that\nthread safety comes with a performance penalty that you only want to pay when\nyou really need to. If you’re just performing operations on values within a\nsingle thread, your code can run faster if it doesn’t have to enforce the\nguarantees atomics provide."
        },
        {
          "kind": "text",
          "content": "Let’s return to our example: `Arc<T>` and `Rc<T>` have the same API, so we fix\nour program by changing the `use` line, the call to `new`, and the call to\n`clone`. The code in Listing 16-15 will finally compile and run."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"16-15\" file-name=\"src/main.rs\" caption=\"Using an `Arc<T>` to wrap the `Mutex<T>` to be able to share ownership across multiple threads\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-15/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print the following:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Result: 10"
          }
        },
        {
          "kind": "text",
          "content": "We did it! We counted from 0 to 10, which may not seem very impressive, but it\ndid teach us a lot about `Mutex<T>` and thread safety. You could also use this\nprogram’s structure to do more complicated operations than just incrementing a\ncounter. Using this strategy, you can divide a calculation into independent\nparts, split those parts across threads, and then use a `Mutex<T>` to have each\nthread update the final result with its part."
        },
        {
          "kind": "text",
          "content": "Note that if you are doing simple numerical operations, there are types simpler\nthan `Mutex<T>` types provided by the [`std::sync::atomic` module of the\nstandard library][atomic]<!-- ignore -->. These types provide safe, concurrent,\natomic access to primitive types. We chose to use `Mutex<T>` with a primitive\ntype for this example so we could concentrate on how `Mutex<T>` works."
        },
        {
          "kind": "text",
          "content": "### Similarities Between `RefCell<T>`/`Rc<T>` and `Mutex<T>`/`Arc<T>`"
        },
        {
          "kind": "text",
          "content": "You might have noticed that `counter` is immutable but we could get a mutable\nreference to the value inside it; this means `Mutex<T>` provides interior\nmutability, as the `Cell` family does. In the same way we used `RefCell<T>` in\nChapter 15 to allow us to mutate contents inside an `Rc<T>`, we use `Mutex<T>`\nto mutate contents inside an `Arc<T>`."
        },
        {
          "kind": "text",
          "content": "Another detail to note is that Rust can’t protect you from all kinds of logic\nerrors when you use `Mutex<T>`. Recall from Chapter 15 that using `Rc<T>` came\nwith the risk of creating reference cycles, where two `Rc<T>` values refer to\neach other, causing memory leaks. Similarly, `Mutex<T>` comes with the risk of\ncreating _deadlocks_. These occur when an operation needs to lock two resources\nand two threads have each acquired one of the locks, causing them to wait for\neach other forever. If you’re interested in deadlocks, try creating a Rust\nprogram that has a deadlock; then research deadlock mitigation strategies for\nmutexes in any language and have a go at implementing them in Rust. The\nstandard library API documentation for `Mutex<T>` and `MutexGuard` offers\nuseful information."
        },
        {
          "kind": "text",
          "content": "We’ll round out this chapter by talking about the `Send` and `Sync` traits and\nhow we can use them with custom types."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "ceb96826-6c98-40e1-bff4-0bb61f35679d",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "In some concurrency APIs, a mutex is separate from the data it guards. For example, imagine a hypothetical Mutex API like this:\n\n```\nlet mut data = Vec::new();\nlet mx: Mutex = Mutex::new();\n{\n    let _guard = mx.lock();\n    data.push(0);\n}\n```\n\nWhich of the following best describes why Rust uses `Mutex<T>` instead of just `Mutex`?\n",
                  "distractors": [
                    "To require fewer calls to mutex methods",
                    "To improve the efficiency of concurrent programs with mutexes",
                    "To prevent a mutex's data from being moved between threads"
                  ]
                },
                "answer": {
                  "answer": "To prevent accessing a mutex's data without locking the mutex"
                },
                "context": "The `Mutex<T>` design ensures that a mutex's data can only be accessed when the mutex is locked, and conversely\nthat the mutex is unlocked once the data is no longer accessible.\n"
              },
              {
                "id": "e5ac0c92-4694-4647-bd20-67825fe038b7",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::{sync::Arc, thread};\n\nfn main() {\n    let s = String::from(\"Hello world\");\n    let a = Arc::new(&s);\n    let a2 = Arc::clone(&a);\n    let t = thread::spawn(move || a2.len());\n    let len = t.join().unwrap();\n    println!(\"{} {}\", a, len);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 7
                },
                "context": "An `Arc` is still not safe to use if its data contains a reference, since the reference could (in theory)\nbe invalidated before all threads containing the `Arc` finish executing.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[atomic]: https://doc.rust-lang.org/std/sync/atomic/index.html"
        }
      ]
    },
    {
      "title": "Extensible Concurrency with the `Send` and `Sync` Traits",
      "file": "ch16-04-extensible-concurrency-sync-and-send.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"extensible-concurrency-with-the-sync-and-send-traits\"></a>"
        },
        {
          "kind": "text",
          "content": "Interestingly, almost every concurrency feature we’ve talked about so far in\nthis chapter has been part of the standard library, not the language. Your\noptions for handling concurrency are not limited to the language or the standard\nlibrary; you can write your own concurrency features or use those written by\nothers."
        },
        {
          "kind": "text",
          "content": "However, among the key concurrency concepts that are embedded in the language\nrather than the standard library are the `std::marker` traits `Send` and\n`Sync`."
        },
        {
          "kind": "text",
          "content": "### Allowing Transference of Ownership Between Threads with `Send`"
        },
        {
          "kind": "text",
          "content": "The `Send` marker trait indicates that ownership of values of the type\nimplementing `Send` can be transferred between threads. Almost every Rust type\nis `Send`, but there are some exceptions, including `Rc<T>`: this cannot\nimplement `Send` because if you cloned an `Rc<T>` value and tried to transfer\nownership of the clone to another thread, both threads might update the\nreference count at the same time. For this reason, `Rc<T>` is implemented for\nuse in single-threaded situations where you don’t want to pay the thread-safe\nperformance penalty."
        },
        {
          "kind": "text",
          "content": "Therefore, Rust’s type system and trait bounds ensure that you can never\naccidentally send an `Rc<T>` value across threads unsafely. When we tried to do\nthis in Listing 16-14, we got the error `the trait Send is not implemented for\nRc<Mutex<i32>>`. When we switched to `Arc<T>`, which does implement `Send`, the\ncode compiled."
        },
        {
          "kind": "text",
          "content": "Any type composed entirely of `Send` types is automatically marked as `Send` as\nwell. Almost all primitive types are `Send`, aside from raw pointers, which\nwe’ll discuss in Chapter 20."
        },
        {
          "kind": "text",
          "content": "### Allowing Access from Multiple Threads with `Sync`"
        },
        {
          "kind": "text",
          "content": "The `Sync` marker trait indicates that it is safe for the type implementing\n`Sync` to be referenced from multiple threads. In other words, any type `T`\nimplements  `Sync` if `&T` (an immutable reference to `T`) implements `Send`,\nmeaning the reference can be sent safely to another thread. Similar to `Send`,\nprimitive types all implement `Sync`, and types composed entirely of types that\nimplement `Sync` also implement `Sync`."
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: 43081862-aac8-4e18-9c55-1107ea4c7cc1 -->"
        },
        {
          "kind": "text",
          "content": "`Sync` is the most similar concept in Rust to the colloquial meaning of the phrase \"thread-safe\", i.e. that a particular piece of data can be safely used by multiple concurrent threads. The reason for having separate `Send` and `Sync` traits is that a type can sometimes be one, or both, or neither. For example:\n*  The smart pointer `Rc<T>` is also neither `Send` nor `Sync`, for reasons described above.\n* The `RefCell<T>` type (which we talked about in Chapter 15) and the\nfamily of related `Cell<T>` types are `Send` (if `T: Send`), but they are not `Sync`. A `RefCell` can be sent across a thread boundary, but not accessed concurrently because the implementation of borrow checking that `RefCell<T>` does at runtime is not thread-safe.\n* The smart pointer `Mutex<T>` is `Send` and `Sync`, and can be used to share access with multiple threads as you saw in the [“Sharing a `Mutex<T>` Between Multiple Threads”][sharing-a-mutext-between-multiple-threads]<!-- ignore --> section.\n* The type `MutexGuard<'a, T>` that is returned by `Mutex::lock` is `Sync` (if `T: Sync`) but not `Send`. It is specifically not `Send` because [some platforms mandate that mutexes are unlocked by the same thread that locked them][mutex-guards-are-not-send]."
        },
        {
          "kind": "text",
          "content": "<!-- END INTERVENTION: 43081862-aac8-4e18-9c55-1107ea4c7cc1 -->"
        },
        {
          "kind": "text",
          "content": "### Implementing `Send` and `Sync` Manually Is Unsafe"
        },
        {
          "kind": "text",
          "content": "Because types composed entirely of other types that implement the `Send` and\n`Sync` traits also automatically implement `Send` and `Sync`, we don’t have to\nimplement those traits manually. As marker traits, they don’t even have any\nmethods to implement. They’re just useful for enforcing invariants related to\nconcurrency."
        },
        {
          "kind": "text",
          "content": "Manually implementing these traits involves implementing unsafe Rust code.\nWe’ll talk about using unsafe Rust code in Chapter 20; for now, the important\ninformation is that building new concurrent types not made up of `Send` and\n`Sync` parts requires careful thought to uphold the safety guarantees. [“The\nRustonomicon”][nomicon] has more information about these guarantees and how to\nuphold them."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "This isn’t the last you’ll see of concurrency in this book: the next chapter\nfocuses on async programming, and the project in Chapter 21 will use the\nconcepts in this chapter in a more realistic situation than the smaller examples\ndiscussed here."
        },
        {
          "kind": "text",
          "content": "As mentioned earlier, because very little of how Rust handles concurrency is\npart of the language, many concurrency solutions are implemented as crates.\nThese evolve more quickly than the standard library, so be sure to search\nonline for the current, state-of-the-art crates to use in multithreaded\nsituations."
        },
        {
          "kind": "text",
          "content": "The Rust standard library provides channels for message passing and smart\npointer types, such as `Mutex<T>` and `Arc<T>`, that are safe to use in\nconcurrent contexts. The type system and the borrow checker ensure that the\ncode using these solutions won’t end up with data races or invalid references.\nOnce you get your code to compile, you can rest assured that it will happily\nrun on multiple threads without the kinds of hard-to-track-down bugs common in\nother languages. Concurrent programming is no longer a concept to be afraid of:\ngo forth and make your programs concurrent, fearlessly!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "43081862-aac8-4e18-9c55-1107ea4c7cc1",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Imagine you are designing an API for a database connection like this:\n\n```\nstruct DbConnection { /* ... */ }\nimpl DbConnection {\n    fn query(&self) -> DbResult {\n        /* ... */\n    }\n}\n```\n\nYour database does not support concurrent queries from the same connection. \nWhich of the following marker traits should `DbConnection` implement?\n",
                  "distractors": [
                    "`Send` and `Sync`",
                    "`Sync`",
                    "Neither `Send` nor `Sync`"
                  ]
                },
                "answer": {
                  "answer": "`Send`"
                },
                "context": "It is fine to send a `DbConnection` between threads, so `DbConnection` should implement `Send`.\nBut it would not be valid e.g. for an `Arc<Database>` to be shared such that multiple threads concurrently\ncalled `db.query()`, so `DbConnection` should not implement `Sync`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[sharing-a-mutext-between-multiple-threads]: ch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads\n[nomicon]: ../nomicon/index.html\n[mutex-guards-are-not-send]: https://github.com/rust-lang/rust/issues/23465#issuecomment-82730326"
        }
      ]
    },
    {
      "title": "Fundamentals of Asynchronous Programming: Async, Await, Futures, and Streams",
      "file": "ch17-00-async-await.md",
      "elements": [
        {
          "kind": "text",
          "content": "Many operations we ask the computer to do can take a while to finish. It would\nbe nice if we could do something else while we are waiting for those\nlong-running processes to complete. Modern computers offer two techniques for\nworking on more than one operation at a time: parallelism and concurrency. Once\nwe start writing programs that involve parallel or concurrent operations,\nthough, we quickly encounter new challenges inherent to _asynchronous\nprogramming_, where operations may not finish sequentially in the order they\nwere started. This chapter builds on Chapter 16’s use of threads for parallelism\nand concurrency by introducing an alternative approach to asynchronous\nprogramming: Rust’s Futures, Streams, the `async` and `await` syntax that\nsupports them, and the tools for managing and coordinating between asynchronous\noperations."
        },
        {
          "kind": "text",
          "content": "Let’s consider an example. Say you’re exporting a video you’ve created of a\nfamily celebration, an operation that could take anywhere from minutes to hours.\nThe video export will use as much CPU and GPU power as it can. If you had only\none CPU core and your operating system didn’t pause that export until it\ncompleted—that is, if it executed the export _synchronously_—you couldn’t do\nanything else on your computer while that task was running. That would be a\npretty frustrating experience. Fortunately, your computer’s operating system\ncan, and does, invisibly interrupt the export often enough to let you get other\nwork done simultaneously."
        },
        {
          "kind": "text",
          "content": "Now say you’re downloading a video shared by someone else, which can also take a\nwhile but does not take up as much CPU time. In this case, the CPU has to wait\nfor data to arrive from the network. While you can start reading the data once\nit starts to arrive, it might take some time for all of it to show up. Even once\nthe data is all present, if the video is quite large, it could take at least a\nsecond or two to load it all. That might not sound like much, but it’s a very\nlong time for a modern processor, which can perform billions of operations every\nsecond. Again, your operating system will invisibly interrupt your program to\nallow the CPU to perform other work while waiting for the network call to\nfinish."
        },
        {
          "kind": "text",
          "content": "The video export is an example of a _CPU-bound_ or _compute-bound_ operation.\nIt’s limited by the computer’s potential data processing speed within the CPU or\nGPU, and how much of that speed it can dedicate to the operation. The video\ndownload is an example of an _IO-bound_ operation, because it’s limited by the\nspeed of the computer’s _input and output_; it can only go as fast as the data\ncan be sent across the network."
        },
        {
          "kind": "text",
          "content": "In both of these examples, the operating system’s invisible interrupts provide a\nform of concurrency. That concurrency happens only at the level of the entire\nprogram, though: the operating system interrupts one program to let other\nprograms get work done. In many cases, because we understand our programs at a\nmuch more granular level than the operating system does, we can spot\nopportunities for concurrency that the operating system can’t see."
        },
        {
          "kind": "text",
          "content": "For example, if we’re building a tool to manage file downloads, we should be\nable to write our program so that starting one download won’t lock up the UI,\nand users should be able to start multiple downloads at the same time. Many\noperating system APIs for interacting with the network are _blocking_, though;\nthat is, they block the program’s progress until the data they’re processing is\ncompletely ready."
        },
        {
          "kind": "text",
          "content": "> Note: This is how _most_ function calls work, if you think about it. However,\n> the term _blocking_ is usually reserved for function calls that interact with\n> files, the network, or other resources on the computer, because those are the\n> cases where an individual program would benefit from the operation being\n> _non_-blocking."
        },
        {
          "kind": "text",
          "content": "We could avoid blocking our main thread by spawning a dedicated thread to\ndownload each file. However, the overhead of those threads would eventually\nbecome a problem. It would be preferable if the call didn’t block in the first\nplace. It would also be better if we could write in the same direct style we use\nin blocking code, similar to this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "let data = fetch_data_from(url).await;\nprintln!(\"{data}\");"
          }
        },
        {
          "kind": "text",
          "content": "That is exactly what Rust’s _async_ (short for _asynchronous_) abstraction gives\nus. In this chapter, you’ll learn all about async as we cover the following\ntopics:"
        },
        {
          "kind": "text",
          "content": "- How to use Rust’s `async` and `await` syntax\n- How to use the async model to solve some of the same challenges we looked at\nin Chapter 16\n- How multithreading and async provide complementary solutions, that you can\ncombine in many cases"
        },
        {
          "kind": "text",
          "content": "Before we see how async works in practice, though, we need to take a short\ndetour to discuss the differences between parallelism and concurrency."
        },
        {
          "kind": "text",
          "content": "### Parallelism and Concurrency"
        },
        {
          "kind": "text",
          "content": "We’ve treated parallelism and concurrency as mostly interchangeable so far. Now\nwe need to distinguish between them more precisely, because the differences will\nshow up as we start working."
        },
        {
          "kind": "text",
          "content": "Consider the different ways a team could split up work on a software project.\nYou could assign a single member multiple tasks, assign each member one task, or\nuse a mix of the two approaches."
        },
        {
          "kind": "text",
          "content": "When an individual works on several different tasks before any of them is\ncomplete, this is _concurrency_. Maybe you have two different projects checked\nout on your computer, and when you get bored or stuck on one project, you switch\nto the other. You’re just one person, so you can’t make progress on both tasks\nat the exact same time, but you can multi-task, making progress on one at a time\nby switching between them (see Figure 17-1)."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img src=\"img/trpl17-01.svg\" class=\"center\" alt=\"A diagram with boxes labeled Task A and Task B, with diamonds in them representing subtasks. There are arrows pointing from A1 to B1, B1 to A2, A2 to B2, B2 to A3, A3 to A4, and A4 to B3. The arrows between the subtasks cross the boxes between Task A and Task B.\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-1: A concurrent workflow, switching between Task A and Task B</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "When the team splits up a group of tasks by having each member take one task and\nwork on it alone, this is _parallelism_. Each person on the team can make\nprogress at the exact same time (see Figure 17-2)."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img src=\"img/trpl17-02.svg\" class=\"center\" alt=\"A diagram with boxes labeled Task A and Task B, with diamonds in them representing subtasks. There are arrows pointing from A1 to A2, A2 to A3, A3 to A4, B1 to B2, and B2 to B3. No arrows cross between the boxes for Task A and Task B.\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-2: A parallel workflow, where work happens on Task A and Task B independently</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "In both of these workflows, you might have to coordinate between different\ntasks. Maybe you _thought_ the task assigned to one person was totally\nindependent from everyone else’s work, but it actually requires another person\non the team to finish their task first. Some of the work could be done in\nparallel, but some of it was actually _serial_: it could only happen in a\nseries, one task after the other, as in Figure 17-3."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img src=\"img/trpl17-03.svg\" class=\"center\" alt=\"A diagram with boxes labeled Task A and Task B, with diamonds in them representing subtasks. There are arrows pointing from A1 to A2, A2 to a pair of thick vertical lines like a “pause” symbol, from that symbol to A3, B1 to B2, B2 to B3, which is below that symbol, B3 to A3, and B3 to B4.\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-3: A partially parallel workflow, where work happens on Task A and Task B independently until Task A3 is blocked on the results of Task B3.</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "Likewise, you might realize that one of your own tasks depends on another of\nyour tasks. Now your concurrent work has also become serial."
        },
        {
          "kind": "text",
          "content": "Parallelism and concurrency can intersect with each other, too. If you learn\nthat a colleague is stuck until you finish one of your tasks, you’ll probably\nfocus all your efforts on that task to “unblock” your colleague. You and your\ncoworker are no longer able to work in parallel, and you’re also no longer able\nto work concurrently on your own tasks."
        },
        {
          "kind": "text",
          "content": "The same basic dynamics come into play with software and hardware. On a machine\nwith a single CPU core, the CPU can perform only one operation at a time, but it\ncan still work concurrently. Using tools such as threads, processes, and async,\nthe computer can pause one activity and switch to others before eventually\ncycling back to that first activity again. On a machine with multiple CPU cores,\nit can also do work in parallel. One core can be performing one task while\nanother core performs a completely unrelated one, and those operations actually\nhappen at the same time."
        },
        {
          "kind": "text",
          "content": "When working with async in Rust, we’re always dealing with concurrency.\nDepending on the hardware, the operating system, and the async runtime we are\nusing (more on async runtimes shortly), that concurrency may also use parallelism\nunder the hood."
        },
        {
          "kind": "text",
          "content": "Now, let’s dive into how async programming in Rust actually works."
        }
      ]
    },
    {
      "title": "Futures and the Async Syntax",
      "file": "ch17-01-futures-and-syntax.md",
      "elements": [
        {
          "kind": "text",
          "content": "The key elements of asynchronous programming in Rust are _futures_ and Rust’s\n`async` and `await` keywords."
        },
        {
          "kind": "text",
          "content": "A _future_ is a value that may not be ready now but will become ready at some\npoint in the future. (This same concept shows up in many languages, sometimes\nunder other names such as _task_ or _promise_.) Rust provides a `Future` trait\nas a building block so that different async operations can be implemented with\ndifferent data structures but with a common interface. In Rust, futures are\ntypes that implement the `Future` trait. Each future holds its own information\nabout the progress that has been made and what \"ready\" means."
        },
        {
          "kind": "text",
          "content": "You can apply the `async` keyword to blocks and functions to specify that they\ncan be interrupted and resumed. Within an async block or async function, you can\nuse the `await` keyword to _await a future_ (that is, wait for it to become\nready). Any point where you await a future within an async block or function is\na potential spot for that async block or function to pause and resume. The\nprocess of checking with a future to see if its value is available yet is called\n_polling_."
        },
        {
          "kind": "text",
          "content": "Some other languages, such as C# and JavaScript, also use `async` and `await`\nkeywords for async programming. If you’re familiar with those languages, you may\nnotice some significant differences in how Rust does things, including how it\nhandles the syntax. That’s for good reason, as we’ll see!"
        },
        {
          "kind": "text",
          "content": "When writing async Rust, we use the `async` and `await` keywords most of the\ntime. Rust compiles them into equivalent code using the `Future` trait, much as\nit compiles `for` loops into equivalent code using the `Iterator` trait. Because\nRust provides the `Future` trait, though, you can also implement it for your own\ndata types when you need to. Many of the functions we’ll see throughout this\nchapter return types with their own implementations of `Future`. We’ll return to\nthe definition of the trait at the end of the chapter and dig into more of how\nit works, but this is enough detail to keep us moving forward."
        },
        {
          "kind": "text",
          "content": "This may all feel a bit abstract, so let’s write our first async program: a\nlittle web scraper. We’ll pass in two URLs from the command line, fetch both of\nthem concurrently, and return the result of whichever one finishes first. This\nexample will have a fair bit of new syntax, but don’t worry—we’ll explain\neverything you need to know as we go."
        },
        {
          "kind": "text",
          "content": "## Our First Async Program"
        },
        {
          "kind": "text",
          "content": "To keep the focus of this chapter on learning async rather than juggling parts\nof the ecosystem, we’ve created the `trpl` crate (`trpl` is short for “The Rust\nProgramming Language”). It re-exports all the types, traits, and functions\nyou’ll need, primarily from the [`futures`][futures-crate]<!-- ignore --> and\n[`tokio`][tokio]<!-- ignore --> crates. The `futures` crate is an official home\nfor Rust experimentation for async code, and it’s actually where the `Future`\ntrait was originally designed. Tokio is the most widely used async runtime in\nRust today, especially for web applications. There are other great runtimes out\nthere, and they may be more suitable for your purposes. We use the `tokio` crate\nunder the hood for `trpl` because it’s well tested and widely used."
        },
        {
          "kind": "text",
          "content": "In some cases, `trpl` also renames or wraps the original APIs to keep you\nfocused on the details relevant to this chapter. If you want to understand what\nthe crate does, we encourage you to check out [its source\ncode][crate-source]<!-- ignore -->. You’ll be able to see what crate each\nre-export comes from, and we’ve left extensive comments explaining what the\ncrate does."
        },
        {
          "kind": "text",
          "content": "Create a new binary project named `hello-async` and add the `trpl` crate as a\ndependency:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new hello-async\n$ cd hello-async\n$ cargo add trpl"
          }
        },
        {
          "kind": "text",
          "content": "Now we can use the various pieces provided by `trpl` to write our first async\nprogram. We’ll build a little command line tool that fetches two web pages,\npulls the `<title>` element from each, and prints out the title of whichever\npage finishes that whole process first."
        },
        {
          "kind": "text",
          "content": "### Defining the page_title Function"
        },
        {
          "kind": "text",
          "content": "Let’s start by writing a function that takes one page URL as a parameter, makes\na request to it, and returns the text of the title element (see Listing 17-1)."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-1\" file-name=\"src/main.rs\" caption=\"Defining an async function to get the title element from an HTML page\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-01/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First, we define a function named `page_title` and mark it with the `async`\nkeyword. Then we use the `trpl::get` function to fetch whatever URL is passed in\nand add the `await` keyword to await the response. To get the text of the\nresponse, we call its `text` method, and once again await it with the `await`\nkeyword. Both of these steps are asynchronous. For the `get` function, we have\nto wait for the server to send back the first part of its response, which will\ninclude HTTP headers, cookies, and so on, and can be delivered separately from\nthe response body. Especially if the body is very large, it can take some time\nfor it all to arrive. Because we have to wait for the _entirety_ of the response\nto arrive, the `text` method is also async."
        },
        {
          "kind": "text",
          "content": "We have to explicitly await both of these futures, because futures in Rust are\n_lazy_: they don’t do anything until you ask them to with the `await` keyword.\n(In fact, Rust will show a compiler warning if you don’t use a future.) This\nmight remind you of Chapter 13’s discussion of iterators in the section\n[Processing a Series of Items With Iterators][iterators-lazy]<!-- ignore -->.\nIterators do nothing unless you call their `next` method—whether directly or by\nusing `for` loops or methods such as `map` that use `next` under the hood.\nLikewise, futures do nothing unless you explicitly ask them to. This laziness\nallows Rust to avoid running async code until it’s actually needed."
        },
        {
          "kind": "text",
          "content": "> Note: This is different from the behavior we saw in the previous chapter when\n> using `thread::spawn` in [Creating a New Thread with\n> spawn][thread-spawn]<!--ignore-->, where the closure we passed to another\n> thread started running immediately. It’s also different from how many other\n> languages approach async. But it’s important for Rust to be able to provide\n> its performance guarantees, just as it is with iterators."
        },
        {
          "kind": "text",
          "content": "Once we have `response_text`, we can parse it into an instance of the `Html`\ntype using `Html::parse`. Instead of a raw string, we now have a data type we\ncan use to work with the HTML as a richer data structure. In particular, we can\nuse the `select_first` method to find the first instance of a given CSS\nselector. By passing the string `\"title\"`, we’ll get the first `<title>` element\nin the document, if there is one. Because there may not be any matching element,\n`select_first` returns an `Option<ElementRef>`. Finally, we use the\n`Option::map` method, which lets us work with the item in the `Option` if it’s\npresent, and do nothing if it isn’t. (We could also use a `match` expression\nhere, but `map` is more idiomatic.) In the body of the function we supply to\n`map`, we call `inner_html` on the `title_element` to get its content, which is\na `String`. When all is said and done, we have an `Option<String>`."
        },
        {
          "kind": "text",
          "content": "Notice that Rust’s `await` keyword goes _after_ the expression you’re awaiting,\nnot before it. That is, it’s a _postfix_ keyword. This may differ from what\nyou’re used to if you’ve used `async` in other languages, but in Rust it makes\nchains of methods much nicer to work with. As a result, we can change the body\nof `page_title` to chain the `trpl::get` and `text` function calls together\nwith `await` between them, as shown in Listing 17-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-2\" file-name=\"src/main.rs\" caption=\"Chaining with the `await` keyword\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-02/src/main.rs:chaining}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With that, we have successfully written our first async function! Before we add\nsome code in `main` to call it, let’s talk a little more about what we’ve\nwritten and what it means."
        },
        {
          "kind": "text",
          "content": "When Rust sees a block marked with the `async` keyword, it compiles it into a\nunique, anonymous data type that implements the `Future` trait. When Rust sees a\nfunction marked with `async`, it compiles it into a non-async function whose\nbody is an async block. An async function’s return type is the type of the\nanonymous data type the compiler creates for that async block."
        },
        {
          "kind": "text",
          "content": "Thus, writing `async fn` is equivalent to writing a function that returns a\n_future_ of the return type. To the compiler, a function definition such as the\n`async fn page_title` in Listing 17-1 is equivalent to a non-async function\ndefined like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "# extern crate trpl; // required for mdbook test\nuse std::future::Future;\nuse trpl::Html;\n\nfn page_title(url: &str) -> impl Future<Output = Option<String>> {\n    async move {\n        let text = trpl::get(url).await.text().await;\n        Html::parse(&text)\n            .select_first(\"title\")\n            .map(|title| title.inner_html())\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "Let’s walk through each part of the transformed version:"
        },
        {
          "kind": "text",
          "content": "- It uses the `impl Trait` syntax we discussed back in Chapter 10 in the\n[“Traits as Parameters”][impl-trait]<!-- ignore --> section.\n- The returned trait is a `Future` with an associated type of `Output`. Notice\nthat the `Output` type is `Option<String>`, which is the same as the original\nreturn type from the `async fn` version of `page_title`.\n- All of the code called in the body of the original function is wrapped in an\n`async move` block. Remember that blocks are expressions. This whole block is\nthe expression returned from the function.\n- This async block produces a value with the type `Option<String>`, as just\ndescribed. That value matches the `Output` type in the return type. This\nis just like other blocks you have seen.\n- The new function body is an `async move` block because of how it uses the\n`url` parameter. (We’ll talk much more about `async` versus `async move` later\nin the chapter.)"
        },
        {
          "kind": "text",
          "content": "Now we can call `page_title` in `main`."
        },
        {
          "kind": "text",
          "content": "## Determining a Single Page’s Title"
        },
        {
          "kind": "text",
          "content": "To start, we’ll just get the title for a single page. In Listing 17-3, we follow\nthe same pattern we used in Chapter 12 to get command line arguments in the\n[Accepting Command Line Arguments][cli-args]<!-- ignore --> section. Then we\npass the first URL `page_title` and await the result. Because the value\nproduced by the future is an `Option<String>`, we use a `match` expression to\nprint different messages to account for whether the page had a `<title>`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-3\" file-name=\"src/main.rs\" caption=\"Calling the `page_title` function from `main` with a user-supplied argument\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-03/src/main.rs:main}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Unfortunately, this code doesn’t compile. The only place we can use the `await`\nkeyword is in async functions or blocks, and Rust won’t let us mark the\nspecial `main` function as `async`."
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-03\ncargo build\ncopy just the compiler error\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0752]: `main` function is not allowed to be `async`\n --> src/main.rs:6:1\n  |\n6 | async fn main() {\n  | ^^^^^^^^^^^^^^^ `main` function is not allowed to be `async`"
          }
        },
        {
          "kind": "text",
          "content": "The reason `main` can’t be marked `async` is that async code needs a _runtime_:\na Rust crate that manages the details of executing asynchronous code. A\nprogram’s `main` function can _initialize_ a runtime, but it’s not a runtime\n_itself_. (We’ll see more about why this is the case in a bit.) Every Rust\nprogram that executes async code has at least one place where it sets up a\nruntime and executes the futures."
        },
        {
          "kind": "text",
          "content": "Most languages that support async bundle a runtime, but Rust does not. Instead,\nthere are many different async runtimes available, each of which makes different\ntradeoffs suitable to the use case it targets. For example, a high-throughput\nweb server with many CPU cores and a large amount of RAM has very different\nneeds than a microcontroller with a single core, a small amount of RAM, and no\nheap allocation ability. The crates that provide those runtimes also often\nsupply async versions of common functionality such as file or network I/O."
        },
        {
          "kind": "text",
          "content": "Here, and throughout the rest of this chapter, we’ll use the `run` function from\nthe `trpl` crate, which takes a future as an argument and runs it to completion.\nBehind the scenes, calling `run` sets up a runtime that’s used to run the future\npassed in. Once the future completes, `run` returns whatever value the future\nproduced."
        },
        {
          "kind": "text",
          "content": "We could pass the future returned by `page_title` directly to `run`, and once it\ncompleted, we could match on the resulting `Option<String>`, as\nwe tried to do in Listing 17-3. However, for most of the examples in the chapter\n(and most async code in the real world), we’ll be doing more than just one\nasync function call, so instead we’ll pass an `async` block and explicitly\nawait the result of the `page_title` call, as in Listing 17-4."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-4\" caption=\"Awaiting an async block with `trpl::run`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "text",
          "content": "<!-- should_panic,noplayground because mdbook test does not pass args -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-04/src/main.rs:run}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we run this code, we get the behavior we expected initially:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-04\ncargo build # skip all the build noise\ncargo run https://www.rust-lang.org\n# copy the output here\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run -- https://www.rust-lang.org\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.05s\n     Running `target/debug/async_await 'https://www.rust-lang.org'`\nThe title for https://www.rust-lang.org was\n            Rust Programming Language"
          }
        },
        {
          "kind": "text",
          "content": "Phew—we finally have some working async code! But before we add the code to race\nthe two sites against each other, let’s briefly turn our attention back to how\nfutures work."
        },
        {
          "kind": "text",
          "content": "Each _await point_—that is, every place where the code uses the `await`\nkeyword—represents a place where control is handed back to the runtime. To\nmake that work, Rust needs to keep track of the state involved in the async\nblock so that the runtime can kick off some other work and then come back when\nit’s ready to try advancing the first one again. This is an invisible state machine,\nas if you’d written an enum like this to save the current state at each await\npoint:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/no-listing-state-machine/src/lib.rs:enum}}"
          }
        },
        {
          "kind": "text",
          "content": "Writing the code to transition between each state by hand would be tedious and\nerror-prone, however, especially when you need to add more functionality and\nmore states to the code later. Fortunately, the Rust compiler creates and\nmanages the state machine data structures for async code automatically. The\nnormal borrowing and ownership rules around data structures all still apply, and\nhappily, the compiler also handles checking those for us and provides useful\nerror messages. We’ll work through a few of those later in the chapter."
        },
        {
          "kind": "text",
          "content": "Ultimately, something has to execute this state machine, and that something is a\nruntime. (This is why you may come across references to _executors_\nwhen looking into runtimes: an executor is the part of a runtime responsible for\nexecuting the async code.)"
        },
        {
          "kind": "text",
          "content": "Now you can see why the compiler stopped us from making `main` itself an async\nfunction back in Listing 17-3. If `main` were an async function, something else\nwould need to manage the state machine for whatever future `main` returned, but\n`main` is the starting point for the program! Instead, we called the `trpl::run`\nfunction in `main` to set up a runtime and run the future returned by the\n`async` block until it is done."
        },
        {
          "kind": "text",
          "content": "> Note: Some runtimes provide macros so you _can_ write an async `main`\n> function. Those macros rewrite `async fn main() { ... }` to be a normal `fn\n> main`, which does the same thing we did by hand in Listing 17-4: call a\n> function that runs a future to completion the way `trpl::run` does."
        },
        {
          "kind": "text",
          "content": "Now let’s put these pieces together and see how we can write concurrent code."
        },
        {
          "kind": "text",
          "content": "### Racing Our Two URLs Against Each Other"
        },
        {
          "kind": "text",
          "content": "In Listing 17-5, we call `page_title` with two different URLs passed in from the\ncommand line and race them."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-5\" caption=\"\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "text",
          "content": "<!-- should_panic,noplayground because mdbook does not pass args -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "should_panic",
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-05/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We begin by calling `page_title` for each of the user-supplied URLs. We save the\nresulting futures as `title_fut_1` and `title_fut_2`. Remember, these don’t do\nanything yet, because futures are lazy and we haven’t yet awaited them. Then we\npass the futures to `trpl::race`, which returns a value to indicate which of the\nfutures passed to it finishes first."
        },
        {
          "kind": "text",
          "content": "> Note: Under the hood, `race` is built on a more general function, `select`,\n> which you will encounter more often in real-world Rust code. A `select`\n> function can do a lot of things that the `trpl::race` function can’t, but it\n> also has some additional complexity that we can skip over for now."
        },
        {
          "kind": "text",
          "content": "Either future can legitimately “win,” so it doesn’t make sense to return a\n`Result`. Instead, `race` returns a type we haven’t seen before,\n`trpl::Either`. The `Either` type is somewhat similar to a `Result` in that it\nhas two cases. Unlike `Result`, though, there is no notion of success or\nfailure baked into `Either`. Instead, it uses `Left` and `Right` to indicate\n“one or the other”:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Either<A, B> {\n    Left(A),\n    Right(B),\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `race` function returns `Left` with the output from the first future\nargument it finishes first, or `Right` with the output of the second future\nargument if that one finishes first. This matches the order the arguments appear\nin when calling the function: the first argument is to the left of the second\nargument."
        },
        {
          "kind": "text",
          "content": "We also update `page_title` to return the same URL passed in. That way, if\nthe page that returns first does not have a `<title>` we can resolve, we can\nstill print a meaningful message. With that information available, we wrap up by\nupdating our `println!` output to indicate both which URL finished first and\nwhat, if any, the `<title>` is for the web page at that URL."
        },
        {
          "kind": "text",
          "content": "You have built a small working web scraper now! Pick a couple URLs and run the\ncommand line tool. You may discover that some sites are consistently faster than\nothers, while in other cases the faster site varies from run to run. More\nimportantly, you’ve learned the basics of working with futures, so now we can\ndig deeper into what we can do with async."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "If you want to wait on a future in non-async code, you should do which of the following?",
                  "distractors": [
                    "Put an `.await` directly after the future",
                    "Give the future to Rust's built-in async runtime",
                    "Wrap the future in an `async` block and `.await` the block"
                  ]
                },
                "answer": {
                  "answer": "Give the future to a third-party async runtime"
                },
                "context": "Rust does not let you use `.await` outside of `async` blocks or functions. Rust also does not have a built-in async runtime.\nYou should use a third-party async runtime like `tokio` or `trpl`. \n",
                "id": "de2a5023-dd5c-412e-8425-c8ed638f18f0"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The async function below desugars into which type signature?\n\n```rust\nasync fn calculate(nums: &[i32]) -> i32 {\n  /* ... */\n}\n```\n",
                  "distractors": [
                    "```rust\nfn calculate<'a>(nums: &'a [i32], output: &mut impl Future<Output = i32> + 'a);\n```\n  ",
                    "```rust\nfn calculate(nums: &'_ [i32]) -> i32 as Future;\n```\n  ",
                    "```rust\nfn calculate() -> impl for<'a> Future<Input = &'a [i32], Output = i32> + 'a;\n```\n  "
                  ]
                },
                "answer": {
                  "answer": "```rust\nfn calculate<'a>(nums: &'a [i32]) -> impl Future<Output = i32> + 'a;\n```\n"
                },
                "context": "An async function returns an anonymous type that implements the `Future` trait whose output is the function's return type. \nSo here, that is represented as `impl Future<Output = i32>`. The future captures any lifetimes in the function's arguments.\nTherefore the returned type has the bound `+ 'a` and the input slice has the type `&'a [i32]`. This indicates that the slice \nmust live at least as long as the future which captures it.\n",
                "id": "9c000322-464b-4d34-9e30-55591f9283d2"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[impl-trait]: ch10-02-traits.html#traits-as-parameters\n[iterators-lazy]: ch13-02-iterators.html\n[thread-spawn]: ch16-01-threads.html#creating-a-new-thread-with-spawn\n[cli-args]: ch12-01-accepting-command-line-arguments.html"
        },
        {
          "kind": "text",
          "content": "<!-- TODO: map source link version to version of Rust? -->"
        },
        {
          "kind": "text",
          "content": "[crate-source]: https://github.com/rust-lang/book/tree/main/packages/trpl\n[futures-crate]: https://crates.io/crates/futures\n[tokio]: https://tokio.rs"
        }
      ]
    },
    {
      "title": "Applying Concurrency with Async",
      "file": "ch17-02-concurrency-with-async.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"concurrency-with-async\"></a>"
        },
        {
          "kind": "text",
          "content": "In this section, we’ll apply async to some of the same concurrency challenges\nwe tackled with threads in chapter 16. Because we already talked about a lot of\nthe key ideas there, in this section we’ll focus on what’s different between\nthreads and futures."
        },
        {
          "kind": "text",
          "content": "In many cases, the APIs for working with concurrency using async are very\nsimilar to those for using threads. In other cases, they end up being quite\ndifferent. Even when the APIs _look_ similar between threads and async, they\noften have different behavior—and they nearly always have different performance\ncharacteristics."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"counting\"></a>"
        },
        {
          "kind": "text",
          "content": "### Creating a New Task with `spawn_task`"
        },
        {
          "kind": "text",
          "content": "The first operation we tackled in [Creating a New Thread with\nSpawn][thread-spawn]<!-- ignore --> was counting up on two separate threads.\nLet’s do the same using async. The `trpl` crate supplies a `spawn_task` function\nthat looks very similar to the `thread::spawn` API, and a `sleep` function\nthat is an async version of the `thread::sleep` API. We can use these together\nto implement the counting example, as shown in Listing 17-6."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-6\" caption=\"Creating a new task to print one thing while the main task prints something else\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-06/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As our starting point, we set up our `main` function with `trpl::run` so that\nour top-level function can be async."
        },
        {
          "kind": "text",
          "content": "> Note: From this point forward in the chapter, every example will include this\n> exact same wrapping code with `trpl::run` in `main`, so we’ll often skip it\n> just as we do with `main`. Don’t forget to include it in your code!"
        },
        {
          "kind": "text",
          "content": "Then we write two loops within that block, each containing a `trpl::sleep` call,\nwhich waits for half a second (500 milliseconds) before sending the next\nmessage. We put one loop in the body of a `trpl::spawn_task` and the other in a\ntop-level `for` loop. We also add an `await` after the `sleep` calls."
        },
        {
          "kind": "text",
          "content": "This code behaves similarly to the thread-based implementation—including the\nfact that you may see the messages appear in a different order in your own\nterminal when you run it:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "hi number 1 from the second task!\nhi number 1 from the first task!\nhi number 2 from the first task!\nhi number 2 from the second task!\nhi number 3 from the first task!\nhi number 3 from the second task!\nhi number 4 from the first task!\nhi number 4 from the second task!\nhi number 5 from the first task!"
          }
        },
        {
          "kind": "text",
          "content": "This version stops as soon as the `for` loop in the body of the main async block\nfinishes, because the task spawned by `spawn_task` is shut down when the `main`\nfunction ends. If you want it to run all the way to the task’s completion, you\nwill need to use a join handle to wait for the first task to complete. With\nthreads, we used the `join` method to “block” until the thread was done running.\nIn Listing 17-7, we can use `await` to do the same thing, because the task\nhandle itself is a future. Its `Output` type is a `Result`, so we also unwrap it\nafter awaiting it."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-7\" caption=\"Using `await` with a join handle to run a task to completion\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-07/src/main.rs:handle}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This updated version runs until _both_ loops finish."
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "hi number 1 from the second task!\nhi number 1 from the first task!\nhi number 2 from the first task!\nhi number 2 from the second task!\nhi number 3 from the first task!\nhi number 3 from the second task!\nhi number 4 from the first task!\nhi number 4 from the second task!\nhi number 5 from the first task!\nhi number 6 from the first task!\nhi number 7 from the first task!\nhi number 8 from the first task!\nhi number 9 from the first task!"
          }
        },
        {
          "kind": "text",
          "content": "So far, it looks like async and threads give us the same basic outcomes, just\nwith different syntax: using `await` instead of calling `join` on the join\nhandle, and awaiting the `sleep` calls."
        },
        {
          "kind": "text",
          "content": "The bigger difference is that we didn’t need to spawn another operating system\nthread to do this. In fact, we don’t even need to spawn a task here. Because\nasync blocks compile to anonymous futures, we can put each loop in an async\nblock and have the runtime run them both to completion using the `trpl::join`\nfunction."
        },
        {
          "kind": "text",
          "content": "In the section [Waiting for All Threads to Finishing Using `join`\nHandles][join-handles]<!-- ignore -->, we showed how to use the `join` method on\nthe `JoinHandle` type returned when you call `std::thread::spawn`. The\n`trpl::join` function is similar, but for futures. When you give it two futures,\nit produces a single new future whose output is a tuple containing the output of\neach future you passed in once they _both_ complete. Thus, in Listing 17-8, we\nuse `trpl::join` to wait for both `fut1` and `fut2` to finish. We do _not_ await\n`fut1` and `fut2` but instead the new future produced by `trpl::join`. We ignore\nthe output, because it’s just a tuple containing two unit values."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-8\" caption=\"Using `trpl::join` to await two anonymous futures\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-08/src/main.rs:join}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we run this, we see both futures run to completion:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "hi number 1 from the first task!\nhi number 1 from the second task!\nhi number 2 from the first task!\nhi number 2 from the second task!\nhi number 3 from the first task!\nhi number 3 from the second task!\nhi number 4 from the first task!\nhi number 4 from the second task!\nhi number 5 from the first task!\nhi number 6 from the first task!\nhi number 7 from the first task!\nhi number 8 from the first task!\nhi number 9 from the first task!"
          }
        },
        {
          "kind": "text",
          "content": "Now, you’ll see the exact same order every time, which is very different from\nwhat we saw with threads. That is because the `trpl::join` function is _fair_,\nmeaning it checks each future equally often, alternating between them, and never\nlets one race ahead if the other is ready. With threads, the operating system\ndecides which thread to check and how long to let it run. With async Rust, the\nruntime decides which task to check. (In practice, the details get complicated\nbecause an async runtime might use operating system threads under the hood as\npart of how it manages concurrency, so guaranteeing fairness can be more work\nfor a runtime—but it’s still possible!) Runtimes don’t have to guarantee\nfairness for any given operation, and they often offer different APIs to let you\nchoose whether or not you want fairness."
        },
        {
          "kind": "text",
          "content": "Try some of these variations on awaiting the futures and see what they do:"
        },
        {
          "kind": "text",
          "content": "- Remove the async block from around either or both of the loops.\n- Await each async block immediately after defining it.\n- Wrap only the first loop in an async block, and await the resulting future\nafter the body of second loop."
        },
        {
          "kind": "text",
          "content": "For an extra challenge, see if you can figure out what the output will be in\neach case _before_ running the code!"
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"message-passing\"></a>"
        },
        {
          "kind": "text",
          "content": "### Counting Up on Two Tasks Using Message Passing"
        },
        {
          "kind": "text",
          "content": "Sharing data between futures will also be familiar: we’ll use message passing\nagain, but this time with async versions of the types and functions. We’ll take\na slightly different path than we did in [Using Message Passing to Transfer Data\nBetween Threads][message-passing-threads]<!-- ignore --> to illustrate some of\nthe key differences between thread-based and futures-based concurrency. In\nListing 17-9, we’ll begin with just a single async block—_not_ spawning a\nseparate task as we spawned a separate thread."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-9\" caption=\"Creating an async channel and assigning the two halves to `tx` and `rx`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-09/src/main.rs:channel}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we use `trpl::channel`, an async version of the multiple-producer,\nsingle-consumer channel API we used with threads back in Chapter 16. The async\nversion of the API is only a little different from the thread-based version: it\nuses a mutable rather than an immutable receiver `rx`, and its `recv` method\nproduces a future we need to await rather than producing the value directly. Now\nwe can send messages from the sender to the receiver. Notice that we don’t have\nto spawn a separate thread or even a task; we merely need to await the `rx.recv`\ncall."
        },
        {
          "kind": "text",
          "content": "The synchronous `Receiver::recv` method in `std::mpsc::channel` blocks until\nit receives a message. The `trpl::Receiver::recv` method does not, because it\nis async. Instead of blocking, it hands control back to the runtime until either\na message is received or the send side of the channel closes. By contrast, we\ndon’t await the `send` call, because it doesn’t block. It doesn’t need to,\nbecause the channel we’re sending it into is unbounded."
        },
        {
          "kind": "text",
          "content": "> Note: Because all of this async code runs in an async block in a `trpl::run`\n> call, everything within it can avoid blocking. However, the code _outside_ it\n> will block on the `run` function returning. That’s the whole point of the\n> `trpl::run` function: it lets you _choose_ where to block on some set of async\n> code, and thus where to transition between sync and async code. In most async\n> runtimes, `run` is actually named `block_on` for exactly this reason."
        },
        {
          "kind": "text",
          "content": "Notice two things about this example. First, the message will arrive right away.\nSecond, although we use a future here, there’s no concurrency yet. Everything\nin the listing happens in sequence, just as it would if there were no futures\ninvolved."
        },
        {
          "kind": "text",
          "content": "Let’s address the first part by sending a series of messages and sleeping in\nbetween them, as shown in Listing 17-10."
        },
        {
          "kind": "text",
          "content": "<!-- We cannot test this one because it never stops! -->"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-10\" caption=\"Sending and receiving multiple messages over the async channel and sleeping with an `await` between each message\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-10/src/main.rs:many-messages}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In addition to sending the messages, we need to receive them. In this case,\nbecause we know how many messages are coming in, we could do that manually by\ncalling `rx.recv().await` four times. In the real world, though, we’ll generally\nbe waiting on some _unknown_ number of messages, so we need to keep waiting\nuntil we determine that there are no more messages."
        },
        {
          "kind": "text",
          "content": "In Listing 16-10, we used a `for` loop to process all the items received from a\nsynchronous channel. Rust doesn’t yet have a way to write a `for` loop over an\n_asynchronous_ series of items, however, so we need to use a loop we haven’t\nseen before: the `while let` conditional loop. This is the loop version of the\n`if let` construct we saw back in the section [Concise Control Flow with `if\nlet` and `let else`][if-let]<!-- ignore -->. The loop will continue executing as\nlong as the pattern it specifies continues to match the value."
        },
        {
          "kind": "text",
          "content": "The `rx.recv` call produces a future, which we await. The runtime will pause the\nfuture until it is ready. Once a message arrives, the future will resolve to\n`Some(message)` as many times as a message arrives. When the channel closes,\nregardless of whether _any_ messages have arrived, the future will instead\nresolve to `None` to indicate that there are no more values and thus we should\nstop polling—that is, stop awaiting."
        },
        {
          "kind": "text",
          "content": "The `while let` loop pulls all of this together. If the result of calling\n`rx.recv().await` is `Some(message)`, we get access to the message and we can\nuse it in the loop body, just as we could with `if let`. If the result is\n`None`, the loop ends. Every time the loop completes, it hits the await point\nagain, so the runtime pauses it again until another message arrives."
        },
        {
          "kind": "text",
          "content": "The code now successfully sends and receives all of the messages. Unfortunately,\nthere are still a couple of problems. For one thing, the messages do not arrive\nat half-second intervals. They arrive all at once, 2 seconds (2,000\nmilliseconds) after we start the program. For another, this program never exits!\nInstead, it waits forever for new messages. You will need to shut it down using\n<span class=\"keystroke\">ctrl-c</span>."
        },
        {
          "kind": "text",
          "content": "Let’s start by examining why the messages come in all at once after the full\ndelay, rather than coming in with delays between each one. Within a given async\nblock, the order in which `await` keywords appear in the code is also the order\nin which they’re executed when the program runs."
        },
        {
          "kind": "text",
          "content": "There’s only one async block in Listing 17-10, so everything in it runs\nlinearly. There’s still no concurrency. All the `tx.send` calls happen,\ninterspersed with all of the `trpl::sleep` calls and their associated await\npoints. Only then does the `while let` loop get to go through any of the `await`\npoints on the `recv` calls."
        },
        {
          "kind": "text",
          "content": "To get the behavior we want, where the sleep delay happens between each message,\nwe need to put the `tx` and `rx` operations in their own async blocks, as shown\nin Listing 17-11. Then the runtime can execute each of them separately using\n`trpl::join`, just as in the counting example. Once again, we await the result\nof calling `trpl::join`, not the individual futures. If we awaited the\nindividual futures in sequence, we would just end up back in a sequential\nflow—exactly what we’re trying _not_ to do."
        },
        {
          "kind": "text",
          "content": "<!-- We cannot test this one because it never stops! -->"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-11\" caption=\"Separating `send` and `recv` into their own `async` blocks and awaiting the futures for those blocks\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-11/src/main.rs:futures}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With the updated code in Listing 17-11, the messages get printed at\n500-millisecond intervals, rather than all in a rush after 2 seconds."
        },
        {
          "kind": "text",
          "content": "The program still never exits, though, because of the way the `while let` loop\ninteracts with `trpl::join`:"
        },
        {
          "kind": "text",
          "content": "- The future returned from `trpl::join` completes only once _both_ futures\npassed to it have completed.\n- The `tx` future completes once it finishes sleeping after sending the last\nmessage in `vals`.\n- The `rx` future won’t complete until the `while let` loop ends.\n- The `while let` loop won’t end until awaiting `rx.recv` produces `None`.\n- Awaiting `rx.recv` will return `None` only once the other end of the channel\nis closed.\n- The channel will close only if we call `rx.close` or when the sender side,\n`tx`, is dropped.\n- We don’t call `rx.close` anywhere, and `tx` won’t be dropped until the\noutermost async block passed to `trpl::run` ends.\n- The block can’t end because it is blocked on `trpl::join` completing, which\ntakes us back to the top of this list."
        },
        {
          "kind": "text",
          "content": "We could manually close `rx` by calling `rx.close` somewhere, but that doesn’t\nmake much sense. Stopping after handling some arbitrary number of messages would\nmake the program shut down, but we could miss messages. We need some other way\nto make sure that `tx` gets dropped _before_ the end of the function."
        },
        {
          "kind": "text",
          "content": "Right now, the async block where we send the messages only borrows `tx` because\nsending a message doesn’t require ownership, but if we could move `tx` into that\nasync block, it would be dropped once that block ends. In the Chapter 13 section\n[Capturing References or Moving Ownership][capture-or-move]<!-- ignore -->, you\nlearned how to use the `move` keyword with closures, and, as discussed in the\nChapter 16 section [Using `move` Closures with Threads][move-threads]<!-- ignore\n-->, we often need to move data into closures when working with threads. The\nsame basic dynamics apply to async blocks, so the `move` keyword works with\nasync blocks just as it does with closures."
        },
        {
          "kind": "text",
          "content": "In Listing 17-12, we change the block used to send messages from `async` to\n`async move`. When we run _this_ version of the code, it shuts down gracefully\nafter the last message is sent and received."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-12\" caption=\"A  revision of the code from Listing 17-11 that correctly shuts down when complete\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-12/src/main.rs:with-move}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This async channel is also a multiple-producer channel, so we can call `clone`\non `tx` if we want to send messages from multiple futures, as shown in Listing\n17-13."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-13\" caption=\"Using multiple producers with async blocks\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-13/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First, we clone `tx`, creating `tx1` outside the first async block. We move\n`tx1` into that block just as we did before with `tx`. Then, later, we move the\noriginal `tx` into a _new_ async block, where we send more messages on a\nslightly slower delay. We happen to put this new async block after the async\nblock for receiving messages, but it could go before it just as well. The key is\nthe order in which the futures are awaited, not in which they’re created."
        },
        {
          "kind": "text",
          "content": "Both of the async blocks for sending messages need to be `async move` blocks so\nthat both `tx` and `tx1` get dropped when those blocks finish. Otherwise, we’ll\nend up back in the same infinite loop we started out in. Finally, we switch from\n`trpl::join` to `trpl::join3` to handle the additional future."
        },
        {
          "kind": "text",
          "content": "Now we see all the messages from both sending futures, and because the sending\nfutures use slightly different delays after sending, the messages are also\nreceived at those different intervals."
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "received 'hi'\nreceived 'more'\nreceived 'from'\nreceived 'the'\nreceived 'messages'\nreceived 'future'\nreceived 'for'\nreceived 'you'"
          }
        },
        {
          "kind": "text",
          "content": "This is a good start, but it limits us to just a handful of futures: two with\n`join`, or three with `join3`. Let’s see how we might work with more futures."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following function:\n\n```rust\nasync fn print_letters() {\n  let a = async { print!(\"A\"); };\n  let b = async { print!(\"B\"); };\n  let c = async { print!(\"C\"); };\n  c.await;\n  b.await;\n  a.await;\n}\n```\n\nWhich of the following strings can possibly be printed after running `print_letters().await`?\n",
                  "distractors": [
                    "`ABC`",
                    "`BCA`",
                    "`ACB`"
                  ]
                },
                "answer": {
                  "answer": [
                    "`CBA`"
                  ]
                },
                "context": "This program has deterministic behavior. The prints do not execute until the async blocks are awaited.\nThe blocks are awaited in the order `c`/`b`/`a`, so the program will only print `CBA`.\n",
                "id": "8f62c158-525a-43a2-aa6a-0cc106cada10"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are given a helper function `wait_all(a, b)` with the following behavior:\n* `wait_all` guarantees that `a` and `b` are executed to completion.\n* `wait_all` makes no guarantees regarding fairness or initial execution order.\n\nThen given the following code:\n\n```rust\nasync fn print_letters() {\n  let fut1 = async { \n    print!(\"A\");\n    sleep().await;\n    print!(\"B\");\n  };\n  let fut2 = async {\n    print!(\"C\");\n    sleep().await;\n    print!(\"D\");\n  }\n  wait_all(fut1, fut2).await;\n}\n```\n\nWhich of the following strings can possibly be printed after running `print_letters().await`?\n",
                  "distractors": [
                    "`DABC`"
                  ]
                },
                "answer": {
                  "answer": [
                    "`ABCD`",
                    "`CADB`",
                    "`ACBD`"
                  ]
                },
                "context": "The hypothetical `wait_all` primitive is like `join` but with fewer guarantees. Given only the spec in this problem, any interleaving of the\ntwo futures is valid. The only invalid output is one that inverts program execution order, i.e., `DABC` which would have `D` printed before `C`.\n",
                "id": "4b28f13e-9781-4d29-b886-7639fa527f36"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are given a message-passing channel `channel()` which is non-blocking and *bounded*, \nmeaning `send` returns a future that completes once there is capacity in the channel.\nAssume you also have a function `join(a, b)` which *fairly* waits on both its arguments to completion. Then given this async code:\n\n```rust\nlet (tx, mut rx) = channel(16);\nlet recv_fut = rx.recv();\nlet send_fut = tx.send(0);\nlet (n, _) = join(recv_fut, send_fut).await;\nprintln!(\"{}\", n.unwrap());\n```\n\nWhat will happen as a result of executing this code?\n",
                  "distractors": [
                    "The program prints `0` and loops forever",
                    "The program prints nothing and loops forever",
                    "The program panics"
                  ]
                },
                "answer": {
                  "answer": "The program prints `0` and exits"
                },
                "context": "Because the channel is non-blocking, we can create a receive future before sending without looping forever.\n",
                "id": "e23b7c48-3780-44e7-8ea4-df35032548a1"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[thread-spawn]: ch16-01-threads.html#creating-a-new-thread-with-spawn\n[join-handles]: ch16-01-threads.html#waiting-for-all-threads-to-finish-using-join-handles\n[message-passing-threads]: ch16-02-message-passing.html\n[if-let]: ch06-03-if-let.html\n[capture-or-move]: ch13-01-closures.html#capturing-references-or-moving-ownership\n[move-threads]: ch16-01-threads.html#using-move-closures-with-threads"
        }
      ]
    },
    {
      "title": "Working with Any Number of Futures",
      "file": "ch17-03-more-futures.md",
      "elements": [
        {
          "kind": "text",
          "content": "When we switched from using two futures to three in the previous section, we\nalso had to switch from using `join` to using `join3`. It would be annoying to\nhave to call a different function every time we changed the number of futures we\nwanted to join. Happily, we have a macro form of `join` to which we can pass an\narbitrary number of arguments. It also handles awaiting the futures itself.\nThus, we could rewrite the code from Listing 17-13 to use `join!` instead of\n`join3`, as in Listing 17-14."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-14\" caption=\"Using `join!` to wait for multiple futures\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-14/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This is definitely an improvement over swapping between `join` and\n`join3` and `join4` and so on! However, even this macro form only works\nwhen we know the number of futures ahead of time. In real-world Rust,\nthough, pushing futures into a collection and then waiting on some or\nall the futures of them to complete is a common pattern."
        },
        {
          "kind": "text",
          "content": "To check all the futures in some collection, we’ll need to iterate over and\njoin on _all_ of them. The `trpl::join_all` function accepts any type that\nimplements the `Iterator` trait, which you learned about back in [The Iterator\nTrait and the `next` Method][iterator-trait]<!-- ignore --> Chapter 13, so\nit seems like just the ticket. Let’s try putting our futures in a vector and\nreplacing `join!` with `join_all` as shown in Listing 17-15."
        },
        {
          "kind": "text",
          "content": "<Listing  number=\"17-15\" caption=\"Storing anonymous futures in a vector and calling `join_all`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-15/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Unfortunately, this code doesn’t compile. Instead, we get this error:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-15/\ncargo build\ncopy just the compiler error\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0308]: mismatched types\n  --> src/main.rs:45:37\n   |\n10 |         let tx1_fut = async move {\n   |                       ---------- the expected `async` block\n...\n24 |         let rx_fut = async {\n   |                      ----- the found `async` block\n...\n45 |         let futures = vec![tx1_fut, rx_fut, tx_fut];\n   |                                     ^^^^^^ expected `async` block, found a different `async` block\n   |\n   = note: expected `async` block `{async block@src/main.rs:10:23: 10:33}`\n              found `async` block `{async block@src/main.rs:24:22: 24:27}`\n   = note: no two async blocks, even if identical, have the same type\n   = help: consider pinning your async block and casting it to a trait object"
          }
        },
        {
          "kind": "text",
          "content": "This might be surprising. After all, none of the async blocks returns anything,\nso each one produces a `Future<Output = ()>`. Remember that `Future` is a trait,\nthough, and that the compiler creates a unique enum for each async block. You\ncan’t put two different hand-written structs in a `Vec`, and the same rule\napplies to the different enums generated by the compiler."
        },
        {
          "kind": "text",
          "content": "To make this work, we need to use _trait objects_, just as we did in [“Returning\nErrors from the run function”][dyn]<!-- ignore --> in Chapter 12. (We’ll cover\ntrait objects in detail in Chapter 18.) Using trait objects lets us treat each\nof the anonymous futures produced by these types as the same type, because all\nof them implement the `Future` trait."
        },
        {
          "kind": "text",
          "content": "> Note: In [Using an Enum to Store Multiple Values][enum-alt]<!-- ignore --> in\n> Chapter 8, we discussed another way to include multiple types in a `Vec`:\n> using an enum to represent each type that can appear in the vector. We can’t\n> do that here, though. For one thing, we have no way to name the different\n> types, because they are anonymous. For another, the reason we reached for a\n> vector and `join_all` in the first place was to be able to work with a dynamic\n> collection of futures where we only care that they have the same output type."
        },
        {
          "kind": "text",
          "content": "We start by wrapping each future in the `vec!` in a `Box::new`, as shown in\nListing 17-16."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-16\" caption=\"Using `Box::new` to align the types of the futures in a `Vec`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-16/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Unfortunately, this code still doesn’t compile. In fact, we get the same basic\nerror we got before for both the second and third `Box::new` calls, as well as\nnew errors referring to the `Unpin` trait. We’ll come back to the `Unpin` errors\nin a moment. First, let’s fix the type errors on the `Box::new` calls by\nexplicitly annotating the type of the `futures` variable (see Listing 17-17)."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-17\" caption=\"Fixing the rest of the type mismatch errors by using an explicit type declaration\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-17/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This type declaration is a little involved, so let’s walk through it:"
        },
        {
          "kind": "text",
          "content": "1. The innermost type is the future itself. We note explicitly that the output\nof the future is the unit type `()` by writing `Future<Output = ()>`.\n2. Then we annotate the trait with `dyn` to mark it as dynamic.\n3. The entire trait reference is wrapped in a `Box`.\n4. Finally, we state explicitly that `futures` is a `Vec` containing these\nitems."
        },
        {
          "kind": "text",
          "content": "That already made a big difference. Now when we run the compiler, we get only\nthe errors mentioning `Unpin`. Although there are three of them, their contents\nare very similar."
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-17\ncargo build\n# copy *only* the errors\n# fix the paths\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0277]: `dyn Future<Output = ()>` cannot be unpinned\n   --> src/main.rs:49:24\n    |\n49  |         trpl::join_all(futures).await;\n    |         -------------- ^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = ()>`\n    |         |\n    |         required by a bound introduced by this call\n    |\n    = note: consider using the `pin!` macro\n            consider using `Box::pin` if you need to access the pinned value outside of the current scope\n    = note: required for `Box<dyn Future<Output = ()>>` to implement `Future`\nnote: required by a bound in `join_all`\n   --> file:///home/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.30/src/future/join_all.rs:105:14\n    |\n102 | pub fn join_all<I>(iter: I) -> JoinAll<I::Item>\n    |        -------- required by a bound in this function\n...\n105 |     I::Item: Future,\n    |              ^^^^^^ required by this bound in `join_all`\n\nerror[E0277]: `dyn Future<Output = ()>` cannot be unpinned\n  --> src/main.rs:49:9\n   |\n49 |         trpl::join_all(futures).await;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = ()>`\n   |\n   = note: consider using the `pin!` macro\n           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n   = note: required for `Box<dyn Future<Output = ()>>` to implement `Future`\nnote: required by a bound in `futures_util::future::join_all::JoinAll`\n  --> file:///home/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.30/src/future/join_all.rs:29:8\n   |\n27 | pub struct JoinAll<F>\n   |            ------- required by a bound in this struct\n28 | where\n29 |     F: Future,\n   |        ^^^^^^ required by this bound in `JoinAll`\n\nerror[E0277]: `dyn Future<Output = ()>` cannot be unpinned\n  --> src/main.rs:49:33\n   |\n49 |         trpl::join_all(futures).await;\n   |                                 ^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = ()>`\n   |\n   = note: consider using the `pin!` macro\n           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n   = note: required for `Box<dyn Future<Output = ()>>` to implement `Future`\nnote: required by a bound in `futures_util::future::join_all::JoinAll`\n  --> file:///home/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.30/src/future/join_all.rs:29:8\n   |\n27 | pub struct JoinAll<F>\n   |            ------- required by a bound in this struct\n28 | where\n29 |     F: Future,\n   |        ^^^^^^ required by this bound in `JoinAll`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `async_await` (bin \"async_await\") due to 3 previous errors"
          }
        },
        {
          "kind": "text",
          "content": "That is a _lot_ to digest, so let’s pull it apart. The first part of the message\ntell us that the first async block (`src/main.rs:8:23: 20:10`) does not\nimplement the `Unpin` trait and suggests using `pin!` or `Box::pin` to resolve\nit. Later in the chapter, we’ll dig into a few more details about `Pin` and\n`Unpin`. For the moment, though, we can just follow the compiler’s advice to get\nunstuck. In Listing 17-18, we start by importing `Pin` from `std::pin`. Next we\nupdate the type annotation for `futures`, with a `Pin` wrapping each `Box`.\nFinally, we use `Box::pin` to pin the futures themselves."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-18\" caption=\"Using `Pin` and `Box::pin` to make the `Vec` type check\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-18/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If we compile and run this, we finally get the output we hoped for:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "received 'hi'\nreceived 'more'\nreceived 'from'\nreceived 'messages'\nreceived 'the'\nreceived 'for'\nreceived 'future'\nreceived 'you'"
          }
        },
        {
          "kind": "text",
          "content": "Phew!"
        },
        {
          "kind": "text",
          "content": "There’s a bit more to explore here. For one thing, using `Pin<Box<T>>` adds a\nsmall amount of overhead from putting these futures on the heap with `Box`—and\nwe’re only doing that to get the types to line up. We don’t actually _need_ the\nheap allocation, after all: these futures are local to this particular function.\nAs noted before, `Pin` is itself a wrapper type, so we can get the benefit of\nhaving a single type in the `Vec`—the original reason we reached for\n`Box`—without doing a heap allocation. We can use `Pin` directly with each\nfuture, using the `std::pin::pin` macro."
        },
        {
          "kind": "text",
          "content": "However, we must still be explicit about the type of the pinned reference;\notherwise, Rust will still not know to interpret these as dynamic trait objects,\nwhich is what we need them to be in the `Vec`. We therefore add `pin` to our\nlist of imports from `std::pin`. Then we can `pin!` each future when we define\nit and define `futures` as a `Vec` containing pinned mutable references to the\ndynamic future type, as in Listing 17-19."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-19\" caption=\"Using `Pin` directly with the `pin!` macro to avoid unnecessary heap allocations\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-19/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We got this far by ignoring the fact that we might have different `Output`\ntypes. For example, in Listing 17-20, the anonymous future for `a` implements\n`Future<Output = u32>`, the anonymous future for `b` implements `Future<Output =\n&str>`, and the anonymous future for `c` implements `Future<Output = bool>`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-20\" caption=\"Three futures with distinct types\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-20/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We can use `trpl::join!` to await them, because it allows us to pass in multiple\nfuture types and produces a tuple of those types. We _cannot_ use\n`trpl::join_all`, because it requires all of the futures passed in to have the\nsame type. Remember, that error is what got us started on this adventure with\n`Pin`!"
        },
        {
          "kind": "text",
          "content": "This is a fundamental tradeoff: we can either deal with a dynamic number of\nfutures with `join_all`, as long as they all have the same type, or we can deal\nwith a set number of futures with the `join` functions or the `join!` macro,\neven if they have different types. This is the same scenario we’d face when\nworking with any other types in Rust. Futures are not special, even though we\nhave some nice syntax for working with them, and that’s a good thing."
        },
        {
          "kind": "text",
          "content": "### Racing Futures"
        },
        {
          "kind": "text",
          "content": "When we “join” futures with the `join` family of functions and macros, we\nrequire _all_ of them to finish before we move on. Sometimes, though, we only\nneed _some_ future from a set to finish before we move on—kind of similar to\nracing one future against another."
        },
        {
          "kind": "text",
          "content": "In Listing 17-21, we once again use `trpl::race` to run two futures, `slow` and\n`fast`, against each other."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-21\" caption=\"Using `race` to get the result of whichever future finishes first\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-21/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Each future prints a message when it starts running, pauses for some amount of\ntime by calling and awaiting `sleep`, and then prints another message when it\nfinishes. Then we pass both `slow` and `fast` to `trpl::race` and wait for one\nof them to finish. (The outcome here isn’t too surprising: `fast` wins.) Unlike\nwhen we used `race` back in [“Our First Async Program”][async-program]<!--\nignore -->, we just ignore the `Either` instance it returns here, because all of\nthe interesting behavior happens in the body of the async blocks."
        },
        {
          "kind": "text",
          "content": "Notice that if you flip the order of the arguments to `race`, the order of the\n“started” messages changes, even though the `fast` future always completes\nfirst. That’s because the implementation of this particular `race` function is\nnot fair. It always runs the futures passed in as arguments in the order in\nwhich they’re passed. Other implementations _are_ fair and will randomly choose\nwhich future to poll first. Regardless of whether the implementation of race\nwe’re using is fair, though, _one_ of the futures will run up to the first\n`await` in its body before another task can start."
        },
        {
          "kind": "text",
          "content": "Recall from [Our First Async Program][async-program]<!-- ignore --> that at each\nawait point, Rust gives a runtime a chance to pause the task and switch to\nanother one if the future being awaited isn’t ready. The inverse is also true:\nRust _only_ pauses async blocks and hands control back to a runtime at an await\npoint. Everything between await points is synchronous."
        },
        {
          "kind": "text",
          "content": "That means if you do a bunch of work in an async block without an await point,\nthat future will block any other futures from making progress. You may sometimes\nhear this referred to as one future _starving_ other futures. In some cases,\nthat may not be a big deal. However, if you are doing some kind of expensive\nsetup or long-running work, or if you have a future that will keep doing some\nparticular task indefinitely, you’ll need to think about when and where to hand\ncontrol back to the runtime."
        },
        {
          "kind": "text",
          "content": "By the same token, if you have long-running blocking operations, async can be a\nuseful tool for providing ways for different parts of the program to relate to\neach other."
        },
        {
          "kind": "text",
          "content": "But _how_ would you hand control back to the runtime in those cases?"
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"yielding\"></a>"
        },
        {
          "kind": "text",
          "content": "### Yielding Control to the Runtime"
        },
        {
          "kind": "text",
          "content": "Let’s simulate a long-running operation. Listing 17-22 introduces a `slow`\nfunction."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-22\" caption=\"Using `thread::sleep` to simulate slow operations\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-22/src/main.rs:slow}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code uses `std::thread::sleep` instead of `trpl::sleep` so that calling\n`slow` will block the current thread for some number of milliseconds. We can use\n`slow` to stand in for real-world operations that are both long-running and\nblocking."
        },
        {
          "kind": "text",
          "content": "In Listing 17-23, we use `slow` to emulate doing this kind of CPU-bound work in\na pair of futures."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-23\" caption=\"Using `thread::sleep` to simulate slow operations\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-23/src/main.rs:slow-futures}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To begin, each future only hands control back to the runtime _after_ carrying\nout a bunch of slow operations. If you run this code, you will see this output:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-23/\ncargo run\ncopy just the output\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "'a' started.\n'a' ran for 30ms\n'a' ran for 10ms\n'a' ran for 20ms\n'b' started.\n'b' ran for 75ms\n'b' ran for 10ms\n'b' ran for 15ms\n'b' ran for 350ms\n'a' finished."
          }
        },
        {
          "kind": "text",
          "content": "As with our earlier example, `race` still finishes as soon as `a` is done.\nThere’s no interleaving between the two futures, though. The `a` future does all\nof its work until the `trpl::sleep` call is awaited, then the `b` future does\nall of its work until its own `trpl::sleep` call is awaited, and finally the `a`\nfuture completes. To allow both futures to make progress between their slow\ntasks, we need await points so we can hand control back to the runtime. That\nmeans we need something we can await!"
        },
        {
          "kind": "text",
          "content": "We can already see this kind of handoff happening in Listing 17-23: if we\nremoved the `trpl::sleep` at the end of the `a` future, it would complete\nwithout the `b` future running _at all_. Let’s try using the `sleep` function as\na starting point for letting operations switch off making progress, as shown in\nListing 17-24."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-24\" caption=\"Using `sleep` to let operations switch off making progress\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-24/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In Listing 17-24, we add `trpl::sleep` calls with await points between each call\nto `slow`. Now the two futures’ work is interleaved:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-24\ncargo run\ncopy just the output\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "'a' started.\n'a' ran for 30ms\n'b' started.\n'b' ran for 75ms\n'a' ran for 10ms\n'b' ran for 10ms\n'a' ran for 20ms\n'b' ran for 15ms\n'a' finished."
          }
        },
        {
          "kind": "text",
          "content": "The `a` future still runs for a bit before handing off control to `b`, because\nit calls `slow` before ever calling `trpl::sleep`, but after that the futures\nswap back and forth each time one of them hits an await point. In this case, we\nhave done that after every call to `slow`, but we could break up the work in\nwhatever way makes the most sense to us."
        },
        {
          "kind": "text",
          "content": "We don’t really want to _sleep_ here, though: we want to make progress as fast\nas we can. We just need to hand back control to the runtime. We can do that\ndirectly, using the `yield_now` function. In Listing 17-25, we replace all those\n`sleep` calls with `yield_now`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-25\" caption=\"Using `yield_now` to let operations switch off making progress\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-25/src/main.rs:yields}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code is both clearer about the actual intent and can be significantly\nfaster than using `sleep`, because timers such as the one used by `sleep` often\nhave limits on how granular they can be. The version of `sleep` we are using,\nfor example, will always sleep for at least a millisecond, even if we pass it a\n`Duration` of one nanosecond. Again, modern computers are _fast_: they can do a\nlot in one millisecond!"
        },
        {
          "kind": "text",
          "content": "You can see this for yourself by setting up a little benchmark, such as the one\nin Listing 17-26. (This isn’t an especially rigorous way to do performance\ntesting, but it suffices to show the difference here.)"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-26\" caption=\"Comparing the performance of `sleep` and `yield_now`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-26/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we skip all the status printing, pass a one-nanosecond `Duration` to\n`trpl::sleep`, and let each future run by itself, with no switching between the\nfutures. Then we run for 1,000 iterations and see how long the future using\n`trpl::sleep` takes compared to the future using `trpl::yield_now`."
        },
        {
          "kind": "text",
          "content": "The version with `yield_now` is _way_ faster!"
        },
        {
          "kind": "text",
          "content": "This means that async can be useful even for compute-bound tasks, depending on\nwhat else your program is doing, because it provides a useful tool for\nstructuring the relationships between different parts of the program. This is a\nform of _cooperative multitasking_, where each future has the power to determine\nwhen it hands over control via await points. Each future therefore also has the\nresponsibility to avoid blocking for too long. In some Rust-based embedded\noperating systems, this is the _only_ kind of multitasking!"
        },
        {
          "kind": "text",
          "content": "In real-world code, you won’t usually be alternating function calls with await\npoints on every single line, of course. While yielding control in this way is\nrelatively inexpensive, it’s not free. In many cases, trying to break up a\ncompute-bound task might make it significantly slower, so sometimes it’s better\nfor _overall_ performance to let an operation block briefly. Always\nmeasure to see what your code’s actual performance bottlenecks are. The\nunderlying dynamic is important to keep in mind, though, if you _are_ seeing a\nlot of work happening in serial that you expected to happen concurrently!"
        },
        {
          "kind": "text",
          "content": "### Building Our Own Async Abstractions"
        },
        {
          "kind": "text",
          "content": "We can also compose futures together to create new patterns. For example, we can\nbuild a `timeout` function with async building blocks we already have. When\nwe’re done, the result will be another building block we could use to create\nstill more async abstractions."
        },
        {
          "kind": "text",
          "content": "Listing 17-27 shows how we would expect this `timeout` to work with a slow\nfuture."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-27\" caption=\"Using our imagined `timeout` to run a slow operation with a time limit\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-27/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s implement this! To begin, let’s think about the API for `timeout`:"
        },
        {
          "kind": "text",
          "content": "- It needs to be an async function itself so we can await it.\n- Its first parameter should be a future to run. We can make it generic to allow\nit to work with any future.\n- Its second parameter will be the maximum time to wait. If we use a `Duration`,\nthat will make it easy to pass along to `trpl::sleep`.\n- It should return a `Result`. If the future completes successfully, the\n`Result` will be `Ok` with the value produced by the future. If the timeout\nelapses first, the `Result` will be `Err` with the duration that the timeout\nwaited for."
        },
        {
          "kind": "text",
          "content": "Listing 17-28 shows this declaration."
        },
        {
          "kind": "text",
          "content": "<!-- This is not tested because it intentionally does not compile. -->"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-28\" caption=\"Defining the signature of `timeout`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-28/src/main.rs:declaration}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "That satisfies our goals for the types. Now let’s think about the _behavior_ we\nneed: we want to race the future passed in against the duration. We can use\n`trpl::sleep` to make a timer future from the duration, and use `trpl::race` to\nrun that timer with the future the caller passes in."
        },
        {
          "kind": "text",
          "content": "We also know that `race` is not fair, polling arguments in the order in which\nthey are passed. Thus, we pass `future_to_try` to `race` first so it gets a\nchance to complete even if `max_time` is a very short duration. If\n`future_to_try` finishes first, `race` will return `Left` with the output from\n`future_to_try`. If `timer` finishes first, `race` will return `Right` with the\ntimer’s output of `()`."
        },
        {
          "kind": "text",
          "content": "In Listing 17-29, we match on the result of awaiting `trpl::race`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-29\" caption=\"Defining `timeout` with `race` and `sleep`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-29/src/main.rs:implementation}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If the `future_to_try` succeeds and we get a `Left(output)`, we return\n`Ok(output)`. If the sleep timer elapses instead and we get a `Right(())`, we\nignore the `()` with `_` and return `Err(max_time)` instead."
        },
        {
          "kind": "text",
          "content": "With that, we have a working `timeout` built out of two other async helpers. If\nwe run our code, it will print the failure mode after the timeout:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Failed after 2 seconds"
          }
        },
        {
          "kind": "text",
          "content": "Because futures compose with other futures, you can build really powerful tools\nusing smaller async building blocks. For example, you can use this same approach\nto combine timeouts with retries, and in turn use those with operations such as\nnetwork calls (one of the examples from the beginning of the chapter)."
        },
        {
          "kind": "text",
          "content": "In practice, you’ll usually work directly with `async` and `await`, and\nsecondarily with functions and macros such as `join`, `join_all`, `race`, and so\non. You’ll only need to reach for `pin` now and again to use futures with those\nAPIs."
        },
        {
          "kind": "text",
          "content": "We’ve now seen a number of ways to work with multiple futures at the same\ntime. Up next, we’ll look at how we can work with multiple futures in a\nsequence over time with _streams_. Here are a couple more things you might want\nto consider first, though:"
        },
        {
          "kind": "text",
          "content": "- We used a `Vec` with `join_all` to wait for all of the futures in some group\nto finish. How could you use a `Vec` to process a group of futures in\nsequence instead? What are the tradeoffs of doing that?"
        },
        {
          "kind": "text",
          "content": "- Take a look at the `futures::stream::FuturesUnordered` type from the `futures`\ncrate. How would using it be different from using a `Vec`? (Don’t worry about\nthe fact that it’s from the `stream` part of the crate; it works just fine\nwith any collection of futures.)"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Given a function `sleep(d)` that sleeps for the given duration, consider this function:\n\n```rust\nlet futs: Vec<_> = [1, 2, 3].iter().map(|n| async move {\n  sleep(Duration::from_secs(5)).await;\n  n + 1\n}).collect();\n\nfor fut in futs {\n  let n = fut.await;\n  println!(\"{n}\");\n}\n```\n\nWhen executed, about how many seconds should this take to execute?\n",
                  "distractors": [
                    "5",
                    "0"
                  ]
                },
                "answer": {
                  "answer": "15"
                },
                "context": "Without using a function like `join_all`, the futures will not run concurrently. Therefore this code would take 15 seconds (5 seconds per list element).\n",
                "id": "68680e2e-7a9f-4cee-8080-70e57fe5a2b3"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are designing a utility function with the following specification:\n\n> `map_stringify` takes two arguments: a vector of inputs, and an async function that converts the input to an output,\n> where the outputs can be converted to strings.\n> `map_stringify` returns a vector of stringified outputs.\n\nWhich function type signature best encodes this specification?\n",
                  "distractors": [
                    "```rust\nasync fn map_stringify(\n  inputs: Vec<String>, f: impl Future<Output = String>\n) -> Vec<String>\n```\n",
                    "```rust\nfn map_stringify<I, O, F>(\n  inputs: Vec<I>, f: impl Fn(I) -> O,\n) -> Vec<impl Future<Output = String>>\nwhere\n  O: ToString,  \n```\n",
                    "```rust\nasync fn map_stringify<I, F>(\n  inputs: Vec<I>, f: impl Fn(I) -> F, \n) -> Vec<String>\nwhere\n  F: Future + ToString,\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```rust\nasync fn map_stringify<I, O, F>(\n  inputs: Vec<I>, f: impl Fn(I) -> F, \n) -> Vec<String>\nwhere\n  O: ToString,\n  F: Future<Output = O>,\n```\n"
                },
                "context": "Here's one implementation of the specified function:\n\n```rust\nasync fn map_stringify<I, O, F>(\n  f: impl Fn(I) -> F, inputs: Vec<I>\n) -> Vec<String>\nwhere\n  O: ToString,\n  F: Future<Output = O>,\n{\n  let f = &f;\n  let futs = inputs\n    .into_iter()\n    .map(|input| async move { f(input).await.to_string() });\n  futures::future::join_all(futs).await\n}\n```\n",
                "id": "b42a9c5b-bfe7-4d6f-967a-f8ff2a6faa0d"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you are writing a program that needs to run some async code, but every 500ms check to see if the computation should be halted.\nWhich helper function would be most appropriate for accomplishing this task?\n",
                  "distractors": [
                    "`join`",
                    "`yield`",
                    "`spawn` / `spawn_task`"
                  ]
                },
                "answer": {
                  "answer": "`race` / `select`"
                },
                "context": "For instance, you could run a `select` in a loop between a long-running future and a sleep future that completes in 500ms.\n",
                "id": "7da21e95-8e03-412b-8c4d-90ccfc8c6802"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[dyn]: ch12-03-improving-error-handling-and-modularity.html\n[enum-alt]: ch08-01-vectors.html#using-an-enum-to-store-multiple-types\n[async-program]: ch17-01-futures-and-syntax.html#our-first-async-program\n[iterator-trait]: ch13-02-iterators.html#the-iterator-trait-and-the-next-method"
        }
      ]
    },
    {
      "title": "Streams: Futures in Sequence",
      "file": "ch17-04-streams.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"streams\"></a>"
        },
        {
          "kind": "text",
          "content": "So far in this chapter, we’ve mostly stuck to individual futures. The one big\nexception was the async channel we used. Recall how we used the receiver for our\nasync channel earlier in this chapter in the [“Message\nPassing”][17-02-messages]<!-- ignore --> section. The async `recv` method\nproduces a sequence of items over time. This is an instance of a much more\ngeneral pattern known as a _stream_."
        },
        {
          "kind": "text",
          "content": "We saw a sequence of items back in Chapter 13, when we looked at the `Iterator`\ntrait in [The Iterator Trait and the `next` Method][iterator-trait]<!-- ignore\n--> section, but there are two differences between iterators and the async\nchannel receiver. The first difference is time: iterators are synchronous, while\nthe channel receiver is asynchronous. The second is the API. When working\ndirectly with `Iterator`, we call its synchronous `next` method. With the\n`trpl::Receiver` stream in particular, we called an asynchronous `recv` method\ninstead. Otherwise, these APIs feel very similar, and that similarity\nisn’t a coincidence. A stream is like an asynchronous form of iteration. Whereas\nthe `trpl::Receiver` specifically waits to receive messages, though, the\ngeneral-purpose stream API is much broader: it provides the next item the\nway `Iterator` does, but asynchronously."
        },
        {
          "kind": "text",
          "content": "The similarity between iterators and streams in Rust means we can actually\ncreate a stream from any iterator. As with an iterator, we can work with a\nstream by calling its `next` method and then awaiting the output, as in Listing\n17-30."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-30\" caption=\"Creating a stream from an iterator and printing its values\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-30/src/main.rs:stream}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We start with an array of numbers, which we convert to an iterator and then call\n`map` on to double all the values. Then we convert the iterator into a stream\nusing the `trpl::stream_from_iter` function. Next, we loop over the items in the\nstream as they arrive with the `while let` loop."
        },
        {
          "kind": "text",
          "content": "Unfortunately, when we try to run the code, it doesn’t compile, but instead it\nreports that there’s no `next` method available:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-30\ncargo build\ncopy only the error output\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "error[E0599]: no method named `next` found for struct `Iter` in the current scope\n  --> src/main.rs:10:40\n   |\n10 |         while let Some(value) = stream.next().await {\n   |                                        ^^^^\n   |\n   = note: the full type name has been written to 'file:///projects/async-await/target/debug/deps/async_await-575db3dd3197d257.long-type-14490787947592691573.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following traits which provide `next` are implemented but not in scope; perhaps you want to import one of them\n   |\n1  + use crate::trpl::StreamExt;\n   |\n1  + use futures_util::stream::stream::StreamExt;\n   |\n1  + use std::iter::Iterator;\n   |\n1  + use std::str::pattern::Searcher;\n   |\nhelp: there is a method `try_next` with a similar name\n   |\n10 |         while let Some(value) = stream.try_next().await {\n   |                                        ~~~~~~~~"
          }
        },
        {
          "kind": "text",
          "content": "As this output explains, the reason for the compiler error is that we need the\nright trait in scope to be able to use the `next` method. Given our discussion\nso far, you might reasonably expect that trait to be `Stream`, but it’s actually\n`StreamExt`. Short for _extension_, `Ext` is a common pattern in the\nRust community for extending one trait with another."
        },
        {
          "kind": "text",
          "content": "We’ll explain the `Stream` and `StreamExt` traits in a bit more detail at the\nend of the chapter, but for now all you need to know is that the `Stream` trait\ndefines a low-level interface that effectively combines the `Iterator` and\n`Future` traits. `StreamExt` supplies a higher-level set of APIs on top of\n`Stream`, including the `next` method as well as other utility methods similar\nto those provided by the `Iterator` trait. `Stream` and `StreamExt` are not yet\npart of Rust’s standard library, but most ecosystem crates use the same\ndefinition."
        },
        {
          "kind": "text",
          "content": "The fix to the compiler error is to add a `use` statement for `trpl::StreamExt`,\nas in Listing 17-31."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-31\" caption=\"Successfully using an iterator as the basis for a stream\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-31/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With all those pieces put together, this code works the way we want! What’s\nmore, now that we have `StreamExt` in scope, we can use all of its utility\nmethods, just as with iterators. For example, in Listing 17-32, we use the\n`filter` method to filter out everything but multiples of three and five."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-32\" caption=\"Filtering a stream with the `StreamExt::filter` method\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-32/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Of course, this isn’t very interesting, since we could do the same with normal\niterators and without any async at all. Let’s look at what\nwe can do that _is_ unique to streams."
        },
        {
          "kind": "text",
          "content": "### Composing Streams"
        },
        {
          "kind": "text",
          "content": "Many concepts are naturally represented as streams: items becoming available in\na queue, chunks of data being pulled incrementally from the filesystem when the\nfull data set is too large for the computer’s memory, or data arriving over the\nnetwork over time. Because streams are futures, we can use them with any other\nkind of future and combine them in interesting ways. For example, we can batch\nup events to avoid triggering too many network calls, set timeouts on sequences\nof long-running operations, or throttle user interface events to avoid doing\nneedless work."
        },
        {
          "kind": "text",
          "content": "Let’s start by building a little stream of messages as a stand-in for a stream\nof data we might see from a WebSocket or another real-time communication\nprotocol, as shown in Listing 17-33."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-33\" caption=\"Using the `rx` receiver as a `ReceiverStream`\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-33/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First, we create a function called `get_messages` that returns `impl Stream<Item\n= String>`. For its implementation, we create an async channel, loop over the\nfirst 10 letters of the English alphabet, and send them across the channel."
        },
        {
          "kind": "text",
          "content": "We also use a new type: `ReceiverStream`, which converts the `rx` receiver from\nthe `trpl::channel` into a `Stream` with a `next` method. Back in `main`, we use\na `while let` loop to print all the messages from the stream."
        },
        {
          "kind": "text",
          "content": "When we run this code, we get exactly the results we would expect:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Message: 'a'\nMessage: 'b'\nMessage: 'c'\nMessage: 'd'\nMessage: 'e'\nMessage: 'f'\nMessage: 'g'\nMessage: 'h'\nMessage: 'i'\nMessage: 'j'"
          }
        },
        {
          "kind": "text",
          "content": "Again, we could do this with the regular `Receiver` API or even the regular\n`Iterator` API, though, so let’s add a feature that requires streams: adding a\ntimeout that applies to every item in the stream, and a delay on the items we\nemit, as shown in Listing 17-34."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-34\" caption=\"Using the `StreamExt::timeout` method to set a time limit on the items in a stream\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-34/src/main.rs:timeout}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We start by adding a timeout to the stream with the `timeout` method, which\ncomes from the `StreamExt` trait. Then we update the body of the `while let`\nloop, because the stream now returns a `Result`. The `Ok` variant indicates a\nmessage arrived in time; the `Err` variant indicates that the timeout elapsed\nbefore any message arrived. We `match` on that result and either print the\nmessage when we receive it successfully or print a notice about the timeout.\nFinally, notice that we pin the messages after applying the timeout to them,\nbecause the timeout helper produces a stream that needs to be pinned to be\npolled."
        },
        {
          "kind": "text",
          "content": "However, because there are no delays between messages, this timeout does not\nchange the behavior of the program. Let’s add a variable delay to the messages\nwe send, as shown in Listing 17-35."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-35\" caption=\"Sending messages through `tx` with an async delay without making `get_messages` an async function\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-35/src/main.rs:messages}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In `get_messages`, we use the `enumerate` iterator method with the `messages`\narray so that we can get the index of each item we’re sending along with the\nitem itself. Then we apply a 100-millisecond delay to even-index items and a\n300-millisecond delay to odd-index items to simulate the different delays we\nmight see from a stream of messages in the real world. Because our timeout is\nfor 200 milliseconds, this should affect half of the messages."
        },
        {
          "kind": "text",
          "content": "To sleep between messages in the `get_messages` function without blocking, we\nneed to use async. However, we can’t make `get_messages` itself into an async\nfunction, because then we’d return a `Future<Output = Stream<Item = String>>`\ninstead of a `Stream<Item = String>>`. The caller would have to await\n`get_messages` itself to get access to the stream. But remember: everything in a\ngiven future happens linearly; concurrency happens _between_ futures. Awaiting\n`get_messages` would require it to send all the messages, including the sleep\ndelay between each message, before returning the receiver stream. As a result,\nthe timeout would be useless. There would be no delays in the stream itself;\nthey would all happen before the stream was even available."
        },
        {
          "kind": "text",
          "content": "Instead, we leave `get_messages` as a regular function that returns a stream,\nand we spawn a task to handle the async `sleep` calls."
        },
        {
          "kind": "text",
          "content": "> Note: Calling `spawn_task` in this way works because we already set up our\n> runtime; had we not, it would cause a panic. Other implementations choose\n> different tradeoffs: they might spawn a new runtime and avoid the panic but\n> end up with a bit of extra overhead, or they may simply not provide a\n> standalone way to spawn tasks without reference to a runtime. Make sure you\n> know what tradeoff your runtime has chosen and write your code accordingly!"
        },
        {
          "kind": "text",
          "content": "Now our code has a much more interesting result. Between every other pair of\nmessages, a `Problem: Elapsed(())` error."
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Message: 'a'\nProblem: Elapsed(())\nMessage: 'b'\nMessage: 'c'\nProblem: Elapsed(())\nMessage: 'd'\nMessage: 'e'\nProblem: Elapsed(())\nMessage: 'f'\nMessage: 'g'\nProblem: Elapsed(())\nMessage: 'h'\nMessage: 'i'\nProblem: Elapsed(())\nMessage: 'j'"
          }
        },
        {
          "kind": "text",
          "content": "The timeout doesn’t prevent the messages from arriving in the end. We still get\nall of the original messages, because our channel is _unbounded_: it can hold as\nmany messages as we can fit in memory. If the message doesn’t arrive before the\ntimeout, our stream handler will account for that, but when it polls the stream\nagain, the message may now have arrived."
        },
        {
          "kind": "text",
          "content": "You can get different behavior if needed by using other kinds of channels or\nother kinds of streams more generally. Let’s see one of those in practice by\ncombining a stream of time intervals with this stream of messages."
        },
        {
          "kind": "text",
          "content": "### Merging Streams"
        },
        {
          "kind": "text",
          "content": "First, let’s create another stream, which will emit an item every millisecond if\nwe let it run directly. For simplicity, we can use the `sleep` function to send\na message on a delay and combine it with the same approach we used in\n`get_messages` of creating a stream from a channel. The difference is that this\ntime, we’re going to send back the count of intervals that have elapsed, so the\nreturn type will be `impl Stream<Item = u32>`, and we can call the function\n`get_intervals` (see Listing 17-36)."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-36\" caption=\"Creating a stream with a counter that will be emitted once every millisecond\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-36/src/main.rs:intervals}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We start by defining a `count` in the task. (We could define it outside the\ntask, too, but it’s clearer to limit the scope of any given variable.) Then we\ncreate an infinite loop. Each iteration of the loop asynchronously sleeps for\none millisecond, increments the count, and then sends it over the channel.\nBecause this is all wrapped in the task created by `spawn_task`, all of\nit—including the infinite loop—will get cleaned up along with the runtime."
        },
        {
          "kind": "text",
          "content": "This kind of infinite loop, which ends only when the whole runtime gets torn\ndown, is fairly common in async Rust: many programs need to keep running\nindefinitely. With async, this doesn’t block anything else, as long as there is\nat least one await point in each iteration through the loop."
        },
        {
          "kind": "text",
          "content": "Now, back in our main function’s async block, we can attempt to merge the\n`messages` and `intervals` streams, as shown in Listing 17-37."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-37\" caption=\"Attempting to merge the `messages` and `intervals` streams\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-37/src/main.rs:main}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We start by calling `get_intervals`. Then we merge the `messages` and\n`intervals` streams with the `merge` method, which combines multiple streams\ninto one stream that produces items from any of the source streams as soon as\nthe items are available, without imposing any particular ordering. Finally, we\nloop over that combined stream instead of over `messages`."
        },
        {
          "kind": "text",
          "content": "At this point, neither `messages` nor `intervals` needs to be pinned or mutable,\nbecause both will be combined into the single `merged` stream. However, this\ncall to `merge` doesn’t compile! (Neither does the `next` call in the `while\nlet` loop, but we’ll come back to that.) This is because the two streams have\ndifferent types. The `messages` stream has the type `Timeout<impl Stream<Item =\nString>>`, where `Timeout` is the type that implements `Stream` for a `timeout`\ncall. The `intervals` stream has the type `impl Stream<Item = u32>`. To merge\nthese two streams, we need to transform one of them to match the other. We’ll\nrework the intervals stream, because messages is already in the basic format we\nwant and has to handle timeout errors (see Listing 17-38)."
        },
        {
          "kind": "text",
          "content": "<!-- We cannot directly test this one, because it never stops. -->"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-38\" caption=\"Aligning the type of the the `intervals` stream with the type of the `messages` stream\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-38/src/main.rs:main}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First, we can use the `map` helper method to transform the `intervals` into a\nstring. Second, we need to match the `Timeout` from `messages`. Because we don’t\nactually _want_ a timeout for `intervals`, though, we can just create a timeout\nwhich is longer than the other durations we are using. Here, we create a\n10-second timeout with `Duration::from_secs(10)`. Finally, we need to make\n`stream` mutable, so that the `while let` loop’s `next` calls can iterate\nthrough the stream, and pin it so that it’s safe to do so. That gets us _almost_\nto where we need to be. Everything type checks. If you run this, though, there\nwill be two problems. First, it will never stop! You’ll need to stop it with\n<span class=\"keystroke\">ctrl-c</span>. Second, the messages from the English\nalphabet will be buried in the midst of all the interval counter messages:"
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the tasks running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "--snip--\nInterval: 38\nInterval: 39\nInterval: 40\nMessage: 'a'\nInterval: 41\nInterval: 42\nInterval: 43\n--snip--"
          }
        },
        {
          "kind": "text",
          "content": "Listing 17-39 shows one way to solve these last two problems."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-39\" caption=\"Using `throttle` and `take` to manage the merged streams\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-39/src/main.rs:throttle}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First, we use the `throttle` method on the `intervals` stream so that it doesn’t\noverwhelm the `messages` stream. _Throttling_ is a way of limiting the rate at\nwhich a function will be called—or, in this case, how often the stream will be\npolled. Once every 100 milliseconds should do, because that’s roughly how often\nour messages arrive."
        },
        {
          "kind": "text",
          "content": "To limit the number of items we will accept from a stream, we apply the `take`\nmethod to the `merged` stream, because we want to limit the final output, not\njust one stream or the other."
        },
        {
          "kind": "text",
          "content": "Now when we run the program, it stops after pulling 20 items from the stream,\nand the intervals don’t overwhelm the messages. We also don’t get `Interval:\n100` or `Interval: 200` or so on, but instead get `Interval: 1`, `Interval: 2`,\nand so on—even though we have a source stream that _can_ produce an event every\nmillisecond. That’s because the `throttle` call produces a new stream that wraps\nthe original stream so that the original stream gets polled only at the throttle\nrate, not its own “native” rate. We don’t have a bunch of unhandled interval\nmessages we’re choosing to ignore. Instead, we never produce those interval\nmessages in the first place! This is the inherent “laziness” of Rust’s futures\nat work again, allowing us to choose our performance characteristics."
        },
        {
          "kind": "text",
          "content": "<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Interval: 1\nMessage: 'a'\nInterval: 2\nInterval: 3\nProblem: Elapsed(())\nInterval: 4\nMessage: 'b'\nInterval: 5\nMessage: 'c'\nInterval: 6\nInterval: 7\nProblem: Elapsed(())\nInterval: 8\nMessage: 'd'\nInterval: 9\nMessage: 'e'\nInterval: 10\nInterval: 11\nProblem: Elapsed(())\nInterval: 12"
          }
        },
        {
          "kind": "text",
          "content": "There’s one last thing we need to handle: errors! With both of these\nchannel-based streams, the `send` calls could fail when the other side of the\nchannel closes—and that’s just a matter of how the runtime executes the futures\nthat make up the stream. Up until now, we’ve ignored this possibility by calling\n`unwrap`, but in a well-behaved app, we should explicitly handle the error, at\nminimum by ending the loop so we don’t try to send any more messages. Listing\n17-40 shows a simple error strategy: print the issue and then `break` from the\nloops."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-40\" caption=\"Handling errors and shutting down the loops\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-40/src/main.rs:errors}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As usual, the correct way to handle a message send error will vary; just make\nsure you have a strategy."
        },
        {
          "kind": "text",
          "content": "Now that we’ve seen a bunch of async in practice, let’s take a step back and dig\ninto a few of the details of how `Future`, `Stream`, and the other key traits\nRust uses to make async work."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "The `Stream` trait is most analogous to which non-async trait in the Rust standard library?\n",
                  "distractors": [
                    "`Write`",
                    "`Index`",
                    "`Sync`"
                  ]
                },
                "answer": {
                  "answer": "`Iterator`"
                },
                "context": "The `Stream` trait provides an asynchronous version of a Rust iterator.\n",
                "id": "f94a87f0-a4d6-4cd6-bcee-dfcc606f8ec2"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say you have a stream that produces the sequence `[\"A\", \"B\", \"C\"]` and another stream that produces the sequence [\"D\", \"E\", \"F\"].\nYou do not know when each stream will emit each character, only that it occurs in the specified sequences.\nConsider merging these streams and printing each character. Then select each of the following output strings that could print.\n",
                  "distractors": [
                    "ACBDEF",
                    "CFBEAD"
                  ]
                },
                "answer": {
                  "answer": [
                    "ABDEFC",
                    "DEFABC"
                  ]
                },
                "context": "Merging will always respect ordering in each stream, so for example \"B\" cannot occur before \"C\".\n",
                "id": "84452eff-13df-4fcb-91ea-1f504d5bfaf0"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[17-02-messages]: ch17-02-concurrency-with-async.html#message-passing\n[iterator-trait]: ch13-02-iterators.html#the-iterator-trait-and-the-next-method"
        }
      ]
    },
    {
      "title": "A Closer Look at the Traits for Async",
      "file": "ch17-05-traits-for-async.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"digging-into-the-traits-for-async\"></a>"
        },
        {
          "kind": "text",
          "content": "Throughout the chapter, we’ve used the `Future`, `Pin`, `Unpin`, `Stream`, and\n`StreamExt` traits in various ways. So far, though, we’ve avoided getting too\nfar into the details of how they work or how they fit together, which is fine\nmost of the time for your day-to-day Rust work. Sometimes, though, you’ll\nencounter situations where you’ll need to understand a few more of these\ndetails. In this section, we’ll dig in just enough to help in those scenarios,\nstill leaving the _really_ deep dive for other documentation."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"future\"></a>"
        },
        {
          "kind": "text",
          "content": "### The `Future` Trait"
        },
        {
          "kind": "text",
          "content": "Let’s start by taking a closer look at how the `Future` trait works. Here’s how\nRust defines it:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "use std::pin::Pin;\nuse std::task::{Context, Poll};\n\npub trait Future {\n    type Output;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n}"
          }
        },
        {
          "kind": "text",
          "content": "That trait definition includes a bunch of new types and also some syntax we\nhaven’t seen before, so let’s walk through the definition piece by piece."
        },
        {
          "kind": "text",
          "content": "First, `Future`’s associated type `Output` says what the future resolves to.\nThis is analogous to the `Item` associated type for the `Iterator` trait.\nSecond, `Future` also has the `poll` method, which takes a special `Pin`\nreference for its `self` parameter and a mutable reference to a `Context` type,\nand returns a `Poll<Self::Output>`. We’ll talk more about `Pin` and\n`Context` in a moment. For now, let’s focus on what the method returns,\nthe `Poll` type:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "enum Poll<T> {\n    Ready(T),\n    Pending,\n}"
          }
        },
        {
          "kind": "text",
          "content": "This `Poll` type is similar to an `Option`. It has one variant that has a value,\n`Ready(T)`, and one which does not, `Pending`. `Poll` means something quite\ndifferent from `Option`, though! The `Pending` variant indicates that the future\nstill has work to do, so the caller will need to check again later. The `Ready`\nvariant indicates that the future has finished its work and the `T` value is\navailable."
        },
        {
          "kind": "text",
          "content": "> Note: With most futures, the caller should not call `poll` again after the\n> future has returned `Ready`. Many futures will panic if polled again after\n> becoming ready. Futures that are safe to poll again will say so explicitly in\n> their documentation. This is similar to how `Iterator::next` behaves."
        },
        {
          "kind": "text",
          "content": "When you see code that uses `await`, Rust compiles it under the hood to code\nthat calls `poll`. If you look back at Listing 17-4, where we printed out the\npage title for a single URL once it resolved, Rust compiles it into something\nkind of (although not exactly) like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "match page_title(url).poll() {\n    Ready(page_title) => match page_title {\n        Some(title) => println!(\"The title for {url} was {title}\"),\n        None => println!(\"{url} had no title\"),\n    }\n    Pending => {\n        // But what goes here?\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "What should we do when the future is still `Pending`? We need some way to try\nagain, and again, and again, until the future is finally ready. In other words,\nwe need a loop:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let mut page_title_fut = page_title(url);\nloop {\n    match page_title_fut.poll() {\n        Ready(value) => match page_title {\n            Some(title) => println!(\"The title for {url} was {title}\"),\n            None => println!(\"{url} had no title\"),\n        }\n        Pending => {\n            // continue\n        }\n    }\n}"
          }
        },
        {
          "kind": "text",
          "content": "If Rust compiled it to exactly that code, though, every `await` would be\nblocking—exactly the opposite of what we were going for! Instead, Rust makes\nsure that the loop can hand off control to something that can pause work on this\nfuture to work on other futures and then check this one again later. As we’ve\nseen, that something is an async runtime, and this scheduling and coordination\nwork is one of its main jobs."
        },
        {
          "kind": "text",
          "content": "Earlier in the chapter, we described waiting on `rx.recv`. The `recv` call\nreturns a future, and awaiting the future polls it. We noted that a runtime will\npause the future until it’s ready with either `Some(message)` or `None` when the\nchannel closes. With our deeper understanding of the `Future` trait, and\nspecifically `Future::poll`, we can see how that works. The runtime knows the\nfuture isn’t ready when it returns `Poll::Pending`. Conversely, the runtime\nknows the future _is_ ready and advances it when `poll` returns\n`Poll::Ready(Some(message))` or `Poll::Ready(None)`."
        },
        {
          "kind": "text",
          "content": "The exact details of how a runtime does that are beyond the scope of this book,\nbut the key is to see the basic mechanics of futures: a runtime _polls_ each\nfuture it is responsible for, putting the future back to sleep when it is not\nyet ready."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"pinning-and-the-pin-and-unpin-traits\"></a>"
        },
        {
          "kind": "text",
          "content": "### The `Pin` and `Unpin` Traits"
        },
        {
          "kind": "text",
          "content": "When we introduced the idea of pinning in Listing 17-16, we ran into a very\ngnarly error message. Here is the relevant part of it again:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch17-async-await/listing-17-16\ncargo build\ncopy *only* the final `error` block from the errors\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0277]: `{async block@src/main.rs:10:23: 10:33}` cannot be unpinned\n  --> src/main.rs:48:33\n   |\n48 |         trpl::join_all(futures).await;\n   |                                 ^^^^^ the trait `Unpin` is not implemented for `{async block@src/main.rs:10:23: 10:33}`\n   |\n   = note: consider using the `pin!` macro\n           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n   = note: required for `Box<{async block@src/main.rs:10:23: 10:33}>` to implement `Future`\nnote: required by a bound in `futures_util::future::join_all::JoinAll`\n  --> file:///home/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.30/src/future/join_all.rs:29:8\n   |\n27 | pub struct JoinAll<F>\n   |            ------- required by a bound in this struct\n28 | where\n29 |     F: Future,\n   |        ^^^^^^ required by this bound in `JoinAll`"
          }
        },
        {
          "kind": "text",
          "content": "This error message tells us not only that we need to pin the values but also why\npinning is required. The `trpl::join_all` function returns a struct called\n`JoinAll`. That struct is generic over a type `F`, which is constrained to\nimplement the `Future` trait. Directly awaiting a future with `await` pins the\nfuture implicitly. That’s why we don’t need to use `pin!` everywhere we want to\nawait futures."
        },
        {
          "kind": "text",
          "content": "However, we’re not directly awaiting a future here. Instead, we construct a new\nfuture, `JoinAll`, by passing a collection of futures to the `join_all`\nfunction. The signature for `join_all` requires that the types of the items in\nthe collection all implement the `Future` trait, and `Box<T>` implements\n`Future` only if the `T` it wraps is a future that implements the `Unpin` trait."
        },
        {
          "kind": "text",
          "content": "That’s a lot to absorb! To really understand it, let’s dive a little further\ninto how the `Future` trait actually works, in particular around _pinning_."
        },
        {
          "kind": "text",
          "content": "Look again at the definition of the `Future` trait:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "use std::pin::Pin;\nuse std::task::{Context, Poll};\n\npub trait Future {\n    type Output;\n\n    // Required method\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `cx` parameter and its `Context` type are the key to how a runtime actually\nknows when to check any given future while still being lazy. Again, the details\nof how that works are beyond the scope of this chapter, and you generally only\nneed to think about this when writing a custom `Future` implementation. We’ll\nfocus instead on the type for `self`, as this is the first time we’ve seen a\nmethod where `self` has a type annotation. A type annotation for `self` works\nlike type annotations for other function parameters, but with two key\ndifferences:"
        },
        {
          "kind": "text",
          "content": "- It tells Rust what type `self` must be for the method to be called."
        },
        {
          "kind": "text",
          "content": "- It can’t be just any type. It’s restricted to the type on which the method is\nimplemented, a reference or smart pointer to that type, or a `Pin` wrapping a\nreference to that type."
        },
        {
          "kind": "text",
          "content": "We’ll see more on this syntax in [Chapter 18][ch-18]<!-- ignore -->. For now,\nit’s enough to know that if we want to poll a future to check whether it is\n`Pending` or `Ready(Output)`, we need a `Pin`-wrapped mutable reference to the\ntype."
        },
        {
          "kind": "text",
          "content": "`Pin` is a wrapper for pointer-like types such as `&`, `&mut`, `Box`, and `Rc`.\n(Technically, `Pin` works with types that implement the `Deref` or `DerefMut`\ntraits, but this is effectively equivalent to working only with pointers.) `Pin`\nis not a pointer itself and doesn’t have any behavior of its own like `Rc` and\n`Arc` do with reference counting; it’s purely a tool the compiler can use to\nenforce constraints on pointer usage."
        },
        {
          "kind": "text",
          "content": "Recalling that `await` is implemented in terms of calls to `poll` starts to\nexplain the error message we saw earlier, but that was in terms of `Unpin`, not\n`Pin`. So how exactly does `Pin` relate to `Unpin`, and why does `Future` need\n`self` to be in a `Pin` type to call `poll`?"
        },
        {
          "kind": "text",
          "content": "Remember from earlier in this chapter a series of await points in a future get\ncompiled into a state machine, and the compiler makes sure that state machine\nfollows all of Rust’s normal rules around safety, including borrowing and\nownership. To make that work, Rust looks at what data is needed between one\nawait point and either the next await point or the end of the async block. It\nthen creates a corresponding variant in the compiled state machine. Each variant\ngets the access it needs to the data that will be used in that section of the\nsource code, whether by taking ownership of that data or by getting a mutable or\nimmutable reference to it."
        },
        {
          "kind": "text",
          "content": "So far, so good: if we get anything wrong about the ownership or references in a\ngiven async block, the borrow checker will tell us. When we want to move around\nthe future that corresponds to that block—like moving it into a `Vec` to pass to\n`join_all`—things get trickier."
        },
        {
          "kind": "text",
          "content": "When we move a future—whether by pushing it into a data structure to use as an\niterator with `join_all` or by returning it from a function—that actually means\nmoving the state machine Rust creates for us. And unlike most other types in\nRust, the futures Rust creates for async blocks can end up with references to\nthemselves in the fields of any given variant, as shown in the simplified illustration in Figure 17-4."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img alt=\"A single-column, three-row table representing a future, fut1, which has data values 0 and 1 in the first two rows and an arrow pointing from the third row back to the second row, representing an internal reference within the future.\" src=\"img/trpl17-04.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-4: A self-referential data type.</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "By default, though, any object that has a reference to itself is unsafe to move,\nbecause references always point to the actual memory address of whatever they\nrefer to (see Figure 17-5). If you move the data structure itself, those\ninternal references will be left pointing to the old location. However, that\nmemory location is now invalid. For one thing, its value will not be updated\nwhen you make changes to the data structure. For another—more important—thing,\nthe computer is now free to reuse that memory for other purposes! You could end\nup reading completely unrelated data later."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Two tables, depicting two futures, fut1 and fut2, each of which has one column and three rows, representing the result of having moved a future out of fut1 into fut2. The first, fut1, is grayed out, with a question mark in each index, representing unknown memory. The second, fut2, has 0 and 1 in the first and second rows and an arrow pointing from its third row back to the second row of fut1, representing a pointer that is referencing the old location in memory of the future before it was moved.\" src=\"img/trpl17-05.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-5: The unsafe result of moving a self-referential data type</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "Theoretically, the Rust compiler could try to update every reference to an\nobject whenever it gets moved, but that could add a lot of performance overhead,\nespecially if a whole web of references needs updating. If we could instead make\nsure the data structure in question _doesn’t move in memory_, we wouldn’t have\nto update any references. This is exactly what Rust’s borrow checker requires:\nin safe code, it prevents you from moving any item with an active reference to\nit."
        },
        {
          "kind": "text",
          "content": "`Pin` builds on that to give us the exact guarantee we need. When we _pin_ a\nvalue by wrapping a pointer to that value in `Pin`, it can no longer move. Thus,\nif you have `Pin<Box<SomeType>>`, you actually pin the `SomeType` value, _not_\nthe `Box` pointer. Figure 17-6 illustrates this process."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Three boxes laid out side by side. The first is labeled “Pin”, the second “b1”, and the third “pinned”. Within “pinned” is a table labeled “fut”, with a single column; it represents a future with cells for each part of the data structure. Its first cell has the value “0”, its second cell has an arrow coming out of it and pointing to the fourth and final cell, which has the value “1” in it, and the third cell has dashed lines and an ellipsis to indicate there may be other parts to the data structure. All together, the “fut” table represents a future which is self-referential. An arrow leaves the box labeled “Pin”, goes through the box labeled “b1” and has terminates inside the “pinned” box at the “fut” table.\" src=\"img/trpl17-06.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-6: Pinning a `Box` that points to a self-referential future type.</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "In fact, the `Box` pointer can still move around freely. Remember: we care about\nmaking sure the data ultimately being referenced stays in place. If a pointer\nmoves around, _but the data it points to is in the same place_, as in Figure\n17-7, there’s no potential problem. As an independent exercise, look at the docs\nfor the types as well as the `std::pin` module and try to work out how you’d do\nthis with a `Pin` wrapping a `Box`.) The key is that the self-referential type\nitself cannot move, because it is still pinned."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Four boxes laid out in three rough columns, identical to the previous diagram with a change to the second column. Now there are two boxes in the second column, labeled “b1” and “b2”, “b1” is grayed out, and the arrow from “Pin” goes through “b2” instead of “b1”, indicating that the pointer has moved from “b1” to “b2”, but the data in “pinned” has not moved.\" src=\"img/trpl17-07.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-7: Moving a `Box` which points to a self-referential future type.</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "However, most types are perfectly safe to move around, even if they happen to be\nbehind a `Pin` wrapper. We only need to think about pinning when items have\ninternal references. Primitive values such as numbers and Booleans are safe\nbecause they obviously don’t have any internal references. Neither do most types\nyou normally work with in Rust. You can move around a `Vec`, for example,\nwithout worrying. Given only what we have seen so far, if you have a\n`Pin<Vec<String>>`, you’d have to do everything via the safe but restrictive\nAPIs provided by `Pin`, even though a `Vec<String>` is always safe to move if\nthere are no other references to it. We need a way to tell the compiler that\nit’s fine to move items around in cases like this—and that’s where `Unpin` comes\ninto play."
        },
        {
          "kind": "text",
          "content": "`Unpin` is a marker trait, similar to the `Send` and `Sync` traits we saw in\nChapter 16, and thus has no functionality of its own. Marker traits exist only\nto tell the compiler it’s safe to use the type implementing a given trait in a\nparticular context. `Unpin` informs the compiler that a given type does _not_\nneed to uphold any guarantees about whether the value in question can be safely\nmoved."
        },
        {
          "kind": "text",
          "content": "<!--\nThe inline `<code>` in the next block is to allow the inline `<em>` inside it,\nmatching what NoStarch does style-wise, and emphasizing within the text here\nthat it is something distinct from a normal type.\n-->"
        },
        {
          "kind": "text",
          "content": "Just as with `Send` and `Sync`, the compiler implements `Unpin` automatically\nfor all types where it can prove it is safe. A special case, again similar to\n`Send` and `Sync`, is where `Unpin` is _not_ implemented for a type. The\nnotation for this is <code>impl !Unpin for <em>SomeType</em></code>, where\n<code><em>SomeType</em></code> is the name of a type that _does_ need to uphold\nthose guarantees to be safe whenever a pointer to that type is used in a `Pin`."
        },
        {
          "kind": "text",
          "content": "In other words, there are two things to keep in mind about the relationship\nbetween `Pin` and `Unpin`. First, `Unpin` is the “normal” case, and `!Unpin` is\nthe special case. Second, whether a type implements `Unpin` or `!Unpin` _only_\nmatters when you’re using a pinned pointer to that type like <code>Pin<&mut\n<em>SomeType</em>></code>."
        },
        {
          "kind": "text",
          "content": "To make that concrete, think about a `String`: it has a length and the Unicode\ncharacters that make it up. We can wrap a `String` in `Pin`, as seen in Figure\n17-8. However, `String` automatically implements `Unpin`, as do most other types\nin Rust."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Concurrent work flow\" src=\"img/trpl17-08.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-8: Pinning a `String`; the dotted line indicates that the `String` implements the `Unpin` trait, and thus is not pinned.</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "As a result, we can do things that would be illegal if `String` implemented\n`!Unpin` instead, such as replacing one string with another at the exact same\nlocation in memory as in Figure 17-9. This doesn’t violate the `Pin` contract,\nbecause `String` has no internal references that make it unsafe to move around!\nThat is precisely why it implements `Unpin` rather than `!Unpin`."
        },
        {
          "kind": "text",
          "content": "<figure>"
        },
        {
          "kind": "text",
          "content": "<img alt=\"Concurrent work flow\" src=\"img/trpl17-09.svg\" class=\"center\" />"
        },
        {
          "kind": "text",
          "content": "<figcaption>Figure 17-9: Replacing the `String` with an entirely different `String` in memory.</figcaption>"
        },
        {
          "kind": "text",
          "content": "</figure>"
        },
        {
          "kind": "text",
          "content": "Now we know enough to understand the errors reported for that `join_all` call\nfrom back in Listing 17-17. We originally tried to move the futures produced by\nasync blocks into a `Vec<Box<dyn Future<Output = ()>>>`, but as we’ve seen,\nthose futures may have internal references, so they don’t implement `Unpin`.\nThey need to be pinned, and then we can pass the `Pin` type into the `Vec`,\nconfident that the underlying data in the futures will _not_ be moved."
        },
        {
          "kind": "text",
          "content": "`Pin` and `Unpin` are mostly important for building lower-level libraries, or\nwhen you’re building a runtime itself, rather than for day-to-day Rust code.\nWhen you see these traits in error messages, though, now you’ll have a better\nidea of how to fix your code!"
        },
        {
          "kind": "text",
          "content": "> Note: This combination of `Pin` and `Unpin` makes it possible to safely\n> implement a whole class of complex types in Rust that would otherwise prove\n> challenging because they’re self-referential. Types that require `Pin` show up\n> most commonly in async Rust today, but every once in a while, you might see\n> them in other contexts, too.\n>\n> The specifics of how `Pin` and `Unpin` work, and the rules they’re required\n> to uphold, are covered extensively in the API documentation for `std::pin`, so\n> if you’re interested in learning more, that’s a great place to start.\n>\n> If you want to understand how things work under the hood in even more detail,\n> see Chapters [2][under-the-hood] and [4][pinning] of [_Asynchronous\n> Programming in Rust_][async-book]."
        },
        {
          "kind": "text",
          "content": "### The `Stream` Trait"
        },
        {
          "kind": "text",
          "content": "Now that you have a deeper grasp on the `Future`, `Pin`, and `Unpin` traits, we\ncan turn our attention to the `Stream` trait. As you learned earlier in the\nchapter, streams are similar to asynchronous iterators. Unlike `Iterator` and\n`Future`, however, `Stream` has no definition in the standard library as of this\nwriting, but there _is_ a very common definition from the `futures` crate used\nthroughout the ecosystem."
        },
        {
          "kind": "text",
          "content": "Let’s review the definitions of the `Iterator` and `Future` traits before\nlooking at how a `Stream` trait might merge them together. From `Iterator`, we\nhave the idea of a sequence: its `next` method provides an `Option<Self::Item>`.\nFrom `Future`, we have the idea of readiness over time: its `poll` method\nprovides a `Poll<Self::Output>`. To represent a sequence of items that become\nready over time, we define a `Stream` trait that puts those features together:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "use std::pin::Pin;\nuse std::task::{Context, Poll};\n\ntrait Stream {\n    type Item;\n\n    fn poll_next(\n        self: Pin<&mut Self>,\n        cx: &mut Context<'_>\n    ) -> Poll<Option<Self::Item>>;\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `Stream` trait defines an associated type called `Item` for the type of the\nitems produced by the stream. This is similar to `Iterator`, where there may be\nzero to many items, and unlike `Future`, where there is always a single\n`Output`, even if it’s the unit type `()`."
        },
        {
          "kind": "text",
          "content": "`Stream` also defines a method to get those items. We call it `poll_next`, to\nmake it clear that it polls in the same way `Future::poll` does and produces a\nsequence of items in the same way `Iterator::next` does. Its return type\ncombines `Poll` with `Option`. The outer type is `Poll`, because it has to be\nchecked for readiness, just as a future does. The inner type is `Option`,\nbecause it needs to signal whether there are more messages, just as an iterator\ndoes."
        },
        {
          "kind": "text",
          "content": "Something very similar to this definition will likely end up as part of Rust’s\nstandard library. In the meantime, it’s part of the toolkit of most runtimes, so\nyou can rely on it, and everything we cover next should generally apply!"
        },
        {
          "kind": "text",
          "content": "In the example we saw in the section on streaming, though, we didn’t use\n`poll_next` _or_ `Stream`, but instead used `next` and `StreamExt`. We _could_\nwork directly in terms of the `poll_next` API by hand-writing our own `Stream`\nstate machines, of course, just as we _could_ work with futures directly via\ntheir `poll` method. Using `await` is much nicer, though, and the `StreamExt`\ntrait supplies the `next` method so we can do just that:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/no-listing-stream-ext/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "<!--\nTODO: update this if/when tokio/etc. update their MSRV and switch to using async functions\nin traits, since the lack thereof is the reason they do not yet have this.\n-->"
        },
        {
          "kind": "text",
          "content": "> Note: The actual definition we used earlier in the chapter looks slightly\n> different than this, because it supports versions of Rust that did not yet\n> support using async functions in traits. As a result, it looks like this:\n>\n> ```rust,ignore\n> fn next(&mut self) -> Next<'_, Self> where Self: Unpin;\n> ```\n>\n> That `Next` type is a `struct` that implements `Future` and allows us to name\n> the lifetime of the reference to `self` with `Next<'_, Self>`, so that `await`\n> can work with this method."
        },
        {
          "kind": "text",
          "content": "The `StreamExt` trait is also the home of all the interesting methods available\nto use with streams. `StreamExt` is automatically implemented for every type\nthat implements `Stream`, but these traits are defined separately to enable the\ncommunity to iterate on convenience APIs without affecting the foundational\ntrait."
        },
        {
          "kind": "text",
          "content": "In the version of `StreamExt` used in the `trpl` crate, the trait not only\ndefines the `next` method but also supplies a default implementation of `next`\nthat correctly handles the details of calling `Stream::poll_next`. This means\nthat even when you need to write your own streaming data type, you _only_ have\nto implement `Stream`, and then anyone who uses your data type can use\n`StreamExt` and its methods with it automatically."
        },
        {
          "kind": "text",
          "content": "That’s all we’re going to cover for the lower-level details on these traits. To\nwrap up, let’s consider how futures (including streams), tasks, and threads all\nfit together!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Given a future `f`, which of the following best describes how `f.await` works?",
                  "distractors": [
                    "It calls `f.poll()` once, which blocks in-place until `f` is ready",
                    "It calls `f.poll()` in a loop, exiting if `f` is ready, or immediately polling again if `f` is not ready",
                    "It calls `f.push(...)` once, which executes a callback containing the remaining code after `f.await` once `f` is ready"
                  ]
                },
                "answer": {
                  "answer": "It calls `f.poll()` in a loop, exiting if `f` is ready, or returning control to the async runtime if `f` is not ready"
                },
                "context": "Rust uses a poll-based model for future execution. An await point desugars into a loop which repeatedly calls `.poll()`, \nand cedes control to the async runtime after each unsuccessful poll to allow other async code to run. The runtime can later\n\"wake up\" the `f.await` code to poll `f` again.\n",
                "id": "c4d90f3c-7286-4272-921c-241b266e9f91"
              },
              {
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Imagine Rust did not require that futures were pinned in order to be polled. \nWhich of the following async functions could potentially cause undefined behavior if not pinned?\n",
                  "distractors": [
                    "```rust\nasync fn example(x: &i32) -> i32 {\n    sleep(Duration::from_secs(1)).await;\n    *y\n}\n```\n",
                    "```rust\nasync fn example(x: Vec<i32>) -> i32 {\n    sleep(Duration::from_secs(1)).await;\n    x[0]\n}\n```\n",
                    "```rust\nasync fn example() -> i32 {\n    let x = 0;\n    sleep(Duration::from_secs(1)).await;\n    x\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```rust\nasync fn example(x: i32) -> i32 {\n    let y = &x;\n    sleep(Duration::from_secs(1)).await;\n    *y\n}\n```\n"
                },
                "context": "The core problem addressed by pinning in self-reference, or a future which contains a pointer to itself. \nThis happens when an async block contains a local variable that refers to another local variable in the future.\nHere, that would be `y = &x`.\n",
                "id": "bc8b4acb-d111-4fec-b89a-e5d1bc77c8f2"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[ch-18]: ch18-00-oop.html\n[async-book]: https://rust-lang.github.io/async-book/\n[under-the-hood]: https://rust-lang.github.io/async-book/02_execution/01_chapter.html\n[pinning]: https://rust-lang.github.io/async-book/04_pinning/01_chapter.html\n[first-async]: ch17-01-futures-and-syntax.html#our-first-async-program\n[any-number-futures]: ch17-03-more-futures.html#working-with-any-number-of-futures"
        }
      ]
    },
    {
      "title": "Putting It All Together: Futures, Tasks, and Threads",
      "file": "ch17-06-futures-tasks-threads.md",
      "elements": [
        {
          "kind": "text",
          "content": "As we saw in [Chapter 16][ch16]<!-- ignore -->, threads provide one approach to\nconcurrency. We’ve seen another approach in this chapter: using async with\nfutures and streams. If you‘re wondering when to choose method over the other,\nthe answer is: it depends! And in many cases, the choice isn’t threads _or_\nasync but rather threads _and_ async."
        },
        {
          "kind": "text",
          "content": "Many operating systems have supplied threading-based concurrency models for\ndecades now, and many programming languages support them as a result. However,\nthese models are not without their tradeoffs. On many operating systems, they\nuse a fair bit of memory for each thread, and they come with some overhead for\nstarting up and shutting down. Threads are also only an option when your\noperating system and hardware support them. Unlike mainstream desktop and mobile\ncomputers, some embedded systems don’t have an OS at all, so they also don’t\nhave threads."
        },
        {
          "kind": "text",
          "content": "The async model provides a different—and ultimately complementary—set of\ntradeoffs. In the async model, concurrent operations don’t require their own\nthreads. Instead, they can run on tasks, as when we used `trpl::spawn_task` to\nkick off work from a synchronous function in the streams section. A task is\nsimilar to a thread, but instead of being managed by the operating system, it’s\nmanaged by library-level code: the runtime."
        },
        {
          "kind": "text",
          "content": "In the previous section, we saw that we could build a stream by using an async\nchannel and spawning an async task we could call from synchronous code. We can\ndo the exact same thing with a thread. In Listing 17-40, we used\n`trpl::spawn_task` and `trpl::sleep`. In Listing 17-41, we replace those with\nthe `thread::spawn` and `thread::sleep` APIs from the standard library in the\n`get_intervals` function."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-41\" caption=\"Using the `std::thread` APIs instead of the async `trpl` APIs for the `get_intervals` function\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-41/src/main.rs:threads}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If you run this code, the output is identical to that of Listing 17-40. And\nnotice how little changes here from the perspective of the calling code. What’s\nmore, even though one of our functions spawned an async task on the runtime and\nthe other spawned an OS thread, the resulting streams were unaffected by the\ndifferences."
        },
        {
          "kind": "text",
          "content": "Despite their similarities, these two approaches behave very differently,\nalthough we might have a hard time measuring it in this very simple example. We\ncould spawn millions of async tasks on any modern personal computer. If we tried\nto do that with threads, we would literally run out of memory!"
        },
        {
          "kind": "text",
          "content": "However, there’s a reason these APIs are so similar. Threads act as a boundary\nfor sets of synchronous operations; concurrency is possible _between_ threads.\nTasks act as a boundary for sets of _asynchronous_ operations; concurrency is\npossible both _between_ and _within_ tasks, because a task can switch between\nfutures in its body. Finally, futures are Rust’s most granular unit of\nconcurrency, and each future may represent a tree of other futures. The\nruntime—specifically, its executor—manages tasks, and tasks manage futures. In\nthat regard, tasks are similar to lightweight, runtime-managed threads with\nadded capabilities that come from being managed by a runtime instead of by the\noperating system."
        },
        {
          "kind": "text",
          "content": "This doesn’t mean that async tasks are always better than threads (or vice\nversa). Concurrency with threads is in some ways a simpler programming model\nthan concurrency with `async`. That can be a strength or a weakness. Threads are\nsomewhat “fire and forget”; they have no native equivalent to a future, so they\nsimply run to completion without being interrupted except by the operating\nsystem itself. That is, they have no built-in support for _intratask\nconcurrency_ the way futures do. Threads in Rust also have no mechanisms for\ncancellation—a subject we haven’t covered explicitly in this chapter but was\nimplied by the fact that whenever we ended a future, its state got cleaned up\ncorrectly."
        },
        {
          "kind": "text",
          "content": "These limitations also make threads harder to compose than futures. It’s much\nmore difficult, for example, to use threads to build helpers such as the\n`timeout` and `throttle` methods we built earlier in this chapter. The fact that\nfutures are richer data structures means they can be composed together more\nnaturally, as we have seen."
        },
        {
          "kind": "text",
          "content": "Tasks, then, give us _additional_ control over futures, allowing us to choose\nwhere and how to group them. And it turns out that threads and tasks often work\nvery well together, because tasks can (at least in some runtimes) be moved\naround between threads. In fact, under the hood, the runtime we’ve been\nusing—including the `spawn_blocking` and `spawn_task` functions—is multithreaded\nby default! Many runtimes use an approach called _work stealing_ to\ntransparently move tasks around between threads, based on how the threads are\ncurrently being utilized, to improve the system’s overall performance. That\napproach actually requires threads _and_ tasks, and therefore futures."
        },
        {
          "kind": "text",
          "content": "When thinking about which method to use when, consider these rules of thumb:"
        },
        {
          "kind": "text",
          "content": "- If the work is _very parallelizable_, such as processing a bunch of data where\neach part can be processed separately, threads are a better choice.\n- If the work is _very concurrent_, such as handling messages from a bunch of\ndifferent sources that may come in at different intervals or different rates,\nasync is a better choice."
        },
        {
          "kind": "text",
          "content": "And if you need both parallelism and concurrency, you don’t have to choose\nbetween threads and async. You can use them together freely, letting each one\nplay the part it’s best at. For example, Listing 17-42 shows a fairly common\nexample of this kind of mix in real-world Rust code."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"17-42\" caption=\"Sending messages with blocking code in a thread and awaiting the messages in an async block\" file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch17-async-await/listing-17-42/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We begin by creating an async channel, then spawn a thread that takes\nownership of the sender side of the channel. Within the thread, we send the\nnumbers 1 through 10, sleeping for a second between each. Finally, we run a\nfuture created with an async block passed to `trpl::run` just as we have\nthroughout the chapter. In that future, we await those messages, just as in\nthe other message-passing examples we have seen."
        },
        {
          "kind": "text",
          "content": "To return to the scenario we opened the chapter with, imagine running a set of\nvideo encoding tasks using a dedicated thread (because video encoding is\ncompute-bound) but notifying the UI that those operations are done with an async\nchannel. There are countless examples of these kinds of combinations in\nreal-world use cases."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "This isn’t the last you’ll see of concurrency in this book. The project in\n[Chapter 21][ch21] will apply these concepts in a more realistic situation\nthan the simpler examples discussed here and compare problem-solving with threading versus tasks more directly."
        },
        {
          "kind": "text",
          "content": "No matter which of these approaches you choose, Rust gives you the tools you need to write safe, fast, concurrent\ncode—whether for a high-throughput web server or an embedded operating system."
        },
        {
          "kind": "text",
          "content": "Next, we’ll talk about idiomatic ways to model problems and structure solutions\nas your Rust programs get bigger. In addition, we’ll discuss how Rust’s idioms\nrelate to those you might be familiar with from object-oriented programming."
        },
        {
          "kind": "text",
          "content": "[ch16]: http://localhost:3000/ch16-00-concurrency.html\n[combining-futures]: ch17-03-more-futures.html#building-our-own-async-abstractions\n[streams]: ch17-04-streams.html#composing-streams\n[ch21]: ch21-00-final-project-a-web-server.html"
        }
      ]
    },
    {
      "title": "Object-Oriented Programming Features",
      "file": "ch18-00-oop.md",
      "elements": [
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"object-oriented-programming-features-of-rust\"></a>"
        },
        {
          "kind": "text",
          "content": "Object-oriented programming (OOP) is a way of modeling programs. Objects as a\nprogrammatic concept were introduced in the programming language Simula in the\n1960s. Those objects influenced Alan Kay’s programming architecture in which\nobjects pass messages to each other. To describe this architecture, he coined\nthe term _object-oriented programming_ in 1967. Many competing definitions\ndescribe what OOP is, and by some of these definitions Rust is object oriented\nbut by others it is not. In this chapter, we’ll explore certain characteristics\nthat are commonly considered object oriented and how those characteristics\ntranslate to idiomatic Rust. We’ll then show you how to implement an\nobject-oriented design pattern in Rust and discuss the trade-offs of doing so\nversus implementing a solution using some of Rust’s strengths instead."
        }
      ]
    },
    {
      "title": "Characteristics of Object-Oriented Languages",
      "file": "ch18-01-what-is-oo.md",
      "elements": [
        {
          "kind": "text",
          "content": "There is no consensus in the programming community about what features a\nlanguage must have to be considered object oriented. Rust is influenced by many\nprogramming paradigms, including OOP; for example, we explored the features\nthat came from functional programming in Chapter 13. Arguably, OOP languages\nshare certain common characteristics, namely objects, encapsulation, and\ninheritance. Let’s look at what each of those characteristics means and whether\nRust supports it."
        },
        {
          "kind": "text",
          "content": "### Objects Contain Data and Behavior"
        },
        {
          "kind": "text",
          "content": "The book _Design Patterns: Elements of Reusable Object-Oriented Software_ by\nErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley,\n1994), colloquially referred to as _The Gang of Four_ book, is a catalog of\nobject-oriented design patterns. It defines OOP in this way:"
        },
        {
          "kind": "text",
          "content": "> Object-oriented programs are made up of objects. An **object** packages both\n> data and the procedures that operate on that data. The procedures are\n> typically called **methods** or **operations**."
        },
        {
          "kind": "text",
          "content": "Using this definition, Rust is object oriented: structs and enums have data,\nand `impl` blocks provide methods on structs and enums. Even though structs and\nenums with methods aren’t _called_ objects, they provide the same\nfunctionality, according to the Gang of Four’s definition of objects."
        },
        {
          "kind": "text",
          "content": "### Encapsulation That Hides Implementation Details"
        },
        {
          "kind": "text",
          "content": "Another aspect commonly associated with OOP is the idea of _encapsulation_,\nwhich means that the implementation details of an object aren’t accessible to\ncode using that object. Therefore, the only way to interact with an object is\nthrough its public API; code using the object shouldn’t be able to reach into\nthe object’s internals and change data or behavior directly. This enables the\nprogrammer to change and refactor an object’s internals without needing to\nchange the code that uses the object."
        },
        {
          "kind": "text",
          "content": "We discussed how to control encapsulation in Chapter 7: we can use the `pub`\nkeyword to decide which modules, types, functions, and methods in our code\nshould be public, and by default everything else is private. For example, we\ncan define a struct `AveragedCollection` that has a field containing a vector\nof `i32` values. The struct can also have a field that contains the average of\nthe values in the vector, meaning the average doesn’t have to be computed\non demand whenever anyone needs it. In other words, `AveragedCollection` will\ncache the calculated average for us. Listing 18-1 has the definition of the\n`AveragedCollection` struct:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-1\" file-name=\"src/lib.rs\" caption=\"An `AveragedCollection` struct that maintains a list of integers and the average of the items in the collection\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-01/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The struct is marked `pub` so that other code can use it, but the fields within\nthe struct remain private. This is important in this case because we want to\nensure that whenever a value is added or removed from the list, the average is\nalso updated. We do this by implementing `add`, `remove`, and `average` methods\non the struct, as shown in Listing 18-2:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-2\" file-name=\"src/lib.rs\" caption=\"Implementations of the public methods `add`, `remove`, and `average` on `AveragedCollection`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-02/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The public methods `add`, `remove`, and `average` are the only ways to access\nor modify data in an instance of `AveragedCollection`. When an item is added\nto `list` using the `add` method or removed using the `remove` method, the\nimplementations of each call the private `update_average` method that handles\nupdating the `average` field as well."
        },
        {
          "kind": "text",
          "content": "We leave the `list` and `average` fields private so there is no way for\nexternal code to add or remove items to or from the `list` field directly;\notherwise, the `average` field might become out of sync when the `list`\nchanges. The `average` method returns the value in the `average` field,\nallowing external code to read the `average` but not modify it."
        },
        {
          "kind": "text",
          "content": "Because we’ve encapsulated the implementation details of the struct\n`AveragedCollection`, we can easily change aspects, such as the data structure,\nin the future. For instance, we could use a `HashSet<i32>` instead of a\n`Vec<i32>` for the `list` field. As long as the signatures of the `add`,\n`remove`, and `average` public methods stayed the same, code using\n`AveragedCollection` wouldn’t need to change. If we made `list` public instead,\nthis wouldn’t necessarily be the case: `HashSet<i32>` and `Vec<i32>` have\ndifferent methods for adding and removing items, so the external code would\nlikely have to change if it were modifying `list` directly."
        },
        {
          "kind": "text",
          "content": "If encapsulation is a required aspect for a language to be considered\nobject oriented, then Rust meets that requirement. The option to use `pub` or\nnot for different parts of code enables encapsulation of implementation details."
        },
        {
          "kind": "text",
          "content": "### Inheritance as a Type System and as Code Sharing"
        },
        {
          "kind": "text",
          "content": "_Inheritance_ is a mechanism whereby an object can inherit elements from\nanother object’s definition, thus gaining the parent object’s data and behavior\nwithout you having to define them again."
        },
        {
          "kind": "text",
          "content": "If a language must have inheritance to be object oriented, then Rust is not such\na language. There is no way to define a struct that inherits the parent struct’s\nfields and method implementations without using a macro."
        },
        {
          "kind": "text",
          "content": "However, if you’re used to having inheritance in your programming toolbox, you\ncan use other solutions in Rust, depending on your reason for reaching for\ninheritance in the first place."
        },
        {
          "kind": "text",
          "content": "You would choose inheritance for two main reasons. One is for reuse of code:\nyou can implement particular behavior for one type, and inheritance enables you\nto reuse that implementation for a different type. You can do this in a limited\nway in Rust code using default trait method implementations, which you saw in\nListing 10-14 when we added a default implementation of the `summarize` method\non the `Summary` trait. Any type implementing the `Summary` trait would have\nthe `summarize` method available on it without any further code. This is\nsimilar to a parent class having an implementation of a method and an\ninheriting child class also having the implementation of the method. We can\nalso override the default implementation of the `summarize` method when we\nimplement the `Summary` trait, which is similar to a child class overriding the\nimplementation of a method inherited from a parent class."
        },
        {
          "kind": "text",
          "content": "The other reason to use inheritance relates to the type system: to enable a\nchild type to be used in the same places as the parent type. This is also\ncalled _polymorphism_, which means that you can substitute multiple objects for\neach other at runtime if they share certain characteristics."
        },
        {
          "kind": "text",
          "content": "> ### Polymorphism\n>\n> To many people, polymorphism is synonymous with inheritance. But it’s\n> actually a more general concept that refers to code that can work with data\n> of multiple types. For inheritance, those types are generally subclasses.\n>\n> Rust instead uses generics to abstract over different possible types and\n> trait bounds to impose constraints on what those types must provide. This is\n> sometimes called _bounded parametric polymorphism_."
        },
        {
          "kind": "text",
          "content": "Inheritance has recently fallen out of favor as a programming design solution in\nmany programming languages because it’s often at risk of sharing more code than\nnecessary. Subclasses shouldn’t always share all characteristics of their parent\nclass but will do so with inheritance. This can make a program’s design less\nflexible. It also introduces the possibility of calling methods on subclasses\nthat don’t make sense or that cause errors because the methods don’t apply to\nthe subclass. In addition, some languages will only allow single inheritance\n(meaning a subclass can only inherit from one class), further restricting the\nflexibility of a program’s design."
        },
        {
          "kind": "text",
          "content": "For these reasons, Rust takes the different approach of using trait objects\ninstead of inheritance. Let’s look at how trait objects enable polymorphism in\nRust."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "a4680619-9533-4cbb-a785-7b73570168af",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following aspects of object-oriented programming does Rust implement?\n",
                  "distractors": [
                    "Inheritance of superclass methods"
                  ]
                },
                "answer": {
                  "answer": [
                    "Objects with methods",
                    "Encapsulation of private data"
                  ]
                },
                "context": "Rust contains objects (i.e. structs) and encapsulation (via the `pub` keyword), but not inheritance.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Using Trait Objects That Allow for Values of Different Types",
      "file": "ch18-02-trait-objects.md",
      "elements": [
        {
          "kind": "text",
          "content": "In Chapter 8, we mentioned that one limitation of vectors is that they can\nstore elements of only one type. We created a workaround in Listing 8-9 where\nwe defined a `SpreadsheetCell` enum that had variants to hold integers, floats,\nand text. This meant we could store different types of data in each cell and\nstill have a vector that represented a row of cells. This is a perfectly good\nsolution when our interchangeable items are a fixed set of types that we know\nwhen our code is compiled."
        },
        {
          "kind": "text",
          "content": "However, sometimes we want our library user to be able to extend the set of\ntypes that are valid in a particular situation. To show how we might achieve\nthis, we’ll create an example graphical user interface (GUI) tool that iterates\nthrough a list of items, calling a `draw` method on each one to draw it to the\nscreen—a common technique for GUI tools. We’ll create a library crate called\n`gui` that contains the structure of a GUI library. This crate might include\nsome types for people to use, such as `Button` or `TextField`. In addition,\n`gui` users will want to create their own types that can be drawn: for\ninstance, one programmer might add an `Image` and another might add a\n`SelectBox`."
        },
        {
          "kind": "text",
          "content": "We won’t implement a full-fledged GUI library for this example but will show\nhow the pieces would fit together. At the time of writing the library, we can’t\nknow and define all the types other programmers might want to create. But we do\nknow that `gui` needs to keep track of many values of different types, and it\nneeds to call a `draw` method on each of these differently typed values. It\ndoesn’t need to know exactly what will happen when we call the `draw` method,\njust that the value will have that method available for us to call."
        },
        {
          "kind": "text",
          "content": "To do this in a language with inheritance, we might define a class named\n`Component` that has a method named `draw` on it. The other classes, such as\n`Button`, `Image`, and `SelectBox`, would inherit from `Component` and thus\ninherit the `draw` method. They could each override the `draw` method to define\ntheir custom behavior, but the framework could treat all of the types as if\nthey were `Component` instances and call `draw` on them. But because Rust\ndoesn’t have inheritance, we need another way to structure the `gui` library to\nallow users to extend it with new types."
        },
        {
          "kind": "text",
          "content": "### Defining a Trait for Common Behavior"
        },
        {
          "kind": "text",
          "content": "To implement the behavior we want `gui` to have, we’ll define a trait named\n`Draw` that will have one method named `draw`. Then we can define a vector that\ntakes a trait object. A _trait object_ points to both an instance of a type\nimplementing our specified trait and a table used to look up trait methods on\nthat type at runtime. We create a trait object by specifying some sort of\npointer, such as an `&` reference or a `Box<T>` smart pointer, then the `dyn`\nkeyword, and then specifying the relevant trait. (We’ll talk about the reason\ntrait objects must use a pointer in [“Dynamically Sized Types and the `Sized`\nTrait”][dynamically-sized]<!-- ignore --> in Chapter 20.) We can use trait\nobjects in place of a generic or concrete type. Wherever we use a trait object,\nRust’s type system will ensure at compile time that any value used in that\ncontext will implement the trait object’s trait. Consequently, we don’t need to\nknow all the possible types at compile time."
        },
        {
          "kind": "text",
          "content": "We’ve mentioned that, in Rust, we refrain from calling structs and enums\n“objects” to distinguish them from other languages’ objects. In a struct or\nenum, the data in the struct fields and the behavior in `impl` blocks are\nseparated, whereas in other languages, the data and behavior combined into one\nconcept is often labeled an object. However, trait objects _are_ more like\nobjects in other languages in the sense that they combine data and behavior.\nBut trait objects differ from traditional objects in that we can’t add data to\na trait object. Trait objects aren’t as generally useful as objects in other\nlanguages: their specific purpose is to allow abstraction across common\nbehavior."
        },
        {
          "kind": "text",
          "content": "Listing 18-3 shows how to define a trait named `Draw` with one method named\n`draw`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-3\" file-name=\"src/lib.rs\" caption=\"Definition of the `Draw` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-03/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This syntax should look familiar from our discussions on how to define traits\nin Chapter 10. Next comes some new syntax: Listing 18-4 defines a struct named\n`Screen` that holds a vector named `components`. This vector is of type\n`Box<dyn Draw>`, which is a trait object; it’s a stand-in for any type inside\na `Box` that implements the `Draw` trait."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-4\" file-name=\"src/lib.rs\" caption=\"Definition of the `Screen` struct with a `components` field holding a vector of trait objects that implement the `Draw` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-04/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "On the `Screen` struct, we’ll define a method named `run` that will call the\n`draw` method on each of its `components`, as shown in Listing 18-5."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-5\" file-name=\"src/lib.rs\" caption=\"A `run` method on `Screen` that calls the `draw` method on each component\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-05/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This works differently from defining a struct that uses a generic type\nparameter with trait bounds. A generic type parameter can be substituted with\nonly one concrete type at a time, whereas trait objects allow for multiple\nconcrete types to fill in for the trait object at runtime. For example, we\ncould have defined the `Screen` struct using a generic type and a trait bound\nas in Listing 18-6:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-6\" file-name=\"src/lib.rs\" caption=\"An alternate implementation of the `Screen` struct and its `run` method using generics and trait bounds\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-06/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This restricts us to a `Screen` instance that has a list of components all of\ntype `Button` or all of type `TextField`. If you’ll only ever have homogeneous\ncollections, using generics and trait bounds is preferable because the\ndefinitions will be monomorphized at compile time to use the concrete types."
        },
        {
          "kind": "text",
          "content": "On the other hand, with the method using trait objects, one `Screen` instance\ncan hold a `Vec<T>` that contains a `Box<Button>` as well as a\n`Box<TextField>`. Let’s look at how this works, and then we’ll talk about the\nruntime performance implications."
        },
        {
          "kind": "text",
          "content": "### Implementing the Trait"
        },
        {
          "kind": "text",
          "content": "Now we’ll add some types that implement the `Draw` trait. We’ll provide the\n`Button` type. Again, actually implementing a GUI library is beyond the scope\nof this book, so the `draw` method won’t have any useful implementation in its\nbody. To imagine what the implementation might look like, a `Button` struct\nmight have fields for `width`, `height`, and `label`, as shown in Listing 18-7:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-7\" file-name=\"src/lib.rs\" caption=\"A `Button` struct that implements the `Draw` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-07/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `width`, `height`, and `label` fields on `Button` will differ from the\nfields on other components; for example, a `TextField` type might have those\nsame fields plus a `placeholder` field. Each of the types we want to draw on\nthe screen will implement the `Draw` trait but will use different code in the\n`draw` method to define how to draw that particular type, as `Button` has here\n(without the actual GUI code, as mentioned). The `Button` type, for instance,\nmight have an additional `impl` block containing methods related to what\nhappens when a user clicks the button. These kinds of methods won’t apply to\ntypes like `TextField`."
        },
        {
          "kind": "text",
          "content": "If someone using our library decides to implement a `SelectBox` struct that has\n`width`, `height`, and `options` fields, they would implement the `Draw` trait\non the `SelectBox` type as well, as shown in Listing 18-8."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-8\" file-name=\"src/main.rs\" caption=\"Another crate using `gui` and implementing the `Draw` trait on a `SelectBox` struct\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "### Using the Trait"
        },
        {
          "kind": "text",
          "content": "Our library’s user can now write their `main` function to create a `Screen`\ninstance. To the `Screen` instance, they can add a `SelectBox` and a `Button`\nby putting each in a `Box<T>` to become a trait object. They can then call the\n`run` method on the `Screen` instance, which will call `draw` on each of the\ncomponents. Listing 18-9 shows this implementation:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-9\" file-name=\"src/main.rs\" caption=\"Using trait objects to store values of different types that implement the same trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we wrote the library, we didn’t know that someone might add the\n`SelectBox` type, but our `Screen` implementation was able to operate on the\nnew type and draw it because `SelectBox` implements the `Draw` trait, which\nmeans it implements the `draw` method."
        },
        {
          "kind": "text",
          "content": "This concept—of being concerned only with the messages a value responds to\nrather than the value’s concrete type—is similar to the concept of _duck\ntyping_ in dynamically typed languages: if it walks like a duck and quacks\nlike a duck, then it must be a duck! In the implementation of `run` on `Screen`\nin Listing 18-5, `run` doesn’t need to know what the concrete type of each\ncomponent is. It doesn’t check whether a component is an instance of a `Button`\nor a `SelectBox`, it just calls the `draw` method on the component. By\nspecifying `Box<dyn Draw>` as the type of the values in the `components`\nvector, we’ve defined `Screen` to need values that we can call the `draw`\nmethod on."
        },
        {
          "kind": "text",
          "content": "The advantage of using trait objects and Rust’s type system to write code\nsimilar to code using duck typing is that we never have to check whether a\nvalue implements a particular method at runtime or worry about getting errors\nif a value doesn’t implement a method but we call it anyway. Rust won’t compile\nour code if the values don’t implement the traits that the trait objects need."
        },
        {
          "kind": "text",
          "content": "For example, Listing 18-10 shows what happens if we try to create a `Screen`\nwith a `String` as a component."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-10\" file-name=\"src/main.rs\" caption=\"Attempting to use a type that doesn’t implement the trait object’s trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-10/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ll get this error because `String` doesn’t implement the `Draw` trait:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch18-oop/listing-18-10/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This error lets us know that either we’re passing something to `Screen` that we\ndidn’t mean to pass and so should pass a different type, or we should implement\n`Draw` on `String` so that `Screen` is able to call `draw` on it."
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: cce62358-5291-4eb3-84d6-fbc570873ee3 -->"
        },
        {
          "kind": "text",
          "content": "### Trait Objects and Type Inference"
        },
        {
          "kind": "text",
          "content": "One downside to using trait objects is how they interact with type inference.\nFor example, consider type inference for `Vec<T>`. When `T` is not a trait object,\nRust just needs to know the type of a single element in the vector to infer `T`. So\nan empty vector causes a type inference error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "# fn main() {\nlet v = vec![];\n// error[E0282]: type annotations needed for `Vec<T>`\n# }"
          }
        },
        {
          "kind": "text",
          "content": "But adding an element enables Rust to infer the type of the vector:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "# fn main() {\nlet v = vec![\"Hello world\"];\n// ok, v : Vec<&str>\n# }"
          }
        },
        {
          "kind": "text",
          "content": "Type inference is trickier for trait objects. For example, say we tried to factor\nthe `components` array in Listing 17-9 into a separate variable, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "fn main() {\n    let components = vec![\n        Box::new(SelectBox { /* .. */ }),\n        Box::new(Button { /* .. */ }),\n    ];\n    let screen = Screen { components };\n    screen.run();\n}"
          }
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Listing 17-11: Factoring the components array causes a type error</span>"
        },
        {
          "kind": "text",
          "content": "This refactor causes the program to no longer compile! The compiler rejects this program with\nthe following error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error[E0308]: mismatched types\n   --> test.rs:55:14\n    |\n55  |       Box::new(Button {\n    |  _____--------_^\n    | |     |\n    | |     arguments to this function are incorrect\n56  | |       width: 50,\n57  | |       height: 10,\n58  | |       label: String::from(\"OK\"),\n59  | |     }),\n    | |_____^ expected `SelectBox`, found `Button`"
          }
        },
        {
          "kind": "text",
          "content": "In Listing 17-09, the compiler understands that the `components` vector must have the type\n`Vec<Box<dyn Draw>>` because that's specified in the `Screen` struct definition. But in Listing 17-11,\nthe compiler loses that information at the point where `components` is defined. To fix the issue, you\nhave to give a hint to the type inference algorithm. That can either be via an explicit cast on\nany element of the vector, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "  let components = vec![\n        Box::new(SelectBox { /* .. */ }) as Box<dyn Draw>,\n        Box::new(Button { /* .. */ }),\n  ];"
          }
        },
        {
          "kind": "text",
          "content": "Or it can be via a type annotation on the let-binding, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "  let components: Vec<Box<dyn Draw>> = vec![\n        Box::new(SelectBox { /* .. */ }),\n        Box::new(Button { /* .. */ }),\n  ];"
          }
        },
        {
          "kind": "text",
          "content": "In general, it is good to be aware that using trait objects can cause a worse developer experience for\nAPI clients in the case of type inference."
        },
        {
          "kind": "text",
          "content": "<!-- END INTERVENTION: cce62358-5291-4eb3-84d6-fbc570873ee3 -->"
        },
        {
          "kind": "text",
          "content": "### Trait Objects Perform Dynamic Dispatch"
        },
        {
          "kind": "text",
          "content": "Recall in [“Performance of Code Using\nGenerics”][performance-of-code-using-generics]<!-- ignore --> in Chapter 10 our\ndiscussion on the monomorphization process performed on generics by the\ncompiler: the compiler generates nongeneric implementations of functions and\nmethods for each concrete type that we use in place of a generic type parameter.\nThe code that results from monomorphization is doing _static dispatch_, which is\nwhen the compiler knows what method you’re calling at compile time. This is\nopposed to _dynamic dispatch_, which is when the compiler can’t tell at compile\ntime which method you’re calling. In dynamic dispatch cases, the compiler emits\ncode that at runtime will figure out which method to call."
        },
        {
          "kind": "text",
          "content": "When we use trait objects, Rust must use dynamic dispatch. The compiler doesn’t\nknow all the types that might be used with the code that’s using trait objects,\nso it doesn’t know which method implemented on which type to call. Instead, at\nruntime, Rust uses the pointers inside the trait object to know which method to\ncall. This lookup incurs a runtime cost that doesn’t occur with static dispatch.\nDynamic dispatch also prevents the compiler from choosing to inline a method’s\ncode, which in turn prevents some optimizations, and Rust has some rules, called\n_dyn compatibility_, about where you can and cannot use dynamic dispatch. Those\nrules are beyond the scope of this discussion, but  you can read more about them\n[in the reference][dyn-compatibility]. However, we did get extra flexibility in\nthe code that we wrote in Listing 18-5 and were able to support in Listing 18-9,\nso it’s a trade-off to consider."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5d60cfc4-6377-48e7-96e4-fe1de0b0904e",
                "type": "Tracing",
                "prompt": {
                  "program": "use std::fmt::Debug;\nfn main() {\n    let n = 1;\n    let s = String::from(\"Hello\");\n    let v: Vec<&dyn Debug> = vec![&n, &s];\n    let n_ref = v[0] as &i32;\n    println!(\"{}\", n_ref + 1);\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 6
                },
                "context": "Unlike some OOP languages, a trait object cannot be \"downcasted\" to a more concrete type\n(except in the case of the [`Any`](https://doc.rust-lang.org/std/any/index.html) trait).\n"
              },
              {
                "id": "cce62358-5291-4eb3-84d6-fbc570873ee3",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider implementing a generic function in two ways:\n\n```\nfn f_opt1<T: SomeTrait>(t: &T) { /* ... */ }\nfn f_opt2(t: &dyn SomeTrait) { /* ... */ }\n```\n\nIn most cases, which of the following are good reasons to prefer the trait object version (`f_opt2`) over the type-parametric version (`f_opt1`)? \nSelect each that applies.\n",
                  "distractors": [
                    "Improved runtime performance",
                    "Better developer ergonomics"
                  ]
                },
                "answer": {
                  "answer": [
                    "Faster compile times",
                    "Smaller binary size"
                  ]
                },
                "context": "By avoiding monomorphization, trait-object functions will be both faster to compile and produce smaller binaries. However, this usually\ncomes at the cost of runtime performance. Trait objects are rarely easier for developers to work with than trait-bounded generics.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[performance-of-code-using-generics]: ch10-01-syntax.html#performance-of-code-using-generics\n[dynamically-sized]: ch20-03-advanced-types.html#dynamically-sized-types-and-the-sized-trait\n[dyn-compatibility]: https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility"
        }
      ]
    },
    {
      "title": "Implementing an Object-Oriented Design Pattern",
      "file": "ch18-03-oo-design-patterns.md",
      "elements": [
        {
          "kind": "text",
          "content": "The _state pattern_ is an object-oriented design pattern. The crux of the\npattern is that we define a set of states a value can have internally. The\nstates are represented by a set of _state objects_, and the value’s behavior\nchanges based on its state. We’re going to work through an example of a blog\npost struct that has a field to hold its state, which will be a state object\nfrom the set “draft”, “review”, or “published”."
        },
        {
          "kind": "text",
          "content": "The state objects share functionality: in Rust, of course, we use structs and\ntraits rather than objects and inheritance. Each state object is responsible\nfor its own behavior and for governing when it should change into another\nstate. The value that holds a state object knows nothing about the different\nbehavior of the states or when to transition between states."
        },
        {
          "kind": "text",
          "content": "The advantage of using the state pattern is that, when the business\nrequirements of the program change, we won’t need to change the code of the\nvalue holding the state or the code that uses the value. We’ll only need to\nupdate the code inside one of the state objects to change its rules or perhaps\nadd more state objects."
        },
        {
          "kind": "text",
          "content": "First we’re going to implement the state pattern in a more traditional\nobject-oriented way, then we’ll use an approach that’s a bit more natural in\nRust. Let’s dig in to incrementally implement a blog post workflow using the\nstate pattern."
        },
        {
          "kind": "text",
          "content": "The final functionality will look like this:"
        },
        {
          "kind": "text",
          "content": "1. A blog post starts as an empty draft.\n2. When the draft is done, a review of the post is requested.\n3. When the post is approved, it gets published.\n4. Only published blog posts return content to print, so unapproved posts can’t\naccidentally be published."
        },
        {
          "kind": "text",
          "content": "Any other changes attempted on a post should have no effect. For example, if we\ntry to approve a draft blog post before we’ve requested a review, the post\nshould remain an unpublished draft."
        },
        {
          "kind": "text",
          "content": "Listing 18-11 shows this workflow in code form: this is an example usage of the\nAPI we’ll implement in a library crate named `blog`. This won’t compile yet\nbecause we haven’t implemented the `blog` crate."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-11\" file-name=\"src/main.rs\" caption=\"Code that demonstrates the desired behavior we want our `blog` crate to have\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-11/src/main.rs:all}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We want to allow the user to create a new draft blog post with `Post::new`. We\nwant to allow text to be added to the blog post. If we try to get the post’s\ncontent immediately, before approval, we shouldn’t get any text because the\npost is still a draft. We’ve added `assert_eq!` in the code for demonstration\npurposes. An excellent unit test for this would be to assert that a draft blog\npost returns an empty string from the `content` method, but we’re not going to\nwrite tests for this example."
        },
        {
          "kind": "text",
          "content": "Next, we want to enable a request for a review of the post, and we want\n`content` to return an empty string while waiting for the review. When the post\nreceives approval, it should get published, meaning the text of the post will\nbe returned when `content` is called."
        },
        {
          "kind": "text",
          "content": "Notice that the only type we’re interacting with from the crate is the `Post`\ntype. This type will use the state pattern and will hold a value that will be\none of three state objects representing the various states a post can be\nin—draft, review, or published. Changing from one state to another will be\nmanaged internally within the `Post` type. The states change in response to the\nmethods called by our library’s users on the `Post` instance, but they don’t\nhave to manage the state changes directly. Also, users can’t make a mistake with\nthe states, such as publishing a post before it’s reviewed."
        },
        {
          "kind": "text",
          "content": "### Defining `Post` and Creating a New Instance in the Draft State"
        },
        {
          "kind": "text",
          "content": "Let’s get started on the implementation of the library! We know we need a\npublic `Post` struct that holds some content, so we’ll start with the\ndefinition of the struct and an associated public `new` function to create an\ninstance of `Post`, as shown in Listing 18-12. We’ll also make a private\n`State` trait that will define the behavior that all state objects for a `Post`\nmust have."
        },
        {
          "kind": "text",
          "content": "Then `Post` will hold a trait object of `Box<dyn State>` inside an `Option<T>`\nin a private field named `state` to hold the state object. You’ll see why the\n`Option<T>` is necessary in a bit."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-12\" file-name=\"src/lib.rs\" caption=\"Definition of a `Post` struct and a `new` function that creates a new `Post` instance, a `State` trait, and a `Draft` struct\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-12/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `State` trait defines the behavior shared by different post states. The\nstate objects are `Draft`, `PendingReview`, and `Published`, and they will all\nimplement the `State` trait. For now, the trait doesn’t have any methods, and\nwe’ll start by defining just the `Draft` state because that is the state we\nwant a post to start in."
        },
        {
          "kind": "text",
          "content": "When we create a new `Post`, we set its `state` field to a `Some` value that\nholds a `Box`. This `Box` points to a new instance of the `Draft` struct. This\nensures that whenever we create a new instance of `Post`, it will start out as a\ndraft. Because the `state` field of `Post` is private, there is no way to create\na `Post` in any other state! In the `Post::new` function, we set the `content`\nfield to a new, empty `String`."
        },
        {
          "kind": "text",
          "content": "### Storing the Text of the Post Content"
        },
        {
          "kind": "text",
          "content": "We saw in Listing 18-11 that we want to be able to call a method named\n`add_text` and pass it a `&str` that is then added as the text content of the\nblog post. We implement this as a method, rather than exposing the `content`\nfield as `pub`, so that later we can implement a method that will control how\nthe `content` field’s data is read. The `add_text` method is pretty\nstraightforward, so let’s add the implementation in Listing 18-13 to the `impl\nPost` block."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-13\" file-name=\"src/lib.rs\" caption=\"Implementing the `add_text` method to add text to a post’s `content`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-13/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `add_text` method takes a mutable reference to `self` because we’re\nchanging the `Post` instance that we’re calling `add_text` on. We then call\n`push_str` on the `String` in `content` and pass the `text` argument to add to\nthe saved `content`. This behavior doesn’t depend on the state the post is in,\nso it’s not part of the state pattern. The `add_text` method doesn’t interact\nwith the `state` field at all, but it is part of the behavior we want to\nsupport."
        },
        {
          "kind": "text",
          "content": "### Ensuring the Content of a Draft Post Is Empty"
        },
        {
          "kind": "text",
          "content": "Even after we’ve called `add_text` and added some content to our post, we still\nwant the `content` method to return an empty string slice because the post is\nstill in the draft state, as shown on line 7 of Listing 18-11. For now, let’s\nimplement the `content` method with the simplest thing that will fulfill this\nrequirement: always returning an empty string slice. We’ll change this later\nonce we implement the ability to change a post’s state so it can be published.\nSo far, posts can only be in the draft state, so the post content should always\nbe empty. Listing 18-14 shows this placeholder implementation."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-14\" file-name=\"src/lib.rs\" caption=\"Adding a placeholder implementation for the `content` method on `Post` that always returns an empty string slice\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-14/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With this added `content` method, everything in Listing 18-11 up to line 7\nworks as intended."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"requesting-a-review-of-the-post-changes-its-state\"></a>"
        },
        {
          "kind": "text",
          "content": "### Requesting a Review Changes the Post’s State"
        },
        {
          "kind": "text",
          "content": "Next, we need to add functionality to request a review of a post, which should\nchange its state from `Draft` to `PendingReview`. Listing 18-15 shows this code."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-15\" file-name=\"src/lib.rs\" caption=\"Implementing `request_review` methods on `Post` and the `State` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-15/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We give `Post` a public method named `request_review` that will take a mutable\nreference to `self`. Then we call an internal `request_review` method on the\ncurrent state of `Post`, and this second `request_review` method consumes the\ncurrent state and returns a new state."
        },
        {
          "kind": "text",
          "content": "We add the `request_review` method to the `State` trait; all types that\nimplement the trait will now need to implement the `request_review` method.\nNote that rather than having `self`, `&self`, or `&mut self` as the first\nparameter of the method, we have `self: Box<Self>`. This syntax means the\nmethod is only valid when called on a `Box` holding the type. This syntax takes\nownership of `Box<Self>`, invalidating the old state so the state value of the\n`Post` can transform into a new state."
        },
        {
          "kind": "text",
          "content": "To consume the old state, the `request_review` method needs to take ownership\nof the state value. This is where the `Option` in the `state` field of `Post`\ncomes in: we call the `take` method to take the `Some` value out of the `state`\nfield and leave a `None` in its place because Rust doesn’t let us have\nunpopulated fields in structs. This lets us move the `state` value out of\n`Post` rather than borrowing it. Then we’ll set the post’s `state` value to the\nresult of this operation."
        },
        {
          "kind": "text",
          "content": "We need to set `state` to `None` temporarily rather than setting it directly\nwith code like `self.state = self.state.request_review();` to get ownership of\nthe `state` value. This ensures `Post` can’t use the old `state` value after\nwe’ve transformed it into a new state."
        },
        {
          "kind": "text",
          "content": "The `request_review` method on `Draft` returns a new, boxed instance of a new\n`PendingReview` struct, which represents the state when a post is waiting for a\nreview. The `PendingReview` struct also implements the `request_review` method\nbut doesn’t do any transformations. Rather, it returns itself because when we\nrequest a review on a post already in the `PendingReview` state, it should stay\nin the `PendingReview` state."
        },
        {
          "kind": "text",
          "content": "Now we can start seeing the advantages of the state pattern: the\n`request_review` method on `Post` is the same no matter its `state` value. Each\nstate is responsible for its own rules."
        },
        {
          "kind": "text",
          "content": "We’ll leave the `content` method on `Post` as is, returning an empty string\nslice. We can now have a `Post` in the `PendingReview` state as well as in the\n`Draft` state, but we want the same behavior in the `PendingReview` state.\nListing 18-11 now works up to line 10!"
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"adding-the-approve-method-that-changes-the-behavior-of-content\"></a>"
        },
        {
          "kind": "text",
          "content": "### Adding `approve` to Change the Behavior of `content`"
        },
        {
          "kind": "text",
          "content": "The `approve` method will be similar to the `request_review` method: it will\nset `state` to the value that the current state says it should have when that\nstate is approved, as shown in Listing 18-16:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-16\" file-name=\"src/lib.rs\" caption=\"Implementing the `approve` method on `Post` and the `State` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-16/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We add the `approve` method to the `State` trait and add a new struct that\nimplements `State`, the `Published` state."
        },
        {
          "kind": "text",
          "content": "Similar to the way `request_review` on `PendingReview` works, if we call the\n`approve` method on a `Draft`, it will have no effect because `approve` will\nreturn `self`. When we call `approve` on `PendingReview`, it returns a new,\nboxed instance of the `Published` struct. The `Published` struct implements the\n`State` trait, and for both the `request_review` method and the `approve`\nmethod, it returns itself, because the post should stay in the `Published`\nstate in those cases."
        },
        {
          "kind": "text",
          "content": "Now we need to update the `content` method on `Post`. We want the value\nreturned from `content` to depend on the current state of the `Post`, so we’re\ngoing to have the `Post` delegate to a `content` method defined on its `state`,\nas shown in Listing 18-17:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-17\" file-name=\"src/lib.rs\" caption=\"Updating the `content` method on `Post` to delegate to a `content` method on `State`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-17/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because the goal is to keep all of these rules inside the structs that implement\n`State`, we call a `content` method on the value in `state` and pass the post\ninstance (that is, `self`) as an argument. Then we return the value that’s\nreturned from using the `content` method on the `state` value."
        },
        {
          "kind": "text",
          "content": "We call the `as_ref` method on the `Option` because we want a reference to the\nvalue inside the `Option` rather than ownership of the value. Because `state`\nis an `Option<Box<dyn State>>`, when we call `as_ref`, an `Option<&Box<dyn\nState>>` is returned. If we didn’t call `as_ref`, we would get an error because\nwe can’t move `state` out of the borrowed `&self` of the function parameter."
        },
        {
          "kind": "text",
          "content": "We then call the `unwrap` method, which we know will never panic, because we\nknow the methods on `Post` ensure that `state` will always contain a `Some`\nvalue when those methods are done. This is one of the cases we talked about in\n[“Cases in Which You Have More Information Than the\nCompiler”][more-info-than-rustc]<!-- ignore --> in Chapter 9 when we know that a\n`None` value is never possible, even though the compiler isn’t able to\nunderstand that."
        },
        {
          "kind": "text",
          "content": "At this point, when we call `content` on the `&Box<dyn State>`, deref coercion\nwill take effect on the `&` and the `Box` so the `content` method will\nultimately be called on the type that implements the `State` trait. That means\nwe need to add `content` to the `State` trait definition, and that is where\nwe’ll put the logic for what content to return depending on which state we\nhave, as shown in Listing 18-18:"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-18\" file-name=\"src/lib.rs\" caption=\"Adding the `content` method to the `State` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-18/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We add a default implementation for the `content` method that returns an empty\nstring slice. That means we don’t need to implement `content` on the `Draft`\nand `PendingReview` structs. The `Published` struct will override the `content`\nmethod and return the value in `post.content`."
        },
        {
          "kind": "text",
          "content": "Note that we need lifetime annotations on this method, as we discussed in\nChapter 10. We’re taking a reference to a `post` as an argument and returning a\nreference to part of that `post`, so the lifetime of the returned reference is\nrelated to the lifetime of the `post` argument."
        },
        {
          "kind": "text",
          "content": "And we’re done—all of Listing 18-11 now works! We’ve implemented the state\npattern with the rules of the blog post workflow. The logic related to the\nrules lives in the state objects rather than being scattered throughout `Post`."
        },
        {
          "kind": "text",
          "content": "> ### Why Not An Enum?\n>\n> You may have been wondering why we didn’t use an `enum` with the different\n> possible post states as variants. That’s certainly a possible solution; try\n> it and compare the end results to see which you prefer! One disadvantage of\n> using an enum is that every place that checks the value of the enum will need\n> a `match` expression or similar to handle every possible variant. This could\n> get more repetitive than this trait object solution."
        },
        {
          "kind": "text",
          "content": "### Trade-offs of the State Pattern"
        },
        {
          "kind": "text",
          "content": "We’ve shown that Rust is capable of implementing the object-oriented state\npattern to encapsulate the different kinds of behavior a post should have in\neach state. The methods on `Post` know nothing about the various behaviors. The\nway we organized the code, we have to look in only one place to know the\ndifferent ways a published post can behave: the implementation of the `State`\ntrait on the `Published` struct."
        },
        {
          "kind": "text",
          "content": "If we were to create an alternative implementation that didn’t use the state\npattern, we might instead use `match` expressions in the methods on `Post` or\neven in the `main` code that check the state of the post and change behavior\nin those places. That would mean we would have to look in several places to\nunderstand all the implications of a post being in the published state! This\nwould only increase the more states we added: each of those `match` expressions\nwould need another arm."
        },
        {
          "kind": "text",
          "content": "With the state pattern, the `Post` methods and the places we use `Post` don’t\nneed `match` expressions, and to add a new state, we would only need to add a\nnew struct and implement the trait methods on that one struct."
        },
        {
          "kind": "text",
          "content": "The implementation using the state pattern is easy to extend to add more\nfunctionality. To see the simplicity of maintaining code that uses the state\npattern, try a few of these suggestions:"
        },
        {
          "kind": "text",
          "content": "- Add a `reject` method that changes the post’s state from `PendingReview` back\nto `Draft`.\n- Require two calls to `approve` before the state can be changed to `Published`.\n- Allow users to add text content only when a post is in the `Draft` state.\nHint: have the state object responsible for what might change about the\ncontent but not responsible for modifying the `Post`."
        },
        {
          "kind": "text",
          "content": "One downside of the state pattern is that, because the states implement the\ntransitions between states, some of the states are coupled to each other. If we\nadd another state between `PendingReview` and `Published`, such as `Scheduled`,\nwe would have to change the code in `PendingReview` to transition to\n`Scheduled` instead. It would be less work if `PendingReview` didn’t need to\nchange with the addition of a new state, but that would mean switching to\nanother design pattern."
        },
        {
          "kind": "text",
          "content": "Another downside is that we’ve duplicated some logic. To eliminate some of the\nduplication, we might try to make default implementations for the\n`request_review` and `approve` methods on the `State` trait that return `self`;\nhowever, this wouldn’t work: when using `State` as a trait object, the trait\ndoesn’t know what the concrete `self` will be exactly, so the return type isn’t\nknown at compile time. (This is one of the dyn compatibility rules mentioned\nearlier.)"
        },
        {
          "kind": "text",
          "content": "Other duplication includes the similar implementations of the `request_review`\nand `approve` methods on `Post`. Both methods use `Option::take` with the\n`state` field of `Post`, and if `state` is `Some`, they delegate to the wrapped\nvalue’s implementation of the same method and set the new value of the `state`\nfield to the result. If we had a lot of methods on `Post` that followed this\npattern, we might consider defining a macro to eliminate the repetition (see\n[“Macros”][macros]<!-- ignore --> in Chapter 20)."
        },
        {
          "kind": "text",
          "content": "By implementing the state pattern exactly as it’s defined for object-oriented\nlanguages, we’re not taking as full advantage of Rust’s strengths as we could.\nLet’s look at some changes we can make to the `blog` crate that can make\ninvalid states and transitions into compile-time errors."
        },
        {
          "kind": "text",
          "content": "#### Encoding States and Behavior as Types"
        },
        {
          "kind": "text",
          "content": "We’ll show you how to rethink the state pattern to get a different set of\ntrade-offs. Rather than encapsulating the states and transitions completely so\noutside code has no knowledge of them, we’ll encode the states into different\ntypes. Consequently, Rust’s type checking system will prevent attempts to use\ndraft posts where only published posts are allowed by issuing a compiler error."
        },
        {
          "kind": "text",
          "content": "Let’s consider the first part of `main` in Listing 18-11:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We still enable the creation of new posts in the draft state using `Post::new`\nand the ability to add text to the post’s content. But instead of having a\n`content` method on a draft post that returns an empty string, we’ll make it so\ndraft posts don’t have the `content` method at all. That way, if we try to get\na draft post’s content, we’ll get a compiler error telling us the method\ndoesn’t exist. As a result, it will be impossible for us to accidentally\ndisplay draft post content in production because that code won’t even compile.\nListing 18-19 shows the definition of a `Post` struct and a `DraftPost` struct,\nas well as methods on each."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-19\" file-name=\"src/lib.rs\" caption=\"A `Post` with a `content` method and `DraftPost` without a `content` method\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-19/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Both the `Post` and `DraftPost` structs have a private `content` field that\nstores the blog post text. The structs no longer have the `state` field because\nwe’re moving the encoding of the state to the types of the structs. The `Post`\nstruct will represent a published post, and it has a `content` method that\nreturns the `content`."
        },
        {
          "kind": "text",
          "content": "We still have a `Post::new` function, but instead of returning an instance of\n`Post`, it returns an instance of `DraftPost`. Because `content` is private\nand there aren’t any functions that return `Post`, it’s not possible to create\nan instance of `Post` right now."
        },
        {
          "kind": "text",
          "content": "The `DraftPost` struct has an `add_text` method, so we can add text to\n`content` as before, but note that `DraftPost` does not have a `content` method\ndefined! So now the program ensures all posts start as draft posts, and draft\nposts don’t have their content available for display. Any attempt to get around\nthese constraints will result in a compiler error."
        },
        {
          "kind": "text",
          "content": "#### Implementing Transitions as Transformations into Different Types"
        },
        {
          "kind": "text",
          "content": "So how do we get a published post? We want to enforce the rule that a draft\npost has to be reviewed and approved before it can be published. A post in the\npending review state should still not display any content. Let’s implement\nthese constraints by adding another struct, `PendingReviewPost`, defining the\n`request_review` method on `DraftPost` to return a `PendingReviewPost` and\ndefining an `approve` method on `PendingReviewPost` to return a `Post`, as\nshown in Listing 18-20."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-20\" file-name=\"src/lib.rs\" caption=\"A `PendingReviewPost` that gets created by calling `request_review` on `DraftPost` and an `approve` method that turns a `PendingReviewPost` into a published `Post`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-20/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `request_review` and `approve` methods take ownership of `self`, thus\nconsuming the `DraftPost` and `PendingReviewPost` instances and transforming\nthem into a `PendingReviewPost` and a published `Post`, respectively. This way,\nwe won’t have any lingering `DraftPost` instances after we’ve called\n`request_review` on them, and so forth. The `PendingReviewPost` struct doesn’t\nhave a `content` method defined on it, so attempting to read its content\nresults in a compiler error, as with `DraftPost`. Because the only way to get a\npublished `Post` instance that does have a `content` method defined is to call\nthe `approve` method on a `PendingReviewPost`, and the only way to get a\n`PendingReviewPost` is to call the `request_review` method on a `DraftPost`,\nwe’ve now encoded the blog post workflow into the type system."
        },
        {
          "kind": "text",
          "content": "But we also have to make some small changes to `main`. The `request_review` and\n`approve` methods return new instances rather than modifying the struct they’re\ncalled on, so we need to add more `let post =` shadowing assignments to save\nthe returned instances. We also can’t have the assertions about the draft and\npending review posts’ contents being empty strings, nor do we need them: we can’t\ncompile code that tries to use the content of posts in those states any longer.\nThe updated code in `main` is shown in Listing 18-21."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"18-21\" file-name=\"src/main.rs\" caption=\"Modifications to `main` to use the new implementation of the blog post workflow\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch18-oop/listing-18-21/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The changes we needed to make to `main` to reassign `post` mean that this\nimplementation doesn’t quite follow the object-oriented state pattern anymore:\nthe transformations between the states are no longer encapsulated entirely\nwithin the `Post` implementation. However, our gain is that invalid states are\nnow impossible because of the type system and the type checking that happens at\ncompile time! This ensures that certain bugs, such as display of the content of\nan unpublished post, will be discovered before they make it to production."
        },
        {
          "kind": "text",
          "content": "Try the tasks suggested at the start of this section on the `blog` crate as it\nis after Listing 18-21 to see what you think about the design of this version\nof the code. Note that some of the tasks might be completed already in this\ndesign."
        },
        {
          "kind": "text",
          "content": "We’ve seen that even though Rust is capable of implementing object-oriented\ndesign patterns, other patterns, such as encoding state into the type system,\nare also available in Rust. These patterns have different trade-offs. Although\nyou might be very familiar with object-oriented patterns, rethinking the\nproblem to take advantage of Rust’s features can provide benefits, such as\npreventing some bugs at compile time. Object-oriented patterns won’t always be\nthe best solution in Rust due to certain features, like ownership, that\nobject-oriented languages don’t have."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Regardless of whether you think Rust is an object-oriented language after\nreading this chapter, you now know that you can use trait objects to get some\nobject-oriented features in Rust. Dynamic dispatch can give your code some\nflexibility in exchange for a bit of runtime performance. You can use this\nflexibility to implement object-oriented patterns that can help your code’s\nmaintainability. Rust also has other features, like ownership, that\nobject-oriented languages don’t have. An object-oriented pattern won’t always be\nthe best way to take advantage of Rust’s strengths, but it is an available\noption."
        },
        {
          "kind": "text",
          "content": "Next, we’ll look at patterns, which are another of Rust’s features that enable\nlots of flexibility. We’ve looked at them briefly throughout the book but\nhaven’t seen their full capability yet. Let’s go!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "d19f9e83-d4c2-41d5-9fc7-81db5135eb1e",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "In the running example from this section, a blog post could have one of three states: `Draft`, `PendingReview`, and `Published`. In the example, each state was represented as a struct, and state transitions was represented as trait methods returning trait objects.\n\nAn alternative implementation could represent the states as an enum, like this:\n\n```\nenum BlogState {\n    Draft,\n    PendingReview,\n    Published\n}\n\nimpl Post {\n    fn request_review(&mut self) {\n        use BlogState::*;\n        self.state = match self.state {\n            Draft => PendingReview,\n            PendingReview => PendingReview,\n            Published => Published\n        }\n    }\n}\n```\n\nWhich of the following are good reasons to prefer the struct/trait representation over the enum representation?\n",
                  "distractors": [
                    "The use of `match` is slower at runtime than dynamic dispatch",
                    "An API client could add a new method for all states in the system"
                  ]
                },
                "answer": {
                  "answer": [
                    "An API client could add a new state to the system",
                    "Adding a new state does not require modifying methods on every other state"
                  ]
                },
                "context": "The struct/trait approach is extensible in the sense that an API client could potentially\ncreate a new state (such as `Retracted`) without changing the core API functionality. When\nadding this state, the methods for other states do not need to be changed. Whereas with enums,\na client cannot add a new branch to the enum. Moreover, all `match` expressions must be updated\nwhen a state is added.\n\nA `match` is not likely to be slower than dynamic dispatch. A match is a simple branch based on\nan enum's tag, while dynamic dispatch requires a layer of indirection through a trait\nobject's virtual table with non-inlined function calls.\n\nAn API client cannot add a new *method* for existing states in the struct/trait approach, they \ncan only add new states. The methods are fixed by the API author's trait definition. Note that you could add a new method which only builds on existing methods via extension traits, such as:\n\n```\ntrait StateExt {\n    fn request_review_twice(self: Box<Self>) -> Box<dyn State>;\n}\n\nimpl<S: State> StateExt for S {\n    fn request_review_twice(self: Box<Self>) -> Box<dyn State> {\n        self.request_review().request_review()\n    }\n}\n```\n\nBut these extensions cannot read the private data of the states.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[more-info-than-rustc]: ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler\n[macros]: ch20-05-macros.html#macros"
        }
      ]
    },
    {
      "title": "Ownership Inventory #4",
      "file": "ch18-04-inventory.md",
      "elements": [
        {
          "kind": "text",
          "content": "The Ownership Inventory is a series of quizzes that test your understanding of ownership in real-world scenarios. These scenarios are inspired by common StackOverflow questions about Rust."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "2c6d6e2e-ad6e-4e98-bf88-8cada144ebee",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Adds a Display-able object into a vector of \n/// Display trait objects\nuse std::fmt::Display;\nfn add_displayable<T: Display>(\n    v: &mut Vec<Box<dyn Display>>, \n    t: T\n) {\n    v.push(Box::new(t));\n}\n```\n\nIf you tried to compile this program, which of the following best describes the compiler error you would get?\n",
                  "distractors": [
                    "the type `T` may be dynamically sized and cannot be casted to a trait object",
                    "the type `T` cannot be boxed if it contains a reference",
                    "the type `T` does not outlive the lifetime of the reference `&mut Vec<..>`"
                  ]
                },
                "answer": {
                  "answer": "the type `T` does not live long enough when cast to a trait object"
                },
                "context": "When casting `Box<T>` to `Box<dyn Display>` (implicitly in `v.push(..)`), Rust requires that the trait object `dyn Display`\nmust outlive the vector. However, the lifetime of `T` is unspecified, so `T` may not live long enough.\n"
              },
              {
                "id": "36da4652-baeb-47a6-9ee1-1448b02cbe8e",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Adds a Display-able object into a vector of \n/// Display trait objects\nuse std::fmt::Display;\nfn add_displayable<T: Display>(\n    v: &mut Vec<Box<dyn Display>>, \n    t: T\n) {\n    v.push(Box::new(t));\n}\n```\n\nNormally if you try to compile this function, the compiler returns the following error:\n\n```text\nerror[E0310]: the parameter type `T` may not live long enough\n --> test.rs:6:12\n  |\n6 |     v.push(Box::new(t));\n  |            ^^^^^^^^^^^\n```\n\nAssume that the compiler did NOT reject this function. Which (if any) of the following programs would\n(1) pass the compiler, and (2) possibly cause undefined behavior if executed?\nCheck each program that satisfies both criteria, OR check \"None of these programs\" if none are satisfying.",
                  "distractors": [
                    "None of these programs",
                    "```\nlet mut v: Vec<Box<dyn Display>> = Vec::new();\n{\n    let s = String::from(\"Hello world\");\n    add_displayable(&mut v, s);\n}\nprintln!(\"{}\", v[0]);\n```\n",
                    "```\nlet mut v: Vec<Box<dyn Display>> = Vec::new();\nadd_displayable(&mut v, 5);\n```\n"
                  ]
                },
                "answer": {
                  "answer": [
                    "```\nlet mut v: Vec<Box<dyn Display>> = Vec::new();\n{\n    let n = 0;\n    add_displayable(&mut v, &n);\n}\nprintln!(\"{}\", v[0]);\n```\n"
                  ]
                },
                "context": "This program is memory-unsafe. To create a memory safety violation, the program must create a type `T` that contains\nreferences which do not outlive the vector. For example, adding `&n` where `n` goes out of scope before `v` means that\nthe later use of `v[0]` is a read of deallocated memory.\n"
              },
              {
                "id": "2da21d0e-5722-4908-b528-dc87bbce1faf",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "**Program 1:**\n\n```ide\n/// Adds a Display-able object into a vector of \n/// Display trait objects\nuse std::fmt::Display;\nfn add_displayable<T: Display>(\n    v: &mut Vec<Box<dyn Display>>, \n    t: T\n) {\n    v.push(Box::new(t));\n}\n```\n\nOf the following fixes (highlighted in yellow), which fix best satisfies these three criteria:\n1. The fixed function passes the Rust compiler,\n2. The fixed function preserves the intention of the original code, and\n3. The fixed function does not introduce unnecessary inefficiencies\n",
                  "distractors": [
                    "```ide\nfn add_displayable<T: Display `[+ 'static]`>(\n    v: &mut Vec<Box<dyn Display>>, \n    t: T\n) {\n    v.push(Box::new(t));\n}\n```\n",
                    "```ide\nfn add_displayable<T: Display `[+ Clone]`>(\n    v: &mut Vec<Box<dyn Display>>, \n    t: T\n) {\n    v.push(Box::new(`[t.clone()]`));\n}\n```\n",
                    "```ide\nfn add_displayable<`['a]`, T: Display `[+ 'a]`>(\n    v: &`['a]` mut Vec<Box<dyn Display>>, \n    t: T\n) {\n    v.push(Box::new(t));\n}\n```\n"
                  ]
                },
                "answer": {
                  "answer": "```ide\nfn add_displayable<`['a]`, T: Display `[+ 'a]`>(\n    v: &mut Vec<Box<dyn Display `[+ 'a]`>>, \n    t: T\n) {\n    v.push(Box::new(t));\n}\n```\n"
                },
                "context": "The most idiomatic fix is to specify how the lifetime of `T` should relate to the lifetime of the trait object `dyn Display`.\nHere, that means adding a lifetime parameter `'a`, saying that `T` outlives `'a`, and that the trait objects also live for\nat least `'a`. \n\nUsing a `'static` bound is the same thing but worse: it is simply less expressive, disallowing the vector's trait objects\nfrom ever holding references. Putting the lifetime `'a` on the `&'a mut Vec<..>` reference is not correct and does not\nfix the compiler error.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Design Trade-offs",
      "file": "ch18-05-design-challenge.md",
      "elements": [
        {
          "kind": "text",
          "content": "This section is about **design trade-offs** in Rust. To be an effective Rust engineer, it's not enough just to know how Rust works. You have to decide which of Rust's many tools are appropriate for a given job. In this section, we will give you a sequence of quizzes about your understanding of design trade-offs in Rust.  After each quiz, we will explain in-depth our rationale for each question."
        },
        {
          "kind": "text",
          "content": "Here's an example of what a question will look like. It will start out by describing a software case study with a space of designs:"
        },
        {
          "kind": "text",
          "content": "> **Context:** You are designing an application with a global configuration, e.g. containing command-line flags.\n>\n> **Functionality:** The application needs to pass immutable references to this configuration throughout the application.\n>\n> **Designs:** Below are several proposed designs to implement the functionality.\n>\n> ```rust,ignore\n> use std::rc::Rc;\n> use std::sync::Arc;\n>\n> struct Config {\n>     flags: Flags,\n>     // .. more fields ..\n> }\n>\n> // Option 1: use a reference\n> struct ConfigRef<'a>(&'a Config);\n>\n> // Option 2: use a reference-counted pointer\n> struct ConfigRef(Rc<Config>);\n>\n> // Option 3: use an atomic reference-counted pointer\n> struct ConfigRef(Arc<Config>);\n> ```"
        },
        {
          "kind": "text",
          "content": "Given just the context and key functionality, all three designs are potential candidates.\nWe need more information about the system goals to decide which ones make the most sense.\nHence, we give a new requirement:"
        },
        {
          "kind": "text",
          "content": "> Select each design option that satisfies the following requirement:\n>\n> **Requirement:** The configuration reference must be shareable between multiple threads.\n>\n> **Answer:**\n>\n> <input type=\"checkbox\" checked disabled> Option 1 <br>\n> <input type=\"checkbox\" disabled> Option 2 <br>\n> <input type=\"checkbox\" checked disabled> Option 3 <br>"
        },
        {
          "kind": "text",
          "content": "In formal terms, this means that `ConfigRef` implements [`Send`] and [`Sync`].\nAssuming `Config: Send + Sync`, then both `&Config` and `Arc<Config>` satisfy this requirement,\nbut [`Rc`] does not (because non-atomic reference-counted pointers are not thread-safe). So Option 2 does not satisfy the requirement, while Option 3 does."
        },
        {
          "kind": "text",
          "content": "We might also be tempted to conclude that Option 1 does not satisfy the requirement because functions like [`thread::spawn`] require that all data moved into a thread can only contain references with a `'static` lifetime. However, that does not rule out Option 1 for two reasons:\n1.  The `Config` could be stored as a global static variable (e.g., using [`OnceLock`]), so one could construct `&'static Config` references.\n2. Not all concurrency mechanisms require `'static` lifetimes, such as [`thread::scope`]."
        },
        {
          "kind": "text",
          "content": "Therefore the requirement as-stated only rules out non-[`Send`] types, and we consider Options 1 and 3 to be the correct answers."
        },
        {
          "kind": "text",
          "content": "[`thread::spawn`]: https://doc.rust-lang.org/std/thread/fn.spawn.html\n[`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n[`Rc`]: https://doc.rust-lang.org/std/rc/struct.Rc.html\n[`OnceLock`]: https://doc.rust-lang.org/std/sync/struct.OnceLock.html\n[`thread::scope`]: https://doc.rust-lang.org/std/thread/fn.scope.html"
        },
        {
          "kind": "text",
          "content": "<hr>"
        },
        {
          "kind": "text",
          "content": "Now you try with the questions below! Each section contains a quiz focused on a single scenario. Complete the quiz, and make sure to read the answer context after each quiz.\n<!-- These questions are both experimental and opinionated &mdash; please leave us feedback via the bug button 🐞 if you disagree with our answers. -->"
        },
        {
          "kind": "text",
          "content": "Along with each quiz, we have also provided links to popular Rust crates that served as inspiration for the quiz."
        },
        {
          "kind": "text",
          "content": "## References"
        },
        {
          "kind": "text",
          "content": "*Inspiration:* [Bevy assets], [Petgraph node indices], [Cargo units]"
        },
        {
          "kind": "quiz",
          "content": {
            "multipart": {
              "q": "**Context:** You are designing a simple asset manager for a game engine.\n\n**Functionality:** An API client will provide paths of assets to load, and gets back access to the loaded assets.\n\n**Assumptions:** You may assume that loads happen synchronously and instantaneously.\n\n**Designs:** Below are several proposed designs to implement the functionality.\n\n```\npub struct AssetManager {\n    // ...\n}\n\n// Option 1: return a reference\nimpl AssetManager {\n    pub fn load(&mut self, path: PathBuf) -> &Asset;\n}\n\n// Option 2: return a mutable reference\nimpl AssetManager {\n    pub fn load(&mut self, path: PathBuf) -> &mut Asset;\n}\n\n// Option 3: return a reference-counted pointer\nimpl AssetManager {\n    pub fn load(&mut self, path: PathBuf) -> Rc<Asset>;\n}\n\n// Option 4: return a copyable handle that can be turned into a reference\n#[derive(Copy, Clone)]\npub struct AssetHandle(usize);\n\nimpl AssetManager {\n    pub fn load(&mut self, path: PathBuf) -> AssetHandle;\n    pub fn get(&self, handle: AssetHandle) -> &Asset;\n}\n```\n"
            },
            "questions": [
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** Once loaded, an asset should be permanently immutable.\n",
                  "distractors": [
                    "2"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1",
                    "3",
                    "4"
                  ]
                },
                "context": "The immutability of assets is enforced by types that don't permit mutating operations. Both an immutable borrow `&Asset`\nand an immutable smart-pointer like `Rc` don't permit mutating operations. Therefore Options 1, 3, and 4 DO satisfy this requirement.\nOption 2 returns a mutable borrow, which does NOT satisfy the requirement.\n",
                "id": "10ae140e-72a6-4594-802a-d656f33cd836"
              },
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:**  Clients of the asset manager need to retain access to assets across several short-term borrows of the asset manager.\n",
                  "distractors": [
                    "1",
                    "2"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "3",
                    "4"
                  ]
                },
                "context": "\"Retaining access across borrows\" means the client wants to write a program like this:\n\n```\nlet asset = {\n    let manager = get_manager();\n    manager.load(\"some/path\")\n};\nprocess_asset(asset);\nlet another_asset = {\n    let manager = get_manager();\n    manager.load(\"another/path\")\n};\n```\n\nIn this case, the lifetime of the value returned by `load` must not be tied to the lifetime of the `AssetManager`. Options 1 and 2\nrequire that the `&Asset` and `&mut Asset` only live as long as the `&mut self`. Therefore the borrow checker\nwould reject programs like the one above where an asset outlives the manager reference. Options 1 and 2 do NOT satisfy the requirement.\n\nOptions 3 and 4 DO satisfy the requirement. The lifetime of `Rc<Asset>` is not tied to the lifetime of `&mut self`. Similarly, the lifetime\nof `AssetHandle` is not tied to the lifetime of `&mut self`.\n",
                "id": "b69cde98-8ccd-4a89-aeeb-80a3338f9e68"
              },
              {
                "multipart": "q",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** It is important that all assets be deallocated at a single, predictable time.\n",
                  "distractors": [
                    "3"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1",
                    "2",
                    "4"
                  ]
                },
                "context": "To deallocate all assets at a single time, the `AssetManager` must retain exclusive ownership over them.\nTherefore when the `AssetManager` is dropped (or otherwise instructed to deallocate assets), \nit is guaranteed that all of the assets can be safely dropped.\nOptions 1, 2, and 4 DO satisfy this requirement. Option 4 would require that `AssetManager::get` panics if\nthe client calls `manager.get(handle)` after an asset has been deallocated. If there is a real chance a client may do this,\nanother alternative would be for `get` to return `Option<&Asset>`.\n\nOption 3 does NOT satisfy this requirement. Reference-counted pointers are jointly owned by every owner of an `Rc<Asset>`.\nThe `AssetManager` has no good way to ensure that all assets have no other owners at deallocation time.\n",
                "id": "48527488-ecfc-4f16-9824-76a3ac7183f4"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[Bevy assets]: https://docs.rs/bevy/0.11.2/bevy/asset/struct.Assets.html\n[Petgraph node indices]: https://docs.rs/petgraph/0.6.4/petgraph/graph/struct.NodeIndex.html\n[Cargo units]: https://docs.rs/cargo/0.73.1/cargo/core/compiler/struct.Unit.html"
        },
        {
          "kind": "text",
          "content": "## Trait Trees"
        },
        {
          "kind": "text",
          "content": "*Inspiration:* [Yew components], [Druid widgets]"
        },
        {
          "kind": "quiz",
          "content": {
            "multipart": {
              "q": "**Context:** You are designing a simple user interface framework that consists of a tree of widgets, such as text and buttons.\n\n**Functionality:** The API provides a `Widget` trait that defines how a widget works. The API client implements the `Widget` trait, and calls it to render a UI.\n\n**Designs:** Below are several proposed designs to implement the functionality.\n\n```\n// Option 1: children must be Self\npub trait Widget: Sized {\n\tfn render(&self) -> Vec<Self>;\n}\n\n// Option 2: children are a trait parameter\npub trait Widget<Children> {\n\tfn render(&self) -> Vec<Children>;\n}\n\n// Option 3: children are an associated type\npub trait Widget {\n\ttype Children: Widget;\n\tfn render(&self) -> Vec<Self::Children>;\n}\n\n// Option 4: children are a reference trait object\npub trait Widget {\n\tfn render(&self) -> Vec<&dyn Widget>;\n}\n\n// Option 5: children are a boxed trait object\npub trait Widget {\n\tfn render(&self) -> Vec<Box<dyn Widget>>;\n}\n```\n"
            },
            "questions": [
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** The API client is expected to provide a single `WidgetImpl` enum representing all possible widgets, and implement the `Widget` trait for `WidgetImpl`.\n",
                  "distractors": [
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1"
                  ]
                },
                "context": "If we represent all possible widgets as a single enum, like this:\n\n```\nenum WidgetImpl {\n  Button { /* .. */ },\n  Text { /* .. */ },\n  // ..\n}\n\nimpl Widget for WidgetImpl { /* .. */ }\n```\n\nThen we have a \"closed world\" system where there is a non-extensible set of possible widgets. There is only one implementation of `Widget`, and no need for dynamic dispatch. \nTherefore only Option 1 makes sense, because `render` would only ever return other `WidgetImpl` types. All other designs contain unnecessary complexity under this requirement.\n",
                "id": "e529cabf-a14c-4f1b-865f-1f376b704df8"
              },
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** The API client is expected to provide a unique struct for each possible widget, and implement the `Widget` trait for each struct. \nEach widget can return a vector containing widgets of any possible type.\n",
                  "distractors": [
                    "1",
                    "2",
                    "3"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "4",
                    "5"
                  ]
                },
                "context": "Unlike the previous question, now we expect to have a distinct type for each widget, like:\n\n```\nstruct Button { /* .. */ }\nimpl Widget for Button { /* .. */ }\n\nstruct Text { /* .. */ }\nimpl Widget for Text { /* .. */ }\n```\n\nTherefore a vector of widgets needs to be heterogeneous, i.e., it could contain widgets of distinct types.\nOptions 1, 2, and 3 all constrain each `Widget::render` implementation to return a vector of a single widget type.\nOptions 4 and 5 use dynamic dispatch via trait objects to permit heterogeneous widget vectors.\n",
                "id": "0fdd5ca0-835f-4999-8d24-37841cb0a1a7"
              },
              {
                "multipart": "q",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** Only types that implement the `Widget` trait should be returned from `render`.\n",
                  "distractors": [
                    "2"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1",
                    "3",
                    "4",
                    "5"
                  ]
                },
                "context": "The `Widget` trait in Option 2 does not constrain that `Children: Widget`. \nAll other options do ensure return a `Vec<W>` for some `W` where `W: Widget`.\n",
                "id": "fbed1c75-737c-49f5-8f11-66d25391079b"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[Yew components]: https://docs.rs/yew/0.20.0/yew/html/trait.Component.html\n[Druid widgets]: https://docs.rs/druid/0.8.3/druid/trait.Widget.html"
        },
        {
          "kind": "text",
          "content": "## Dispatch"
        },
        {
          "kind": "text",
          "content": "*Inspiration:* [Bevy systems], [Diesel queries], [Axum handlers]"
        },
        {
          "kind": "quiz",
          "content": {
            "multipart": {
              "q": "**Context:** You are designing a simple event system that calls callback functions in response to events. \n\n**Functionality:** An `Events` struct provides functions to register callbacks.\nA callback is either parallelizable (runnable across multiple threads) or sequential (must be run only on the main thread).\n\n**Designs:** Below are several proposed designs to implement the functionality.\n\n```\npub struct Events {\n\t// ...\n}\n\n// Option 1: parallel and sequential are two separate methods\nimpl Events {\n\tpub fn register<E, F: Fn(E)>(&mut self, f: F) { /* .. */ }\n\tpub fn register_sequential<E, F: Fn(E)>(&mut self, f: F) { /* .. */ }\n}\n\n// Option 2: parallel and sequential are two members of an enum\npub enum Callback<F> {\n\tParallel(F),\n\tSequential(F)\n}\nimpl Events {\n\tpub fn register<E, F: Fn(E)>(&mut self, f: Callback<F>) { /* .. */ }\n}\n\n// Option 3: parallel and sequential are markers in a trait method\npub trait Register<Marker, F, E> {\n\tfn register(&mut self, f: F);\n}\npub struct Parallel;\npub struct Sequential;\nimpl<F, E> Register<Parallel, F, E> for Events \nwhere F: Fn(E) {\n\tfn register(&mut self, f: F) { /* .. */ }\n}\nimpl<F, E> Register<Sequential, F, E> for Events \nwhere F: Fn(Sequential, E) {\n\tfn register(&mut self, f: F) { /* .. */ }\n}\n```\n"
            },
            "questions": [
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** A callback should be considered parallelizable by default, and the API should reflect that default behavior.\n",
                  "distractors": [
                    "2"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1",
                    "3"
                  ]
                },
                "context": "First, let's imagine what it would look like to register a callback under each design.\n\n```rust\n// Option 1\nevents.register(|e: OnClick| { /* .. */ });\nevents.register_sequential(|e: OnClick| { /* .. */ })\n\n// Option 2\nevents.register(Callback::Parallel(|e: OnClick| { /* .. */ }));\nevents.register(Callback::Sequential(|e: OnClick| { /* .. */ }));\n\n// Option 3\nevents.register(|e: OnClick| { /* .. */ });\nevents.register(|_: Sequential, e: OnClick| { /* .. */ });\n```\n\nOf these options, Options 1 and 3 convey that parallel is the default mode as it corresponds to the simplest option.\nBeing sequential requires either using a longer method name (`_sequential`) or a marker type (`_: Sequential)`.\n\nOption 2 does not clearly mark that parallel should be default because both `Parallel` and `Sequential` must be passed in\nto `register`.\n",
                "id": "4a32bad8-fee7-45b5-80ef-775d059aab48"
              },
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** The API should export as few methods as possible.\n",
                  "distractors": [
                    "1"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "2",
                    "3"
                  ]
                },
                "context": "Options 2 and 3 only export a single `register` method. Option 1 requires exporting two distinctly-named register methods.\n",
                "id": "eaeafdad-ac3a-4d92-85eb-995991a81c2d"
              },
              {
                "multipart": "q",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** The API should lean on the compiler's type inference system as little as possible.\n",
                  "distractors": [
                    "3"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1",
                    "2"
                  ]
                },
                "context": "Options 1 and 2 do not require much type inference beyond determining the type of the function `F`.\n\nOption 3 uses an overloading trick by creating a `Register` trait parameterized over a \"marker\" type.\nRemember its two register calls:\n```\nevents.register(|e: OnClick| { /* .. */ })\nevents.register(|_: Sequential, e: OnClick| { /* .. */ })\n```\n\nThese look like they use the same implementation, but they actually refer to different implementations of the same method.\nThis implementation relies on the compiler to infer the type of `Marker` when resolving which implementation of `Register` that\neach `.register(..)` call corresponds to. Therefore if our goal is to *not* rely on type inference, then Option 3 is inappropriate.\n",
                "id": "e0c4f766-b82a-496a-b669-ea9e0a367af7"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[Bevy systems]: https://docs.rs/bevy_ecs/0.11.2/bevy_ecs/system/trait.IntoSystem.html\n[Diesel queries]: https://docs.diesel.rs/2.1.x/diesel/query_dsl/trait.BelongingToDsl.html\n[Axum handlers]: https://docs.rs/axum/0.6.20/axum/handler/trait.Handler.html"
        },
        {
          "kind": "text",
          "content": "## Intermediates"
        },
        {
          "kind": "text",
          "content": "*Inspiration:* [Serde] and [miniserde]"
        },
        {
          "kind": "quiz",
          "content": {
            "multipart": {
              "q": "**Context:** You are designing a serialization library that converts Rust data types into formats like JSON.\n\n**Functionality:** A `Serialize` trait that can be implemented by serializable types, and a `to_json` function that converts serializable types into JSON.\n\n**Designs:** Below are several proposed designs to implement the functionality.\n\n```\n// Option 1: types serialize to a `Value` enum\npub enum Value {\n\tString(String),\n\tNumber(isize)\n}\n\npub trait Serialize {\n\tfn serialize(&self) -> Value;\n}\n\nfn value_to_json(value: Value) -> String {\n\t/* .. */\n}\n\npub fn to_json(data: impl Serialize) -> String {\n    let value = data.serialize();\n    value_to_json(value)\n}\n\n\n// Option 2: types serialize via calls to a `Serializer` interface\npub trait Serialize {\n\tfn serialize<S: Serializer>(&self, serializer: &mut S);\n}\n\npub trait Serializer {\n\tfn serialize_string(&mut self, s: &str);\n\tfn serialize_number(&mut self, n: isize);\n}\n\nstruct JsonSerializer { buffer: String };\nimpl Serializer for JsonSerializer {\n\t/* .. */\n}\n\npub fn to_json(data: impl Serialize) -> String {\n\tlet mut serializer = JsonSerializer { buffer: String::new() };\n\tdata.serialize(&mut serializer);\n\tserializer.buffer\n}\n```\n"
            },
            "questions": [
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** It should be possible to add a new data format without needing to modify code in existing implementations of the `Serialize` trait.\n",
                  "distractors": [],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1",
                    "2"
                  ]
                },
                "context": "Both designs are sufficiently decoupled such that each new data format is independent of any `Serialize` implementations. For Option 1,\neach data format converts a `Value` into the format's representation. `Value` acts as a module boundary.\n\nFor Option 2, there is no explicit intermediate representation of a serialized value, but rather each `Serialize` implementation is explicitly generic\nover any choice of `S` that implements `Serializer`.\n",
                "id": "66e036c9-91a0-4611-8110-967b5ed1a514"
              },
              {
                "type": "MultipleChoice",
                "multipart": "q",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** The process of serialization should consume as little memory as possible.\n",
                  "distractors": [
                    "1"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "2"
                  ]
                },
                "context": "Option 1 serializes data by first converting a data structure into an intermediate representation, `Value`, and then converting `Value` into the final format.\nThis intermediate data structure consumes memory which is not needed by Option 2, where data is converted directly into the final format.\n",
                "id": "eaa95520-1b72-4f7d-a600-5444b6368785"
              },
              {
                "multipart": "q",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Select each design option that satisfies the following requirement:\n\n**Requirement:** When the same data type is serialized into multiple formats, that should increase the size of the compiled binary as little as possible.\n",
                  "distractors": [
                    "2"
                  ],
                  "sortAnswers": true
                },
                "answer": {
                  "answer": [
                    "1"
                  ]
                },
                "context": "With Option 1, there is only a single instantiation of `Serialize` that converts a type `T` into a `Value`. Because Option 2 is generic over serializers `S`,\nthen every time `T::serialize` is called with a new `S`, the Rust compiler will monomorphize a new instance of `T::serialize` which would increase the size of\nthe binary by comparison to Option 1.\n",
                "id": "2751731e-7d18-46a1-aaea-b5734bf51c80"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[Serde]: https://docs.rs/serde/1.0.188/serde/trait.Serialize.html\n[miniserde]: https://docs.rs/miniserde/0.1.34/miniserde/trait.Serialize.html"
        }
      ]
    },
    {
      "title": "Patterns and Matching",
      "file": "ch19-00-patterns.md",
      "elements": [
        {
          "kind": "text",
          "content": "_Patterns_ are a special syntax in Rust for matching against the structure of\ntypes, both complex and simple. Using patterns in conjunction with `match`\nexpressions and other constructs gives you more control over a program’s\ncontrol flow. A pattern consists of some combination of the following:"
        },
        {
          "kind": "text",
          "content": "- Literals\n- Destructured arrays, enums, structs, or tuples\n- Variables\n- Wildcards\n- Placeholders"
        },
        {
          "kind": "text",
          "content": "Some example patterns include `x`, `(a, 3)`, and `Some(Color::Red)`. In the\ncontexts in which patterns are valid, these components describe the shape of\ndata. Our program then matches values against the patterns to determine whether\nit has the correct shape of data to continue running a particular piece of code."
        },
        {
          "kind": "text",
          "content": "To use a pattern, we compare it to some value. If the pattern matches the\nvalue, we use the value parts in our code. Recall the `match` expressions in\nChapter 6 that used patterns, such as the coin-sorting machine example. If the\nvalue fits the shape of the pattern, we can use the named pieces. If it\ndoesn’t, the code associated with the pattern won’t run."
        },
        {
          "kind": "text",
          "content": "This chapter is a reference on all things related to patterns. We’ll cover the\nvalid places to use patterns, the difference between refutable and irrefutable\npatterns, and the different kinds of pattern syntax that you might see. By the\nend of the chapter, you’ll know how to use patterns to express many concepts in\na clear way."
        }
      ]
    },
    {
      "title": "All the Places Patterns Can Be Used",
      "file": "ch19-01-all-the-places-for-patterns.md",
      "elements": [
        {
          "kind": "text",
          "content": "Patterns pop up in a number of places in Rust, and you’ve been using them a lot\nwithout realizing it! This section discusses all the places where patterns are\nvalid."
        },
        {
          "kind": "text",
          "content": "### `match` Arms"
        },
        {
          "kind": "text",
          "content": "As discussed in Chapter 6, we use patterns in the arms of `match` expressions.\nFormally, `match` expressions are defined as the keyword `match`, a value to\nmatch on, and one or more match arms that consist of a pattern and an\nexpression to run if the value matches that arm’s pattern, like this:"
        },
        {
          "kind": "text",
          "content": "<!--\nManually formatted rather than using Markdown intentionally: Markdown does not\nsupport italicizing code in the body of a block like this!\n-->"
        },
        {
          "kind": "text",
          "content": "<pre><code>match <em>VALUE</em> {\n<em>PATTERN</em> => <em>EXPRESSION</em>,\n<em>PATTERN</em> => <em>EXPRESSION</em>,\n<em>PATTERN</em> => <em>EXPRESSION</em>,\n}</code></pre>"
        },
        {
          "kind": "text",
          "content": "For example, here's the `match` expression from Listing 6-5 that matches on an\n`Option<i32>` value in the variable `x`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "match x {\n    None => None,\n    Some(i) => Some(i + 1),\n}"
          }
        },
        {
          "kind": "text",
          "content": "The patterns in this `match` expression are the `None` and `Some(i)` to the\nleft of each arrow."
        },
        {
          "kind": "text",
          "content": "One requirement for `match` expressions is that they need to be _exhaustive_ in\nthe sense that all possibilities for the value in the `match` expression must\nbe accounted for. One way to ensure you’ve covered every possibility is to have\na catchall pattern for the last arm: for example, a variable name matching any\nvalue can never fail and thus covers every remaining case."
        },
        {
          "kind": "text",
          "content": "The particular pattern `_` will match anything, but it never binds to a\nvariable, so it’s often used in the last match arm. The `_` pattern can be\nuseful when you want to ignore any value not specified, for example. We’ll cover\nthe `_` pattern in more detail in [“Ignoring Values in a\nPattern”][ignoring-values-in-a-pattern]<!-- ignore --> later in this chapter."
        },
        {
          "kind": "text",
          "content": "### Conditional `if let` Expressions"
        },
        {
          "kind": "text",
          "content": "In Chapter 6, we discussed how to use `if let` expressions mainly as a shorter\nway to write the equivalent of a `match` that only matches one case.\nOptionally, `if let` can have a corresponding `else` containing code to run if\nthe pattern in the `if let` doesn’t match."
        },
        {
          "kind": "text",
          "content": "Listing 19-1 shows that it’s also possible to mix and match `if let`, `else\nif`, and `else if let` expressions. Doing so gives us more flexibility than a\n`match` expression in which we can express only one value to compare with the\npatterns. Also, Rust doesn't require that the conditions in a series of `if\nlet`, `else if`, `else if let` arms relate to each other."
        },
        {
          "kind": "text",
          "content": "The code in Listing 19-1 determines what color to make your background based on\na series of checks for several conditions. For this example, we’ve created\nvariables with hardcoded values that a real program might receive from user\ninput."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-1\" file-name=\"src/main.rs\" caption=\"Mixing `if let`, `else if`, `else if let`, and `else`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If the user specifies a favorite color, that color is used as the background.\nIf no favorite color is specified and today is Tuesday, the background color is\ngreen. Otherwise, if the user specifies their age as a string and we can parse\nit as a number successfully, the color is either purple or orange depending on\nthe value of the number. If none of these conditions apply, the background\ncolor is blue."
        },
        {
          "kind": "text",
          "content": "This conditional structure lets us support complex requirements. With the\nhardcoded values we have here, this example will print `Using purple as the\nbackground color`."
        },
        {
          "kind": "text",
          "content": "You can see that `if let` can also introduce new variables that shadow existing\nvariables in the same way that `match` arms can: the line `if let Ok(age) = age`\nintroduces a new `age` variable that contains the value inside the `Ok` variant,\nshadowing the existing `age` variable. This means we need to place the `if age >\n30` condition within that block: we can’t combine these two conditions into `if\nlet Ok(age) = age && age > 30`. The new `age` we want to compare to 30 isn’t\nvalid until the new scope starts with the curly bracket."
        },
        {
          "kind": "text",
          "content": "The downside of using `if let` expressions is that the compiler doesn’t check\nfor exhaustiveness, whereas with `match` expressions it does. If we omitted the\nlast `else` block and therefore missed handling some cases, the compiler would\nnot alert us to the possible logic bug."
        },
        {
          "kind": "text",
          "content": "### `while let` Conditional Loops"
        },
        {
          "kind": "text",
          "content": "Similar in construction to `if let`, the `while let` conditional loop allows a\n`while` loop to run for as long as a pattern continues to match. In Listing 19-2\nwe show a `while let` loop that waits on messages sent between threads, but in\nthis case checking a `Result` instead of an `Option`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-2\" caption=\"Using a `while let` loop to print values for as long as `rx.recv()` returns `Ok`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This example prints `1`, `2`, and then `3`. The `recv` method takes the first\nmessage out of the receiver side of the channel and returns an `Ok(value)`. When\nwe first saw `recv` back in Chapter 16, we unwrapped the error directly, or\ninteracted with it as an iterator using a `for` loop. As Listing 19-2 shows,\nthough, we can also use `while let`, because the `recv` method returns `Ok` each\ntime a message arrives, as long as the sender exists, and then produces an `Err`\nonce the sender side disconnects."
        },
        {
          "kind": "text",
          "content": "### `for` Loops"
        },
        {
          "kind": "text",
          "content": "In a `for` loop, the value that directly follows the keyword `for` is a\npattern. For example, in `for x in y`, the `x` is the pattern. Listing 19-3\ndemonstrates how to use a pattern in a `for` loop to destructure, or break\napart, a tuple as part of the `for` loop."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-3\" caption=\"Using a pattern in a `for` loop to destructure a tuple\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The code in Listing 19-3 will print the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch19-patterns-and-matching/listing-19-03/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "We adapt an iterator using the `enumerate` method so it produces a value and\nthe index for that value, placed into a tuple. The first value produced is the\ntuple `(0, 'a')`. When this value is matched to the pattern `(index, value)`,\n`index` will be `0` and `value` will be `'a'`, printing the first line of the\noutput."
        },
        {
          "kind": "text",
          "content": "### `let` Statements"
        },
        {
          "kind": "text",
          "content": "Prior to this chapter, we had only explicitly discussed using patterns with\n`match` and `if let`, but in fact, we’ve used patterns in other places as well,\nincluding in `let` statements. For example, consider this straightforward\nvariable assignment with `let`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let x = 5;"
          }
        },
        {
          "kind": "text",
          "content": "Every time you've used a `let` statement like this you've been using patterns,\nalthough you might not have realized it! More formally, a `let` statement looks\nlike this:"
        },
        {
          "kind": "text",
          "content": "<!--\nManually formatted rather than using Markdown intentionally: Markdown does not\nsupport italicizing code in the body of a block like this!\n-->"
        },
        {
          "kind": "text",
          "content": "<pre>\n<code>let <em>PATTERN</em> = <em>EXPRESSION</em>;</code>\n</pre>"
        },
        {
          "kind": "text",
          "content": "In statements like `let x = 5;` with a variable name in the _`PATTERN`_ slot,\nthe variable name is just a particularly simple form of a pattern. Rust compares\nthe expression against the pattern and assigns any names it finds. So, in the\n`let x = 5;` example, `x` is a pattern that means “bind what matches here to the\nvariable `x`.” Because the name `x` is the whole pattern, this pattern\neffectively means “bind everything to the variable `x`, whatever the value is.”"
        },
        {
          "kind": "text",
          "content": "To see the pattern-matching aspect of `let` more clearly, consider Listing\n19-4, which uses a pattern with `let` to destructure a tuple."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-4\" caption=\"Using a pattern to destructure a tuple and create three variables at once\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we match a tuple against a pattern. Rust compares the value `(1, 2, 3)` to\nthe pattern `(x, y, z)` and sees that the value matches the pattern, in that the\nnumber of elements is the same in both, so Rust binds `1` to `x`, `2` to `y`,\nand `3` to `z`. You can think of this tuple pattern as nesting three individual\nvariable patterns inside it."
        },
        {
          "kind": "text",
          "content": "If the number of elements in the pattern doesn’t match the number of elements\nin the tuple, the overall type won’t match and we’ll get a compiler error. For\nexample, Listing 19-5 shows an attempt to destructure a tuple with three\nelements into two variables, which won’t work."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-5\" caption=\"Incorrectly constructing a pattern whose variables don’t match the number of elements in the tuple\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Attempting to compile this code results in this type error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch19-patterns-and-matching/listing-19-05/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "To fix the error, we could ignore one or more of the values in the tuple using\n`_` or `..`, as you’ll see in the [“Ignoring Values in a\nPattern”][ignoring-values-in-a-pattern]<!-- ignore --> section. If the problem\nis that we have too many variables in the pattern, the solution is to make the\ntypes match by removing variables so the number of variables equals the number\nof elements in the tuple."
        },
        {
          "kind": "text",
          "content": "### Function Parameters"
        },
        {
          "kind": "text",
          "content": "Function parameters can also be patterns. The code in Listing 19-6, which\ndeclares a function named `foo` that takes one parameter named `x` of type\n`i32`, should by now look familiar."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-6\" caption=\"A function signature uses patterns in the parameters\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `x` part is a pattern! As we did with `let`, we could match a tuple in a\nfunction’s arguments to the pattern. Listing 19-7 splits the values in a tuple\nas we pass it to a function."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-7\" file-name=\"src/main.rs\" caption=\"A function with parameters that destructure a tuple\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-07/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code prints `Current location: (3, 5)`. The values `&(3, 5)` match the\npattern `&(x, y)`, so `x` is the value `3` and `y` is the value `5`."
        },
        {
          "kind": "text",
          "content": "We can also use patterns in closure parameter lists in the same way as in\nfunction parameter lists because closures are similar to functions, as discussed\nin Chapter 13."
        },
        {
          "kind": "text",
          "content": "At this point, you’ve seen several ways to use patterns, but patterns don’t work\nthe same in every place we can use them. In some places, the patterns must be\nirrefutable; in other circumstances, they can be refutable. We’ll discuss these\ntwo concepts next."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "214d5183-5a88-4f5e-a54b-09909bd50bf7",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let mut v = vec![(1, 2), (3, 4)].into_iter();\n    let mut sum = 0;    \n    while let Some(t) = v.next() {\n        let (_, n) = t;\n        sum += n;\n    }\n    println!(\"{sum}\");\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "6"
                },
                "context": " \nThis example provides a valid use of `while let` matching and `let` matching. Note that you\ncould combine them, e.g.\n\n```\nwhile let Some((_, n)) = v.next() {\n    /* ... */\n}\n```\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[ignoring-values-in-a-pattern]: ch19-03-pattern-syntax.html#ignoring-values-in-a-pattern"
        }
      ]
    },
    {
      "title": "Refutability: Whether a Pattern Might Fail to Match",
      "file": "ch19-02-refutability.md",
      "elements": [
        {
          "kind": "text",
          "content": "Patterns come in two forms: refutable and irrefutable. Patterns that will match\nfor any possible value passed are _irrefutable_. An example would be `x` in the\nstatement `let x = 5;` because `x` matches anything and therefore cannot fail\nto match. Patterns that can fail to match for some possible value are\n_refutable_. Here are some examples:"
        },
        {
          "kind": "text",
          "content": "<!-- BEGIN INTERVENTION: 3c29eb2d-cbe9-4a2c-99b8-aa5c6467c8b4 -->\n* In the expression `if let Some(x) = a_value`, then `Some(x)` is refutable. If the value in the `a_value` variable is `None` rather than\n`Some`, the `Some(x)` pattern will not match.\n* In the expression `if let &[x, ..] = a_slice`, then `&[x, ..]` is refutable. If the value in the `a_slice` variable has zero elements, the `&[x, ..]` pattern will not match.\n<!-- END INTERVENTION: 3c29eb2d-cbe9-4a2c-99b8-aa5c6467c8b4 -->"
        },
        {
          "kind": "text",
          "content": "Function parameters, `let` statements, and `for` loops can only accept\nirrefutable patterns because the program cannot do anything meaningful when\nvalues don’t match. The `if let` and `while let` expressions and the\n`let...else` statement accept refutable and irrefutable patterns, but the\ncompiler warns against irrefutable patterns because, by definition, they’re\nintended to handle possible failure: the functionality of a conditional is in\nits ability to perform differently depending on success or failure."
        },
        {
          "kind": "text",
          "content": "In general, you shouldn’t have to worry about the distinction between refutable\nand irrefutable patterns; however, you do need to be familiar with the concept\nof refutability so you can respond when you see it in an error message. In\nthose cases, you’ll need to change either the pattern or the construct you’re\nusing the pattern with, depending on the intended behavior of the code."
        },
        {
          "kind": "text",
          "content": "Let’s look at an example of what happens when we try to use a refutable pattern\nwhere Rust requires an irrefutable pattern and vice versa. Listing 19-8 shows a\n`let` statement, but for the pattern, we’ve specified `Some(x)`, a refutable\npattern. As you might expect, this code will not compile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-8\" caption=\"Attempting to use a refutable pattern with `let`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-08/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "If `some_option_value` were a `None` value, it would fail to match the pattern\n`Some(x)`, meaning the pattern is refutable. However, the `let` statement can\nonly accept an irrefutable pattern because there is nothing valid the code can\ndo with a `None` value. At compile time, Rust will complain that we’ve tried to\nuse a refutable pattern where an irrefutable pattern is required:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch19-patterns-and-matching/listing-19-08/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Because we didn’t cover (and couldn’t cover!) every valid value with the\npattern `Some(x)`, Rust rightfully produces a compiler error."
        },
        {
          "kind": "text",
          "content": "If we have a refutable pattern where an irrefutable pattern is needed, we can\nfix it by changing the code that uses the pattern: instead of using `let`, we\ncan use `if let`. Then if the pattern doesn’t match, the code will just skip\nthe code in the curly brackets, giving it a way to continue validly. Listing\n19-9 shows how to fix the code in Listing 19-8."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-9\" caption=\"Using `let...else` and a block with refutable patterns instead of `let`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve given the code an out! This code is perfectly valid now. However,\nif we give `if let` an irrefutable pattern (a pattern that will always\nmatch), such as `x`, as shown in Listing 19-10, the compiler will give a\nwarning."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-10\" caption=\"Attempting to use an irrefutable pattern with `if let`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-10/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Rust complains that it doesn’t make sense to use `if let` with an irrefutable\npattern:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch19-patterns-and-matching/listing-19-10/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "For this reason, match arms must use refutable patterns, except for the last\narm, which should match any remaining values with an irrefutable pattern. Rust\nallows us to use an irrefutable pattern in a `match` with only one arm, but\nthis syntax isn’t particularly useful and could be replaced with a simpler\n`let` statement."
        },
        {
          "kind": "text",
          "content": "Now that you know where to use patterns and the difference between refutable\nand irrefutable patterns, let’s cover all the syntax we can use to create\npatterns."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "35e59c95-3d83-4277-8d88-a1986f4086d7",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider pattern-matching on an expression of some type `T`.\nWhich of these statements best describes the difference between a refutable and an irrefutable pattern?\n",
                  "distractors": [
                    "Refutable patterns match some values of a different type `S`, while irrefutable patterns only match values of type `T`",
                    "Refutable patterns do not match any values of type `T`, while irrefutable patterns match some values of type `T`",
                    "Refutable patterns are patterns where `T` is an enum, while irrefutable patterns are patterns where `T` is not an enum"
                  ]
                },
                "answer": {
                  "answer": "Refutable patterns do not match some value of type `T`, while irrefutable patterns match all values of type `T`"
                },
                "context": "A pattern is refutable if there exists some value of the expected type that isn't matched by the pattern.\n"
              },
              {
                "id": "3c29eb2d-cbe9-4a2c-99b8-aa5c6467c8b4",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following program:\n\n```\nlet x: &[(i32, i32)] = &[(0, 1)];\n```\n\nWhich of the following are **refutable** patterns for `x`?\n",
                  "distractors": [
                    "`&[..]`",
                    "`_`"
                  ]
                },
                "answer": {
                  "answer": [
                    "`&[(x, y)]`",
                    "`&[(x, y), ..]`"
                  ]
                },
                "context": " \nA slice does not have a fixed length, so any pattern which asserts that\n`x` must have at least one element is refutable.\n"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Pattern Syntax",
      "file": "ch19-03-pattern-syntax.md",
      "elements": [
        {
          "kind": "text",
          "content": "In this section, we gather all the syntax that is valid in patterns and discuss\nwhy and when you might want to use each one."
        },
        {
          "kind": "text",
          "content": "### Matching Literals"
        },
        {
          "kind": "text",
          "content": "As you saw in Chapter 6, you can match patterns against literals directly. The\nfollowing code gives some examples:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/no-listing-01-literals/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code prints `one` because the value in `x` is 1. This syntax is useful\nwhen you want your code to take an action if it gets a particular concrete\nvalue."
        },
        {
          "kind": "text",
          "content": "### Matching Named Variables"
        },
        {
          "kind": "text",
          "content": "Named variables are irrefutable patterns that match any value, and we’ve used\nthem many times in this book. However, there is a complication when you use\nnamed variables in `match`, `if let`, or `while let` expressions. Because each\nof these kinds of expression starts a new scope, variables declared as part of a\npattern inside the expression will shadow those with the same name outside, as\nis the case with all variables. In Listing 19-11, we declare a variable named\n`x` with the value `Some(5)` and a variable `y` with the value `10`. We then\ncreate a `match` expression on the value `x`. Look at the patterns in the match\narms and `println!` at the end, and try to figure out what the code will print\nbefore running this code or reading further."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-11\" file-name=\"src/main.rs\" caption=\"A `match` expression with an arm that introduces a new variable which shadows an existing variable `y`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Let’s walk through what happens when the `match` expression runs. The pattern\nin the first match arm doesn’t match the defined value of `x`, so the code\ncontinues."
        },
        {
          "kind": "text",
          "content": "The pattern in the second match arm introduces a new variable named `y` that\nwill match any value inside a `Some` value. Because we’re in a new scope inside\nthe `match` expression, this is a new `y` variable, not the `y` we declared at\nthe beginning with the value `10`. This new `y` binding will match any value\ninside a `Some`, which is what we have in `x`. Therefore, this new `y` binds to\nthe inner value of the `Some` in `x`. That value is `5`, so the expression for\nthat arm executes and prints `Matched, y = 5`."
        },
        {
          "kind": "text",
          "content": "If `x` had been a `None` value instead of `Some(5)`, the patterns in the first\ntwo arms wouldn’t have matched, so the value would have matched to the\nunderscore. We didn’t introduce the `x` variable in the pattern of the\nunderscore arm, so the `x` in the expression is still the outer `x` that hasn’t\nbeen shadowed. In this hypothetical case, the `match` would print `Default\ncase, x = None`."
        },
        {
          "kind": "text",
          "content": "When the `match` expression is done, its scope ends, and so does the scope of\nthe inner `y`. The last `println!` produces `at the end: x = Some(5), y = 10`."
        },
        {
          "kind": "text",
          "content": "To create a `match` expression that compares the values of the outer `x` and\n`y`, rather than introducing a new variable that shadows the existing `y`\nvariable, we would need to use a match guard conditional instead. We’ll talk\nabout match guards later in [“Extra Conditionals with Match\nGuards”](#extra-conditionals-with-match-guards)<!-- ignore -->."
        },
        {
          "kind": "text",
          "content": "### Multiple Patterns"
        },
        {
          "kind": "text",
          "content": "You can match multiple patterns using the `|` syntax, which is the pattern _or_\noperator. For example, in the following code we match the value of `x` against\nthe match arms, the first of which has an _or_ option, meaning if the value of\n`x` matches either of the values in that arm, that arm’s code will run:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/no-listing-02-multiple-patterns/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code prints `one or two`."
        },
        {
          "kind": "text",
          "content": "### Matching Ranges of Values with `..=`"
        },
        {
          "kind": "text",
          "content": "The `..=` syntax allows us to match to an inclusive range of values. In the\nfollowing code, when a pattern matches any of the values within the given\nrange, that arm will execute:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/no-listing-03-ranges/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "If `x` is `1`, `2`, `3`, `4`, or `5`, the first arm will match. This syntax is\nmore convenient for multiple match values than using the `|` operator to express\nthe same idea; if we were to use `|` we would have to specify `1 | 2 | 3 | 4 |\n5`. Specifying a range is much shorter, especially if we want to match, say, any\nnumber between 1 and 1,000!"
        },
        {
          "kind": "text",
          "content": "The compiler checks that the range isn’t empty at compile time, and because the\nonly types for which Rust can tell if a range is empty or not are `char` and\nnumeric values, ranges are only allowed with numeric or `char` values."
        },
        {
          "kind": "text",
          "content": "Here is an example using ranges of `char` values:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/no-listing-04-ranges-of-char/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust can tell that `'c'` is within the first pattern’s range and prints `early\nASCII letter`."
        },
        {
          "kind": "text",
          "content": "### Destructuring to Break Apart Values"
        },
        {
          "kind": "text",
          "content": "We can also use patterns to destructure structs, enums, and tuples to use\ndifferent parts of these values. Let’s walk through each value."
        },
        {
          "kind": "text",
          "content": "#### Destructuring Structs"
        },
        {
          "kind": "text",
          "content": "Listing 19-12 shows a `Point` struct with two fields, `x` and `y`, that we can\nbreak apart using a pattern with a `let` statement."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-12\" file-name=\"src/main.rs\" caption=\"Destructuring a struct’s fields into separate variables\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-12/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code creates the variables `a` and `b` that match the values of the `x`\nand `y` fields of the `p` struct. This example shows that the names of the\nvariables in the pattern don’t have to match the field names of the struct.\nHowever, it’s common to match the variable names to the field names to make it\neasier to remember which variables came from which fields. Because of this\ncommon usage, and because writing `let Point { x: x, y: y } = p;` contains a\nlot of duplication, Rust has a shorthand for patterns that match struct fields:\nyou only need to list the name of the struct field, and the variables created\nfrom the pattern will have the same names. Listing 19-13 behaves in the same\nway as the code in Listing 19-12, but the variables created in the `let`\npattern are `x` and `y` instead of `a` and `b`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-13\" file-name=\"src/main.rs\" caption=\"Destructuring struct fields using struct field shorthand\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-13/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code creates the variables `x` and `y` that match the `x` and `y` fields\nof the `p` variable. The outcome is that the variables `x` and `y` contain the\nvalues from the `p` struct."
        },
        {
          "kind": "text",
          "content": "We can also destructure with literal values as part of the struct pattern\nrather than creating variables for all the fields. Doing so allows us to test\nsome of the fields for particular values while creating variables to\ndestructure the other fields."
        },
        {
          "kind": "text",
          "content": "In Listing 19-14, we have a `match` expression that separates `Point` values\ninto three cases: points that lie directly on the `x` axis (which is true when\n`y = 0`), on the `y` axis (`x = 0`), or on neither axis."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-14\" file-name=\"src/main.rs\" caption=\"Destructuring and matching literal values in one pattern\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-14/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The first arm will match any point that lies on the `x` axis by specifying that\nthe `y` field matches if its value matches the literal `0`. The pattern still\ncreates an `x` variable that we can use in the code for this arm."
        },
        {
          "kind": "text",
          "content": "Similarly, the second arm matches any point on the `y` axis by specifying that\nthe `x` field matches if its value is `0` and creates a variable `y` for the\nvalue of the `y` field. The third arm doesn’t specify any literals, so it\nmatches any other `Point` and creates variables for both the `x` and `y` fields."
        },
        {
          "kind": "text",
          "content": "In this example, the value `p` matches the second arm by virtue of `x`\ncontaining a `0`, so this code will print `On the y axis at 7`."
        },
        {
          "kind": "text",
          "content": "Remember that a `match` expression stops checking arms once it has found the\nfirst matching pattern, so even though `Point { x: 0, y: 0}` is on the `x` axis\nand the `y` axis, this code would only print `On the x axis at 0`."
        },
        {
          "kind": "text",
          "content": "#### Destructuring Enums"
        },
        {
          "kind": "text",
          "content": "We've destructured enums in this book (for example, Listing 6-5), but we haven’t\nyet explicitly discussed that the pattern to destructure an enum corresponds to\nthe way the data stored within the enum is defined. As an example, in Listing\n19-15 we use the `Message` enum from Listing 6-2 and write a `match` with\npatterns that will destructure each inner value."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-15\" file-name=\"src/main.rs\" caption=\"Destructuring enum variants that hold different kinds of values\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-15/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print `Change color to red 0, green 160, and blue 255`. Try\nchanging the value of `msg` to see the code from the other arms run."
        },
        {
          "kind": "text",
          "content": "For enum variants without any data, like `Message::Quit`, we can’t destructure\nthe value any further. We can only match on the literal `Message::Quit` value,\nand no variables are in that pattern."
        },
        {
          "kind": "text",
          "content": "For struct-like enum variants, such as `Message::Move`, we can use a pattern\nsimilar to the pattern we specify to match structs. After the variant name, we\nplace curly brackets and then list the fields with variables so we break apart\nthe pieces to use in the code for this arm. Here we use the shorthand form as\nwe did in Listing 19-13."
        },
        {
          "kind": "text",
          "content": "For tuple-like enum variants, like `Message::Write` that holds a tuple with one\nelement and `Message::ChangeColor` that holds a tuple with three elements, the\npattern is similar to the pattern we specify to match tuples. The number of\nvariables in the pattern must match the number of elements in the variant we’re\nmatching."
        },
        {
          "kind": "text",
          "content": "#### Destructuring Nested Structs and Enums"
        },
        {
          "kind": "text",
          "content": "So far, our examples have all been matching structs or enums one level deep,\nbut matching can work on nested items too! For example, we can refactor the\ncode in Listing 19-15 to support RGB and HSV colors in the `ChangeColor`\nmessage, as shown in Listing 19-16."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-16\" caption=\"Matching on nested enums\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-16/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The pattern of the first arm in the `match` expression matches a\n`Message::ChangeColor` enum variant that contains a `Color::Rgb` variant; then\nthe pattern binds to the three inner `i32` values. The pattern of the second\narm also matches a `Message::ChangeColor` enum variant, but the inner enum\nmatches `Color::Hsv` instead. We can specify these complex conditions in one\n`match` expression, even though two enums are involved."
        },
        {
          "kind": "text",
          "content": "#### Destructuring Structs and Tuples"
        },
        {
          "kind": "text",
          "content": "We can mix, match, and nest destructuring patterns in even more complex ways.\nThe following example shows a complicated destructure where we nest structs and\ntuples inside a tuple and destructure all the primitive values out:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/no-listing-05-destructuring-structs-and-tuples/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code lets us break complex types into their component parts so we can use\nthe values we’re interested in separately."
        },
        {
          "kind": "text",
          "content": "Destructuring with patterns is a convenient way to use pieces of values, such\nas the value from each field in a struct, separately from each other."
        },
        {
          "kind": "text",
          "content": "### Ignoring Values in a Pattern"
        },
        {
          "kind": "text",
          "content": "You’ve seen that it’s sometimes useful to ignore values in a pattern, such as\nin the last arm of a `match`, to get a catchall that doesn’t actually do\nanything but does account for all remaining possible values. There are a few\nways to ignore entire values or parts of values in a pattern: using the `_`\npattern (which you’ve seen), using the `_` pattern within another pattern,\nusing a name that starts with an underscore, or using `..` to ignore remaining\nparts of a value. Let’s explore how and why to use each of these patterns."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"ignoring-an-entire-value-with-_\"></a>"
        },
        {
          "kind": "text",
          "content": "#### An Entire Value with `_`"
        },
        {
          "kind": "text",
          "content": "We’ve used the underscore as a wildcard pattern that will match any value but\nnot bind to the value. This is especially useful as the last arm in a `match`\nexpression, but we can also use it in any pattern, including function\nparameters, as shown in Listing 19-17."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-17\" file-name=\"src/main.rs\" caption=\"Using `_` in a function signature\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-17/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will completely ignore the value `3` passed as the first argument,\nand will print `This code only uses the y parameter: 4`."
        },
        {
          "kind": "text",
          "content": "In most cases when you no longer need a particular function parameter, you\nwould change the signature so it doesn’t include the unused parameter. Ignoring\na function parameter can be especially useful in cases when, for example,\nyou're implementing a trait where you need a certain type signature but the\nfunction body in your implementation doesn’t need one of the parameters. You\nthen avoid getting a compiler warning about unused function parameters, as you\nwould if you used a name instead."
        },
        {
          "kind": "text",
          "content": "<a id=\"ignoring-parts-of-a-value-with-a-nested-_\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Parts of a Value with a Nested `_`"
        },
        {
          "kind": "text",
          "content": "We can also use `_` inside another pattern to ignore just part of a value, for\nexample, when we want to test for only part of a value but have no use for the\nother parts in the corresponding code we want to run. Listing 19-18 shows code\nresponsible for managing a setting’s value. The business requirements are that\nthe user should not be allowed to overwrite an existing customization of a\nsetting but can unset the setting and give it a value if it is currently unset."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-18\" caption=\" Using an underscore within patterns that match `Some` variants when we don’t need to use the value inside the `Some`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-18/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print `Can't overwrite an existing customized value` and then\n`setting is Some(5)`. In the first match arm, we don’t need to match on or use\nthe values inside either `Some` variant, but we do need to test for the case\nwhen `setting_value` and `new_setting_value` are the `Some` variant. In that\ncase, we print the reason for not changing `setting_value`, and it doesn’t get\nchanged."
        },
        {
          "kind": "text",
          "content": "In all other cases (if either `setting_value` or `new_setting_value` is `None`)\nexpressed by the `_` pattern in the second arm, we want to allow\n`setting_value` to be set to `new_setting_value`."
        },
        {
          "kind": "text",
          "content": "We can also use underscores in multiple places within one pattern to ignore\nparticular values. Listing 19-19 shows an example of ignoring the second and\nfourth values in a tuple of five items."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-19\" caption=\"Ignoring multiple parts of a tuple\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-19/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print `Some numbers: 2, 8, 32`, and the values `4` and `16` will\nbe ignored."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"ignoring-an-unused-variable-by-starting-its-name-with-_\"></a>"
        },
        {
          "kind": "text",
          "content": "#### An Unused Variable by Starting Its Name with `_`"
        },
        {
          "kind": "text",
          "content": "If you create a variable but don’t use it anywhere, Rust will usually issue a\nwarning because an unused variable could be a bug. However, sometimes it’s\nuseful to be able to create a variable you won’t use yet, such as when you’re\nprototyping or just starting a project. In this situation, you can tell Rust\nnot to warn you about the unused variable by starting the name of the variable\nwith an underscore. In Listing 19-20, we create two unused variables, but when\nwe compile this code, we should only get a warning about one of them."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-20\" file-name=\"src/main.rs\" caption=\"Starting a variable name with an underscore to avoid getting unused variable warnings\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-20/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we get a warning about not using the variable `y`, but we don’t get a\nwarning about not using `_x`."
        },
        {
          "kind": "text",
          "content": "Note that there is a subtle difference between using only `_` and using a name\nthat starts with an underscore. The syntax `_x` still binds the value to the\nvariable, whereas `_` doesn’t bind at all. To show a case where this\ndistinction matters, Listing 19-21 will provide us with an error."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-21\" caption=\"An unused variable starting with an underscore still binds the value, which might take ownership of the value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-21/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ll receive an error because the `s` value will still be moved into `_s`,\nwhich prevents us from using `s` again. However, using the underscore by itself\ndoesn’t ever bind to the value. Listing 19-22 will compile without any errors\nbecause `s` doesn’t get moved into `_`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-22\" caption=\"Using an underscore does not bind the value\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-22/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code works just fine because we never bind `s` to anything; it isn’t moved."
        },
        {
          "kind": "text",
          "content": "<a id=\"ignoring-remaining-parts-of-a-value-with-\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Remaining Parts of a Value with `..`"
        },
        {
          "kind": "text",
          "content": "With values that have many parts, we can use the `..` syntax to use specific\nparts and ignore the rest, avoiding the need to list underscores for each\nignored value. The `..` pattern ignores any parts of a value that we haven’t\nexplicitly matched in the rest of the pattern. In Listing 19-23, we have a\n`Point` struct that holds a coordinate in three-dimensional space. In the\n`match` expression, we want to operate only on the `x` coordinate and ignore\nthe values in the `y` and `z` fields."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-23\" caption=\"Ignoring all fields of a `Point` except for `x` by using `..`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-23/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We list the `x` value and then just include the `..` pattern. This is quicker\nthan having to list `y: _` and `z: _`, particularly when we’re working with\nstructs that have lots of fields in situations where only one or two fields are\nrelevant."
        },
        {
          "kind": "text",
          "content": "The syntax `..` will expand to as many values as it needs to be. Listing 19-24\nshows how to use `..` with a tuple."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-24\" file-name=\"src/main.rs\" caption=\"Matching only the first and last values in a tuple and ignoring all other values\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-24/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In this code, the first and last value are matched with `first` and `last`. The\n`..` will match and ignore everything in the middle."
        },
        {
          "kind": "text",
          "content": "However, using `..` must be unambiguous. If it is unclear which values are\nintended for matching and which should be ignored, Rust will give us an error.\nListing 19-25 shows an example of using `..` ambiguously, so it will not\ncompile."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-25\" file-name=\"src/main.rs\" caption=\"An attempt to use `..` in an ambiguous way\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-25/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we compile this example, we get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch19-patterns-and-matching/listing-19-25/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "It’s impossible for Rust to determine how many values in the tuple to ignore\nbefore matching a value with `second` and then how many further values to\nignore thereafter. This code could mean that we want to ignore `2`, bind\n`second` to `4`, and then ignore `8`, `16`, and `32`; or that we want to ignore\n`2` and `4`, bind `second` to `8`, and then ignore `16` and `32`; and so forth.\nThe variable name `second` doesn’t mean anything special to Rust, so we get a\ncompiler error because using `..` in two places like this is ambiguous."
        },
        {
          "kind": "text",
          "content": "### Extra Conditionals with Match Guards"
        },
        {
          "kind": "text",
          "content": "A _match guard_ is an additional `if` condition, specified after the pattern in\na `match` arm, that must also match for that arm to be chosen. Match guards are\nuseful for expressing more complex ideas than a pattern alone allows. Note,\nhowever, that they are only available in `match` expressions, not in `if let` or\n`while let` expressions."
        },
        {
          "kind": "text",
          "content": "The condition can use variables created in the pattern. Listing 19-26 shows a\n`match` where the first arm has the pattern `Some(x)` and also has a match\nguard of `if x % 2 == 0` (which will be `true` if the number is even)."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-26\" caption=\"Adding a match guard to a pattern\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-26/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This example will print `The number 4 is even`. When `num` is compared to the\npattern in the first arm, it matches because `Some(4)` matches `Some(x)`. Then\nthe match guard checks whether the remainder of dividing `x` by 2 is equal to\n0, and because it is, the first arm is selected."
        },
        {
          "kind": "text",
          "content": "If `num` had been `Some(5)` instead, the match guard in the first arm would\nhave been `false` because the remainder of 5 divided by 2 is 1, which is not\nequal to 0. Rust would then go to the second arm, which would match because the\nsecond arm doesn’t have a match guard and therefore matches any `Some` variant."
        },
        {
          "kind": "text",
          "content": "There is no way to express the `if x % 2 == 0` condition within a pattern, so\nthe match guard gives us the ability to express this logic. The downside of\nthis additional expressiveness is that arms with match guards don't \"count\" towards\nexhaustiveness. So even if we added `Some(x) if x % 2 == 1` as an additional arm, we would still\nneed the un-guarded `Some(x)` arm."
        },
        {
          "kind": "text",
          "content": "In Listing 19-11, we mentioned that we could use match guards to solve our\npattern-shadowing problem. Recall that we created a new variable inside the\npattern in the `match` expression instead of using the variable outside the\n`match`. That new variable meant we couldn’t test against the value of the\nouter variable. Listing 19-27 shows how we can use a match guard to fix this\nproblem."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-27\" file-name=\"src/main.rs\" caption=\"Using a match guard to test for equality with an outer variable\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-27/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will now print `Default case, x = Some(5)`. The pattern in the second\nmatch arm doesn’t introduce a new variable `y` that would shadow the outer `y`,\nmeaning we can use the outer `y` in the match guard. Instead of specifying the\npattern as `Some(y)`, which would have shadowed the outer `y`, we specify\n`Some(n)`. This creates a new variable `n` that doesn’t shadow anything because\nthere is no `n` variable outside the `match`."
        },
        {
          "kind": "text",
          "content": "The match guard `if n == y` is not a pattern and therefore doesn’t introduce new\nvariables. This `y` _is_ the outer `y` rather than a new `y` shadowing it, and\nwe can look for a value that has the same value as the outer `y` by comparing\n`n` to `y`."
        },
        {
          "kind": "text",
          "content": "You can also use the _or_ operator `|` in a match guard to specify multiple\npatterns; the match guard condition will apply to all the patterns. Listing\n19-28 shows the precedence when combining a pattern that uses `|` with a match\nguard. The important part of this example is that the `if y` match guard\napplies to `4`, `5`, _and_ `6`, even though it might look like `if y` only\napplies to `6`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-28\" caption=\"Combining multiple patterns with a match guard\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-28/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The match condition states that the arm only matches if the value of `x` is\nequal to `4`, `5`, or `6` _and_ if `y` is `true`. When this code runs, the\npattern of the first arm matches because `x` is `4`, but the match guard `if y`\nis `false`, so the first arm is not chosen. The code moves on to the second arm,\nwhich does match, and this program prints `no`. The reason is that the `if`\ncondition applies to the whole pattern `4 | 5 | 6`, not just to the last value\n`6`. In other words, the precedence of a match guard in relation to a pattern\nbehaves like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "(4 | 5 | 6) if y => ..."
          }
        },
        {
          "kind": "text",
          "content": "rather than this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "4 | 5 | (6 if y) => ..."
          }
        },
        {
          "kind": "text",
          "content": "After running the code, the precedence behavior is evident: if the match guard\nwere applied only to the final value in the list of values specified using the\n`|` operator, the arm would have matched and the program would have printed\n`yes`."
        },
        {
          "kind": "text",
          "content": "### `@` Bindings"
        },
        {
          "kind": "text",
          "content": "The _at_ operator `@` lets us create a variable that holds a value at the same\ntime we’re testing that value for a pattern match. In Listing 19-29, we want\nto test that a `Message::Hello` `id` field is within the range `3..=7`. We also\nwant to bind the value to the variable `id_variable` so we can use it in the\ncode associated with the arm. We could name this variable `id`, the same as the\nfield, but for this example we’ll use a different name."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"19-29\" caption=\"Using `@` to bind to a value in a pattern while also testing it\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch19-patterns-and-matching/listing-19-29/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This example will print `Found an id in range: 5`. By specifying `id_variable\n@` before the range `3..=7`, we’re capturing whatever value matched the range\nwhile also testing that the value matched the range pattern."
        },
        {
          "kind": "text",
          "content": "In the second arm, where we only have a range specified in the pattern, the code\nassociated with the arm doesn’t have a variable that contains the actual value\nof the `id` field. The `id` field’s value could have been 10, 11, or 12, but\nthe code that goes with that pattern doesn’t know which it is. The pattern code\nisn’t able to use the value from the `id` field, because we haven’t saved the\n`id` value in a variable."
        },
        {
          "kind": "text",
          "content": "In the last arm, where we’ve specified a variable without a range, we do have\nthe value available to use in the arm’s code in a variable named `id`. The\nreason is that we’ve used the struct field shorthand syntax. But we haven’t\napplied any test to the value in the `id` field in this arm, as we did with the\nfirst two arms: any value would match this pattern."
        },
        {
          "kind": "text",
          "content": "Using `@` lets us test a value and save it in a variable within one pattern."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "5dcd923f-13a4-4181-b252-4b580547249f",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let x = (0, 1);\n    match x {\n        (_, y) if y == 0 => println!(\"A\"),\n        (0, _) => println!(\"B\"),\n        _ => println!(\"C\")\n    }\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "B"
                },
                "context": "The first branch matches `y = 1`, which means `y != 0`, so the pattern fails.\nThe second branch requires that `x == 0`, which is true, so the pattern succeeds.\n"
              },
              {
                "id": "ac0045c7-981a-46cb-baeb-adaa533804ad",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider the following program:\n\n```\nlet a = [(0, 1)];\nlet ?? = a;\n```\n\nWhich of the following are valid patterns that could replace the `??` placeholder?\n",
                  "distractors": [
                    "`(_, n)`"
                  ]
                },
                "answer": {
                  "answer": [
                    "`_`",
                    "`[(n, ..)]`",
                    "`[..]`"
                  ]
                },
                "context": " \nThe pattern `(_, n)` is not valid because `a` is an array of tuples, not a tuple itself.\n"
              },
              {
                "id": "0b0d90c3-c81b-4b81-9e1b-f8bd58a22c6c",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let x = Some(&[0, 1]);\n    match x {\n        Some(&[.., 1, ..]) => println!(\"A\"),\n        Some(&[0, 1]) | None => println!(\"B\"),\n        _ => println!(\"C\")\n    }\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 4
                },
                "context": "It is not valid to use `..` on both sides of a value, since it is ambiguous which\narray element is being referred to.\n"
              },
              {
                "id": "a7d38ffa-66b2-472a-90a5-b026b28ad3df",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Say we have a `Point` type with the following definition:\n\n```\nstruct Point {\n    x: i32,\n    y: i32\n}\n```\n\nGiven the following pattern:\n\n```\nPoint { x: x @ 0 ..= 5, y } if x + y != 0\n```\n\nWhich of the following values will match this pattern?\n",
                  "distractors": [
                    "`Point { x: -1, y: 2 }`",
                    "`Point { x: 3, y: -3 }`"
                  ]
                },
                "answer": {
                  "answer": [
                    "`Point { x: 5, y: -4 }`",
                    "`Point { x: 0, y: 1 }`"
                  ]
                },
                "context": "This pattern specifies that `x` must be between 0 and 5 (inclusive), and that `x + y != 0`.\nTherefore `(5, -4)` and `(0, 1)` are valid, while `(-1, 2)` and `(3, -3)` are not.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Rust’s patterns are very useful in distinguishing between different kinds of\ndata. When used in `match` expressions, Rust ensures your patterns cover every\npossible value, or your program won’t compile. Patterns in `let` statements and\nfunction parameters make those constructs more useful, enabling the\ndestructuring of values into smaller parts at the same time as assigning those\nparts to variables. We can create simple or complex patterns to suit our needs."
        },
        {
          "kind": "text",
          "content": "Next, for the penultimate chapter of the book, we’ll look at some advanced\naspects of a variety of Rust’s features."
        }
      ]
    },
    {
      "title": "Advanced Features",
      "file": "ch20-00-advanced-features.md",
      "elements": [
        {
          "kind": "text",
          "content": "By now, you’ve learned the most commonly used parts of the Rust programming\nlanguage. Before we do one more project in Chapter 21, we’ll look at a few\naspects of the language you might run into every once in a while, but may not\nuse every day. You can use this chapter as a reference for when you encounter\nany unknowns. The features covered here are useful in very specific situations.\nAlthough you might not reach for them often, we want to make sure you have a\ngrasp of all the features Rust has to offer."
        },
        {
          "kind": "text",
          "content": "In this chapter, we’ll cover:"
        },
        {
          "kind": "text",
          "content": "- Unsafe Rust: how to opt out of some of Rust’s guarantees and take\nresponsibility for manually upholding those guarantees\n- Advanced traits: associated types, default type parameters, fully qualified\nsyntax, supertraits, and the newtype pattern in relation to traits\n- Advanced types: more about the newtype pattern, type aliases, the never type,\nand dynamically sized types\n- Advanced functions and closures: function pointers and returning closures\n- Macros: ways to define code that defines more code at compile time"
        },
        {
          "kind": "text",
          "content": "It’s a panoply of Rust features with something for everyone! Let’s dive in!"
        }
      ]
    },
    {
      "title": "Unsafe Rust",
      "file": "ch20-01-unsafe-rust.md",
      "elements": [
        {
          "kind": "text",
          "content": "All the code we’ve discussed so far has had Rust’s memory safety guarantees\nenforced at compile time. However, Rust has a second language hidden inside it\nthat doesn’t enforce these memory safety guarantees: it’s called _unsafe Rust_\nand works just like regular Rust, but gives us extra superpowers."
        },
        {
          "kind": "text",
          "content": "Unsafe Rust exists because, by nature, static analysis is conservative. When\nthe compiler tries to determine whether or not code upholds the guarantees,\nit’s better for it to reject some valid programs than to accept some invalid\nprograms. Although the code _might_ be okay, if the Rust compiler doesn’t have\nenough information to be confident, it will reject the code. In these cases,\nyou can use unsafe code to tell the compiler, “Trust me, I know what I’m\ndoing.” Be warned, however, that you use unsafe Rust at your own risk: if you\nuse unsafe code incorrectly, problems can occur due to memory unsafety, such as\nnull pointer dereferencing."
        },
        {
          "kind": "text",
          "content": "Another reason Rust has an unsafe alter ego is that the underlying computer\nhardware is inherently unsafe. If Rust didn’t let you do unsafe operations, you\ncouldn’t do certain tasks. Rust needs to allow you to do low-level systems\nprogramming, such as directly interacting with the operating system or even\nwriting your own operating system. Working with low-level systems programming\nis one of the goals of the language. Let’s explore what we can do with unsafe\nRust and how to do it."
        },
        {
          "kind": "text",
          "content": "### Unsafe Superpowers"
        },
        {
          "kind": "text",
          "content": "To switch to unsafe Rust, use the `unsafe` keyword and then start a new block\nthat holds the unsafe code. You can take five actions in unsafe Rust that you\ncan’t in safe Rust, which we call _unsafe superpowers_. Those superpowers\ninclude the ability to:"
        },
        {
          "kind": "text",
          "content": "- Dereference a raw pointer\n- Call an unsafe function or method\n- Access or modify a mutable static variable\n- Implement an unsafe trait\n- Access fields of a `union`"
        },
        {
          "kind": "text",
          "content": "It’s important to understand that `unsafe` doesn’t turn off the borrow checker\nor disable any of Rust’s other safety checks: if you use a reference in unsafe\ncode, it will still be checked. The `unsafe` keyword only gives you access to\nthese five features that are then not checked by the compiler for memory\nsafety. You’ll still get some degree of safety inside of an unsafe block."
        },
        {
          "kind": "text",
          "content": "In addition, `unsafe` does not mean the code inside the block is necessarily\ndangerous or that it will definitely have memory safety problems: the intent is\nthat as the programmer, you’ll ensure the code inside an `unsafe` block will\naccess memory in a valid way."
        },
        {
          "kind": "text",
          "content": "People are fallible and mistakes will happen, but by requiring these five\nunsafe operations to be inside blocks annotated with `unsafe`, you’ll know that\nany errors related to memory safety must be within an `unsafe` block. Keep\n`unsafe` blocks small; you’ll be thankful later when you investigate memory\nbugs."
        },
        {
          "kind": "text",
          "content": "To isolate unsafe code as much as possible, it’s best to enclose such code\nwithin a safe abstraction and provide a safe API, which we’ll discuss later in\nthe chapter when we examine unsafe functions and methods. Parts of the standard\nlibrary are implemented as safe abstractions over unsafe code that has been\naudited. Wrapping unsafe code in a safe abstraction prevents uses of `unsafe`\nfrom leaking out into all the places that you or your users might want to use\nthe functionality implemented with `unsafe` code, because using a safe\nabstraction is safe."
        },
        {
          "kind": "text",
          "content": "Let’s look at each of the five unsafe superpowers in turn. We’ll also look at\nsome abstractions that provide a safe interface to unsafe code."
        },
        {
          "kind": "text",
          "content": "### Dereferencing a Raw Pointer"
        },
        {
          "kind": "text",
          "content": "In [“The Borrow Checker Finds Permission Violations”][permission-violations]<!-- ignore --> in Chapter 4, we\ndescribed how the compiler ensures references are always valid. Unsafe Rust has\ntwo new types called _raw pointers_ that are similar to references. As with\nreferences, raw pointers can be immutable or mutable and are written as `*const\nT` and `*mut T`, respectively. The asterisk isn’t the dereference operator; it’s\npart of the type name. In the context of raw pointers, _immutable_ means that\nthe pointer can’t be directly assigned to after being dereferenced."
        },
        {
          "kind": "text",
          "content": "Different from references and smart pointers, raw pointers:"
        },
        {
          "kind": "text",
          "content": "- Are allowed to ignore the borrowing rules by having both immutable and\nmutable pointers or multiple mutable pointers to the same location\n- Aren’t guaranteed to point to valid memory\n- Are allowed to be null\n- Don’t implement any automatic cleanup"
        },
        {
          "kind": "text",
          "content": "By opting out of having Rust enforce these guarantees, you can give up\nguaranteed safety in exchange for greater performance or the ability to\ninterface with another language or hardware where Rust’s guarantees don’t apply."
        },
        {
          "kind": "text",
          "content": "Listing 20-1 shows how to create an immutable and a mutable raw pointer."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-1\" caption=\"Creating raw pointers with the raw borrow operators\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-01/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Notice that we don’t include the `unsafe` keyword in this code. We can create\nraw pointers in safe code; we just can’t dereference raw pointers outside an\nunsafe block, as you’ll see in a bit."
        },
        {
          "kind": "text",
          "content": "We’ve created raw pointers by using the raw borrow operators: `&raw const num`\ncreates a `*const i32` immutable raw pointer, and `&raw mut num` creates a `*mut\ni32` mutable raw pointer. Because we created them directly from a local\nvariable, we know these particular raw pointers are valid, but we can’t make\nthat assumption about just any raw pointer."
        },
        {
          "kind": "text",
          "content": "To demonstrate this, next we’ll create a raw pointer whose validity we can’t be\nso certain of, using `as` to cast a value instead of using the raw borrow\noperators. Listing 20-2 shows how to create a raw pointer to an arbitrary\nlocation in memory. Trying to use arbitrary memory is undefined: there might be\ndata at that address or there might not, the compiler might optimize the code so\nthere is no memory access, or the program might terminate with a segmentation\nfault. Usually, there is no good reason to write code like this, especially in\ncases where you can use a raw borrow operator instead, but it is possible."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-2\" caption=\"Creating a raw pointer to an arbitrary memory address\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-02/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Recall that we can create raw pointers in safe code, but we can’t _dereference_\nraw pointers and read the data being pointed to. In Listing 20-3, we use the\ndereference operator `*` on a raw pointer that requires an `unsafe` block."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-3\" caption=\"Dereferencing raw pointers within an `unsafe` block\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Creating a pointer does no harm; it’s only when we try to access the value that\nit points at that we might end up dealing with an invalid value."
        },
        {
          "kind": "text",
          "content": "Note also that in Listing 20-1 and 20-3, we created `*const i32` and `*mut i32`\nraw pointers that both pointed to the same memory location, where `num` is\nstored. If we instead tried to create an immutable and a mutable reference to\n`num`, the code would not have compiled because Rust’s ownership rules don’t\nallow a mutable reference at the same time as any immutable references. With\nraw pointers, we can create a mutable pointer and an immutable pointer to the\nsame location and change data through the mutable pointer, potentially creating\na data race. Be careful!"
        },
        {
          "kind": "text",
          "content": "With all of these dangers, why would you ever use raw pointers? One major use\ncase is when interfacing with C code, as you’ll see in the next section,\n[“Calling an Unsafe Function or\nMethod.”](#calling-an-unsafe-function-or-method)<!-- ignore --> Another case is\nwhen building up safe abstractions that the borrow checker doesn’t understand.\nWe’ll introduce unsafe functions and then look at an example of a safe\nabstraction that uses unsafe code."
        },
        {
          "kind": "text",
          "content": "### Calling an Unsafe Function or Method"
        },
        {
          "kind": "text",
          "content": "The second type of operation you can perform in an unsafe block is calling\nunsafe functions. Unsafe functions and methods look exactly like regular\nfunctions and methods, but they have an extra `unsafe` before the rest of the\ndefinition. The `unsafe` keyword in this context indicates the function has\nrequirements we need to uphold when we call this function, because Rust can’t\nguarantee we’ve met these requirements. By calling an unsafe function within an\n`unsafe` block, we’re saying that we’ve read this function’s documentation and\nwe take responsibility for upholding the function’s contracts."
        },
        {
          "kind": "text",
          "content": "Here is an unsafe function named `dangerous` that doesn’t do anything in its\nbody:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-01-unsafe-fn/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "We must call the `dangerous` function within a separate `unsafe` block. If we\ntry to call `dangerous` without the `unsafe` block, we’ll get an error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/output-only-01-missing-unsafe/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "With the `unsafe` block, we’re asserting to Rust that we’ve read the function’s\ndocumentation, we understand how to use it properly, and we’ve verified that\nwe’re fulfilling the contract of the function."
        },
        {
          "kind": "text",
          "content": "To perform unsafe operations in the body of an unsafe function, you still need\nto use an `unsafe` block, just as within a regular function, and the compiler\nwill warn you if you forget. This helps to keep `unsafe` blocks as small as\npossible, as unsafe operations may not be needed across the whole function\nbody."
        },
        {
          "kind": "text",
          "content": "#### Creating a Safe Abstraction over Unsafe Code"
        },
        {
          "kind": "text",
          "content": "Just because a function contains unsafe code doesn’t mean we need to mark the\nentire function as unsafe. In fact, wrapping unsafe code in a safe function is\na common abstraction. As an example, let’s study the `split_at_mut` function\nfrom the standard library, which requires some unsafe code. We’ll explore how\nwe might implement it. This safe method is defined on mutable slices: it takes\none slice and makes it two by splitting the slice at the index given as an\nargument. Listing 20-4 shows how to use `split_at_mut`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-4\" caption=\"Using the safe `split_at_mut` function\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-04/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We can’t implement this function using only safe Rust. An attempt might look\nsomething like Listing 20-5, which won’t compile. For simplicity, we’ll\nimplement `split_at_mut` as a function rather than a method and only for slices\nof `i32` values rather than for a generic type `T`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-5\" caption=\"An attempted implementation of `split_at_mut` using only safe Rust\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This function first gets the total length of the slice. Then it asserts that\nthe index given as a parameter is within the slice by checking whether it’s\nless than or equal to the length. The assertion means that if we pass an index\nthat is greater than the length to split the slice at, the function will panic\nbefore it attempts to use that index."
        },
        {
          "kind": "text",
          "content": "Then we return two mutable slices in a tuple: one from the start of the\noriginal slice to the `mid` index and another from `mid` to the end of the\nslice."
        },
        {
          "kind": "text",
          "content": "When we try to compile the code in Listing 20-5, we’ll get an error."
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-05/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust’s borrow checker can’t understand that we’re borrowing different parts of\nthe slice; it only knows that we’re borrowing from the same slice twice.\nBorrowing different parts of a slice is fundamentally okay because the two\nslices aren’t overlapping, but Rust isn’t smart enough to know this. When we\nknow code is okay, but Rust doesn’t, it’s time to reach for unsafe code."
        },
        {
          "kind": "text",
          "content": "Listing 20-6 shows how to use an `unsafe` block, a raw pointer, and some calls\nto unsafe functions to make the implementation of `split_at_mut` work."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-6\" caption=\"Using unsafe code in the implementation of the `split_at_mut` function\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Recall from [“The Slice Type”][the-slice-type]<!-- ignore --> in Chapter 4 that\nslices are a pointer to some data and the length of the slice. We use the `len`\nmethod to get the length of a slice and the `as_mut_ptr` method to access the\nraw pointer of a slice. In this case, because we have a mutable slice to `i32`\nvalues, `as_mut_ptr` returns a raw pointer with the type `*mut i32`, which we’ve\nstored in the variable `ptr`."
        },
        {
          "kind": "text",
          "content": "We keep the assertion that the `mid` index is within the slice. Then we get to\nthe unsafe code: the `slice::from_raw_parts_mut` function takes a raw pointer\nand a length, and it creates a slice. We use it to create a slice that starts\nfrom `ptr` and is `mid` items long. Then we call the `add` method on `ptr` with\n`mid` as an argument to get a raw pointer that starts at `mid`, and we create a\nslice using that pointer and the remaining number of items after `mid` as the\nlength."
        },
        {
          "kind": "text",
          "content": "The function `slice::from_raw_parts_mut` is unsafe because it takes a raw\npointer and must trust that this pointer is valid. The `add` method on raw\npointers is also unsafe because it must trust that the offset location is also\na valid pointer. Therefore, we had to put an `unsafe` block around our calls to\n`slice::from_raw_parts_mut` and `add` so we could call them. By looking at\nthe code and by adding the assertion that `mid` must be less than or equal to\n`len`, we can tell that all the raw pointers used within the `unsafe` block\nwill be valid pointers to data within the slice. This is an acceptable and\nappropriate use of `unsafe`."
        },
        {
          "kind": "text",
          "content": "Note that we don’t need to mark the resultant `split_at_mut` function as\n`unsafe`, and we can call this function from safe Rust. We’ve created a safe\nabstraction to the unsafe code with an implementation of the function that uses\n`unsafe` code in a safe way, because it creates only valid pointers from the\ndata this function has access to."
        },
        {
          "kind": "text",
          "content": "In contrast, the use of `slice::from_raw_parts_mut` in Listing 20-7 would\nlikely crash when the slice is used. This code takes an arbitrary memory\nlocation and creates a slice 10,000 items long."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-7\" caption=\"Creating a slice from an arbitrary memory location\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We don’t own the memory at this arbitrary location, and there is no guarantee\nthat the slice this code creates contains valid `i32` values. Attempting to use\n`values` as though it’s a valid slice results in undefined behavior."
        },
        {
          "kind": "text",
          "content": "#### Using `extern` Functions to Call External Code"
        },
        {
          "kind": "text",
          "content": "Sometimes, your Rust code might need to interact with code written in another\nlanguage. For this, Rust has the keyword `extern` that facilitates the creation\nand use of a _Foreign Function Interface (FFI)_. An FFI is a way for a\nprogramming language to define functions and enable a different (foreign)\nprogramming language to call those functions."
        },
        {
          "kind": "text",
          "content": "Listing 20-8 demonstrates how to set up an integration with the `abs` function\nfrom the C standard library. Functions declared within `extern` blocks are\ngenerally unsafe to call from Rust code, so `extern` blocks must also be marked\n`unsafe`. The reason is that other languages don’t enforce Rust’s rules and\nguarantees, and Rust can’t check them, so responsibility falls on the programmer\nto ensure safety."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-8\" file-name=\"src/main.rs\" caption=\"Declaring and calling an `extern` function defined in another language\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-08/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Within the `unsafe extern \"C\"` block, we list the names and signatures of\nexternal functions from another language we want to call. The `\"C\"` part defines\nwhich _application binary interface (ABI)_ the external function uses: the ABI\ndefines how to call the function at the assembly level. The `\"C\"` ABI is the\nmost common and follows the C programming language’s ABI. Information about all\nthe ABIs Rust supports is available in [the Rust Reference][ABI]."
        },
        {
          "kind": "text",
          "content": "Every item declared within an `unsafe extern` block is implicitly `unsafe`.\nHowever, some FFI functions *are* safe to call. For example, the `abs` function\nfrom C’s standard library does not have any memory safety considerations and we\nknow it can be called with any `i32`. In cases like this, we can use the `safe`\nkeyword to say that this specific function is safe to call even though it is in\nan `unsafe extern` block. Once we make that change, calling it no longer\nrequires an `unsafe` block, as shown in Listing 20-9."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-9\" file-name=\"src/main.rs\" caption=\"Explicitly marking a function as `safe` within an `unsafe extern` block and calling it safely\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-09/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Marking a function as `safe` does not inherently make it safe! Instead, it is\nlike a promise you are making to Rust that it _is_ safe. It is still your\nresponsibility to make sure that promise is kept!"
        },
        {
          "kind": "text",
          "content": "> #### Calling Rust Functions from Other Languages\n>\n> We can also use `extern` to create an interface that allows other languages to\n> call Rust functions. Instead of creating a whole `extern` block, we add the\n> `extern` keyword and specify the ABI to use just before the `fn` keyword for\n> the relevant function. We also need to add an `#[unsafe(no_mangle)]`\n> annotation to tell the Rust compiler not to mangle the name of this function.\n> _Mangling_ is when a compiler changes the name we’ve given a function to a\n> different name that contains more information for other parts of the\n> compilation process to consume but is less human readable. Every programming\n> language compiler mangles names slightly differently, so for a Rust function\n> to be nameable by other languages, we must disable the Rust compiler’s name\n> mangling. This is unsafe because there might be name collisions across\n> libraries without the built-in mangling, so it is our responsibility to make\n> sure the name we choose is safe to export without mangling.\n>\n> In the following example, we make the `call_from_c` function accessible from\n> C code, after it’s compiled to a shared library and linked from C:\n>\n> ```rust\n> #[unsafe(no_mangle)]\n> pub extern \"C\" fn call_from_c() {\n>     println!(\"Just called a Rust function from C!\");\n> }\n> ```\n>\n> This usage of `extern` requires `unsafe` only in the attribute, not on the\n> `extern` block."
        },
        {
          "kind": "text",
          "content": "### Accessing or Modifying a Mutable Static Variable"
        },
        {
          "kind": "text",
          "content": "In this book, we’ve not yet talked about global variables, which Rust does\nsupport but can be problematic with Rust’s ownership rules. If two threads are\naccessing the same mutable global variable, it can cause a data race."
        },
        {
          "kind": "text",
          "content": "In Rust, global variables are called _static_ variables. Listing 20-10 shows an\nexample declaration and use of a static variable with a string slice as a\nvalue."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-10\" file-name=\"src/main.rs\" caption=\"Defining and using an immutable static variable\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-10/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Static variables are similar to constants, which we discussed in\n[“Constants”][differences-between-variables-and-constants]<!-- ignore --> in\nChapter 3. The names of static variables are in `SCREAMING_SNAKE_CASE` by\nconvention. Static variables can only store references with the `'static`\nlifetime, which means the Rust compiler can figure out the lifetime and we\naren’t required to annotate it explicitly. Accessing an immutable static\nvariable is safe."
        },
        {
          "kind": "text",
          "content": "A subtle difference between constants and immutable static variables is that\nvalues in a static variable have a fixed address in memory. Using the value\nwill always access the same data. Constants, on the other hand, are allowed to\nduplicate their data whenever they’re used. Another difference is that static\nvariables can be mutable. Accessing and modifying mutable static variables is\n_unsafe_. Listing 20-11 shows how to declare, access, and modify a mutable\nstatic variable named `COUNTER`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-11\" file-name=\"src/main.rs\" caption=\"Reading from or writing to a mutable static variable is unsafe\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-11/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As with regular variables, we specify mutability using the `mut` keyword. Any\ncode that reads or writes from `COUNTER` must be within an `unsafe` block. This\ncode compiles and prints `COUNTER: 3` as we would expect because it’s single\nthreaded. Having multiple threads access `COUNTER` would likely result in data\nraces, so it is undefined behavior. Therefore, we need to mark the entire\nfunction as `unsafe`, and document the safety limitation, so anyone calling the\nfunction knows what they are and are not allowed to do safely."
        },
        {
          "kind": "text",
          "content": "Whenever we write an unsafe function, it is idiomatic to write a comment\nstarting with `SAFETY` and explaining what the caller needs to do to call the\nfunction safely. Likewise, whenever we perform an unsafe operation, it is\nidiomatic to write a comment starting with `SAFETY` to explain how the safety\nrules are upheld."
        },
        {
          "kind": "text",
          "content": "Additionally, the compiler will not allow you to create references to a mutable\nstatic variable. You can only access it via a raw pointer, created with one of\nthe raw borrow operators. That includes in cases where the reference is created\ninvisibly, as when it is used in the `println!` in this code listing. The\nrequirement that references to static mutable variables can only be created via\nraw pointers helps make the safety requirements for using them more obvious."
        },
        {
          "kind": "text",
          "content": "With mutable data that is globally accessible, it’s difficult to ensure there\nare no data races, which is why Rust considers mutable static variables to be\nunsafe. Where possible, it’s preferable to use the concurrency techniques and\nthread-safe smart pointers we discussed in Chapter 16 so the compiler checks\nthat data access from different threads is done safely."
        },
        {
          "kind": "text",
          "content": "### Implementing an Unsafe Trait"
        },
        {
          "kind": "text",
          "content": "We can use `unsafe` to implement an unsafe trait. A trait is unsafe when at\nleast one of its methods has some invariant that the compiler can’t verify. We\ndeclare that a trait is `unsafe` by adding the `unsafe` keyword before `trait`\nand marking the implementation of the trait as `unsafe` too, as shown in\nListing 20-12."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-12\" caption=\"Defining and implementing an unsafe trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-12/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "By using `unsafe impl`, we’re promising that we’ll uphold the invariants that\nthe compiler can’t verify."
        },
        {
          "kind": "text",
          "content": "As an example, recall the `Sync` and `Send` marker traits we discussed in\n[“Extensible Concurrency with the `Sync` and `Send`\nTraits”][extensible-concurrency-with-the-sync-and-send-traits]<!-- ignore --> in\nChapter 16: the compiler implements these traits automatically if our types are\ncomposed entirely of other types that implement `Send` and `Sync`. If we\nimplement a type that contains a type that does not implement `Send` or `Sync`,\nsuch as raw pointers, and we want to mark that type as `Send` or `Sync`, we must\nuse `unsafe`. Rust can’t verify that our type upholds the guarantees that it can\nbe safely sent across threads or accessed from multiple threads; therefore, we\nneed to do those checks manually and indicate as such with `unsafe`."
        },
        {
          "kind": "text",
          "content": "### Accessing Fields of a Union"
        },
        {
          "kind": "text",
          "content": "The final action that works only with `unsafe` is accessing fields of a union. A\n`union` is similar to a `struct`, but only one declared field is used in a\nparticular instance at one time. Unions are primarily used to interface with\nunions in C code. Accessing union fields is unsafe because Rust can’t guarantee\nthe type of the data currently being stored in the union instance. You can learn\nmore about unions in [the Rust Reference][unions]."
        },
        {
          "kind": "text",
          "content": "### Using Miri to Check Unsafe Code"
        },
        {
          "kind": "text",
          "content": "When writing unsafe code, you might want to check that what you have written\nactually is safe and correct. One of the best ways to do that is to use\nMiri, an official Rust tool for detecting undefined behavior. Whereas\nthe borrow checker is a _static_ tool that works at compile time, Miri is a\n_dynamic_ tool that works at runtime. It checks your code by running your\nprogram, or its test suite, and detecting when you violate the rules it\nunderstands about how Rust should work."
        },
        {
          "kind": "text",
          "content": "Using Miri requires a nightly build of Rust (which we talk about more in\n[Appendix G: How Rust is Made and “Nightly Rust”][nightly]). You can install\nboth a nightly version of Rust and the Miri tool by typing `rustup +nightly\ncomponent add miri`. This does not change what version of Rust your project\nuses; it only adds the tool to your system so you can use it when you want to.\nYou can run Miri on a project by typing `cargo +nightly miri run` or `cargo\n+nightly miri test`."
        },
        {
          "kind": "text",
          "content": "For an example of how helpful this can be, consider what happens when we run it\nagainst Listing 20-11."
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-11/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Miri correctly warns us that we have shared references to mutable data. Here,\nMiri issues only a warning because this is not guaranteed to be undefined\nbehavior in this case, and it does not tell us how to fix the problem. but at\nleast we know there is a risk of undefined behavior and can think about how to\nmake the code safe. In some cases, Miri can also detect outright errors—code\npatterns that are _sure_ to be wrong—and make recommendations about how to fix\nthose errors."
        },
        {
          "kind": "text",
          "content": "Miri doesn’t catch everything you might get wrong when writing unsafe code. Miri\nis a dynamic analysis tool, so it only catches problems with code that actually\ngets run. That means you will need to use it in conjunction with good testing\ntechniques to increase your confidence about the unsafe code you have written.\nMiri also does not cover every possible way your code can be unsound."
        },
        {
          "kind": "text",
          "content": "Put another way: If Miri _does_ catch a problem, you know there’s a bug, but\njust because Miri _doesn’t_ catch a bug doesn’t mean there isn’t a problem. It\ncan catch a lot, though. Try running it on the other examples of unsafe code in\nthis chapter and see what it says!"
        },
        {
          "kind": "text",
          "content": "You can learn more about Miri at [its GitHub repository][miri]."
        },
        {
          "kind": "text",
          "content": "### When to Use Unsafe Code"
        },
        {
          "kind": "text",
          "content": "Using `unsafe` to use one of the five superpowers just discussed\nisn’t wrong or even frowned upon, but it is trickier to get `unsafe` code\ncorrect because the compiler can’t help uphold memory safety. When you have a\nreason to use `unsafe` code, you can do so, and having the explicit `unsafe`\nannotation makes it easier to track down the source of problems when they occur.\nWhenever you write unsafe code, you can use Miri to help you be more confident\nthat the code you have written upholds Rust’s rules."
        },
        {
          "kind": "text",
          "content": "For a much deeper exploration of how to work effectively with unsafe Rust, read\nRust’s official guide to the subject, the [Rustonomicon][nomicon]."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "05a7959b-4fe7-4ee6-9c25-bfa9a4e72535",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following are \"superpowers\" that Rust enables inside an `unsafe` block?\n",
                  "distractors": [
                    "Disabling the borrow checker",
                    "Converting a reference to a raw pointer"
                  ]
                },
                "answer": {
                  "answer": [
                    "Dereferencing a raw pointer",
                    "Calling a function marked as `unsafe`"
                  ]
                },
                "context": "`unsafe` blocks enable you to dereference raw pointers and call `unsafe` functions. However,\n`unsafe` does not disable the borrow checker (operations on safe references are still checked).\nA reference can be converted to a raw pointer in normal safe code.\n"
              },
              {
                "id": "7d50567d-d73c-47d4-922f-480e8d1b7919",
                "type": "Tracing",
                "prompt": {
                  "program": "fn main() {\n    let mut v = Vec::with_capacity(4);\n    for i in 0 .. 3 { \n        v.push(i); \n    }\n    let n = &v[0] as *const i32;\n    v.push(4);\n    println!(\"{}\", unsafe { *n });\n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "0"
                },
                "context": "This program is dangerous! It compiles correctly and executes without issue\nbecause `Vec` has enough capacity such that `v.push(4)` does not resize it. However,\nif the capacity were 3, then `n` would point to deallocated memory.\n"
              },
              {
                "id": "015941ed-d375-4070-a8dc-2f368584b302",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following are situations where using `unsafe` code (or a safe wrapper around `unsafe` code) \nis an idiomatic method for working around the borrow checker?\n",
                  "distractors": [
                    "Returning a pointer to a stack-allocated variable out of a function"
                  ]
                },
                "answer": {
                  "answer": [
                    "Getting two mutable references to disjoint indices in an array",
                    "Allowing values to be uninitialized when they are not being read",
                    "Having a reference to one field of a struct sit in another field of the same struct"
                  ]
                },
                "context": "Two mutable references to disjoint indices is reasonable because the borrow checker doesn't understand when indices are disjoint. See: [`slice::split_at_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_mut).\n\nAllowing values to be uninitialized is reasonable because the borrow checker adopts a conservative policy that values must be always initialized, but it's sometimes useful to work with uninitialized values. See [`MaybeUninit`](https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html) and the [`take_mut`](https://docs.rs/take_mut/0.2.2/take_mut/index.html) crate.\n\nHaving a struct hold a reference to itself is reasonable because the borrow checker cannot\nreason about the lifetime of self-references. See the [`std::pin`](https://doc.rust-lang.org/stable/std/pin/index.html) module.\n\nHowever, returning a pointer to a stack-allocated variable is *never* valid to do with unsafe\ncode. The only appropriate workaround is to use garbage collection, e.g. returning an `Rc<T>`\ninstead of `&T`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[permission-violations]: ch04-02-references-and-borrowing.html#the-borrow-checker-finds-permission-violations\n[ABI]: ../reference/items/external-blocks.html#abi\n[differences-between-variables-and-constants]: ch03-01-variables-and-mutability.html#constants\n[extensible-concurrency-with-the-sync-and-send-traits]: ch16-04-extensible-concurrency-sync-and-send.html#extensible-concurrency-with-the-sync-and-send-traits\n[the-slice-type]: ch04-04-slices.html#the-slice-type\n[unions]: ../reference/items/unions.html\n[miri]: https://github.com/rust-lang/miri\n[editions]: appendix-05-editions.html\n[nightly]: appendix-07-nightly-rust.html\n[nomicon]: https://doc.rust-lang.org/nomicon/"
        }
      ]
    },
    {
      "title": "Advanced Traits",
      "file": "ch20-02-advanced-traits.md",
      "elements": [
        {
          "kind": "text",
          "content": "We first covered traits in [“Traits: Defining Shared\nBehavior”][traits-defining-shared-behavior]<!-- ignore --> in Chapter 10, but we\ndidn’t discuss the more advanced details. Now that you know more about Rust, we\ncan get into the nitty-gritty."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"specifying-placeholder-types-in-trait-definitions-with-associated-types\"></a>"
        },
        {
          "kind": "text",
          "content": "### Associated Types"
        },
        {
          "kind": "text",
          "content": "_Associated types_ connect a type placeholder with a trait such that the trait\nmethod definitions can use these placeholder types in their signatures. The\nimplementor of a trait will specify the concrete type to be used instead of the\nplaceholder type for the particular implementation. That way, we can define a\ntrait that uses some types without needing to know exactly what those types are\nuntil the trait is implemented."
        },
        {
          "kind": "text",
          "content": "We’ve described most of the advanced features in this chapter as being rarely\nneeded. Associated types are somewhere in the middle: they’re used more rarely\nthan features explained in the rest of the book but more commonly than many of\nthe other features discussed in this chapter."
        },
        {
          "kind": "text",
          "content": "One example of a trait with an associated type is the `Iterator` trait that the\nstandard library provides. The associated type is named `Item` and stands in\nfor the type of the values the type implementing the `Iterator` trait is\niterating over. The definition of the `Iterator` trait is as shown in Listing\n20-13."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-13\" caption=\"The definition of the `Iterator` trait that has an associated type `Item`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-13/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The type `Item` is a placeholder, and the `next` method’s definition shows that\nit will return values of type `Option<Self::Item>`. Implementors of the\n`Iterator` trait will specify the concrete type for `Item`, and the `next`\nmethod will return an `Option` containing a value of that concrete type."
        },
        {
          "kind": "text",
          "content": "Associated types might seem like a similar concept to generics, in that the\nlatter allow us to define a function without specifying what types it can\nhandle. To examine the difference between the two concepts, we’ll look at an\nimplementation of the `Iterator` trait on a type named `Counter` that specifies\nthe `Item` type is `u32`:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-22-iterator-on-counter/src/lib.rs:ch19}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This syntax seems comparable to that of generics. So why not just define the\n`Iterator` trait with generics, as shown in Listing 20-14?"
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-14\" caption=\"A hypothetical definition of the `Iterator` trait using generics\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-14/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The difference is that when using generics, as in Listing 20-14, we must\nannotate the types in each implementation; because we can also implement\n`Iterator<String> for Counter` or any other type, we could have multiple\nimplementations of `Iterator` for `Counter`. In other words, when a trait has a\ngeneric parameter, it can be implemented for a type multiple times, changing\nthe concrete types of the generic type parameters each time. When we use the\n`next` method on `Counter`, we would have to provide type annotations to\nindicate which implementation of `Iterator` we want to use."
        },
        {
          "kind": "text",
          "content": "With associated types, we don’t need to annotate types because we can’t\nimplement a trait on a type multiple times. In Listing 20-13 with the definition\nthat uses associated types, we can choose what the type of `Item` will be only\nonce, because there can be only one `impl Iterator for Counter`. We don’t have\nto specify that we want an iterator of `u32` values everywhere that we call\n`next` on `Counter`."
        },
        {
          "kind": "text",
          "content": "Associated types also become part of the trait’s contract: implementors of the\ntrait must provide a type to stand in for the associated type placeholder.\nAssociated types often have a name that describes how the type will be used,\nand documenting the associated type in the API documentation is a good practice."
        },
        {
          "kind": "text",
          "content": "### Default Generic Type Parameters and Operator Overloading"
        },
        {
          "kind": "text",
          "content": "When we use generic type parameters, we can specify a default concrete type for\nthe generic type. This eliminates the need for implementors of the trait to\nspecify a concrete type if the default type works. You specify a default type\nwhen declaring a generic type with the `<PlaceholderType=ConcreteType>` syntax."
        },
        {
          "kind": "text",
          "content": "A great example of a situation where this technique is useful is with _operator\noverloading_, in which you customize the behavior of an operator (such as `+`)\nin particular situations."
        },
        {
          "kind": "text",
          "content": "Rust doesn’t allow you to create your own operators or overload arbitrary\noperators. But you can overload the operations and corresponding traits listed\nin `std::ops` by implementing the traits associated with the operator. For\nexample, in Listing 20-15 we overload the `+` operator to add two `Point`\ninstances together. We do this by implementing the `Add` trait on a `Point`\nstruct."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-15\" file-name=\"src/main.rs\" caption=\"Implementing the `Add` trait to overload the `+` operator for `Point` instances\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-15/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The `add` method adds the `x` values of two `Point` instances and the `y`\nvalues of two `Point` instances to create a new `Point`. The `Add` trait has an\nassociated type named `Output` that determines the type returned from the `add`\nmethod."
        },
        {
          "kind": "text",
          "content": "The default generic type in this code is within the `Add` trait. Here is its\ndefinition:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "trait Add<Rhs=Self> {\n    type Output;\n\n    fn add(self, rhs: Rhs) -> Self::Output;\n}"
          }
        },
        {
          "kind": "text",
          "content": "This code should look generally familiar: a trait with one method and an\nassociated type. The new part is `Rhs=Self`: this syntax is called _default\ntype parameters_. The `Rhs` generic type parameter (short for “right-hand\nside”) defines the type of the `rhs` parameter in the `add` method. If we don’t\nspecify a concrete type for `Rhs` when we implement the `Add` trait, the type\nof `Rhs` will default to `Self`, which will be the type we’re implementing\n`Add` on."
        },
        {
          "kind": "text",
          "content": "When we implemented `Add` for `Point`, we used the default for `Rhs` because we\nwanted to add two `Point` instances. Let’s look at an example of implementing\nthe `Add` trait where we want to customize the `Rhs` type rather than using the\ndefault."
        },
        {
          "kind": "text",
          "content": "We have two structs, `Millimeters` and `Meters`, holding values in different\nunits. This thin wrapping of an existing type in another struct is known as the\n_newtype pattern_, which we describe in more detail in the [“Using the Newtype\nPattern to Implement External Traits on External Types”][newtype]<!-- ignore\n--> section. We want to add values in millimeters to values in meters and have\nthe implementation of `Add` do the conversion correctly. We can implement `Add`\nfor `Millimeters` with `Meters` as the `Rhs`, as shown in Listing 20-16."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-16\" file-name=\"src/lib.rs\" caption=\"Implementing the `Add` trait on `Millimeters` to add `Millimeters` to `Meters`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-16/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To add `Millimeters` and `Meters`, we specify `impl Add<Meters>` to set the\nvalue of the `Rhs` type parameter instead of using the default of `Self`."
        },
        {
          "kind": "text",
          "content": "You’ll use default type parameters in two main ways:"
        },
        {
          "kind": "text",
          "content": "1. To extend a type without breaking existing code\n2. To allow customization in specific cases most users won’t need"
        },
        {
          "kind": "text",
          "content": "The standard library’s `Add` trait is an example of the second purpose:\nusually, you’ll add two like types, but the `Add` trait provides the ability to\ncustomize beyond that. Using a default type parameter in the `Add` trait\ndefinition means you don’t have to specify the extra parameter most of the\ntime. In other words, a bit of implementation boilerplate isn’t needed, making\nit easier to use the trait."
        },
        {
          "kind": "text",
          "content": "The first purpose is similar to the second but in reverse: if you want to add a\ntype parameter to an existing trait, you can give it a default to allow\nextension of the functionality of the trait without breaking the existing\nimplementation code."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\"></a>"
        },
        {
          "kind": "text",
          "content": "### Disambiguating Between Methods with the Same Name"
        },
        {
          "kind": "text",
          "content": "Nothing in Rust prevents a trait from having a method with the same name as\nanother trait’s method, nor does Rust prevent you from implementing both traits\non one type. It’s also possible to implement a method directly on the type with\nthe same name as methods from traits."
        },
        {
          "kind": "text",
          "content": "When calling methods with the same name, you’ll need to tell Rust which one you\nwant to use. Consider the code in Listing 20-17 where we’ve defined two traits,\n`Pilot` and `Wizard`, that both have a method called `fly`. We then implement\nboth traits on a type `Human` that already has a method named `fly` implemented\non it. Each `fly` method does something different."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-17\" file-name=\"src/main.rs\" caption=\"Two traits are defined to have a ` method and are implemented on the `Human` type, and a `fly` method is implemented on `Human` directly.\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-17/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "When we call `fly` on an instance of `Human`, the compiler defaults to calling\nthe method that is directly implemented on the type, as shown in Listing 20-18."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-18\" file-name=\"src/main.rs\" caption=\"Calling `fly` on an instance of `Human`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-18/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Running this code will print `*waving arms furiously*`, showing that Rust\ncalled the `fly` method implemented on `Human` directly."
        },
        {
          "kind": "text",
          "content": "To call the `fly` methods from either the `Pilot` trait or the `Wizard` trait,\nwe need to use more explicit syntax to specify which `fly` method we mean.\nListing 20-19 demonstrates this syntax."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-19\" file-name=\"src/main.rs\" caption=\"Specifying which trait’s `fly` method we want to call\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-19/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Specifying the trait name before the method name clarifies to Rust which\nimplementation of `fly` we want to call. We could also write\n`Human::fly(&person)`, which is equivalent to the `person.fly()` that we used\nin Listing 20-19, but this is a bit longer to write if we don’t need to\ndisambiguate."
        },
        {
          "kind": "text",
          "content": "Running this code prints the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-19/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Because the `fly` method takes a `self` parameter, if we had two _types_ that\nboth implement one _trait_, Rust could figure out which implementation of a\ntrait to use based on the type of `self`."
        },
        {
          "kind": "text",
          "content": "However, associated functions that are not methods don’t have a `self`\nparameter. When there are multiple types or traits that define non-method\nfunctions with the same function name, Rust doesn't always know which type you\nmean unless you use _fully qualified syntax_. For example, in Listing 20-20 we\ncreate a trait for an animal shelter that wants to name all baby dogs _Spot_.\nWe make an `Animal` trait with an associated non-method function `baby_name`.\nThe `Animal` trait is implemented for the struct `Dog`, on which we also\nprovide an associated non-method function `baby_name` directly."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-20\" file-name=\"src/main.rs\" caption=\"A trait with an associated function and a type with an associated function of the same name that also implements the trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-20/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We implement the code for naming all puppies Spot in the `baby_name` associated\nfunction that is defined on `Dog`. The `Dog` type also implements the trait\n`Animal`, which describes characteristics that all animals have. Baby dogs are\ncalled puppies, and that is expressed in the implementation of the `Animal`\ntrait on `Dog` in the `baby_name` function associated with the `Animal` trait."
        },
        {
          "kind": "text",
          "content": "In `main`, we call the `Dog::baby_name` function, which calls the associated\nfunction defined on `Dog` directly. This code prints the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-20/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This output isn’t what we wanted. We want to call the `baby_name` function that\nis part of the `Animal` trait that we implemented on `Dog` so the code prints\n`A baby dog is called a puppy`. The technique of specifying the trait name that\nwe used in Listing 20-19 doesn’t help here; if we change `main` to the code in\nListing 20-21, we’ll get a compilation error."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-21\" file-name=\"src/main.rs\" caption=\"Attempting to call the `baby_name` function from the `Animal` trait, but Rust doesn’t know which implementation to use\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-21/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because `Animal::baby_name` doesn’t have a `self` parameter, and there could be\nother types that implement the `Animal` trait, Rust can’t figure out which\nimplementation of `Animal::baby_name` we want. We’ll get this compiler error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-21/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "To disambiguate and tell Rust that we want to use the implementation of\n`Animal` for `Dog` as opposed to the implementation of `Animal` for some other\ntype, we need to use fully qualified syntax. Listing 20-22 demonstrates how to\nuse fully qualified syntax."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-22\" file-name=\"src/main.rs\" caption=\"Using fully qualified syntax to specify that we want to call the `baby_name` function from the `Animal` trait as implemented on `Dog`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-22/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’re providing Rust with a type annotation within the angle brackets, which\nindicates we want to call the `baby_name` method from the `Animal` trait as\nimplemented on `Dog` by saying that we want to treat the `Dog` type as an\n`Animal` for this function call. This code will now print what we want:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-22/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "In general, fully qualified syntax is defined as follows:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "<Type as Trait>::function(receiver_if_method, next_arg, ...);"
          }
        },
        {
          "kind": "text",
          "content": "For associated functions that aren’t methods, there would not be a `receiver`:\nthere would only be the list of other arguments. You could use fully qualified\nsyntax everywhere that you call functions or methods. However, you’re allowed\nto omit any part of this syntax that Rust can figure out from other information\nin the program. You only need to use this more verbose syntax in cases where\nthere are multiple implementations that use the same name and Rust needs help\nto identify which implementation you want to call."
        },
        {
          "kind": "text",
          "content": "<!-- Old link, do not remove -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"using-supertraits-to-require-one-traits-functionality-within-another-trait\"></a>"
        },
        {
          "kind": "text",
          "content": "### Using Supertraits"
        },
        {
          "kind": "text",
          "content": "Sometimes you might write a trait definition that depends on another trait: for\na type to implement the first trait, you want to require that type to also\nimplement the second trait. You would do this so that your trait definition can\nmake use of the associated items of the second trait. The trait your trait\ndefinition is relying on is called a _supertrait_ of your trait."
        },
        {
          "kind": "text",
          "content": "For example, let’s say we want to make an `OutlinePrint` trait with an\n`outline_print` method that will print a given value formatted so that it's\nframed in asterisks. That is, given a `Point` struct that implements the\nstandard library trait `Display` to result in `(x, y)`, when we call\n`outline_print` on a `Point` instance that has `1` for `x` and `3` for `y`, it\nshould print the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "**********\n*        *\n* (1, 3) *\n*        *\n**********"
          }
        },
        {
          "kind": "text",
          "content": "In the implementation of the `outline_print` method, we want to use the\n`Display` trait’s functionality. Therefore, we need to specify that the\n`OutlinePrint` trait will work only for types that also implement `Display` and\nprovide the functionality that `OutlinePrint` needs. We can do that in the\ntrait definition by specifying `OutlinePrint: Display`. This technique is\nsimilar to adding a trait bound to the trait. Listing 20-23 shows an\nimplementation of the `OutlinePrint` trait."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-23\" file-name=\"src/main.rs\" caption=\"Implementing the `OutlinePrint` trait that requires the functionality from `Display`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-23/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Because we’ve specified that `OutlinePrint` requires the `Display` trait, we\ncan use the `to_string` function that is automatically implemented for any type\nthat implements `Display`. If we tried to use `to_string` without adding a\ncolon and specifying the `Display` trait after the trait name, we’d get an\nerror saying that no method named `to_string` was found for the type `&Self` in\nthe current scope."
        },
        {
          "kind": "text",
          "content": "Let’s see what happens when we try to implement `OutlinePrint` on a type that\ndoesn’t implement `Display`, such as the `Point` struct:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-02-impl-outlineprint-for-point/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We get an error saying that `Display` is required but not implemented:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/no-listing-02-impl-outlineprint-for-point/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "To fix this, we implement `Display` on `Point` and satisfy the constraint that\n`OutlinePrint` requires, like so:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-03-impl-display-for-point/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Then, implementing the `OutlinePrint` trait on `Point` will compile\nsuccessfully, and we can call `outline_print` on a `Point` instance to display\nit within an outline of asterisks."
        },
        {
          "kind": "text",
          "content": "### Using the Newtype Pattern to Implement External Traits on External Types"
        },
        {
          "kind": "text",
          "content": "In [“Implementing a Trait on a Type”][implementing-a-trait-on-a-type]<!-- ignore\n--> in Chapter 10, we mentioned the orphan rule that states we’re only allowed\nto implement a trait on a type if either the trait or the type, or both, are\nlocal to our crate. It’s possible to get around this restriction using the\n_newtype pattern_, which involves creating a new type in a tuple struct. (We\ncovered tuple structs in [“Using Tuple Structs Without Named Fields to Create\nDifferent Types”][tuple-structs]<!-- ignore --> in Chapter 5.) The tuple struct\nwill have one field and be a thin wrapper around the type for which we want to\nimplement a trait. Then the wrapper type is local to our crate, and we can\nimplement the trait on the wrapper. _Newtype_ is a term that originates from the\nHaskell programming language. There is no runtime performance penalty for using\nthis pattern, and the wrapper type is elided at compile time."
        },
        {
          "kind": "text",
          "content": "As an example, let’s say we want to implement `Display` on `Vec<T>`, which the\norphan rule prevents us from doing directly because the `Display` trait and the\n`Vec<T>` type are defined outside our crate. We can make a `Wrapper` struct\nthat holds an instance of `Vec<T>`; then we can implement `Display` on\n`Wrapper` and use the `Vec<T>` value, as shown in Listing 20-24."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-24\" file-name=\"src/main.rs\" caption=\"Creating a `Wrapper` type around `Vec<String>` to implement `Display`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-24/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The implementation of `Display` uses `self.0` to access the inner `Vec<T>`,\nbecause `Wrapper` is a tuple struct and `Vec<T>` is the item at index 0 in the\ntuple. Then we can use the functionality of the `Display` trait on `Wrapper`."
        },
        {
          "kind": "text",
          "content": "The downside of using this technique is that `Wrapper` is a new type, so it\ndoesn’t have the methods of the value it’s holding. We would have to implement\nall the methods of `Vec<T>` directly on `Wrapper` such that the methods delegate\nto `self.0`, which would allow us to treat `Wrapper` exactly like a `Vec<T>`. If\nwe wanted the new type to have every method the inner type has, implementing the\n`Deref` trait on the `Wrapper` to return the inner type would be a solution (we\ndiscussed implementing the `Deref` trait in [“Treating Smart Pointers Like\nRegular References with the `Deref` Trait”][smart-pointer-deref]<!-- ignore -->\nin Chapter 15). If we didn’t want the `Wrapper` type to have all the methods of\nthe inner type—for example, to restrict the `Wrapper` type’s behavior—we would\nhave to implement just the methods we do want manually."
        },
        {
          "kind": "text",
          "content": "This newtype pattern is also useful even when traits are not involved. Let’s\nswitch focus and look at some advanced ways to interact with Rust’s type system."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "7859b06e-72ba-4c07-a3e2-b4f8cb7fd903",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Recall the definition of the `Add` trait:\n\n```\ntrait Add<Rhs=Self> {\n    type Output;\n    fn add(self, rhs: Rhs) -> Self::Output;\n}\n```\n\nWhich of the following best describes why `Output` is an associated type, while `Rhs` is a type parameter?\n",
                  "distractors": [
                    "The add operation takes `Rhs` as input and produces `Output` as output, and type parameters are used for input while associated types are used for output",
                    "A trait can only have a single associated type, so `Rhs` must be a type parameter to `Add`",
                    "An associated type cannot have a default, while a trait type parameter can have a default"
                  ]
                },
                "answer": {
                  "answer": "A type `T` should be addable to many other types `S`, but a given `T + S` operation should always have a single output type"
                },
                "context": "It is true that an associated type cannot currently have a default, but that is not the main\nmotivating factor for having `Rhs` be a type parameter in the `Add` trait.\n"
              },
              {
                "id": "d2c77d93-3887-40a2-b93a-501aa315d676",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Recall the definition of the `Add` trait:\n\n```\ntrait Add<Rhs=Self> {\n    type Output;\n    fn add(self, rhs: Rhs) -> Self::Output;\n}\n```\n\nWhich of the following best describes why `Rhs` is a type parameter to the trait `Add` rather than the function `add`? That is, why is `Add` not designed like this:\n\n```\ntrait Add {\n    type Output;\n    fn add<Rhs>(self, rhs: Rhs) -> Self::Output;\n}\n```\n",
                  "distractors": [
                    "The type-checker executes more efficiently when `Rhs` is a trait-level type parameter than a function-level type parameter",
                    "`Rhs` cannot have a default type as a function-level type parameter",
                    "Code generation for the `add` function would require additional time for monomorphization due to the function-level type parameter"
                  ]
                },
                "answer": {
                  "answer": "If `Rhs` were a function-level type parameter, then the definition of `add` could not assume any structure to `Rhs`"
                },
                "context": "Such a design would not make much sense because `add<Rhs>` would not have any information about\nthe structure of `Rhs`, so it would be impossible to implement any sensible addition function this way.\n"
              },
              {
                "id": "79db9ca4-693f-4e62-8b8d-356b51a63006",
                "type": "Tracing",
                "prompt": {
                  "program": "mod inner {\n    pub trait A {\n        fn f(&self) -> usize { 0 }\n    }\n    pub trait B {\n        fn f(&self) -> usize { 1 }\n    }\n    pub struct P;\n    impl A for P {}\n    impl B for P {}\n}\nfn main() {\n    use inner::{P, B};    \n    println!(\"{}\", P.f());    \n}\n"
                },
                "answer": {
                  "doesCompile": true,
                  "stdout": "1"
                },
                "context": "When only one of two conflicting trait implementations is imported, then Rust uses the imported\nimplementation. Fully-qualified syntax is not necessary here.\n"
              },
              {
                "id": "cb7e4d54-e95b-4153-99d6-e8f380e4f8b4",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider implementing a trait `Trait` for a type `T`. In which of the following situations\ndo you need to wrap `T` in a newtype?\n",
                  "distractors": [
                    "`Trait` is defined in the local crate and `T` is defined in an external crate",
                    "`Trait` is defined in an external crate and `T` is defined in the local crate",
                    "`Trait` is defined in the local crate and `T` is defined in the local crate"
                  ]
                },
                "answer": {
                  "answer": [
                    "`Trait` is defined in an external crate and `T` is defined in an external crate"
                  ]
                },
                "context": "The orphan rule dictates that a trait cannot be implemented for a type if both are\ndefined in an external crate, thus necessitating a newtype. If either the trait or the type\nare defined locally, then a newtype is unnecessary.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[newtype]: ch20-02-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\n[implementing-a-trait-on-a-type]: ch10-02-traits.html#implementing-a-trait-on-a-type\n[traits-defining-shared-behavior]: ch10-02-traits.html#traits-defining-shared-behavior\n[smart-pointer-deref]: ch15-02-deref.html#treating-smart-pointers-like-regular-references-with-the-deref-trait\n[tuple-structs]: ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types"
        }
      ]
    },
    {
      "title": "Advanced Types",
      "file": "ch20-03-advanced-types.md",
      "elements": [
        {
          "kind": "text",
          "content": "The Rust type system has some features that we’ve so far mentioned but haven’t\nyet discussed. We’ll start by discussing newtypes in general as we examine why\nnewtypes are useful as types. Then we’ll move on to type aliases, a feature\nsimilar to newtypes but with slightly different semantics. We’ll also discuss\nthe `!` type and dynamically sized types."
        },
        {
          "kind": "text",
          "content": "### Using the Newtype Pattern for Type Safety and Abstraction"
        },
        {
          "kind": "text",
          "content": "This section assumes you’ve read the earlier section [“Using the Newtype Pattern\nto Implement External Traits on External Types.”][using-the-newtype-pattern]<!--\nignore --> The newtype pattern is also useful for tasks beyond those we’ve\ndiscussed so far, including statically enforcing that values are never confused\nand indicating the units of a value. You saw an example of using newtypes to\nindicate units in Listing 20-16: recall that the `Millimeters` and `Meters`\nstructs wrapped `u32` values in a newtype. If we wrote a function with a\nparameter of type `Millimeters`, we wouldn’t be able to compile a program that\naccidentally tried to call that function with a value of type `Meters` or a\nplain `u32`."
        },
        {
          "kind": "text",
          "content": "We can also use the newtype pattern to abstract away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type."
        },
        {
          "kind": "text",
          "content": "Newtypes can also hide internal implementation. For example, we could provide a\n`People` type to wrap a `HashMap<i32, String>` that stores a person’s ID\nassociated with their name. Code using `People` would only interact with the\npublic API we provide, such as a method to add a name string to the `People`\ncollection; that code wouldn’t need to know that we assign an `i32` ID to names\ninternally. The newtype pattern is a lightweight way to achieve encapsulation to\nhide implementation details, which we discussed in [“Encapsulation That Hides\nImplementation Details”][encapsulation-that-hides-implementation-details]<!--\nignore --> in Chapter 18."
        },
        {
          "kind": "text",
          "content": "### Creating Type Synonyms with Type Aliases"
        },
        {
          "kind": "text",
          "content": "Rust provides the ability to declare a _type alias_ to give an existing type\nanother name. For this we use the `type` keyword. For example, we can create\nthe alias `Kilometers` to `i32` like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-04-kilometers-alias/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Now, the alias `Kilometers` is a _synonym_ for `i32`; unlike the `Millimeters`\nand `Meters` types we created in Listing 20-16, `Kilometers` is not a separate,\nnew type. Values that have the type `Kilometers` will be treated the same as\nvalues of type `i32`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-04-kilometers-alias/src/main.rs:there}}"
          }
        },
        {
          "kind": "text",
          "content": "Because `Kilometers` and `i32` are the same type, we can add values of both\ntypes and we can pass `Kilometers` values to functions that take `i32`\nparameters. However, using this method, we don’t get the type-checking benefits\nthat we get from the newtype pattern discussed earlier. In other words, if we\nmix up `Kilometers` and `i32` values somewhere, the compiler will not give us\nan error."
        },
        {
          "kind": "text",
          "content": "The main use case for type synonyms is to reduce repetition. For example, we\nmight have a lengthy type like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "Box<dyn Fn() + Send + 'static>"
          }
        },
        {
          "kind": "text",
          "content": "Writing this lengthy type in function signatures and as type annotations all\nover the code can be tiresome and error prone. Imagine having a project full of\ncode like that in Listing 20-25."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-25\" caption=\"Using a long type in many places\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-25/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "A type alias makes this code more manageable by reducing the repetition. In\nListing 20-26, we’ve introduced an alias named `Thunk` for the verbose type and\ncan replace all uses of the type with the shorter alias `Thunk`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-26\" caption=\"Introducing a type alias `Thunk` to reduce repetition\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-26/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code is much easier to read and write! Choosing a meaningful name for a\ntype alias can help communicate your intent as well (_thunk_ is a word for code\nto be evaluated at a later time, so it’s an appropriate name for a closure that\ngets stored)."
        },
        {
          "kind": "text",
          "content": "Type aliases are also commonly used with the `Result<T, E>` type for reducing\nrepetition. Consider the `std::io` module in the standard library. I/O\noperations often return a `Result<T, E>` to handle situations when operations\nfail to work. This library has a `std::io::Error` struct that represents all\npossible I/O errors. Many of the functions in `std::io` will be returning\n`Result<T, E>` where the `E` is `std::io::Error`, such as these functions in\nthe `Write` trait:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-05-write-trait/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "The `Result<..., Error>` is repeated a lot. As such, `std::io` has this type\nalias declaration:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-06-result-alias/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Because this declaration is in the `std::io` module, we can use the fully\nqualified alias `std::io::Result<T>`; that is, a `Result<T, E>` with the `E`\nfilled in as `std::io::Error`. The `Write` trait function signatures end up\nlooking like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-06-result-alias/src/lib.rs:there}}"
          }
        },
        {
          "kind": "text",
          "content": "The type alias helps in two ways: it makes code easier to write _and_ it gives\nus a consistent interface across all of `std::io`. Because it’s an alias, it’s\njust another `Result<T, E>`, which means we can use any methods that work on\n`Result<T, E>` with it, as well as special syntax like the `?` operator."
        },
        {
          "kind": "text",
          "content": "### The Never Type That Never Returns"
        },
        {
          "kind": "text",
          "content": "Rust has a special type named `!` that’s known in type theory lingo as the\n_empty type_ because it has no values. We prefer to call it the _never type_\nbecause it stands in the place of the return type when a function will never\nreturn. Here is an example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-07-never-type/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "This code is read as “the function `bar` returns never.” Functions that return\nnever are called _diverging functions_. We can’t create values of the type `!`\nso `bar` can never possibly return."
        },
        {
          "kind": "text",
          "content": "But what use is a type you can never create values for? Recall the code from\nListing 2-5, part of the number-guessing game; we’ve reproduced a bit of it\nhere in Listing 20-27."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-27\" caption=\"A `match` with an arm that ends in `continue`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:ch19}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "At the time, we skipped over some details in this code. In [“The `match` Control\nFlow Operator”][the-match-control-flow-operator]<!-- ignore --> in Chapter 6, we\ndiscussed that `match` arms must all return the same type. So, for example, the\nfollowing code doesn’t work:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-08-match-arms-different-types/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "The type of `guess` in this code would have to be an integer _and_ a string,\nand Rust requires that `guess` have only one type. So what does `continue`\nreturn? How were we allowed to return a `u32` from one arm and have another arm\nthat ends with `continue` in Listing 20-27?"
        },
        {
          "kind": "text",
          "content": "As you might have guessed, `continue` has a `!` value. That is, when Rust\ncomputes the type of `guess`, it looks at both match arms, the former with a\nvalue of `u32` and the latter with a `!` value. Because `!` can never have a\nvalue, Rust decides that the type of `guess` is `u32`."
        },
        {
          "kind": "text",
          "content": "The formal way of describing this behavior is that expressions of type `!` can\nbe coerced into any other type. We’re allowed to end this `match` arm with\n`continue` because `continue` doesn’t return a value; instead, it moves control\nback to the top of the loop, so in the `Err` case, we never assign a value to\n`guess`."
        },
        {
          "kind": "text",
          "content": "The never type is useful with the `panic!` macro as well. Recall the `unwrap`\nfunction that we call on `Option<T>` values to produce a value or panic with\nthis definition:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-09-unwrap-definition/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "In this code, the same thing happens as in the `match` in Listing 20-27: Rust\nsees that `val` has the type `T` and `panic!` has the type `!`, so the result\nof the overall `match` expression is `T`. This code works because `panic!`\ndoesn’t produce a value; it ends the program. In the `None` case, we won’t be\nreturning a value from `unwrap`, so this code is valid."
        },
        {
          "kind": "text",
          "content": "One final expression that has the type `!` is a `loop`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-10-loop-returns-never/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Here, the loop never ends, so `!` is the value of the expression. However, this\nwouldn’t be true if we included a `break`, because the loop would terminate\nwhen it got to the `break`."
        },
        {
          "kind": "text",
          "content": "### Dynamically Sized Types and the `Sized` Trait"
        },
        {
          "kind": "text",
          "content": "Rust needs to know certain details about its types, such as how much space to\nallocate for a value of a particular type. This leaves one corner of its type\nsystem a little confusing at first: the concept of _dynamically sized types_.\nSometimes referred to as _DSTs_ or _unsized types_, these types let us write\ncode using values whose size we can know only at runtime."
        },
        {
          "kind": "text",
          "content": "Let’s dig into the details of a dynamically sized type called `str`, which\nwe’ve been using throughout the book. That’s right, not `&str`, but `str` on\nits own, is a DST. We can’t know how long the string is until runtime, meaning\nwe can’t create a variable of type `str`, nor can we take an argument of type\n`str`. Consider the following code, which does not work:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-11-cant-create-str/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "Rust needs to know how much memory to allocate for any value of a particular\ntype, and all values of a type must use the same amount of memory. If Rust\nallowed us to write this code, these two `str` values would need to take up the\nsame amount of space. But they have different lengths: `s1` needs 12 bytes of\nstorage and `s2` needs 15. This is why it’s not possible to create a variable\nholding a dynamically sized type."
        },
        {
          "kind": "text",
          "content": "So what do we do? In this case, you already know the answer: we make the types\nof `s1` and `s2` a `&str` rather than a `str`. Recall from [“String\nSlices”][string-slices]<!-- ignore --> in Chapter 4 that the slice data\nstructure just stores the starting position and the length of the slice. So\nalthough a `&T` is a single value that stores the memory address of where the\n`T` is located, a `&str` is _two_ values: the address of the `str` and its\nlength. As such, we can know the size of a `&str` value at compile time: it’s\ntwice the length of a `usize`. That is, we always know the size of a `&str`, no\nmatter how long the string it refers to is. In general, this is the way in which\ndynamically sized types are used in Rust: they have an extra bit of metadata\nthat stores the size of the dynamic information. The golden rule of dynamically\nsized types is that we must always put values of dynamically sized types behind\na pointer of some kind."
        },
        {
          "kind": "text",
          "content": "We can combine `str` with all kinds of pointers: for example, `Box<str>` or\n`Rc<str>`. In fact, you’ve seen this before but with a different dynamically\nsized type: traits. Every trait is a dynamically sized type we can refer to by\nusing the name of the trait. In [“Using Trait Objects That Allow for Values of\nDifferent\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!-- ignore\n--> in Chapter 18, we mentioned that to use traits as trait objects, we must put\nthem behind a pointer, such as `&dyn Trait` or `Box<dyn Trait>` (`Rc<dyn Trait>`\nwould work too)."
        },
        {
          "kind": "text",
          "content": "To work with DSTs, Rust provides the `Sized` trait to determine whether or not\na type’s size is known at compile time. This trait is automatically implemented\nfor everything whose size is known at compile time. In addition, Rust\nimplicitly adds a bound on `Sized` to every generic function. That is, a\ngeneric function definition like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-12-generic-fn-definition/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "is actually treated as though we had written this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-13-generic-implicit-sized-bound/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "By default, generic functions will work only on types that have a known size at\ncompile time. However, you can use the following special syntax to relax this\nrestriction:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/no-listing-14-generic-maybe-sized/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "A trait bound on `?Sized` means “`T` may or may not be `Sized`” and this\nnotation overrides the default that generic types must have a known size at\ncompile time. The `?Trait` syntax with this meaning is only available for\n`Sized`, not any other traits."
        },
        {
          "kind": "text",
          "content": "Also note that we switched the type of the `t` parameter from `T` to `&T`.\nBecause the type might not be `Sized`, we need to use it behind some kind of\npointer. In this case, we’ve chosen a reference."
        },
        {
          "kind": "text",
          "content": "Next, we’ll talk about functions and closures!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "d3d9197f-8baf-4ec5-9988-282c67636d3c",
                "type": "Tracing",
                "prompt": {
                  "program": "fn expect_none(x: Option<i32>) -> ! {\n    match x {\n        Some(n) => panic!(\"Expected none, found Some({n})\"),\n        None => ()\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", expect_none(None));\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 4
                },
                "context": "The `!` type is not an appropriate return type for this function because it only panics\nsome of the time, not all of the time.\n"
              },
              {
                "id": "5c5cb765-a561-459f-8223-9e72e824c5da",
                "type": "Tracing",
                "prompt": {
                  "program": "fn is_equal<T: Eq>(t1: &T, t2: &T) -> bool {\n  t1 == t2\n}\n\nfn main() {\n  println!(\"{}\", is_equal(\"Hello\", \"world\"));\n}\n\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 6
                },
                "context": "The call to `is_equal` passes values of type `&str`. That means `T = str`. However, `str`\nis only allowed to be used in such a generic function if `T` is marked as `?Sized`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[encapsulation-that-hides-implementation-details]: ch18-01-what-is-oo.html#encapsulation-that-hides-implementation-details\n[string-slices]: ch04-04-slices.html#string-slices\n[the-match-control-flow-operator]: ch06-02-match.html#the-match-control-flow-operator\n[using-trait-objects-that-allow-for-values-of-different-types]: ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n[using-the-newtype-pattern]: ch20-02-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types"
        }
      ]
    },
    {
      "title": "Advanced Functions and Closures",
      "file": "ch20-04-advanced-functions-and-closures.md",
      "elements": [
        {
          "kind": "text",
          "content": "This section explores some advanced features related to functions and closures,\nincluding function pointers and returning closures."
        },
        {
          "kind": "text",
          "content": "### Function Pointers"
        },
        {
          "kind": "text",
          "content": "We’ve talked about how to pass closures to functions; you can also pass regular\nfunctions to functions! This technique is useful when you want to pass a\nfunction you’ve already defined rather than defining a new closure. Functions\ncoerce to the type `fn` (with a lowercase _f_), not to be confused with the `Fn`\nclosure trait. The `fn` type is called a _function pointer_. Passing functions\nwith function pointers will allow you to use functions as arguments to other\nfunctions."
        },
        {
          "kind": "text",
          "content": "The syntax for specifying that a parameter is a function pointer is similar to\nthat of closures, as shown in Listing 20-28, where we’ve defined a function\n`add_one` that adds 1 to its parameter. The function `do_twice` takes two\nparameters: a function pointer to any function that takes an `i32` parameter\nand returns an `i32`, and one `i32` value. The `do_twice` function calls the\nfunction `f` twice, passing it the `arg` value, then adds the two function call\nresults together. The `main` function calls `do_twice` with the arguments\n`add_one` and `5`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-28\" file-name=\"src/main.rs\" caption=\"Using the `fn` type to accept a function pointer as an argument\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-28/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code prints `The answer is: 12`. We specify that the parameter `f` in\n`do_twice` is an `fn` that takes one parameter of type `i32` and returns an\n`i32`. We can then call `f` in the body of `do_twice`. In `main`, we can pass\nthe function name `add_one` as the first argument to `do_twice`."
        },
        {
          "kind": "text",
          "content": "Unlike closures, `fn` is a type rather than a trait, so we specify `fn` as the\nparameter type directly rather than declaring a generic type parameter with one\nof the `Fn` traits as a trait bound."
        },
        {
          "kind": "text",
          "content": "Function pointers implement all three of the closure traits (`Fn`, `FnMut`, and\n`FnOnce`), meaning you can always pass a function pointer as an argument for a\nfunction that expects a closure. It’s best to write functions using a generic\ntype and one of the closure traits so your functions can accept either\nfunctions or closures."
        },
        {
          "kind": "text",
          "content": "That said, one example of where you would want to only accept `fn` and not\nclosures is when interfacing with external code that doesn’t have closures: C\nfunctions can accept functions as arguments, but C doesn’t have closures."
        },
        {
          "kind": "text",
          "content": "As an example of where you could use either a closure defined inline or a named\nfunction, let’s look at a use of the `map` method provided by the `Iterator`\ntrait in the standard library. To use the `map` method to turn a vector of\nnumbers into a vector of strings, we could use a closure, as in Listing 20-29."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-29\" caption=\"Using a closure with the `map` method to convert numbers to strings\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-29/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Or we could name a function as the argument to map instead of the closure.\nListing 20-30 shows what this would look like."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-30\" caption=\"Using the `String::to_string` method to convert numbers to strings\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-30/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Note that we must use the fully qualified syntax that we talked about in\n[“Advanced Traits”][advanced-traits]<!-- ignore --> because there are multiple\nfunctions available named `to_string`."
        },
        {
          "kind": "text",
          "content": "Here, we’re using the `to_string` function defined in the `ToString` trait,\nwhich the standard library has implemented for any type that implements\n`Display`."
        },
        {
          "kind": "text",
          "content": "Recall from [“Enum values”][enum-values]<!-- ignore --> in Chapter 6 that the\nname of each enum variant that we define also becomes an initializer function.\nWe can use these initializer functions as function pointers that implement the\nclosure traits, which means we can specify the initializer functions as\narguments for methods that take closures, as seen in Listing 20-31."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-31\" caption=\"Using an enum initializers with the `map` method to create a `Status` instance from numbers\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-31/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here we create `Status::Value` instances using each `u32` value in the range\nthat `map` is called on by using the initializer function of `Status::Value`.\nSome people prefer this style and some people prefer to use closures. They\ncompile to the same code, so use whichever style is clearer to you."
        },
        {
          "kind": "text",
          "content": "### Returning Closures"
        },
        {
          "kind": "text",
          "content": "Closures are represented by traits, which means you can’t return closures\ndirectly. In most cases where you might want to return a trait, you can instead\nuse the concrete type that implements the trait as the return value of the\nfunction. However, you can’t usually do that with closures because they don’t\nhave a concrete type that is returnable. You’re not allowed to use the function\npointer `fn` as a return type if the closure captures any values from its scope,\nfor example."
        },
        {
          "kind": "text",
          "content": "Instead, you will normally use the `impl Trait` syntax we learned about in\nChapter 10. You can return any function type, using `Fn`, `FnOnce` and `FnMut`.\nFor example, the code in Listing 20-32 will work just fine."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-32\" caption=\"Returning a closure from a function using the `impl Trait` syntax\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-32/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "However, as we noted in [“Closure Type Inference and\nAnnotation”][closure-types]<!-- ignore --> in Chapter 13, each closure is also\nits own distinct type. If you need to work with multiple functions that have the\nsame signature but different implementations, you will need to use a trait\nobject for them. Consider what happens if you write code like that shown in\nListing 20-33."
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\" number=\"20-33\" caption=\"Creating a `Vec<T>` of closures defined by functions that return `impl Fn`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-33/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here we have two functions, `returns_closure` and `returns_initialized_closure`,\nwhich both return `impl Fn(i32) -> i32`. Notice that he closures that they\nreturn are different, even though they implement the same type. If we try to\ncompile this, Rust lets us know that it won’t work:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-33/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error message tells us that whenever we return an `impl Trait` Rust creates\na unique _opaque type_, a type where we cannot see into the details of what Rust\nconstructs for us. So even though these functions both return closures that\nimplements the same trait, `Fn(i32) -> i32`, the opaque types Rust generates for\neach are distinct. (This is similar to how Rust produces different concrete\ntypes for distinct async blocks even when they have the same output type, as we\nsaw in [“Working with Any Number of Futures”][any-number-of-futures] in Chapter\n17. We have seen a solution to this problem a few times now: we can use a trait\nobject, as in Listing 20-34."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-34\" caption=\"Creating a `Vec<T>` of closures defined by functions that return `Box<dyn Fn>` so they have the same type\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-34/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will compile just fine. For more about trait objects, refer to the\nsection [“Using Trait Objects That Allow for Values of Different\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!-- ignore\n--> in Chapter 18."
        },
        {
          "kind": "text",
          "content": "Next, let’s look at macros!"
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "f08ab588-1dca-438e-8108-a1b2410a4343",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Consider implementing a `register` function that takes a callback in two ways:\n\n```\nfn register1(cb: fn(Event) -> ());\nfn register2<F>(cb: F) where F: Fn(Event) -> ();\n```\n\nWhich type signature permits `register` to take the widest variety of arguments?\n",
                  "distractors": [
                    "`register1`",
                    "They are equivalent"
                  ]
                },
                "answer": {
                  "answer": "`register2`"
                },
                "context": "Closures with environments can be passed to `register2`, while only top-level functions (or closures without environments) can be passed to `register1`.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "[advanced-traits]: ch20-02-advanced-traits.html#advanced-traits\n[enum-values]: ch06-01-defining-an-enum.html#enum-values\n[closure-types]: ch13-01-closures.html#closure-type-inference-and-annotation\n[any-number-of-futures]: ch17-03-more-futures.html\n[using-trait-objects-that-allow-for-values-of-different-types]: ch18-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types"
        }
      ]
    },
    {
      "title": "Macros",
      "file": "ch20-05-macros.md",
      "elements": [
        {
          "kind": "text",
          "content": "We’ve used macros like `println!` throughout this book, but we haven’t fully\nexplored what a macro is and how it works. The term _macro_ refers to a family\nof features in Rust: _declarative_ macros with `macro_rules!` and three kinds\nof _procedural_ macros:"
        },
        {
          "kind": "text",
          "content": "- Custom `#[derive]` macros that specify code added with the `derive` attribute\nused on structs and enums\n- Attribute-like macros that define custom attributes usable on any item\n- Function-like macros that look like function calls but operate on the tokens\nspecified as their argument"
        },
        {
          "kind": "text",
          "content": "We’ll talk about each of these in turn, but first, let’s look at why we even\nneed macros when we already have functions."
        },
        {
          "kind": "text",
          "content": "### The Difference Between Macros and Functions"
        },
        {
          "kind": "text",
          "content": "Fundamentally, macros are a way of writing code that writes other code, which\nis known as _metaprogramming_. In Appendix C, we discuss the `derive`\nattribute, which generates an implementation of various traits for you. We’ve\nalso used the `println!` and `vec!` macros throughout the book. All of these\nmacros _expand_ to produce more code than the code you’ve written manually."
        },
        {
          "kind": "text",
          "content": "Metaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don’t have."
        },
        {
          "kind": "text",
          "content": "A function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call `println!(\"hello\")` with one argument or\n`println!(\"hello {}\", name)` with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can’t, because it gets\ncalled at runtime and a trait needs to be implemented at compile time."
        },
        {
          "kind": "text",
          "content": "The downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you’re writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions."
        },
        {
          "kind": "text",
          "content": "Another important difference between macros and functions is that you must\ndefine macros or bring them into scope _before_ you call them in a file, as\nopposed to functions you can define anywhere and call anywhere."
        },
        {
          "kind": "text",
          "content": "### Declarative Macros with `macro_rules!` for General Metaprogramming"
        },
        {
          "kind": "text",
          "content": "The most widely used form of macros in Rust is the _declarative macro_. These\nare also sometimes referred to as “macros by example,” “`macro_rules!` macros,”\nor just plain “macros.” At their core, declarative macros allow you to write\nsomething similar to a Rust `match` expression. As discussed in Chapter 6,\n`match` expressions are control structures that take an expression, compare the\nresultant value of the expression to patterns, and then run the code associated\nwith the matching pattern. Macros also compare a value to patterns that are\nassociated with particular code: in this situation, the value is the literal\nRust source code passed to the macro; the patterns are compared with the\nstructure of that source code; and the code associated with each pattern, when\nmatched, replaces the code passed to the macro. This all happens during\ncompilation."
        },
        {
          "kind": "text",
          "content": "To define a macro, you use the `macro_rules!` construct. Let’s explore how to\nuse `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8\ncovered how we can use the `vec!` macro to create a new vector with particular\nvalues. For example, the following macro creates a new vector containing three\nintegers:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "let v: Vec<u32> = vec![1, 2, 3];"
          }
        },
        {
          "kind": "text",
          "content": "We could also use the `vec!` macro to make a vector of two integers or a vector\nof five string slices. We wouldn’t be able to use a function to do the same\nbecause we wouldn’t know the number or type of values up front."
        },
        {
          "kind": "text",
          "content": "Listing 20-35 shows a slightly simplified definition of the `vec!` macro."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-35\" file-name=\"src/lib.rs\" caption=\"A simplified version of the `vec!` macro definition\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-35/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "> Note: The actual definition of the `vec!` macro in the standard library\n> includes code to pre-allocate the correct amount of memory up front. That code\n> is an optimization that we don’t include here, to make the example simpler."
        },
        {
          "kind": "text",
          "content": "The `#[macro_export]` annotation indicates that this macro should be made\navailable whenever the crate in which the macro is defined is brought into\nscope. Without this annotation, the macro can’t be brought into scope."
        },
        {
          "kind": "text",
          "content": "We then start the macro definition with `macro_rules!` and the name of the\nmacro we’re defining _without_ the exclamation mark. The name, in this case\n`vec`, is followed by curly brackets denoting the body of the macro definition."
        },
        {
          "kind": "text",
          "content": "The structure in the `vec!` body is similar to the structure of a `match`\nexpression. Here we have one arm with the pattern `( $( $x:expr ),* )`,\nfollowed by `=>` and the block of code associated with this pattern. If the\npattern matches, the associated block of code will be emitted. Given that this\nis the only pattern in this macro, there is only one valid way to match; any\nother pattern will result in an error. More complex macros will have more than\none arm."
        },
        {
          "kind": "text",
          "content": "Valid pattern syntax in macro definitions is different from the pattern syntax\ncovered in Chapter 19 because macro patterns are matched against Rust code\nstructure rather than values. Let’s walk through what the pattern pieces in\nListing 20-29 mean; for the full macro pattern syntax, see the [Rust\nReference][ref]."
        },
        {
          "kind": "text",
          "content": "First we use a set of parentheses to encompass the whole pattern. We use a\ndollar sign (`$`) to declare a variable in the macro system that will contain\nthe Rust code matching the pattern. The dollar sign makes it clear this is a\nmacro variable as opposed to a regular Rust variable. Next comes a set of\nparentheses that captures values that match the pattern within the parentheses\nfor use in the replacement code. Within `$()` is `$x:expr`, which matches any\nRust expression and gives the expression the name `$x`."
        },
        {
          "kind": "text",
          "content": "The comma following `$()` indicates that a literal comma separator character\nmust appear between each instance of the code that matches the code within\n`$()`. The `*` specifies that the pattern matches zero or more of whatever\nprecedes the `*`."
        },
        {
          "kind": "text",
          "content": "When we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three\ntimes with the three expressions `1`, `2`, and `3`."
        },
        {
          "kind": "text",
          "content": "Now let’s look at the pattern in the body of the code associated with this arm:\n`temp_vec.push()` within `$()*` is generated for each part that matches `$()`\nin the pattern zero or more times depending on how many times the pattern\nmatches. The `$x` is replaced with each expression matched. When we call this\nmacro with `vec![1, 2, 3];`, the code generated that replaces this macro call\nwill be the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{\n    let mut temp_vec = Vec::new();\n    temp_vec.push(1);\n    temp_vec.push(2);\n    temp_vec.push(3);\n    temp_vec\n}"
          }
        },
        {
          "kind": "text",
          "content": "We’ve defined a macro that can take any number of arguments of any type and can\ngenerate code to create a vector containing the specified elements."
        },
        {
          "kind": "text",
          "content": "To learn more about how to write macros, consult the online documentation or\nother resources, such as [“The Little Book of Rust Macros”][tlborm] started by\nDaniel Keep and continued by Lukas Wirth."
        },
        {
          "kind": "text",
          "content": "### Procedural Macros for Generating Code from Attributes"
        },
        {
          "kind": "text",
          "content": "The second form of macros is the procedural macro, which acts more like a\nfunction (and is a type of procedure). _Procedural macros_ accept some code as\nan input, operate on that code, and produce some code as an output rather than\nmatching against patterns and replacing the code with other code as declarative\nmacros do. The three kinds of procedural macros are custom `derive`,\nattribute-like, and function-like, and all work in a similar fashion."
        },
        {
          "kind": "text",
          "content": "When creating procedural macros, the definitions must reside in their own crate\nwith a special crate type. This is for complex technical reasons that we hope\nto eliminate in the future. In Listing 20-36, we show how to define a\nprocedural macro, where `some_attribute` is a placeholder for using a specific\nmacro variety."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-36\" file-name=\"src/lib.rs\" caption=\"An example of defining a procedural macro\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "use proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The function that defines a procedural macro takes a `TokenStream` as an input\nand produces a `TokenStream` as an output. The `TokenStream` type is defined by\nthe `proc_macro` crate that is included with Rust and represents a sequence of\ntokens. This is the core of the macro: the source code that the macro is\noperating on makes up the input `TokenStream`, and the code the macro produces\nis the output `TokenStream`. The function also has an attribute attached to it\nthat specifies which kind of procedural macro we’re creating. We can have\nmultiple kinds of procedural macros in the same crate."
        },
        {
          "kind": "text",
          "content": "Let’s look at the different kinds of procedural macros. We’ll start with a\ncustom `derive` macro and then explain the small dissimilarities that make the\nother forms different."
        },
        {
          "kind": "text",
          "content": "### How to Write a Custom `derive` Macro"
        },
        {
          "kind": "text",
          "content": "Let’s create a crate named `hello_macro` that defines a trait named\n`HelloMacro` with one associated function named `hello_macro`. Rather than\nmaking our users implement the `HelloMacro` trait for each of their types,\nwe’ll provide a procedural macro so users can annotate their type with\n`#[derive(HelloMacro)]` to get a default implementation of the `hello_macro`\nfunction. The default implementation will print `Hello, Macro! My name is\nTypeName!` where `TypeName` is the name of the type on which this trait has\nbeen defined. In other words, we’ll write a crate that enables another\nprogrammer to write code like Listing 20-37 using our crate."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-37\" file-name=\"src/main.rs\" caption=\"The code a user of our crate will be able to write when using our procedural macro\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-37/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code will print `Hello, Macro! My name is Pancakes!` when we’re done. The\nfirst step is to make a new library crate, like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new hello_macro --lib"
          }
        },
        {
          "kind": "text",
          "content": "Next, we’ll define the `HelloMacro` trait and its associated function:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\" number=\"20-38\" caption=\"A simple trait that we will use with the `derive` macro\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-38/hello_macro/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We have a trait and its function. At this point, our crate user could implement\nthe trait to achieve the desired functionality, as in Listing 20-39."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-39\" file-name=\"src/main.rs\" caption=\"How it would look if users wrote a manual implementation of the `HelloMacro` trait\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-39/pancakes/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "However, they would need to write the implementation block for each type they\nwanted to use with `hello_macro`; we want to spare them from having to do this\nwork."
        },
        {
          "kind": "text",
          "content": "Additionally, we can’t yet provide the `hello_macro` function with default\nimplementation that will print the name of the type the trait is implemented\non: Rust doesn’t have reflection capabilities, so it can’t look up the type’s\nname at runtime. We need a macro to generate code at compile time."
        },
        {
          "kind": "text",
          "content": "The next step is to define the procedural macro. At the time of this writing,\nprocedural macros need to be in their own crate. Eventually, this restriction\nmight be lifted. The convention for structuring crates and macro crates is as\nfollows: for a crate named `foo`, a custom `derive` procedural macro crate is\ncalled `foo_derive`. Let’s start a new crate called `hello_macro_derive` inside\nour `hello_macro` project:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new hello_macro_derive --lib"
          }
        },
        {
          "kind": "text",
          "content": "Our two crates are tightly related, so we create the procedural macro crate\nwithin the directory of our `hello_macro` crate. If we change the trait\ndefinition in `hello_macro`, we’ll have to change the implementation of the\nprocedural macro in `hello_macro_derive` as well. The two crates will need to\nbe published separately, and programmers using these crates will need to add\nboth as dependencies and bring them both into scope. We could instead have the\n`hello_macro` crate use `hello_macro_derive` as a dependency and re-export the\nprocedural macro code. However, the way we’ve structured the project makes it\npossible for programmers to use `hello_macro` even if they don’t want the\n`derive` functionality."
        },
        {
          "kind": "text",
          "content": "We need to declare the `hello_macro_derive` crate as a procedural macro crate.\nWe’ll also need functionality from the `syn` and `quote` crates, as you’ll see\nin a moment, so we need to add them as dependencies. Add the following to the\n_Cargo.toml_ file for `hello_macro_derive`:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"hello_macro_derive/Cargo.toml\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/listing-20-40/hello_macro/hello_macro_derive/Cargo.toml:6:12}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To start defining the procedural macro, place the code in Listing 20-40 into\nyour _src/lib.rs_ file for the `hello_macro_derive` crate. Note that this code\nwon’t compile until we add a definition for the `impl_hello_macro` function."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-40\" file-name=\"hello_macro_derive/src/lib.rs\" caption=\"Code that most procedural macro crates will require in order to process Rust code\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-40/hello_macro/hello_macro_derive/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Notice that we’ve split the code into the `hello_macro_derive` function, which\nis responsible for parsing the `TokenStream`, and the `impl_hello_macro`\nfunction, which is responsible for transforming the syntax tree: this makes\nwriting a procedural macro more convenient. The code in the outer function\n(`hello_macro_derive` in this case) will be the same for almost every\nprocedural macro crate you see or create. The code you specify in the body of\nthe inner function (`impl_hello_macro` in this case) will be different\ndepending on your procedural macro’s purpose."
        },
        {
          "kind": "text",
          "content": "We’ve introduced three new crates: `proc_macro`, [`syn`], and [`quote`]. The\n`proc_macro` crate comes with Rust, so we didn’t need to add that to the\ndependencies in _Cargo.toml_. The `proc_macro` crate is the compiler’s API that\nallows us to read and manipulate Rust code from our code."
        },
        {
          "kind": "text",
          "content": "The `syn` crate parses Rust code from a string into a data structure that we\ncan perform operations on. The `quote` crate turns `syn` data structures back\ninto Rust code. These crates make it much simpler to parse any sort of Rust\ncode we might want to handle: writing a full parser for Rust code is no simple\ntask."
        },
        {
          "kind": "text",
          "content": "The `hello_macro_derive` function will be called when a user of our library\nspecifies `#[derive(HelloMacro)]` on a type. This is possible because we’ve\nannotated the `hello_macro_derive` function here with `proc_macro_derive` and\nspecified the name `HelloMacro`, which matches our trait name; this is the\nconvention most procedural macros follow."
        },
        {
          "kind": "text",
          "content": "The `hello_macro_derive` function first converts the `input` from a\n`TokenStream` to a data structure that we can then interpret and perform\noperations on. This is where `syn` comes into play. The `parse` function in\n`syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the\nparsed Rust code. Listing 20-41 shows the relevant parts of the `DeriveInput`\nstruct we get from parsing the `struct Pancakes;` string."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-41\" caption=\"The `DeriveInput` instance we get when parsing the code that has the macro’s attribute in Listing 20-37\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "DeriveInput {\n    // --snip--\n\n    ident: Ident {\n        ident: \"Pancakes\",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The fields of this struct show that the Rust code we’ve parsed is a unit struct\nwith the `ident` (_identifier_, meaning the name) of `Pancakes`. There are more\nfields on this struct for describing all sorts of Rust code; check the [`syn`\ndocumentation for `DeriveInput`][syn-docs] for more information."
        },
        {
          "kind": "text",
          "content": "Soon we’ll define the `impl_hello_macro` function, which is where we’ll build\nthe new Rust code we want to include. But before we do, note that the output\nfor our `derive` macro is also a `TokenStream`. The returned `TokenStream` is\nadded to the code that our crate users write, so when they compile their crate,\nthey’ll get the extra functionality that we provide in the modified\n`TokenStream`."
        },
        {
          "kind": "text",
          "content": "You might have noticed that we’re calling `unwrap` to cause the\n`hello_macro_derive` function to panic if the call to the `syn::parse` function\nfails here. It’s necessary for our procedural macro to panic on errors because\n`proc_macro_derive` functions must return `TokenStream` rather than `Result` to\nconform to the procedural macro API. We’ve simplified this example by using\n`unwrap`; in production code, you should provide more specific error messages\nabout what went wrong by using `panic!` or `expect`."
        },
        {
          "kind": "text",
          "content": "Now that we have the code to turn the annotated Rust code from a `TokenStream`\ninto a `DeriveInput` instance, let’s generate the code that implements the\n`HelloMacro` trait on the annotated type, as shown in Listing 20-42."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"20-42\" file-name=\"hello_macro_derive/src/lib.rs\" caption=\"Implementing the `HelloMacro` trait using the parsed Rust code\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch20-advanced-features/listing-20-42/hello_macro/hello_macro_derive/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We get an `Ident` struct instance containing the name (identifier) of the\nannotated type using `ast.ident`. The struct in Listing 20-33 shows that when\nwe run the `impl_hello_macro` function on the code in Listing 20-31, the\n`ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus,\nthe `name` variable in Listing 20-34 will contain an `Ident` struct instance\nthat, when printed, will be the string `\"Pancakes\"`, the name of the struct in\nListing 20-37."
        },
        {
          "kind": "text",
          "content": "The `quote!` macro lets us define the Rust code that we want to return. The\ncompiler expects something different to the direct result of the `quote!`\nmacro’s execution, so we need to convert it to a `TokenStream`. We do this by\ncalling the `into` method, which consumes this intermediate representation and\nreturns a value of the required `TokenStream` type."
        },
        {
          "kind": "text",
          "content": "The `quote!` macro also provides some very cool templating mechanics: we can\nenter `#name`, and `quote!` will replace it with the value in the variable\n`name`. You can even do some repetition similar to the way regular macros work.\nCheck out [the `quote` crate’s docs][quote-docs] for a thorough introduction."
        },
        {
          "kind": "text",
          "content": "We want our procedural macro to generate an implementation of our `HelloMacro`\ntrait for the type the user annotated, which we can get by using `#name`. The\ntrait implementation has the one function `hello_macro`, whose body contains the\nfunctionality we want to provide: printing `Hello, Macro! My name is` and then\nthe name of the annotated type."
        },
        {
          "kind": "text",
          "content": "The `stringify!` macro used here is built into Rust. It takes a Rust\nexpression, such as `1 + 2`, and at compile time turns the expression into a\nstring literal, such as `\"1 + 2\"`. This is different from `format!` or\n`println!`, macros which evaluate the expression and then turn the result into\na `String`. There is a possibility that the `#name` input might be an\nexpression to print literally, so we use `stringify!`. Using `stringify!` also\nsaves an allocation by converting `#name` to a string literal at compile time."
        },
        {
          "kind": "text",
          "content": "At this point, `cargo build` should complete successfully in both `hello_macro`\nand `hello_macro_derive`. Let’s hook up these crates to the code in Listing\n20-31 to see the procedural macro in action! Create a new binary project in\nyour _projects_ directory using `cargo new pancakes`. We need to add\n`hello_macro` and `hello_macro_derive` as dependencies in the `pancakes`\ncrate’s _Cargo.toml_. If you’re publishing your versions of `hello_macro` and\n`hello_macro_derive` to [crates.io](https://crates.io/), they would be regular\ndependencies; if not, you can specify them as `path` dependencies as follows:"
        },
        {
          "kind": "code",
          "content": {
            "language": "toml",
            "flags": [],
            "code": "{{#include ../listings/ch20-advanced-features/no-listing-21-pancakes/pancakes/Cargo.toml:7:9}}"
          }
        },
        {
          "kind": "text",
          "content": "Put the code in Listing 20-37 into _src/main.rs_, and run `cargo run`: it\nshould print `Hello, Macro! My name is Pancakes!` The implementation of the\n`HelloMacro` trait from the procedural macro was included without the\n`pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the\ntrait implementation."
        },
        {
          "kind": "text",
          "content": "Next, let’s explore how the other kinds of procedural macros differ from custom\n`derive` macros."
        },
        {
          "kind": "text",
          "content": "### Attribute-Like macros"
        },
        {
          "kind": "text",
          "content": "Attribute-like macros are similar to custom `derive` macros, but instead of\ngenerating code for the `derive` attribute, they allow you to create new\nattributes. They’re also more flexible: `derive` only works for structs and\nenums; attributes can be applied to other items as well, such as functions.\nHere’s an example of using an attribute-like macro. Say you have an attribute\nnamed `route` that annotates functions when using a web application framework:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "#[route(GET, \"/\")]\nfn index() {"
          }
        },
        {
          "kind": "text",
          "content": "This `#[route]` attribute would be defined by the framework as a procedural\nmacro. The signature of the macro definition function would look like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {"
          }
        },
        {
          "kind": "text",
          "content": "Here, we have two parameters of type `TokenStream`. The first is for the\ncontents of the attribute: the `GET, \"/\"` part. The second is the body of the\nitem the attribute is attached to: in this case, `fn index() {}` and the rest\nof the function’s body."
        },
        {
          "kind": "text",
          "content": "Other than that, attribute-like macros work the same way as custom `derive`\nmacros: you create a crate with the `proc-macro` crate type and implement a\nfunction that generates the code you want!"
        },
        {
          "kind": "text",
          "content": "### Function-Like macros"
        },
        {
          "kind": "text",
          "content": "Function-like macros define macros that look like function calls. Similarly to\n`macro_rules!` macros, they’re more flexible than functions; for example, they\ncan take an unknown number of arguments. However, `macro_rules!` macros can only\nbe defined using the match-like syntax we discussed in [“Declarative Macros with\n`macro_rules!` for General Metaprogramming”][decl]<!-- ignore --> earlier.\nFunction-like macros take a `TokenStream` parameter and their definition\nmanipulates that `TokenStream` using Rust code as the other two types of\nprocedural macros do. An example of a function-like macro is an `sql!` macro\nthat might be called like so:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "let sql = sql!(SELECT * FROM posts WHERE id=1);"
          }
        },
        {
          "kind": "text",
          "content": "This macro would parse the SQL statement inside it and check that it’s\nsyntactically correct, which is much more complex processing than a\n`macro_rules!` macro can do. The `sql!` macro would be defined like this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {"
          }
        },
        {
          "kind": "text",
          "content": "This definition is similar to the custom `derive` macro’s signature: we receive\nthe tokens that are inside the parentheses and return the code we wanted to\ngenerate."
        },
        {
          "kind": "quiz",
          "content": {
            "questions": [
              {
                "id": "8c80f9e8-2d95-43cc-9aa4-04d617dd8cb9",
                "type": "Tracing",
                "prompt": {
                  "program": "macro_rules! manylet {\n    ( $( $i:ident ),* = $e:expr ) => {\n        $(\n            let mut $i = $e;\n        )*\n    }\n}\n\nfn main() {\n    let mut s = String::from(\"A\");\n    manylet!(x, y = s);\n    x.push_str(\"B\");\n    println!(\"{x}{y}\");\n}\n"
                },
                "answer": {
                  "doesCompile": false,
                  "lineNumber": 11
                },
                "context": "The `manylet` macro syntactically duplicates the expression `e` as a binding to each\nvariable on the left-hand side of the equals. However, because `s` is an owned string, \nthen the first binding to `x` moves `s`, and the second binding to `y` is invalid.\n"
              },
              {
                "id": "f4f664ef-4b0b-43ac-ba90-5051a4ef89fb",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following are valid reasons for implementing a macro as a\nprocedural macro instead of a declarative macro?\n",
                  "distractors": [
                    "You want to generate variable-length sequences of code",
                    "Your macro requires an entire item as input, not just an expression"
                  ]
                },
                "answer": {
                  "answer": [
                    "You want to integrate with Rust's derive system",
                    "Your macro requires nontrivial analysis of the macro user's syntax"
                  ]
                },
                "context": "Procedural macros are the only way to create a custom derive. Procedural macros\nare also useful when you need code to analyze the macro user's syntax &mdash; declarative\nmacros only permit shuffling around the input, not e.g. computing its size.\n\nDeclarative macros can generate variable-length sequences of code, and can wrap/produce\nitems and not just expressions.\n"
              },
              {
                "id": "4c7dce03-99c6-41e3-8482-ccf4e30974ff",
                "type": "MultipleChoice",
                "prompt": {
                  "prompt": "Which of the following best describes the input to a procedural macro? \n",
                  "distractors": [
                    "The input is a typed control-flow graph",
                    "The input is an abstract syntax tree",
                    "The input is a byte-string"
                  ]
                },
                "answer": {
                  "answer": "The input is a sequence of tokens"
                },
                "context": "Procedural macros take as input (and produce as output) token streams.\nYou can use crates like `syn` to convert tokens to syntax trees.\n"
              }
            ]
          }
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Whew! Now you have some Rust features in your toolbox that you likely won’t use\noften, but you’ll know they’re available in very particular circumstances.\nWe’ve introduced several complex topics so that when you encounter them in\nerror message suggestions or in other people’s code, you’ll be able to\nrecognize these concepts and syntax. Use this chapter as a reference to guide\nyou to solutions."
        },
        {
          "kind": "text",
          "content": "Next, we’ll put everything we’ve discussed throughout the book into practice\nand do one more project!"
        },
        {
          "kind": "text",
          "content": "[ref]: ../reference/macros-by-example.html\n[tlborm]: https://veykril.github.io/tlborm/\n[`syn`]: https://crates.io/crates/syn\n[`quote`]: https://crates.io/crates/quote\n[syn-docs]: https://docs.rs/syn/2.0/syn/struct.DeriveInput.html\n[quote-docs]: https://docs.rs/quote\n[decl]: #declarative-macros-with-macro_rules-for-general-metaprogramming"
        }
      ]
    },
    {
      "title": "Final Project: Building a Multithreaded Web Server",
      "file": "ch21-00-final-project-a-web-server.md",
      "elements": [
        {
          "kind": "text",
          "content": "It’s been a long journey, but we’ve reached the end of the book. In this\nchapter, we’ll build one more project together to demonstrate some of the\nconcepts we covered in the final chapters, as well as recap some earlier\nlessons."
        },
        {
          "kind": "text",
          "content": "For our final project, we’ll make a web server that says “hello” and looks like\nFigure 21-1 in a web browser."
        },
        {
          "kind": "text",
          "content": "![hello from rust](img/trpl21-01.png)"
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Figure 21-1: Our final shared project</span>"
        },
        {
          "kind": "text",
          "content": "Here is our plan for building the web server:"
        },
        {
          "kind": "text",
          "content": "1. Learn a bit about TCP and HTTP.\n2. Listen for TCP connections on a socket.\n3. Parse a small number of HTTP requests.\n4. Create a proper HTTP response.\n5. Improve the throughput of our server with a thread pool."
        },
        {
          "kind": "text",
          "content": "Before we get started, we should mention two details. First, the method we’ll\nuse won’t be the best way to build a web server with Rust. Community members\nhave published a number of production-ready crates available on\n[crates.io](https://crates.io/) that provide more complete web server and thread\npool implementations than we’ll build. However, our intention in this chapter is\nto help you learn, not to take the easy route. Because Rust is a systems\nprogramming language, we can choose the level of abstraction we want to work\nwith and can go to a lower level than is possible or practical in other\nlanguages."
        },
        {
          "kind": "text",
          "content": "Second, we will not be using async and await here. Building a thread pool is a\nbig enough challenge on its own, without adding in building an async runtime!\nHowever, we will note how async and await might be applicable to some of the\nsame problems we will see in this chapter. Ultimately, as we noted back in\nChapter 17, many async runtimes use thread pools for managing their work."
        },
        {
          "kind": "text",
          "content": "We’ll therefore write the basic HTTP server and thread pool manually so you can\nlearn the general ideas and techniques behind the crates you might use in the\nfuture."
        }
      ]
    },
    {
      "title": "Building a Single-Threaded Web Server",
      "file": "ch21-01-single-threaded.md",
      "elements": [
        {
          "kind": "text",
          "content": "We’ll start by getting a single-threaded web server working. Before we begin,\nlet’s look at a quick overview of the protocols involved in building web\nservers. The details of these protocols are beyond the scope of this book, but\na brief overview will give you the information you need."
        },
        {
          "kind": "text",
          "content": "The two main protocols involved in web servers are _Hypertext Transfer\nProtocol_ _(HTTP)_ and _Transmission Control Protocol_ _(TCP)_. Both protocols\nare _request-response_ protocols, meaning a _client_ initiates requests and a\n_server_ listens to the requests and provides a response to the client. The\ncontents of those requests and responses are defined by the protocols."
        },
        {
          "kind": "text",
          "content": "TCP is the lower-level protocol that describes the details of how information\ngets from one server to another but doesn’t specify what that information is.\nHTTP builds on top of TCP by defining the contents of the requests and\nresponses. It’s technically possible to use HTTP with other protocols, but in\nthe vast majority of cases, HTTP sends its data over TCP. We’ll work with the\nraw bytes of TCP and HTTP requests and responses."
        },
        {
          "kind": "text",
          "content": "### Listening to the TCP Connection"
        },
        {
          "kind": "text",
          "content": "Our web server needs to listen to a TCP connection, so that’s the first part\nwe’ll work on. The standard library offers a `std::net` module that lets us do\nthis. Let’s make a new project in the usual fashion:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo new hello\n     Created binary (application) `hello` project\n$ cd hello"
          }
        },
        {
          "kind": "text",
          "content": "Now enter the code in Listing 21-1 in _src/main.rs_ to start. This code will\nlisten at the local address `127.0.0.1:7878` for incoming TCP streams. When it\ngets an incoming stream, it will print `Connection established!`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-1\" file-name=\"src/main.rs\" caption=\"Listening for incoming streams and printing a message when we receive a stream\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-01/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Using `TcpListener`, we can listen for TCP connections at the address\n`127.0.0.1:7878`. In the address, the section before the colon is an IP address\nrepresenting your computer (this is the same on every computer and doesn’t\nrepresent the authors’ computer specifically), and `7878` is the port. We’ve\nchosen this port for two reasons: HTTP isn’t normally accepted on this port so\nour server is unlikely to conflict with any other web server you might have\nrunning on your machine, and 7878 is _rust_ typed on a telephone."
        },
        {
          "kind": "text",
          "content": "The `bind` function in this scenario works like the `new` function in that it\nwill return a new `TcpListener` instance. The function is called `bind`\nbecause, in networking, connecting to a port to listen to is known as “binding\nto a port.”"
        },
        {
          "kind": "text",
          "content": "The `bind` function returns a `Result<T, E>`, which indicates that it’s\npossible for binding to fail. For example, connecting to port 80 requires\nadministrator privileges (non-administrators can listen only on ports higher\nthan 1023), so if we tried to connect to port 80 without being an\nadministrator, binding wouldn’t work. Binding also wouldn’t work, for example,\nif we ran two instances of our program and so had two programs listening to the\nsame port. Because we’re writing a basic server just for learning purposes, we\nwon’t worry about handling these kinds of errors; instead, we use `unwrap` to\nstop the program if errors happen."
        },
        {
          "kind": "text",
          "content": "The `incoming` method on `TcpListener` returns an iterator that gives us a\nsequence of streams (more specifically, streams of type `TcpStream`). A single\n_stream_ represents an open connection between the client and the server. A\n_connection_ is the name for the full request and response process in which a\nclient connects to the server, the server generates a response, and the server\ncloses the connection. As such, we will read from the `TcpStream` to see what\nthe client sent and then write our response to the stream to send data back to\nthe client. Overall, this `for` loop will process each connection in turn and\nproduce a series of streams for us to handle."
        },
        {
          "kind": "text",
          "content": "For now, our handling of the stream consists of calling `unwrap` to terminate\nour program if the stream has any errors; if there aren’t any errors, the\nprogram prints a message. We’ll add more functionality for the success case in\nthe next listing. The reason we might receive errors from the `incoming` method\nwhen a client connects to the server is that we’re not actually iterating over\nconnections. Instead, we’re iterating over _connection attempts_. The\nconnection might not be successful for a number of reasons, many of them\noperating system specific. For example, many operating systems have a limit to\nthe number of simultaneous open connections they can support; new connection\nattempts beyond that number will produce an error until some of the open\nconnections are closed."
        },
        {
          "kind": "text",
          "content": "Let’s try running this code! Invoke `cargo run` in the terminal and then load\n_127.0.0.1:7878_ in a web browser. The browser should show an error message\nlike “Connection reset” because the server isn’t currently sending back any\ndata. But when you look at your terminal, you should see several messages that\nwere printed when the browser connected to the server!"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!"
          }
        },
        {
          "kind": "text",
          "content": "Sometimes you’ll see multiple messages printed for one browser request; the\nreason might be that the browser is making a request for the page as well as a\nrequest for other resources, like the _favicon.ico_ icon that appears in the\nbrowser tab."
        },
        {
          "kind": "text",
          "content": "It could also be that the browser is trying to connect to the server multiple\ntimes because the server isn’t responding with any data. When `stream` goes out\nof scope and is dropped at the end of the loop, the connection is closed as\npart of the `drop` implementation. Browsers sometimes deal with closed\nconnections by retrying, because the problem might be temporary."
        },
        {
          "kind": "text",
          "content": "Browsers also sometimes open multiple connections to the server without sending\nany requests, so that if they *do* later send requests, they can happen faster.\nWhen this happens, our server will see each connection, regardless of whether\nthere are any requests over that connection. Many versions of Chrome-based\nbrowsers do this, for example; you can disable that optimization by using =\nprivate browsing mode or use a different browser."
        },
        {
          "kind": "text",
          "content": "The important factor is that we’ve successfully gotten a handle to a TCP\nconnection!"
        },
        {
          "kind": "text",
          "content": "Remember to stop the program by pressing <kbd>ctrl</kbd>-<kbd>c</kbd> when\nyou’re done running a particular version of the code. Then restart the program\nby invoking the `cargo run` command after you’ve made each set of code changes\nto make sure you’re running the newest code."
        },
        {
          "kind": "text",
          "content": "### Reading the Request"
        },
        {
          "kind": "text",
          "content": "Let’s implement the functionality to read the request from the browser! To\nseparate the concerns of first getting a connection and then taking some action\nwith the connection, we’ll start a new function for processing connections. In\nthis new `handle_connection` function, we’ll read data from the TCP stream and\nprint it so we can see the data being sent from the browser. Change the code to\nlook like Listing 21-2."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-2\" file-name=\"src/main.rs\" caption=\"Reading from the `TcpStream` and printing the data\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-02/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We bring `std::io::prelude` and `std::io::BufReader` into scope to get access\nto traits and types that let us read from and write to the stream. In the `for`\nloop in the `main` function, instead of printing a message that says we made a\nconnection, we now call the new `handle_connection` function and pass the\n`stream` to it."
        },
        {
          "kind": "text",
          "content": "In the `handle_connection` function, we create a new `BufReader` instance that\nwraps a reference to the `stream`. The `BufReader` adds buffering by managing calls\nto the `std::io::Read` trait methods for us."
        },
        {
          "kind": "text",
          "content": "We create a variable named `http_request` to collect the lines of the request\nthe browser sends to our server. We indicate that we want to collect these\nlines in a vector by adding the `Vec<_>` type annotation."
        },
        {
          "kind": "text",
          "content": "`BufReader` implements the `std::io::BufRead` trait, which provides the `lines`\nmethod. The `lines` method returns an iterator of `Result<String,\nstd::io::Error>` by splitting the stream of data whenever it sees a newline\nbyte. To get each `String`, we map and `unwrap` each `Result`. The `Result`\nmight be an error if the data isn’t valid UTF-8 or if there was a problem\nreading from the stream. Again, a production program should handle these errors\nmore gracefully, but we’re choosing to stop the program in the error case for\nsimplicity."
        },
        {
          "kind": "text",
          "content": "The browser signals the end of an HTTP request by sending two newline\ncharacters in a row, so to get one request from the stream, we take lines until\nwe get a line that is the empty string. Once we’ve collected the lines into the\nvector, we’re printing them out using pretty debug formatting so we can take a\nlook at the instructions the web browser is sending to our server."
        },
        {
          "kind": "text",
          "content": "Let’s try this code! Start the program and make a request in a web browser\nagain. Note that we’ll still get an error page in the browser, but our\nprogram’s output in the terminal will now look similar to this:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/hello`\nRequest: [\n    \"GET / HTTP/1.1\",\n    \"Host: 127.0.0.1:7878\",\n    \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\",\n    \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Language: en-US,en;q=0.5\",\n    \"Accept-Encoding: gzip, deflate, br\",\n    \"DNT: 1\",\n    \"Connection: keep-alive\",\n    \"Upgrade-Insecure-Requests: 1\",\n    \"Sec-Fetch-Dest: document\",\n    \"Sec-Fetch-Mode: navigate\",\n    \"Sec-Fetch-Site: none\",\n    \"Sec-Fetch-User: ?1\",\n    \"Cache-Control: max-age=0\",\n]"
          }
        },
        {
          "kind": "text",
          "content": "Depending on your browser, you might get slightly different output. Now that\nwe’re printing the request data, we can see why we get multiple connections\nfrom one browser request by looking at the path after `GET` in the first line\nof the request. If the repeated connections are all requesting _/_, we know the\nbrowser is trying to fetch _/_ repeatedly because it’s not getting a response\nfrom our program."
        },
        {
          "kind": "text",
          "content": "Let’s break down this request data to understand what the browser is asking of\nour program."
        },
        {
          "kind": "text",
          "content": "### A Closer Look at an HTTP Request"
        },
        {
          "kind": "text",
          "content": "HTTP is a text-based protocol, and a request takes this format:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "Method Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body"
          }
        },
        {
          "kind": "text",
          "content": "The first line is the _request line_ that holds information about what the\nclient is requesting. The first part of the request line indicates the _method_\nbeing used, such as `GET` or `POST`, which describes how the client is making\nthis request. Our client used a `GET` request, which means it is asking for\ninformation."
        },
        {
          "kind": "text",
          "content": "The next part of the request line is _/_, which indicates the _uniform resource\nidentifier_ _(URI)_ the client is requesting: a URI is almost, but not quite,\nthe same as a _uniform resource locator_ _(URL)_. The difference between URIs\nand URLs isn’t important for our purposes in this chapter, but the HTTP spec\nuses the term URI, so we can just mentally substitute _URL_ for _URI_ here."
        },
        {
          "kind": "text",
          "content": "The last part is the HTTP version the client uses, and then the request line\nends in a CRLF sequence. (CRLF stands for _carriage return_ and _line feed_,\nwhich are terms from the typewriter days!) The CRLF sequence can also be\nwritten as `\\r\\n`, where `\\r` is a carriage return and `\\n` is a line feed. The\n_CRLF sequence_ separates the request line from the rest of the request data.\nNote that when the CRLF is printed, we see a new line start rather than `\\r\\n`."
        },
        {
          "kind": "text",
          "content": "Looking at the request line data we received from running our program so far,\nwe see that `GET` is the method, _/_ is the request URI, and `HTTP/1.1` is the\nversion."
        },
        {
          "kind": "text",
          "content": "After the request line, the remaining lines starting from `Host:` onward are\nheaders. `GET` requests have no body."
        },
        {
          "kind": "text",
          "content": "Try making a request from a different browser or asking for a different\naddress, such as _127.0.0.1:7878/test_, to see how the request data changes."
        },
        {
          "kind": "text",
          "content": "Now that we know what the browser is asking for, let’s send back some data!"
        },
        {
          "kind": "text",
          "content": "### Writing a Response"
        },
        {
          "kind": "text",
          "content": "We’re going to implement sending data in response to a client request.\nResponses have the following format:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "HTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body"
          }
        },
        {
          "kind": "text",
          "content": "The first line is a _status line_ that contains the HTTP version used in the\nresponse, a numeric status code that summarizes the result of the request, and\na reason phrase that provides a text description of the status code. After the\nCRLF sequence are any headers, another CRLF sequence, and the body of the\nresponse."
        },
        {
          "kind": "text",
          "content": "Here is an example response that uses HTTP version 1.1, and has a status code of\n200, an OK reason phrase, no headers, and no body:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "HTTP/1.1 200 OK\\r\\n\\r\\n"
          }
        },
        {
          "kind": "text",
          "content": "The status code 200 is the standard success response. The text is a tiny\nsuccessful HTTP response. Let’s write this to the stream as our response to a\nsuccessful request! From the `handle_connection` function, remove the\n`println!` that was printing the request data and replace it with the code in\nListing 21-3."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-3\" file-name=\"src/main.rs\" caption=\"Writing a tiny successful HTTP response to the stream\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-03/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "The first new line defines the `response` variable that holds the success\nmessage’s data. Then we call `as_bytes` on our `response` to convert the string\ndata to bytes. The `write_all` method on `stream` takes a `&[u8]` and sends\nthose bytes directly down the connection. Because the `write_all` operation\ncould fail, we use `unwrap` on any error result as before. Again, in a real\napplication you would add error handling here."
        },
        {
          "kind": "text",
          "content": "With these changes, let’s run our code and make a request. We’re no longer\nprinting any data to the terminal, so we won’t see any output other than the\noutput from Cargo. When you load _127.0.0.1:7878_ in a web browser, you should\nget a blank page instead of an error. You’ve just handcoded receiving an HTTP\nrequest and sending a response!"
        },
        {
          "kind": "text",
          "content": "### Returning Real HTML"
        },
        {
          "kind": "text",
          "content": "Let’s implement the functionality for returning more than a blank page. Create\nthe new file _hello.html_ in the root of your project directory, not in the\n_src_ directory. You can input any HTML you want; Listing 21-4 shows one\npossibility."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-4\" file-name=\"hello.html\" caption=\"A sample HTML file to return in a response\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "html",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/listing-21-05/hello.html}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This is a minimal HTML5 document with a heading and some text. To return this\nfrom the server when a request is received, we’ll modify `handle_connection` as\nshown in Listing 21-5 to read the HTML file, add it to the response as a body,\nand send it."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-5\" file-name=\"src/main.rs\" caption=\"Sending the contents of *hello.html* as the body of the response\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-05/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve added `fs` to the `use` statement to bring the standard library’s\nfilesystem module into scope. The code for reading the contents of a file to a\nstring should look familiar; we used it when we read the contents of a file for\nour I/O project in Listing 12-4."
        },
        {
          "kind": "text",
          "content": "Next, we use `format!` to add the file’s contents as the body of the success\nresponse. To ensure a valid HTTP response, we add the `Content-Length` header\nwhich is set to the size of our response body, in this case the size of\n`hello.html`."
        },
        {
          "kind": "text",
          "content": "Run this code with `cargo run` and load _127.0.0.1:7878_ in your browser; you\nshould see your HTML rendered!"
        },
        {
          "kind": "text",
          "content": "Currently, we’re ignoring the request data in `http_request` and just sending\nback the contents of the HTML file unconditionally. That means if you try\nrequesting _127.0.0.1:7878/something-else_ in your browser, you’ll still get\nback this same HTML response. At the moment, our server is very limited and\ndoes not do what most web servers do. We want to customize our responses\ndepending on the request and only send back the HTML file for a well-formed\nrequest to _/_."
        },
        {
          "kind": "text",
          "content": "### Validating the Request and Selectively Responding"
        },
        {
          "kind": "text",
          "content": "Right now, our web server will return the HTML in the file no matter what the\nclient requested. Let’s add functionality to check that the browser is\nrequesting _/_ before returning the HTML file and return an error if the\nbrowser requests anything else. For this we need to modify `handle_connection`,\nas shown in Listing 21-6. This new code checks the content of the request\nreceived against what we know a request for _/_ looks like and adds `if` and\n`else` blocks to treat requests differently."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-6\" file-name=\"src/main.rs\" caption=\"Handling requests to */* differently from other requests\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-06/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’re only going to be looking at the first line of the HTTP request, so rather\nthan reading the entire request into a vector, we’re calling `next` to get the\nfirst item from the iterator. The first `unwrap` takes care of the `Option` and\nstops the program if the iterator has no items. The second `unwrap` handles the\n`Result` and has the same effect as the `unwrap` that was in the `map` added in\nListing 21-2."
        },
        {
          "kind": "text",
          "content": "Next, we check the `request_line` to see if it equals the request line of a GET\nrequest to the _/_ path. If it does, the `if` block returns the contents of our\nHTML file."
        },
        {
          "kind": "text",
          "content": "If the `request_line` does _not_ equal the GET request to the _/_ path, it\nmeans we’ve received some other request. We’ll add code to the `else` block in\na moment to respond to all other requests."
        },
        {
          "kind": "text",
          "content": "Run this code now and request _127.0.0.1:7878_; you should get the HTML in\n_hello.html_. If you make any other request, such as\n_127.0.0.1:7878/something-else_, you’ll get a connection error like those you\nsaw when running the code in Listing 21-1 and Listing 21-2."
        },
        {
          "kind": "text",
          "content": "Now let’s add the code in Listing 21-7 to the `else` block to return a response\nwith the status code 404, which signals that the content for the request was\nnot found. We’ll also return some HTML for a page to render in the browser\nindicating the response to the end user."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-7\" file-name=\"src/main.rs\" caption=\"Responding with status code 404 and an error page if anything other than */* was requested\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-07/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, our response has a status line with status code 404 and the reason phrase\n`NOT FOUND`. The body of the response will be the HTML in the file _404.html_.\nYou’ll need to create a _404.html_ file next to _hello.html_ for the error\npage; again feel free to use any HTML you want or use the example HTML in\nListing 21-8."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-8\" file-name=\"404.html\" caption=\"Sample content for the page to send back with any 404 response\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "html",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/listing-21-07/404.html}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "With these changes, run your server again. Requesting _127.0.0.1:7878_ should\nreturn the contents of _hello.html_, and any other request, like\n_127.0.0.1:7878/foo_, should return the error HTML from _404.html_."
        },
        {
          "kind": "text",
          "content": "### A Touch of Refactoring"
        },
        {
          "kind": "text",
          "content": "At the moment, the `if` and `else` blocks have a lot of repetition: they’re both\nreading files and writing the contents of the files to the stream. The only\ndifferences are the status line and the filename. Let’s make the code more\nconcise by pulling out those differences into separate `if` and `else` lines\nthat will assign the values of the status line and the filename to variables; we\ncan then use those variables unconditionally in the code to read the file and\nwrite the response. Listing 21-9 shows the resultant code after replacing the\nlarge `if` and `else` blocks."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-9\" file-name=\"src/main.rs\" caption=\"Refactoring the `if` and `else` blocks to contain only the code that differs between the two cases\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-09/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Now the `if` and `else` blocks only return the appropriate values for the\nstatus line and filename in a tuple; we then use destructuring to assign these\ntwo values to `status_line` and `filename` using a pattern in the `let`\nstatement, as discussed in Chapter 19."
        },
        {
          "kind": "text",
          "content": "The previously duplicated code is now outside the `if` and `else` blocks and\nuses the `status_line` and `filename` variables. This makes it easier to see\nthe difference between the two cases, and it means we have only one place to\nupdate the code if we want to change how the file reading and response writing\nwork. The behavior of the code in Listing 21-9 will be the same as that in\nListing 21-7."
        },
        {
          "kind": "text",
          "content": "Awesome! We now have a simple web server in approximately 40 lines of Rust code\nthat responds to one request with a page of content and responds to all other\nrequests with a 404 response."
        },
        {
          "kind": "text",
          "content": "Currently, our server runs in a single thread, meaning it can only serve one\nrequest at a time. Let’s examine how that can be a problem by simulating some\nslow requests. Then we’ll fix it so our server can handle multiple requests at\nonce."
        }
      ]
    },
    {
      "title": "Turning Our Single-Threaded Server into a Multithreaded Server",
      "file": "ch21-02-multithreaded.md",
      "elements": [
        {
          "kind": "text",
          "content": "Right now, the server will process each request in turn, meaning it won’t\nprocess a second connection until the first is finished processing. If the\nserver received more and more requests, this serial execution would be less and\nless optimal. If the server receives a request that takes a long time to\nprocess, subsequent requests will have to wait until the long request is\nfinished, even if the new requests can be processed quickly. We’ll need to fix\nthis, but first we’ll look at the problem in action."
        },
        {
          "kind": "text",
          "content": "### Simulating a Slow Request in the Current Server Implementation"
        },
        {
          "kind": "text",
          "content": "We’ll look at how a slow-processing request can affect other requests made to\nour current server implementation. Listing 21-10 implements handling a request\nto _/sleep_ with a simulated slow response that will cause the server to sleep\nfor five seconds before responding."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-10\" file-name=\"src/main.rs\" caption=\"Simulating a slow request by sleeping for 5 seconds\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-10/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We switched from `if` to `match` now that we have three cases. We need to\nexplicitly match on a slice of `request_line` to pattern match against the\nstring literal values; `match` doesn’t do automatic referencing and\ndereferencing, like the equality method does."
        },
        {
          "kind": "text",
          "content": "The first arm is the same as the `if` block from Listing 21-9. The second arm\nmatches a request to _/sleep_. When that request is received, the server will\nsleep for five seconds before rendering the successful HTML page. The third arm\nis the same as the `else` block from Listing 21-9."
        },
        {
          "kind": "text",
          "content": "You can see how primitive our server is: real libraries would handle the\nrecognition of multiple requests in a much less verbose way!"
        },
        {
          "kind": "text",
          "content": "Start the server using `cargo run`. Then open two browser windows: one for\n_http://127.0.0.1:7878/_ and the other for _http://127.0.0.1:7878/sleep_. If\nyou enter the _/_ URI a few times, as before, you’ll see it respond quickly.\nBut if you enter _/sleep_ and then load _/_, you’ll see that _/_ waits until\n`sleep` has slept for its full five seconds before loading."
        },
        {
          "kind": "text",
          "content": "There are multiple techniques we could use to avoid requests backing up behind\na slow request, including using async as we did Chapter 17; the one we’ll\nimplement is a thread pool."
        },
        {
          "kind": "text",
          "content": "### Improving Throughput with a Thread Pool"
        },
        {
          "kind": "text",
          "content": "A _thread pool_ is a group of spawned threads that are waiting and ready to\nhandle a task. When the program receives a new task, it assigns one of the\nthreads in the pool to the task, and that thread will process the task. The\nremaining threads in the pool are available to handle any other tasks that come\nin while the first thread is processing. When the first thread is done\nprocessing its task, it’s returned to the pool of idle threads, ready to handle\na new task. A thread pool allows you to process connections concurrently,\nincreasing the throughput of your server."
        },
        {
          "kind": "text",
          "content": "We’ll limit the number of threads in the pool to a small number to protect us\nfrom DoS attacks; if we had our program create a new thread for each request as\nit came in, someone making 10 million requests to our server could create havoc\nby using up all our server’s resources and grinding the processing of requests\nto a halt."
        },
        {
          "kind": "text",
          "content": "Rather than spawning unlimited threads, then, we’ll have a fixed number of\nthreads waiting in the pool. Requests that come in are sent to the pool for\nprocessing. The pool will maintain a queue of incoming requests. Each of the\nthreads in the pool will pop off a request from this queue, handle the request,\nand then ask the queue for another request. With this design, we can process up\nto *`N`* requests concurrently, where *`N`* is the number of threads. If each\nthread is responding to a long-running request, subsequent requests can still\nback up in the queue, but we’ve increased the number of long-running requests\nwe can handle before reaching that point."
        },
        {
          "kind": "text",
          "content": "This technique is just one of many ways to improve the throughput of a web\nserver. Other options you might explore are the fork/join model, the\nsingle-threaded async I/O model, and the multithreaded async I/O model. If\nyou’re interested in this topic, you can read more about other solutions and\ntry to implement them; with a low-level language like Rust, all of these\noptions are possible."
        },
        {
          "kind": "text",
          "content": "Before we begin implementing a thread pool, let’s talk about what using the\npool should look like. When you’re trying to design code, writing the client\ninterface first can help guide your design. Write the API of the code so it’s\nstructured in the way you want to call it; then implement the functionality\nwithin that structure rather than implementing the functionality and then\ndesigning the public API."
        },
        {
          "kind": "text",
          "content": "Similar to how we used test-driven development in the project in Chapter 12,\nwe’ll use compiler-driven development here. We’ll write the code that calls the\nfunctions we want, and then we’ll look at errors from the compiler to determine\nwhat we should change next to get the code to work. Before we do that, however,\nwe’ll explore the technique we’re not going to use as a starting point."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"code-structure-if-we-could-spawn-a-thread-for-each-request\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Spawning a Thread for Each Request"
        },
        {
          "kind": "text",
          "content": "First, let’s explore how our code might look if it did create a new thread for\nevery connection. As mentioned earlier, this isn’t our final plan due to the\nproblems with potentially spawning an unlimited number of threads, but it is a\nstarting point to get a working multithreaded server first. Then we’ll add the\nthread pool as an improvement, and contrasting the two solutions will be\neasier. Listing 21-11 shows the changes to make to `main` to spawn a new thread\nto handle each stream within the `for` loop."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-11\" file-name=\"src/main.rs\" caption=\"Spawning a new thread for each stream\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "no_run"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-11/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "As you learned in Chapter 16, `thread::spawn` will create a new thread and then\nrun the code in the closure in the new thread. If you run this code and load\n_/sleep_ in your browser, then _/_ in two more browser tabs, you’ll indeed see\nthat the requests to _/_ don’t have to wait for _/sleep_ to finish. However, as\nwe mentioned, this will eventually overwhelm the system because you’d be making\nnew threads without any limit."
        },
        {
          "kind": "text",
          "content": "You may also recall from Chapter 17 that this is exactly the kind of situation\nwhere async and await really shine! Keep that in mind as we build the thread\npool and think about how things would look different or the same with async."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"creating-a-similar-interface-for-a-finite-number-of-threads\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Creating a Finite Number of Threads"
        },
        {
          "kind": "text",
          "content": "We want our thread pool to work in a similar, familiar way so that switching\nfrom threads to a thread pool doesn’t require large changes to the code that\nuses our API. Listing 21-12 shows the hypothetical interface for a `ThreadPool`\nstruct we want to use instead of `thread::spawn`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-12\" file-name=\"src/main.rs\" caption=\"Our ideal `ThreadPool` interface\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-12/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We use `ThreadPool::new` to create a new thread pool with a configurable number\nof threads, in this case four. Then, in the `for` loop, `pool.execute` has a\nsimilar interface as `thread::spawn` in that it takes a closure the pool should\nrun for each stream. We need to implement `pool.execute` so it takes the\nclosure and gives it to a thread in the pool to run. This code won’t yet\ncompile, but we’ll try so the compiler can guide us in how to fix it."
        },
        {
          "kind": "text",
          "content": "<!-- Old headings. Do not remove or links may break. -->"
        },
        {
          "kind": "text",
          "content": "<a id=\"building-the-threadpool-struct-using-compiler-driven-development\"></a>"
        },
        {
          "kind": "text",
          "content": "#### Building `ThreadPool` Using Compiler Driven Development"
        },
        {
          "kind": "text",
          "content": "Make the changes in Listing 21-12 to _src/main.rs_, and then let’s use the\ncompiler errors from `cargo check` to drive our development. Here is the first\nerror we get:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/listing-21-12/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Great! This error tells us we need a `ThreadPool` type or module, so we’ll\nbuild one now. Our `ThreadPool` implementation will be independent of the kind\nof work our web server is doing. So let’s switch the `hello` crate from a\nbinary crate to a library crate to hold our `ThreadPool` implementation. After\nwe change to a library crate, we could also use the separate thread pool\nlibrary for any work we want to do using a thread pool, not just for serving\nweb requests."
        },
        {
          "kind": "text",
          "content": "Create a _src/lib.rs_ file that contains the following, which is the simplest\ndefinition of a `ThreadPool` struct that we can have for now:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-01-define-threadpool-struct/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Then edit _main.rs_ file to bring `ThreadPool` into scope from the library\ncrate by adding the following code to the top of _src/main.rs_:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-01-define-threadpool-struct/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code still won’t work, but let’s check it again to get the next error that\nwe need to address:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/no-listing-01-define-threadpool-struct/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "This error indicates that next we need to create an associated function named\n`new` for `ThreadPool`. We also know that `new` needs to have one parameter\nthat can accept `4` as an argument and should return a `ThreadPool` instance.\nLet’s implement the simplest `new` function that will have those\ncharacteristics:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-02-impl-threadpool-new/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We chose `usize` as the type of the `size` parameter because we know that a\nnegative number of threads doesn’t make any sense. We also know we’ll use this\n`4` as the number of elements in a collection of threads, which is what the\n`usize` type is for, as discussed in [“Integer Types”][integer-types]<!-- ignore\n--> in Chapter 3."
        },
        {
          "kind": "text",
          "content": "Let’s check the code again:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/no-listing-02-impl-threadpool-new/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "Now the error occurs because we don’t have an `execute` method on `ThreadPool`.\nRecall from [“Creating a Finite Number of\nThreads”](#creating-a-finite-number-of-threads)<!-- ignore --> that we decided\nour thread pool should have an interface similar to `thread::spawn`. In\naddition, we’ll implement the `execute` function so it takes the closure it’s\ngiven and gives it to an idle thread in the pool to run."
        },
        {
          "kind": "text",
          "content": "We’ll define the `execute` method on `ThreadPool` to take a closure as a\nparameter. Recall from [“Moving Captured Values Out of the Closure and the `Fn`\nTraits”][fn-traits]<!-- ignore --> in Chapter 13 that we can take closures as\nparameters with three different traits: `Fn`, `FnMut`, and `FnOnce`. We need to\ndecide which kind of closure to use here. We know we’ll end up doing something\nsimilar to the standard library `thread::spawn` implementation, so we can look\nat what bounds the signature of `thread::spawn` has on its parameter. The\ndocumentation shows us the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,"
          }
        },
        {
          "kind": "text",
          "content": "The `F` type parameter is the one we’re concerned with here; the `T` type\nparameter is related to the return value, and we’re not concerned with that. We\ncan see that `spawn` uses `FnOnce` as the trait bound on `F`. This is probably\nwhat we want as well, because we’ll eventually pass the argument we get in\n`execute` to `spawn`. We can be further confident that `FnOnce` is the trait we\nwant to use because the thread for running a request will only execute that\nrequest’s closure one time, which matches the `Once` in `FnOnce`."
        },
        {
          "kind": "text",
          "content": "The `F` type parameter also has the trait bound `Send` and the lifetime bound\n`'static`, which are useful in our situation: we need `Send` to transfer the\nclosure from one thread to another and `'static` because we don’t know how long\nthe thread will take to execute. Let’s create an `execute` method on\n`ThreadPool` that will take a generic parameter of type `F` with these bounds:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-03-define-execute/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We still use the `()` after `FnOnce` because this `FnOnce` represents a closure\nthat takes no parameters and returns the unit type `()`. Just like function\ndefinitions, the return type can be omitted from the signature, but even if we\nhave no parameters, we still need the parentheses."
        },
        {
          "kind": "text",
          "content": "Again, this is the simplest implementation of the `execute` method: it does\nnothing, but we’re only trying to make our code compile. Let’s check it again:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/no-listing-03-define-execute/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "It compiles! But note that if you try `cargo run` and make a request in the\nbrowser, you’ll see the errors in the browser that we saw at the beginning of\nthe chapter. Our library isn’t actually calling the closure passed to `execute`\nyet!"
        },
        {
          "kind": "text",
          "content": "> Note: A saying you might hear about languages with strict compilers, such as\n> Haskell and Rust, is “if the code compiles, it works.” But this saying is not\n> universally true. Our project compiles, but it does absolutely nothing! If we\n> were building a real, complete project, this would be a good time to start\n> writing unit tests to check that the code compiles _and_ has the behavior we\n> want."
        },
        {
          "kind": "text",
          "content": "Consider: what would be different here if we were going to execute a _future_\ninstead of a closure?"
        },
        {
          "kind": "text",
          "content": "#### Validating the Number of Threads in `new`"
        },
        {
          "kind": "text",
          "content": "We aren’t doing anything with the parameters to `new` and `execute`. Let’s\nimplement the bodies of these functions with the behavior we want. To start,\nlet’s think about `new`. Earlier we chose an unsigned type for the `size`\nparameter because a pool with a negative number of threads makes no sense.\nHowever, a pool with zero threads also makes no sense, yet zero is a perfectly\nvalid `usize`. We’ll add code to check that `size` is greater than zero before\nwe return a `ThreadPool` instance and have the program panic if it receives a\nzero by using the `assert!` macro, as shown in Listing 21-13."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-13\" file-name=\"src/lib.rs\" caption=\"Implementing `ThreadPool::new` to panic if `size` is zero\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-13/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve also added some documentation for our `ThreadPool` with doc comments.\nNote that we followed good documentation practices by adding a section that\ncalls out the situations in which our function can panic, as discussed in\nChapter 14. Try running `cargo doc --open` and clicking the `ThreadPool` struct\nto see what the generated docs for `new` look like!"
        },
        {
          "kind": "text",
          "content": "Instead of adding the `assert!` macro as we’ve done here, we could change `new`\ninto `build` and return a `Result` like we did with `Config::build` in the I/O\nproject in Listing 12-9. But we’ve decided in this case that trying to create a\nthread pool without any threads should be an unrecoverable error. If you’re\nfeeling ambitious, try to write a function named `build` with the following\nsignature to compare with the `new` function:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn build(size: usize) -> Result<ThreadPool, PoolCreationError> {"
          }
        },
        {
          "kind": "text",
          "content": "#### Creating Space to Store the Threads"
        },
        {
          "kind": "text",
          "content": "Now that we have a way to know we have a valid number of threads to store in\nthe pool, we can create those threads and store them in the `ThreadPool` struct\nbefore returning the struct. But how do we “store” a thread? Let’s take another\nlook at the `thread::spawn` signature:"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,"
          }
        },
        {
          "kind": "text",
          "content": "The `spawn` function returns a `JoinHandle<T>`, where `T` is the type that the\nclosure returns. Let’s try using `JoinHandle` too and see what happens. In our\ncase, the closures we’re passing to the thread pool will handle the connection\nand not return anything, so `T` will be the unit type `()`."
        },
        {
          "kind": "text",
          "content": "The code in Listing 21-14 will compile but doesn’t create any threads yet.\nWe’ve changed the definition of `ThreadPool` to hold a vector of\n`thread::JoinHandle<()>` instances, initialized the vector with a capacity of\n`size`, set up a `for` loop that will run some code to create the threads, and\nreturned a `ThreadPool` instance containing them."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-14\" file-name=\"src/lib.rs\" caption=\"Creating a vector for `ThreadPool` to hold the threads\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "not_desired_behavior"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-14/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve brought `std::thread` into scope in the library crate because we’re\nusing `thread::JoinHandle` as the type of the items in the vector in\n`ThreadPool`."
        },
        {
          "kind": "text",
          "content": "Once a valid size is received, our `ThreadPool` creates a new vector that can\nhold `size` items. The `with_capacity` function performs the same task as\n`Vec::new` but with an important difference: it pre-allocates space in the\nvector. Because we know we need to store `size` elements in the vector, doing\nthis allocation up front is slightly more efficient than using `Vec::new`,\nwhich resizes itself as elements are inserted."
        },
        {
          "kind": "text",
          "content": "When you run `cargo check` again, it should succeed."
        },
        {
          "kind": "text",
          "content": "#### A `Worker` Struct Responsible for Sending Code from the `ThreadPool` to a Thread"
        },
        {
          "kind": "text",
          "content": "We left a comment in the `for` loop in Listing 21-14 regarding the creation of\nthreads. Here, we’ll look at how we actually create threads. The standard\nlibrary provides `thread::spawn` as a way to create threads, and\n`thread::spawn` expects to get some code the thread should run as soon as the\nthread is created. However, in our case, we want to create the threads and have\nthem _wait_ for code that we’ll send later. The standard library’s\nimplementation of threads doesn’t include any way to do that; we have to\nimplement it manually."
        },
        {
          "kind": "text",
          "content": "We’ll implement this behavior by introducing a new data structure between the\n`ThreadPool` and the threads that will manage this new behavior. We’ll call\nthis data structure _Worker_, which is a common term in pooling\nimplementations. The `Worker` picks up code that needs to be run and runs the\ncode in the Worker’s thread."
        },
        {
          "kind": "text",
          "content": "Think of people working in the kitchen at a restaurant: the workers wait until\norders come in from customers, and then they’re responsible for taking those\norders and fulfilling them."
        },
        {
          "kind": "text",
          "content": "Instead of storing a vector of `JoinHandle<()>` instances in the thread pool,\nwe’ll store instances of the `Worker` struct. Each `Worker` will store a single\n`JoinHandle<()>` instance. Then we’ll implement a method on `Worker` that will\ntake a closure of code to run and send it to the already running thread for\nexecution. We’ll also give each `Worker` an `id` so we can distinguish between\nthe different instances of `Worker` in the pool when logging or debugging."
        },
        {
          "kind": "text",
          "content": "Here is the new process that will happen when we create a `ThreadPool`. We’ll\nimplement the code that sends the closure to the thread after we have `Worker`\nset up in this way:"
        },
        {
          "kind": "text",
          "content": "1. Define a `Worker` struct that holds an `id` and a `JoinHandle<()>`.\n2. Change `ThreadPool` to hold a vector of `Worker` instances.\n3. Define a `Worker::new` function that takes an `id` number and returns a\n`Worker` instance that holds the `id` and a thread spawned with an empty\nclosure.\n4. In `ThreadPool::new`, use the `for` loop counter to generate an `id`, create\na new `Worker` with that `id`, and store the worker in the vector."
        },
        {
          "kind": "text",
          "content": "If you’re up for a challenge, try implementing these changes on your own before\nlooking at the code in Listing 21-15."
        },
        {
          "kind": "text",
          "content": "Ready? Here is Listing 21-15 with one way to make the preceding modifications."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-15\" file-name=\"src/lib.rs\" caption=\"Modifying `ThreadPool` to hold `Worker` instances instead of holding threads directly\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-15/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve changed the name of the field on `ThreadPool` from `threads` to `workers`\nbecause it’s now holding `Worker` instances instead of `JoinHandle<()>`\ninstances. We use the counter in the `for` loop as an argument to\n`Worker::new`, and we store each new `Worker` in the vector named `workers`."
        },
        {
          "kind": "text",
          "content": "External code (like our server in _src/main.rs_) doesn’t need to know the\nimplementation details regarding using a `Worker` struct within `ThreadPool`,\nso we make the `Worker` struct and its `new` function private. The\n`Worker::new` function uses the `id` we give it and stores a `JoinHandle<()>`\ninstance that is created by spawning a new thread using an empty closure."
        },
        {
          "kind": "text",
          "content": "> Note: If the operating system can’t create a thread because there aren’t\n> enough system resources, `thread::spawn` will panic. That will cause our\n> whole server to panic, even though the creation of some threads might\n> succeed. For simplicity’s sake, this behavior is fine, but in a production\n> thread pool implementation, you’d likely want to use\n> [`std::thread::Builder`][builder]<!-- ignore --> and its\n> [`spawn`][builder-spawn]<!-- ignore --> method that returns `Result` instead."
        },
        {
          "kind": "text",
          "content": "This code will compile and will store the number of `Worker` instances we\nspecified as an argument to `ThreadPool::new`. But we’re _still_ not processing\nthe closure that we get in `execute`. Let’s look at how to do that next."
        },
        {
          "kind": "text",
          "content": "#### Sending Requests to Threads via Channels"
        },
        {
          "kind": "text",
          "content": "The next problem we’ll tackle is that the closures given to `thread::spawn` do\nabsolutely nothing. Currently, we get the closure we want to execute in the\n`execute` method. But we need to give `thread::spawn` a closure to run when we\ncreate each `Worker` during the creation of the `ThreadPool`."
        },
        {
          "kind": "text",
          "content": "We want the `Worker` structs that we just created to fetch the code to run from\na queue held in the `ThreadPool` and send that code to its thread to run."
        },
        {
          "kind": "text",
          "content": "The channels we learned about in Chapter 16—a simple way to communicate between\ntwo threads—would be perfect for this use case. We’ll use a channel to function\nas the queue of jobs, and `execute` will send a job from the `ThreadPool` to\nthe `Worker` instances, which will send the job to its thread. Here is the plan:"
        },
        {
          "kind": "text",
          "content": "1. The `ThreadPool` will create a channel and hold on to the sender.\n2. Each `Worker` will hold on to the receiver.\n3. We’ll create a new `Job` struct that will hold the closures we want to send\ndown the channel.\n4. The `execute` method will send the job it wants to execute through the\nsender.\n5. In its thread, the `Worker` will loop over its receiver and execute the\nclosures of any jobs it receives."
        },
        {
          "kind": "text",
          "content": "Let’s start by creating a channel in `ThreadPool::new` and holding the sender\nin the `ThreadPool` instance, as shown in Listing 21-16. The `Job` struct\ndoesn’t hold anything for now but will be the type of item we’re sending down\nthe channel."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-16\" file-name=\"src/lib.rs\" caption=\"Modifying `ThreadPool` to store the sender of a channel that transmits `Job` instances\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-16/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In `ThreadPool::new`, we create our new channel and have the pool hold the\nsender. This will successfully compile."
        },
        {
          "kind": "text",
          "content": "Let’s try passing a receiver of the channel into each `Worker` as the thread\npool creates the channel. We know we want to use the receiver in the thread that\nthe `Worker` instances spawn, so we’ll reference the `receiver` parameter in the\nclosure. The code in Listing 21-17 won’t quite compile yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-17\" file-name=\"src/lib.rs\" caption=\"Passing the receiver to each `Worker`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-17/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We’ve made some small and straightforward changes: we pass the receiver into\n`Worker::new`, and then we use it inside the closure."
        },
        {
          "kind": "text",
          "content": "When we try to check this code, we get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/listing-21-17/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The code is trying to pass `receiver` to multiple `Worker` instances. This\nwon’t work, as you’ll recall from Chapter 16: the channel implementation that\nRust provides is multiple _producer_, single _consumer_. This means we can’t\njust clone the consuming end of the channel to fix this code. We also don’t\nwant to send a message multiple times to multiple consumers; we want one list\nof messages with multiple `Worker` instances such that each message gets\nprocessed once."
        },
        {
          "kind": "text",
          "content": "Additionally, taking a job off the channel queue involves mutating the\n`receiver`, so the threads need a safe way to share and modify `receiver`;\notherwise, we might get race conditions (as covered in Chapter 16)."
        },
        {
          "kind": "text",
          "content": "Recall the thread-safe smart pointers discussed in Chapter 16: to share\nownership across multiple threads and allow the threads to mutate the value, we\nneed to use `Arc<Mutex<T>>`. The `Arc` type will let multiple `Worker` instances\nown the receiver, and `Mutex` will ensure that only one `Worker` gets a job from\nthe receiver at a time. Listing 21-18 shows the changes we need to make."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-18\" file-name=\"src/lib.rs\" caption=\"Sharing the receiver among the `Worker` instances using `Arc` and `Mutex`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-18/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "In `ThreadPool::new`, we put the receiver in an `Arc` and a `Mutex`. For each\nnew `Worker`, we clone the `Arc` to bump the reference count so the `Worker`\ninstances can share ownership of the receiver."
        },
        {
          "kind": "text",
          "content": "With these changes, the code compiles! We’re getting there!"
        },
        {
          "kind": "text",
          "content": "#### Implementing the `execute` Method"
        },
        {
          "kind": "text",
          "content": "Let’s finally implement the `execute` method on `ThreadPool`. We’ll also change\n`Job` from a struct to a type alias for a trait object that holds the type of\nclosure that `execute` receives. As discussed in [“Creating Type Synonyms with\nType Aliases”][creating-type-synonyms-with-type-aliases]<!-- ignore --> in\nChapter 20, type aliases allow us to make long types shorter for ease of use.\nLook at Listing 21-19."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-19\" file-name=\"src/lib.rs\" caption=\"Creating a `Job` type alias for a `Box` that holds each closure and then sending the job down the channel\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-19/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "After creating a new `Job` instance using the closure we get in `execute`, we\nsend that job down the sending end of the channel. We’re calling `unwrap` on\n`send` for the case that sending fails. This might happen if, for example, we\nstop all our threads from executing, meaning the receiving end has stopped\nreceiving new messages. At the moment, we can’t stop our threads from\nexecuting: our threads continue executing as long as the pool exists. The\nreason we use `unwrap` is that we know the failure case won’t happen, but the\ncompiler doesn’t know that."
        },
        {
          "kind": "text",
          "content": "But we’re not quite done yet! In the `Worker`, our closure being passed to\n`thread::spawn` still only _references_ the receiving end of the channel.\nInstead, we need the closure to loop forever, asking the receiving end of the\nchannel for a job and running the job when it gets one. Let’s make the change\nshown in Listing 21-20 to `Worker::new`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-20\" file-name=\"src/lib.rs\" caption=\"Receiving and executing the jobs in the `Worker` instance’s thread\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-20/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Here, we first call `lock` on the `receiver` to acquire the mutex, and then we\ncall `unwrap` to panic on any errors. Acquiring a lock might fail if the mutex\nis in a _poisoned_ state, which can happen if some other thread panicked while\nholding the lock rather than releasing the lock. In this situation, calling\n`unwrap` to have this thread panic is the correct action to take. Feel free to\nchange this `unwrap` to an `expect` with an error message that is meaningful to\nyou."
        },
        {
          "kind": "text",
          "content": "If we get the lock on the mutex, we call `recv` to receive a `Job` from the\nchannel. A final `unwrap` moves past any errors here as well, which might occur\nif the thread holding the sender has shut down, similar to how the `send`\nmethod returns `Err` if the receiver shuts down."
        },
        {
          "kind": "text",
          "content": "The call to `recv` blocks, so if there is no job yet, the current thread will\nwait until a job becomes available. The `Mutex<T>` ensures that only one\n`Worker` thread at a time is trying to request a job."
        },
        {
          "kind": "text",
          "content": "Our thread pool is now in a working state! Give it a `cargo run` and make some\nrequests:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch21-web-server/listing-21-20\ncargo run\nmake some requests to 127.0.0.1:7878\nCan't automate because the output depends on making requests\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field `workers` is never read\n --> src/lib.rs:7:5\n  |\n6 | pub struct ThreadPool {\n  |            ---------- field in this struct\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: fields `id` and `thread` are never read\n  --> src/lib.rs:48:5\n   |\n47 | struct Worker {\n   |        ------ fields in this struct\n48 |     id: usize,\n   |     ^^\n49 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^\n\nwarning: `hello` (lib) generated 2 warnings\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 4.91s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing."
          }
        },
        {
          "kind": "text",
          "content": "Success! We now have a thread pool that executes connections asynchronously.\nThere are never more than four threads created, so our system won’t get\noverloaded if the server receives a lot of requests. If we make a request to\n_/sleep_, the server will be able to serve other requests by having another\nthread run them."
        },
        {
          "kind": "text",
          "content": "> Note: If you open _/sleep_ in multiple browser windows simultaneously, they\n> might load one at a time in five-second intervals. Some web browsers execute\n> multiple instances of the same request sequentially for caching reasons. This\n> limitation is not caused by our web server."
        },
        {
          "kind": "text",
          "content": "This is a good time to pause and consider how the code in Listings 21-18, 21-19,\nand 21-20 would be different if we were using futures instead of a closure for\nthe work to be done. What types would change? How would the method signatures be\ndifferent, if at all? What parts of the code would stay the same?"
        },
        {
          "kind": "text",
          "content": "After learning about the `while let` loop in Chapters 17 and 18, you might be\nwondering why we didn’t write the worker thread code as shown in Listing 21-21."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-21\" file-name=\"src/lib.rs\" caption=\"An alternative implementation of `Worker::new` using `while let`\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "not_desired_behavior"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-21/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This code compiles and runs but doesn’t result in the desired threading\nbehavior: a slow request will still cause other requests to wait to be\nprocessed. The reason is somewhat subtle: the `Mutex` struct has no public\n`unlock` method because the ownership of the lock is based on the lifetime of\nthe `MutexGuard<T>` within the `LockResult<MutexGuard<T>>` that the `lock`\nmethod returns. At compile time, the borrow checker can then enforce the rule\nthat a resource guarded by a `Mutex` cannot be accessed unless we hold the\nlock. However, this implementation can also result in the lock being held\nlonger than intended if we aren’t mindful of the lifetime of the\n`MutexGuard<T>`."
        },
        {
          "kind": "text",
          "content": "The code in Listing 21-20 that uses `let job =\nreceiver.lock().unwrap().recv().unwrap();` works because with `let`, any\ntemporary values used in the expression on the right hand side of the equal\nsign are immediately dropped when the `let` statement ends. However, `while\nlet` (and `if let` and `match`) does not drop temporary values until the end of\nthe associated block. In Listing 21-21, the lock remains held for the duration\nof the call to `job()`, meaning other `Worker` instances cannot receive jobs."
        },
        {
          "kind": "text",
          "content": "[creating-type-synonyms-with-type-aliases]: ch20-03-advanced-types.html#creating-type-synonyms-with-type-aliases\n[integer-types]: ch03-02-data-types.html#integer-types\n[fn-traits]: ch13-01-closures.html#moving-captured-values-out-of-the-closure-and-the-fn-traits\n[builder]: ../std/thread/struct.Builder.html\n[builder-spawn]: ../std/thread/struct.Builder.html#method.spawn"
        }
      ]
    },
    {
      "title": "Graceful Shutdown and Cleanup",
      "file": "ch21-03-graceful-shutdown-and-cleanup.md",
      "elements": [
        {
          "kind": "text",
          "content": "The code in Listing 21-20 is responding to requests asynchronously through the\nuse of a thread pool, as we intended. We get some warnings about the `workers`,\n`id`, and `thread` fields that we’re not using in a direct way that reminds us\nwe’re not cleaning up anything. When we use the less elegant\n<kbd>ctrl</kbd>-<kbd>c</kbd> method to halt the main thread, all other threads\nare stopped immediately as well, even if they’re in the middle of serving a\nrequest."
        },
        {
          "kind": "text",
          "content": "Next, then, we’ll implement the `Drop` trait to call `join` on each of the\nthreads in the pool so they can finish the requests they’re working on before\nclosing. Then we’ll implement a way to tell the threads they should stop\naccepting new requests and shut down. To see this code in action, we’ll modify\nour server to accept only two requests before gracefully shutting down its\nthread pool."
        },
        {
          "kind": "text",
          "content": "One thing to notice as we go: none of this affects the parts of the code that\nhandle executing the closures, so everything here would be just the same if we\nwere using a thread pool for an async runtime."
        },
        {
          "kind": "text",
          "content": "### Implementing the `Drop` Trait on `ThreadPool`"
        },
        {
          "kind": "text",
          "content": "Let’s start with implementing `Drop` on our thread pool. When the pool is\ndropped, our threads should all join to make sure they finish their work.\nListing 21-22 shows a first attempt at a `Drop` implementation; this code won’t\nquite work yet."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-22\" file-name=\"src/lib.rs\" caption=\"Joining each thread when the thread pool goes out of scope\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-22/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "First, we loop through each of the thread pool `workers`. We use `&mut` for this\nbecause `self` is a mutable reference, and we also need to be able to mutate\n`worker`. For each worker, we print a message saying that this particular\n`Worker` instance is shutting down, and then we call `join` on that `Worker`\ninstance’s thread. If the call to `join` fails, we use `unwrap` to make Rust\npanic and go into an ungraceful shutdown."
        },
        {
          "kind": "text",
          "content": "Here is the error we get when we compile this code:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "{{#include ../listings/ch21-web-server/listing-21-22/output.txt}}"
          }
        },
        {
          "kind": "text",
          "content": "The error tells us we can’t call `join` because we only have a mutable borrow of\neach `worker` and `join` takes ownership of its argument. To solve this issue,\nwe need to move the thread out of the `Worker` instance that owns `thread` so\n`join` can consume the thread. One way to do this is by taking the same approach\nwe did in Listing 18-15. If `Worker` held an `Option<thread::JoinHandle<()>>`,\nwe could call the `take` method on the `Option` to move the value out of the\n`Some` variant and leave a `None` variant in its place. In other words, a\n`Worker` that is running would have a `Some` variant in `thread`, and when we\nwanted to clean up a `Worker`, we’d replace `Some` with `None` so the `Worker`\nwouldn’t have a thread to run."
        },
        {
          "kind": "text",
          "content": "However, the _only_ time this would come up would be when dropping the `Worker`.\nIn exchange, we’d have to deal with an `Option<thread::JoinHandle<()>>` anywhere\nwe accessed `worker.thread`. Idiomatic Rust uses `Option` quite a bit, but when\nyou find yourself wrapping something you know will always be present in `Option`\nas a workaround like this, it’s a good idea to look for alternative approaches.\nThey can make your code cleaner and less error-prone."
        },
        {
          "kind": "text",
          "content": "In this case, a better alternative exists: the `Vec::drain` method. It accepts\na range parameter to specify which items to remove from the `Vec`, and returns\nan iterator of those items. Passing the `..` range syntax will remove _every_\nvalue from the `Vec`."
        },
        {
          "kind": "text",
          "content": "So we need to update the `ThreadPool` `drop` implementation like this:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-04-update-drop-definition/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "This resolves the compiler error and does not require any other changes to our\ncode."
        },
        {
          "kind": "text",
          "content": "### Signaling to the Threads to Stop Listening for Jobs"
        },
        {
          "kind": "text",
          "content": "With all the changes we’ve made, our code compiles without any warnings.\nHowever, the bad news is that this code doesn’t function the way we want it to\nyet. The key is the logic in the closures run by the threads of the `Worker`\ninstances: at the moment, we call `join`, but that won’t shut down the threads\nbecause they `loop` forever looking for jobs. If we try to drop our `ThreadPool`\nwith our current implementation of `drop`, the main thread will block forever,\nwaiting for the first thread to finish."
        },
        {
          "kind": "text",
          "content": "To fix this problem, we’ll need a change in the `ThreadPool` `drop`\nimplementation and then a change in the `Worker` loop."
        },
        {
          "kind": "text",
          "content": "First we’ll change the `ThreadPool` `drop` implementation to explicitly drop\nthe `sender` before waiting for the threads to finish. Listing 21-23 shows the\nchanges to `ThreadPool` to explicitly drop `sender`. Unlike with the thread,\nhere we _do_ need to use an `Option` to be able to move `sender` out of\n`ThreadPool` with `Option::take`."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-23\" file-name=\"src/lib.rs\" caption=\"Explicitly drop `sender` before joining the `Worker` threads\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground",
              "not_desired_behavior"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-23/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Dropping `sender` closes the channel, which indicates no more messages will be\nsent. When that happens, all the calls to `recv` that the `Worker` instances do\nin the infinite loop will return an error. In Listing 21-24, we change the\n`Worker` loop to gracefully exit the loop in that case, which means the threads\nwill finish when the `ThreadPool` `drop` implementation calls `join` on them."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-24\" file-name=\"src/lib.rs\" caption=\"Explicitly breaking out of the loop when `recv` returns an error\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-24/src/lib.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "To see this code in action, let’s modify `main` to accept only two requests\nbefore gracefully shutting down the server, as shown in Listing 21-25."
        },
        {
          "kind": "text",
          "content": "<Listing number=\"21-25\" file-name=\"src/main.rs\" caption=\"Shutting down the server after serving two requests by exiting the loop\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/listing-21-25/src/main.rs:here}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "You wouldn’t want a real-world web server to shut down after serving only two\nrequests. This code just demonstrates that the graceful shutdown and cleanup is\nin working order."
        },
        {
          "kind": "text",
          "content": "The `take` method is defined in the `Iterator` trait and limits the iteration\nto the first two items at most. The `ThreadPool` will go out of scope at the\nend of `main`, and the `drop` implementation will run."
        },
        {
          "kind": "text",
          "content": "Start the server with `cargo run`, and make three requests. The third request\nshould error, and in your terminal you should see output similar to this:"
        },
        {
          "kind": "text",
          "content": "<!-- manual-regeneration\ncd listings/ch21-web-server/listing-21-25\ncargo run\ncurl http://127.0.0.1:7878\ncurl http://127.0.0.1:7878\ncurl http://127.0.0.1:7878\nthird request will error because server will have shut down\ncopy output below\nCan't automate because the output depends on making requests\n-->"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nShutting down.\nShutting down worker 0\nWorker 3 got a job; executing.\nWorker 1 disconnected; shutting down.\nWorker 2 disconnected; shutting down.\nWorker 3 disconnected; shutting down.\nWorker 0 disconnected; shutting down.\nShutting down worker 1\nShutting down worker 2\nShutting down worker 3"
          }
        },
        {
          "kind": "text",
          "content": "You might see a different ordering of `Worker` IDs and messages printed. We can\nsee how this code works from the messages: `Worker` instances 0 and 3 got the\nfirst two requests. The server stopped accepting connections after the second\nconnection, and the `Drop` implementation on `ThreadPool` starts executing\nbefore `Worker` 3 even starts its job. Dropping the `sender` disconnects all the\n`Worker` instances and tells them to shut down. The `Worker` instances each\nprint a message when they disconnect, and then the thread pool calls `join` to\nwait for each `Worker` thread to finish."
        },
        {
          "kind": "text",
          "content": "Notice one interesting aspect of this particular execution: the `ThreadPool`\ndropped the `sender`, and before any `Worker` received an error, we tried to\njoin `Worker` 0. `Worker` 0 had not yet gotten an error from `recv`, so the main\nthread blocked waiting for `Worker` 0 to finish. In the meantime, `Worker` 3\nreceived a job and then all threads received an error. When `Worker` 0 finished,\nthe main thread waited for the rest of the `Worker` instances to finish. At that\npoint, they had all exited their loops and stopped."
        },
        {
          "kind": "text",
          "content": "Congrats! We’ve now completed our project; we have a basic web server that uses\na thread pool to respond asynchronously. We’re able to perform a graceful\nshutdown of the server, which cleans up all the threads in the pool."
        },
        {
          "kind": "text",
          "content": "Here’s the full code for reference:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-07-final-code/src/main.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/lib.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "noplayground"
            ],
            "code": "{{#rustdoc_include ../listings/ch21-web-server/no-listing-07-final-code/src/lib.rs}}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "We could do more here! If you want to continue enhancing this project, here are\nsome ideas:"
        },
        {
          "kind": "text",
          "content": "- Add more documentation to `ThreadPool` and its public methods.\n- Add tests of the library’s functionality.\n- Change calls to `unwrap` to more robust error handling.\n- Use `ThreadPool` to perform some task other than serving web requests.\n- Find a thread pool crate on [crates.io](https://crates.io/) and implement a\nsimilar web server using the crate instead. Then compare its API and\nrobustness to the thread pool we implemented."
        },
        {
          "kind": "text",
          "content": "## Summary"
        },
        {
          "kind": "text",
          "content": "Well done! You’ve made it to the end of the book! We want to thank you for\njoining us on this tour of Rust. You’re now ready to implement your own Rust\nprojects and help with other people’s projects. Keep in mind that there is a\nwelcoming community of other Rustaceans who would love to help you with any\nchallenges you encounter on your Rust journey."
        }
      ]
    },
    {
      "title": "End of Experiment",
      "file": "end-of-experiment.md",
      "elements": [
        {
          "kind": "text",
          "content": "Thank you for participating in our experiment! We hope you got something useful from our additions. Your participation will help make Rust better for everyone."
        },
        {
          "kind": "text",
          "content": "You can follow [@tonofcrates](https://mastodon.social/@tonofcrates) on Mastodon if you want to hear about future updates to this experiment."
        }
      ]
    },
    {
      "title": "Appendix",
      "file": "appendix-00.md",
      "elements": [
        {
          "kind": "text",
          "content": "The following sections contain reference material you may find useful in your\nRust journey."
        }
      ]
    },
    {
      "title": "Appendix A: Keywords",
      "file": "appendix-01-keywords.md",
      "elements": [
        {
          "kind": "text",
          "content": "The following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we’ll discuss in the “[Raw\nIdentifiers][raw-identifiers]<!-- ignore -->” section). Identifiers are names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes."
        },
        {
          "kind": "text",
          "content": "[raw-identifiers]: #raw-identifiers"
        },
        {
          "kind": "text",
          "content": "### Keywords Currently in Use"
        },
        {
          "kind": "text",
          "content": "The following is a list of keywords currently in use, with their functionality\ndescribed."
        },
        {
          "kind": "text",
          "content": "- `as` - perform primitive casting, disambiguate the specific trait containing\nan item, or rename items in `use` statements\n- `async` - return a `Future` instead of blocking the current thread\n- `await` - suspend execution until the result of a `Future` is ready\n- `break` - exit a loop immediately\n- `const` - define constant items or constant raw pointers\n- `continue` - continue to the next loop iteration\n- `crate` - in a module path, refers to the crate root\n- `dyn` - dynamic dispatch to a trait object\n- `else` - fallback for `if` and `if let` control flow constructs\n- `enum` - define an enumeration\n- `extern` - link an external function or variable\n- `false` - Boolean false literal\n- `fn` - define a function or the function pointer type\n- `for` - loop over items from an iterator, implement a trait, or specify a\nhigher-ranked lifetime\n- `if` - branch based on the result of a conditional expression\n- `impl` - implement inherent or trait functionality\n- `in` - part of `for` loop syntax\n- `let` - bind a variable\n- `loop` - loop unconditionally\n- `match` - match a value to patterns\n- `mod` - define a module\n- `move` - make a closure take ownership of all its captures\n- `mut` - denote mutability in references, raw pointers, or pattern bindings\n- `pub` - denote public visibility in struct fields, `impl` blocks, or modules\n- `ref` - bind by reference\n- `return` - return from function\n- `Self` - a type alias for the type we are defining or implementing\n- `self` - method subject or current module\n- `static` - global variable or lifetime lasting the entire program execution\n- `struct` - define a structure\n- `super` - parent module of the current module\n- `trait` - define a trait\n- `true` - Boolean true literal\n- `type` - define a type alias or associated type\n- `union` - define a [union][union]<!-- ignore -->; is only a keyword when used\nin a union declaration\n- `unsafe` - denote unsafe code, functions, traits, or implementations\n- `use` - bring symbols into scope; specify precise captures for generic and\nlifetime bounds\n- `where` - denote clauses that constrain a type\n- `while` - loop conditionally based on the result of an expression"
        },
        {
          "kind": "text",
          "content": "[union]: https://doc.rust-lang.org/reference/items/unions.html"
        },
        {
          "kind": "text",
          "content": "### Keywords Reserved for Future Use"
        },
        {
          "kind": "text",
          "content": "The following keywords do not yet have any functionality but are reserved by\nRust for potential future use."
        },
        {
          "kind": "text",
          "content": "- `abstract`\n- `become`\n- `box`\n- `do`\n- `final`\n- `gen`\n- `macro`\n- `override`\n- `priv`\n- `try`\n- `typeof`\n- `unsized`\n- `virtual`\n- `yield`"
        },
        {
          "kind": "text",
          "content": "### Raw Identifiers"
        },
        {
          "kind": "text",
          "content": "_Raw identifiers_ are the syntax that lets you use keywords where they wouldn’t\nnormally be allowed. You use a raw identifier by prefixing a keyword with `r#`."
        },
        {
          "kind": "text",
          "content": "For example, `match` is a keyword. If you try to compile the following function\nthat uses `match` as its name:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [
              "ignore",
              "does_not_compile"
            ],
            "code": "fn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}"
          }
        },
        {
          "kind": "text",
          "content": "you’ll get this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error: expected identifier, found keyword `match`\n --> src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword"
          }
        },
        {
          "kind": "text",
          "content": "The error shows that you can’t use the keyword `match` as the function\nidentifier. To use `match` as a function name, you need to use the raw\nidentifier syntax, like this:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match(\"foo\", \"foobar\"));\n}"
          }
        },
        {
          "kind": "text",
          "content": "This code will compile without any errors. Note the `r#` prefix on the function\nname in its definition as well as where the function is called in `main`."
        },
        {
          "kind": "text",
          "content": "Raw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. This gives us more freedom to choose\nidentifier names, as well as lets us integrate with programs written in a\nlanguage where these words aren’t keywords. In addition, raw identifiers allow\nyou to use libraries written in a different Rust edition than your crate uses.\nFor example, `try` isn’t a keyword in the 2015 edition but is in the 2018, 2021,\nand 2024 editions. If you depend on a library that is written using the 2015\nedition and has a `try` function, you’ll need to use the raw identifier syntax,\n`r#try` in this case, to call that function from your code on later editions.\nSee [Appendix E][appendix-e]<!-- ignore --> for more information on editions."
        },
        {
          "kind": "text",
          "content": "[appendix-e]: appendix-05-editions.html"
        }
      ]
    },
    {
      "title": "Appendix B: Operators and Symbols",
      "file": "appendix-02-operators.md",
      "elements": [
        {
          "kind": "text",
          "content": "This appendix contains a glossary of Rust’s syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets."
        },
        {
          "kind": "text",
          "content": "### Operators"
        },
        {
          "kind": "text",
          "content": "Table B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-1: Operators</span>"
        },
        {
          "kind": "text",
          "content": "| Operator                  | Example                                                 | Explanation                                                           | Overloadable?  |\n| ------------------------- | ------------------------------------------------------- | --------------------------------------------------------------------- | -------------- |\n| `!`                       | `ident!(...)`, `ident!{...}`, `ident![...]`             | Macro expansion                                                       |                |\n| `!`                       | `!expr`                                                 | Bitwise or logical complement                                         | `Not`          |\n| `!=`                      | `expr != expr`                                          | Nonequality comparison                                                | `PartialEq`    |\n| `%`                       | `expr % expr`                                           | Arithmetic remainder                                                  | `Rem`          |\n| `%=`                      | `var %= expr`                                           | Arithmetic remainder and assignment                                   | `RemAssign`    |\n| `&`                       | `&expr`, `&mut expr`                                    | Borrow                                                                |                |\n| `&`                       | `&type`, `&mut type`, `&'a type`, `&'a mut type`        | Borrowed pointer type                                                 |                |\n| `&`                       | `expr & expr`                                           | Bitwise AND                                                           | `BitAnd`       |\n| `&=`                      | `var &= expr`                                           | Bitwise AND and assignment                                            | `BitAndAssign` |\n| `&&`                      | `expr && expr`                                          | Short-circuiting logical AND                                          |                |\n| `*`                       | `expr * expr`                                           | Arithmetic multiplication                                             | `Mul`          |\n| `*=`                      | `var *= expr`                                           | Arithmetic multiplication and assignment                              | `MulAssign`    |\n| `*`                       | `*expr`                                                 | Dereference                                                           | `Deref`        |\n| `*`                       | `*const type`, `*mut type`                              | Raw pointer                                                           |                |\n| `+`                       | `trait + trait`, `'a + trait`                           | Compound type constraint                                              |                |\n| `+`                       | `expr + expr`                                           | Arithmetic addition                                                   | `Add`          |\n| `+=`                      | `var += expr`                                           | Arithmetic addition and assignment                                    | `AddAssign`    |\n| `,`                       | `expr, expr`                                            | Argument and element separator                                        |                |\n| `-`                       | `- expr`                                                | Arithmetic negation                                                   | `Neg`          |\n| `-`                       | `expr - expr`                                           | Arithmetic subtraction                                                | `Sub`          |\n| `-=`                      | `var -= expr`                                           | Arithmetic subtraction and assignment                                 | `SubAssign`    |\n| `->`                      | `fn(...) -> type`, <code>&vert;...&vert; -> type</code> | Function and closure return type                                      |                |\n| `.`                       | `expr.ident`                                            | Field access                                                          |                |\n| `.`                       | `expr.ident(expr, ...)`                                 | Method call                                                           |                |\n| `.`                       | `expr.0`, `expr.1`, etc.                                | Tuple indexing                                                        |                |\n| `..`                      | `..`, `expr..`, `..expr`, `expr..expr`                  | Right-exclusive range literal                                         | `PartialOrd`   |\n| `..=`                     | `..=expr`, `expr..=expr`                                | Right-inclusive range literal                                         | `PartialOrd`   |\n| `..`                      | `..expr`                                                | Struct literal update syntax                                          |                |\n| `..`                      | `variant(x, ..)`, `struct_type { x, .. }`               | “And the rest” pattern binding                                        |                |\n| `...`                     | `expr...expr`                                           | (Deprecated, use `..=` instead) In a pattern: inclusive range pattern |                |\n| `/`                       | `expr / expr`                                           | Arithmetic division                                                   | `Div`          |\n| `/=`                      | `var /= expr`                                           | Arithmetic division and assignment                                    | `DivAssign`    |\n| `:`                       | `pat: type`, `ident: type`                              | Constraints                                                           |                |\n| `:`                       | `ident: expr`                                           | Struct field initializer                                              |                |\n| `:`                       | `'a: loop {...}`                                        | Loop label                                                            |                |\n| `;`                       | `expr;`                                                 | Statement and item terminator                                         |                |\n| `;`                       | `[...; len]`                                            | Part of fixed-size array syntax                                       |                |\n| `<<`                      | `expr << expr`                                          | Left-shift                                                            | `Shl`          |\n| `<<=`                     | `var <<= expr`                                          | Left-shift and assignment                                             | `ShlAssign`    |\n| `<`                       | `expr < expr`                                           | Less than comparison                                                  | `PartialOrd`   |\n| `<=`                      | `expr <= expr`                                          | Less than or equal to comparison                                      | `PartialOrd`   |\n| `=`                       | `var = expr`, `ident = type`                            | Assignment/equivalence                                                |                |\n| `==`                      | `expr == expr`                                          | Equality comparison                                                   | `PartialEq`    |\n| `=>`                      | `pat => expr`                                           | Part of match arm syntax                                              |                |\n| `>`                       | `expr > expr`                                           | Greater than comparison                                               | `PartialOrd`   |\n| `>=`                      | `expr >= expr`                                          | Greater than or equal to comparison                                   | `PartialOrd`   |\n| `>>`                      | `expr >> expr`                                          | Right-shift                                                           | `Shr`          |\n| `>>=`                     | `var >>= expr`                                          | Right-shift and assignment                                            | `ShrAssign`    |\n| `@`                       | `ident @ pat`                                           | Pattern binding                                                       |                |\n| `^`                       | `expr ^ expr`                                           | Bitwise exclusive OR                                                  | `BitXor`       |\n| `^=`                      | `var ^= expr`                                           | Bitwise exclusive OR and assignment                                   | `BitXorAssign` |\n| <code>&vert;</code>       | <code>pat &vert; pat</code>                             | Pattern alternatives                                                  |                |\n| <code>&vert;</code>       | <code>expr &vert; expr</code>                           | Bitwise OR                                                            | `BitOr`        |\n| <code>&vert;=</code>      | <code>var &vert;= expr</code>                           | Bitwise OR and assignment                                             | `BitOrAssign`  |\n| <code>&vert;&vert;</code> | <code>expr &vert;&vert; expr</code>                     | Short-circuiting logical OR                                           |                |\n| `?`                       | `expr?`                                                 | Error propagation                                                     |                |"
        },
        {
          "kind": "text",
          "content": "### Non-operator Symbols"
        },
        {
          "kind": "text",
          "content": "The following list contains all symbols that don’t function as operators; that\nis, they don’t behave like a function or method call."
        },
        {
          "kind": "text",
          "content": "Table B-2 shows symbols that appear on their own and are valid in a variety of\nlocations."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-2: Stand-Alone Syntax</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol                                        | Explanation                                                            |\n| --------------------------------------------- | ---------------------------------------------------------------------- |\n| `'ident`                                      | Named lifetime or loop label                                           |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type                                       |\n| `\"...\"`                                       | String literal                                                         |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc.      | Raw string literal, escape characters not processed                    |\n| `b\"...\"`                                      | Byte string literal; constructs an array of bytes instead of a string  |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc.   | Raw byte string literal, combination of raw and byte string literal    |\n| `'...'`                                       | Character literal                                                      |\n| `b'...'`                                      | ASCII byte literal                                                     |\n| <code>&vert;...&vert; expr</code>             | Closure                                                                |\n| `!`                                           | Always empty bottom type for diverging functions                       |\n| `_`                                           | “Ignored” pattern binding; also used to make integer literals readable |"
        },
        {
          "kind": "text",
          "content": "Table B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-3: Path-Related Syntax</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol                                  | Explanation                                                                                                                     |\n| --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| `ident::ident`                          | Namespace path                                                                                                                  |\n| `::path`                                | Path relative to the extern prelude, where all other crates are rooted (i.e., an explicitly absolute path including crate name) |\n| `self::path`                            | Path relative to the current module (i.e., an explicitly relative path).                                                        |\n| `super::path`                           | Path relative to the parent of the current module                                                                               |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types                                                                                      |\n| `<type>::...`                           | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.)                                |\n| `trait::method(...)`                    | Disambiguating a method call by naming the trait that defines it                                                                |\n| `type::method(...)`                     | Disambiguating a method call by naming the type for which it’s defined                                                          |\n| `<type as trait>::method(...)`          | Disambiguating a method call by naming the trait and type                                                                       |"
        },
        {
          "kind": "text",
          "content": "Table B-4 shows symbols that appear in the context of using generic type\nparameters."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-4: Generics</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol                         | Explanation                                                                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| `path<...>`                    | Specifies parameters to generic type in a type (e.g., `Vec<u8>`)                                                                         |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...`            | Define generic function                                                                                                                  |\n| `struct ident<...> ...`        | Define generic structure                                                                                                                 |\n| `enum ident<...> ...`          | Define generic enumeration                                                                                                               |\n| `impl<...> ...`                | Define generic implementation                                                                                                            |\n| `for<...> type`                | Higher-ranked lifetime bounds                                                                                                            |\n| `type<ident=type>`             | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`)                                   |"
        },
        {
          "kind": "text",
          "content": "Table B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-5: Trait Bound Constraints</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol                        | Explanation                                                                                                                                |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `T: U`                        | Generic parameter `T` constrained to types that implement `U`                                                                              |\n| `T: 'a`                       | Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`) |\n| `T: 'static`                  | Generic type `T` contains no borrowed references other than `'static` ones                                                                 |\n| `'b: 'a`                      | Generic lifetime `'b` must outlive lifetime `'a`                                                                                           |\n| `T: ?Sized`                   | Allow generic type parameter to be a dynamically sized type                                                                                |\n| `'a + trait`, `trait + trait` | Compound type constraint                                                                                                                   |"
        },
        {
          "kind": "text",
          "content": "Table B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-6: Macros and Attributes</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol                                      | Explanation        |\n| ------------------------------------------- | ------------------ |\n| `#[meta]`                                   | Outer attribute    |\n| `#![meta]`                                  | Inner attribute    |\n| `$ident`                                    | Macro substitution |\n| `$ident:kind`                               | Macro capture      |\n| `$(…)…`                                     | Macro repetition   |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation   |"
        },
        {
          "kind": "text",
          "content": "Table B-7 shows symbols that create comments."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-7: Comments</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol     | Explanation             |\n| ---------- | ----------------------- |\n| `//`       | Line comment            |\n| `//!`      | Inner line doc comment  |\n| `///`      | Outer line doc comment  |\n| `/*...*/`  | Block comment           |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |"
        },
        {
          "kind": "text",
          "content": "Table B-8 shows the contexts in which parentheses are used."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-8: Parentheses</span>"
        },
        {
          "kind": "text",
          "content": "| Symbol                   | Explanation                                                                                 |\n| ------------------------ | ------------------------------------------------------------------------------------------- |\n| `()`                     | Empty tuple (aka unit), both literal and type                                               |\n| `(expr)`                 | Parenthesized expression                                                                    |\n| `(expr,)`                | Single-element tuple expression                                                             |\n| `(type,)`                | Single-element tuple type                                                                   |\n| `(expr, ...)`            | Tuple expression                                                                            |\n| `(type, ...)`            | Tuple type                                                                                  |\n| `expr(expr, ...)`        | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |"
        },
        {
          "kind": "text",
          "content": "Table B-9 shows the contexts in which curly braces are used."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-9: Curly Brackets</span>"
        },
        {
          "kind": "text",
          "content": "| Context      | Explanation      |\n| ------------ | ---------------- |\n| `{...}`      | Block expression |\n| `Type {...}` | `struct` literal |"
        },
        {
          "kind": "text",
          "content": "Table B-10 shows the contexts in which square brackets are used."
        },
        {
          "kind": "text",
          "content": "<span class=\"caption\">Table B-10: Square Brackets</span>"
        },
        {
          "kind": "text",
          "content": "| Context                                            | Explanation                                                                                                                   |\n| -------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `[...]`                                            | Array literal                                                                                                                 |\n| `[expr; len]`                                      | Array literal containing `len` copies of `expr`                                                                               |\n| `[type; len]`                                      | Array type containing `len` instances of `type`                                                                               |\n| `expr[expr]`                                       | Collection indexing. Overloadable (`Index`, `IndexMut`)                                                                       |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the “index” |"
        }
      ]
    },
    {
      "title": "Appendix C: Derivable Traits",
      "file": "appendix-03-derivable-traits.md",
      "elements": [
        {
          "kind": "text",
          "content": "In various places in the book, we’ve discussed the `derive` attribute, which\nyou can apply to a struct or enum definition. The `derive` attribute generates\ncode that will implement a trait with its own default implementation on the\ntype you’ve annotated with the `derive` syntax."
        },
        {
          "kind": "text",
          "content": "In this appendix, we provide a reference of all the traits in the standard\nlibrary that you can use with `derive`. Each section covers:"
        },
        {
          "kind": "text",
          "content": "- What operators and methods deriving this trait will enable\n- What the implementation of the trait provided by `derive` does\n- What implementing the trait signifies about the type\n- The conditions in which you’re allowed or not allowed to implement the trait\n- Examples of operations that require the trait"
        },
        {
          "kind": "text",
          "content": "If you want different behavior from that provided by the `derive` attribute,\nconsult the [standard library documentation](../std/index.html)<!-- ignore -->\nfor each trait for details on how to manually implement them."
        },
        {
          "kind": "text",
          "content": "The traits listed here are the only ones defined by the standard library that\ncan be implemented on your types using `derive`. Other traits defined in the\nstandard library don’t have sensible default behavior, so it’s up to you to\nimplement them in the way that makes sense for what you’re trying to accomplish."
        },
        {
          "kind": "text",
          "content": "An example of a trait that can’t be derived is `Display`, which handles\nformatting for end users. You should always consider the appropriate way to\ndisplay a type to an end user. What parts of the type should an end user be\nallowed to see? What parts would they find relevant? What format of the data\nwould be most relevant to them? The Rust compiler doesn’t have this insight, so\nit can’t provide appropriate default behavior for you."
        },
        {
          "kind": "text",
          "content": "The list of derivable traits provided in this appendix is not comprehensive:\nlibraries can implement `derive` for their own traits, making the list of\ntraits you can use `derive` with truly open-ended. Implementing `derive`\ninvolves using a procedural macro, which is covered in the\n[“Macros”][macros]<!-- ignore --> section of Chapter 20."
        },
        {
          "kind": "text",
          "content": "### `Debug` for Programmer Output"
        },
        {
          "kind": "text",
          "content": "The `Debug` trait enables debug formatting in format strings, which you\nindicate by adding `:?` within `{}` placeholders."
        },
        {
          "kind": "text",
          "content": "The `Debug` trait allows you to print instances of a type for debugging\npurposes, so you and other programmers using your type can inspect an instance\nat a particular point in a program’s execution."
        },
        {
          "kind": "text",
          "content": "The `Debug` trait is required, for example, in the use of the `assert_eq!`\nmacro. This macro prints the values of instances given as arguments if the\nequality assertion fails so programmers can see why the two instances weren’t\nequal."
        },
        {
          "kind": "text",
          "content": "### `PartialEq` and `Eq` for Equality Comparisons"
        },
        {
          "kind": "text",
          "content": "The `PartialEq` trait allows you to compare instances of a type to check for\nequality and enables use of the `==` and `!=` operators."
        },
        {
          "kind": "text",
          "content": "Deriving `PartialEq` implements the `eq` method. When `PartialEq` is derived on\nstructs, two instances are equal only if _all_ fields are equal, and the\ninstances are not equal if any fields are not equal. When derived on enums,\neach variant is equal to itself and not equal to the other variants."
        },
        {
          "kind": "text",
          "content": "The `PartialEq` trait is required, for example, with the use of the\n`assert_eq!` macro, which needs to be able to compare two instances of a type\nfor equality."
        },
        {
          "kind": "text",
          "content": "The `Eq` trait has no methods. Its purpose is to signal that for every value of\nthe annotated type, the value is equal to itself. The `Eq` trait can only be\napplied to types that also implement `PartialEq`, although not all types that\nimplement `PartialEq` can implement `Eq`. One example of this is floating point\nnumber types: the implementation of floating point numbers states that two\ninstances of the not-a-number (`NaN`) value are not equal to each other."
        },
        {
          "kind": "text",
          "content": "An example of when `Eq` is required is for keys in a `HashMap<K, V>` so the\n`HashMap<K, V>` can tell whether two keys are the same."
        },
        {
          "kind": "text",
          "content": "### `PartialOrd` and `Ord` for Ordering Comparisons"
        },
        {
          "kind": "text",
          "content": "The `PartialOrd` trait allows you to compare instances of a type for sorting\npurposes. A type that implements `PartialOrd` can be used with the `<`, `>`,\n`<=`, and `>=` operators. You can only apply the `PartialOrd` trait to types\nthat also implement `PartialEq`."
        },
        {
          "kind": "text",
          "content": "Deriving `PartialOrd` implements the `partial_cmp` method, which returns an\n`Option<Ordering>` that will be `None` when the values given don’t produce an\nordering. An example of a value that doesn’t produce an ordering, even though\nmost values of that type can be compared, is the not-a-number (`NaN`) floating\npoint value. Calling `partial_cmp` with any floating-point number and the `NaN`\nfloating-point value will return `None`."
        },
        {
          "kind": "text",
          "content": "When derived on structs, `PartialOrd` compares two instances by comparing the\nvalue in each field in the order in which the fields appear in the struct\ndefinition. When derived on enums, variants of the enum declared earlier in the\nenum definition are considered less than the variants listed later."
        },
        {
          "kind": "text",
          "content": "The `PartialOrd` trait is required, for example, for the `gen_range` method\nfrom the `rand` crate that generates a random value in the range specified by a\nrange expression."
        },
        {
          "kind": "text",
          "content": "The `Ord` trait allows you to know that for any two values of the annotated\ntype, a valid ordering will exist. The `Ord` trait implements the `cmp` method,\nwhich returns an `Ordering` rather than an `Option<Ordering>` because a valid\nordering will always be possible. You can only apply the `Ord` trait to types\nthat also implement `PartialOrd` and `Eq` (and `Eq` requires `PartialEq`). When\nderived on structs and enums, `cmp` behaves the same way as the derived\nimplementation for `partial_cmp` does with `PartialOrd`."
        },
        {
          "kind": "text",
          "content": "An example of when `Ord` is required is when storing values in a `BTreeSet<T>`,\na data structure that stores data based on the sort order of the values."
        },
        {
          "kind": "text",
          "content": "### `Clone` and `Copy` for Duplicating Values"
        },
        {
          "kind": "text",
          "content": "The `Clone` trait allows you to explicitly create a deep copy of a value, and\nthe duplication process might involve running arbitrary code and copying heap\ndata. See [Variables and Data Interacting with\nClone”][variables-and-data-interacting-with-clone]<!-- ignore --> in Chapter 4\nfor more information on `Clone`."
        },
        {
          "kind": "text",
          "content": "Deriving `Clone` implements the `clone` method, which when implemented for the\nwhole type, calls `clone` on each of the parts of the type. This means all the\nfields or values in the type must also implement `Clone` to derive `Clone`."
        },
        {
          "kind": "text",
          "content": "An example of when `Clone` is required is when calling the `to_vec` method on a\nslice. The slice doesn’t own the type instances it contains, but the vector\nreturned from `to_vec` will need to own its instances, so `to_vec` calls\n`clone` on each item. Thus the type stored in the slice must implement `Clone`."
        },
        {
          "kind": "text",
          "content": "The `Copy` trait allows you to duplicate a value by only copying bits stored on\nthe stack; no arbitrary code is necessary. See [“Stack-Only Data:\nCopy”][stack-only-data-copy]<!-- ignore --> in Chapter 4 for more information on\n`Copy`."
        },
        {
          "kind": "text",
          "content": "The `Copy` trait doesn’t define any methods to prevent programmers from\noverloading those methods and violating the assumption that no arbitrary code\nis being run. That way, all programmers can assume that copying a value will be\nvery fast."
        },
        {
          "kind": "text",
          "content": "You can derive `Copy` on any type whose parts all implement `Copy`. A type that\nimplements `Copy` must also implement `Clone`, because a type that implements\n`Copy` has a trivial implementation of `Clone` that performs the same task as\n`Copy`."
        },
        {
          "kind": "text",
          "content": "The `Copy` trait is rarely required; types that implement `Copy` have\noptimizations available, meaning you don’t have to call `clone`, which makes\nthe code more concise."
        },
        {
          "kind": "text",
          "content": "Everything possible with `Copy` you can also accomplish with `Clone`, but the\ncode might be slower or have to use `clone` in places."
        },
        {
          "kind": "text",
          "content": "### `Hash` for Mapping a Value to a Value of Fixed Size"
        },
        {
          "kind": "text",
          "content": "The `Hash` trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function. Deriving\n`Hash` implements the `hash` method. The derived implementation of the `hash`\nmethod combines the result of calling `hash` on each of the parts of the type,\nmeaning all fields or values must also implement `Hash` to derive `Hash`."
        },
        {
          "kind": "text",
          "content": "An example of when `Hash` is required is in storing keys in a `HashMap<K, V>`\nto store data efficiently."
        },
        {
          "kind": "text",
          "content": "### `Default` for Default Values"
        },
        {
          "kind": "text",
          "content": "The `Default` trait allows you to create a default value for a type. Deriving\n`Default` implements the `default` function. The derived implementation of the\n`default` function calls the `default` function on each part of the type,\nmeaning all fields or values in the type must also implement `Default` to\nderive `Default`."
        },
        {
          "kind": "text",
          "content": "The `Default::default` function is commonly used in combination with the struct\nupdate syntax discussed in [“Creating Instances from Other Instances with Struct\nUpdate\nSyntax”][creating-instances-from-other-instances-with-struct-update-syntax]<!--\nignore --> in Chapter 5. You can customize a few fields of a struct and then set\nand use a default value for the rest of the fields by using\n`..Default::default()`."
        },
        {
          "kind": "text",
          "content": "The `Default` trait is required when you use the method `unwrap_or_default` on\n`Option<T>` instances, for example. If the `Option<T>` is `None`, the method\n`unwrap_or_default` will return the result of `Default::default` for the type\n`T` stored in the `Option<T>`."
        },
        {
          "kind": "text",
          "content": "[creating-instances-from-other-instances-with-struct-update-syntax]: ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\n[stack-only-data-copy]: ch04-01-what-is-ownership.html#stack-only-data-copy\n[variables-and-data-interacting-with-clone]: ch04-01-what-is-ownership.html#variables-and-data-interacting-with-clone\n[macros]: ch20-05-macros.html#macros"
        }
      ]
    },
    {
      "title": "Appendix D - Useful Development Tools",
      "file": "appendix-04-useful-development-tools.md",
      "elements": [
        {
          "kind": "text",
          "content": "In this appendix, we talk about some useful development tools that the Rust\nproject provides. We’ll look at automatic formatting, quick ways to apply\nwarning fixes, a linter, and integrating with IDEs."
        },
        {
          "kind": "text",
          "content": "### Automatic Formatting with `rustfmt`"
        },
        {
          "kind": "text",
          "content": "The `rustfmt` tool reformats your code according to the community code style.\nMany collaborative projects use `rustfmt` to prevent arguments about which\nstyle to use when writing Rust: everyone formats their code using the tool."
        },
        {
          "kind": "text",
          "content": "Rust installations include rustfmt by default, so you should already have the\nprograms `rustfmt` and `cargo-fmt` on your system. These two commands are\nanalogous to `rustc` and `cargo` in that `rustfmt` allows finer-grained control\nand `cargo-fmt` understands conventions of a project that uses Cargo. To format\nany Cargo project, enter the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "sh",
            "flags": [],
            "code": "$ cargo fmt"
          }
        },
        {
          "kind": "text",
          "content": "Running this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics."
        },
        {
          "kind": "text",
          "content": "This command gives you `rustfmt` and `cargo-fmt`, similar to how Rust gives you\nboth `rustc` and `cargo`. To format any Cargo project, enter the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo fmt"
          }
        },
        {
          "kind": "text",
          "content": "Running this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics. For more information\non `rustfmt`, see [its documentation][rustfmt]."
        },
        {
          "kind": "text",
          "content": "[rustfmt]: https://github.com/rust-lang/rustfmt"
        },
        {
          "kind": "text",
          "content": "### Fix Your Code with `rustfix`"
        },
        {
          "kind": "text",
          "content": "The `rustfix` tool is included with Rust installations and can automatically fix\ncompiler warnings that have a clear way to correct the problem that’s likely\nwhat you want. It’s likely you’ve seen compiler warnings before. For example,\nconsider this code:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    let mut x = 42;\n    println!(\"{x}\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "Here, we’re defining the variable `x` as mutable, but we never actually mutate\nit. Rust warns us about that:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo build\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: variable does not need to be mutable\n --> src/main.rs:2:9\n  |\n2 |     let mut x = 0;\n  |         ----^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default"
          }
        },
        {
          "kind": "text",
          "content": "The warning suggests that we remove the `mut` keyword. We can automatically\napply that suggestion using the `rustfix` tool by running the command `cargo\nfix`:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo fix\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s"
          }
        },
        {
          "kind": "text",
          "content": "When we look at _src/main.rs_ again, we’ll see that `cargo fix` has changed the\ncode:"
        },
        {
          "kind": "text",
          "content": "<span class=\"filename\">Filename: src/main.rs</span>"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    let x = 42;\n    println!(\"{x}\");\n}"
          }
        },
        {
          "kind": "text",
          "content": "The `x` variable is now immutable, and the warning no longer appears."
        },
        {
          "kind": "text",
          "content": "You can also use the `cargo fix` command to transition your code between\ndifferent Rust editions. Editions are covered in [Appendix E][editions]."
        },
        {
          "kind": "text",
          "content": "### More Lints with Clippy"
        },
        {
          "kind": "text",
          "content": "The Clippy tool is a collection of lints to analyze your code so you can catch\ncommon mistakes and improve your Rust code. Clippy is included with standard\nRust installations."
        },
        {
          "kind": "text",
          "content": "To run Clippy’s lints on any Cargo project, enter the following:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cargo clippy"
          }
        },
        {
          "kind": "text",
          "content": "For example, say you write a program that uses an approximation of a\nmathematical constant, such as pi, as this program does:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    let x = 3.1415;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "Running `cargo clippy` on this project results in this error:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "error: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: `#[deny(clippy::approx_constant)]` on by default\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant"
          }
        },
        {
          "kind": "text",
          "content": "This error lets you know that Rust already has a more precise `PI` constant\ndefined, and that your program would be more correct if you used the constant\ninstead. You would then change your code to use the `PI` constant. The\nfollowing code doesn’t result in any errors or warnings from Clippy:"
        },
        {
          "kind": "text",
          "content": "<Listing file-name=\"src/main.rs\">"
        },
        {
          "kind": "code",
          "content": {
            "language": "rust",
            "flags": [],
            "code": "fn main() {\n    let x = std::f64::consts::PI;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}"
          }
        },
        {
          "kind": "text",
          "content": "</Listing>"
        },
        {
          "kind": "text",
          "content": "For more information on Clippy, see [its documentation][clippy]."
        },
        {
          "kind": "text",
          "content": "[clippy]: https://github.com/rust-lang/rust-clippy"
        },
        {
          "kind": "text",
          "content": "### IDE Integration Using `rust-analyzer`"
        },
        {
          "kind": "text",
          "content": "To help IDE integration, the Rust community recommends using\n[`rust-analyzer`][rust-analyzer]<!-- ignore -->. This tool is a set of\ncompiler-centric utilities that speaks the [Language Server Protocol][lsp]<!--\nignore -->, which is a specification for IDEs and programming languages to\ncommunicate with each other. Different clients can use `rust-analyzer`, such as\n[the Rust analyzer plug-in for Visual Studio Code][vscode]."
        },
        {
          "kind": "text",
          "content": "[lsp]: http://langserver.org/\n[vscode]: https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer"
        },
        {
          "kind": "text",
          "content": "Visit the `rust-analyzer` project’s [home page][rust-analyzer]<!-- ignore -->\nfor installation instructions, then install the language server support in your\nparticular IDE. Your IDE will gain abilities such as autocompletion, jump to\ndefinition, and inline errors."
        },
        {
          "kind": "text",
          "content": "[rust-analyzer]: https://rust-analyzer.github.io\n[editions]: appendix-05-editions.md"
        }
      ]
    },
    {
      "title": "Appendix E - Editions",
      "file": "appendix-05-editions.md",
      "elements": [
        {
          "kind": "text",
          "content": "In Chapter 1, you saw that `cargo new` adds a bit of metadata to your\n_Cargo.toml_ file about an edition. This appendix talks about what that means!"
        },
        {
          "kind": "text",
          "content": "The Rust language and compiler have a six-week release cycle, meaning users get\na constant stream of new features. Other programming languages release larger\nchanges less often; Rust releases smaller updates more frequently. After a\nwhile, all of these tiny changes add up. But from release to release, it can be\ndifficult to look back and say, “Wow, between Rust 1.10 and Rust 1.31, Rust has\nchanged a lot!”"
        },
        {
          "kind": "text",
          "content": "Every three years or so, the Rust team produces a new Rust _edition_. Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling. New editions ship as part of the usual\nsix-week release process."
        },
        {
          "kind": "text",
          "content": "Editions serve different purposes for different people:"
        },
        {
          "kind": "text",
          "content": "- For active Rust users, a new edition brings together incremental changes into\nan easy-to-understand package.\n- For non-users, a new edition signals that some major advancements have\nlanded, which might make Rust worth another look.\n- For those developing Rust, a new edition provides a rallying point for the\nproject as a whole."
        },
        {
          "kind": "text",
          "content": "At the time of this writing, four Rust editions are available: Rust 2015, Rust\n2018, Rust 2021, and Rust 2024. This book is written using Rust 2024 edition\nidioms."
        },
        {
          "kind": "text",
          "content": "The `edition` key in _Cargo.toml_ indicates which edition the compiler should\nuse for your code. If the key doesn’t exist, Rust uses `2015` as the edition\nvalue for backward compatibility reasons."
        },
        {
          "kind": "text",
          "content": "Each project can opt in to an edition other than the default 2015 edition.\nEditions can contain incompatible changes, such as including a new keyword that\nconflicts with identifiers in code. However, unless you opt in to those\nchanges, your code will continue to compile even as you upgrade the Rust\ncompiler version you use."
        },
        {
          "kind": "text",
          "content": "All Rust compiler versions support any edition that existed prior to that\ncompiler’s release, and they can link crates of any supported editions\ntogether. Edition changes only affect the way the compiler initially parses\ncode. Therefore, if you’re using Rust 2015 and one of your dependencies uses\nRust 2018, your project will compile and be able to use that dependency. The\nopposite situation, where your project uses Rust 2018 and a dependency uses\nRust 2015, works as well."
        },
        {
          "kind": "text",
          "content": "To be clear: most features will be available on all editions. Developers using\nany Rust edition will continue to see improvements as new stable releases are\nmade. However, in some cases, mainly when new keywords are added, some new\nfeatures might only be available in later editions. You will need to switch\neditions if you want to take advantage of such features."
        },
        {
          "kind": "text",
          "content": "For more details, the [_Edition Guide_](https://doc.rust-lang.org/stable/edition-guide/) is a complete book\nabout editions that enumerates the differences between editions and explains\nhow to automatically upgrade your code to a new edition via `cargo fix`."
        }
      ]
    },
    {
      "title": "Appendix F: Translations of the Book",
      "file": "appendix-06-translation.md",
      "elements": [
        {
          "kind": "text",
          "content": "For resources in languages other than English. Most are still in progress; see\n[the Translations label][label] to help or let us know about a new translation!"
        },
        {
          "kind": "text",
          "content": "[label]: https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations"
        },
        {
          "kind": "text",
          "content": "- [Português](https://github.com/rust-br/rust-book-pt-br) (BR)\n- [Português](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n- 简体中文: [KaiserY/trpl-zh-cn](https://github.com/KaiserY/trpl-zh-cn), [gnu4cn/rust-lang-Zh_CN](https://github.com/gnu4cn/rust-lang-Zh_CN)\n- [正體中文](https://github.com/rust-tw/book-tw)\n- [Українська](https://rust-lang-ua.github.io/rustbook_ukrainian)\n- [Español](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es), [Español por RustLangES](https://github.com/RustLangES/rust-book-es)\n- [Русский](https://github.com/rust-lang-ru/book)\n- [한국어](https://github.com/rust-kr/doc.rust-kr.org)\n- [日本語](https://github.com/rust-lang-ja/book-ja)\n- [Français](https://github.com/Jimskapt/rust-book-fr)\n- [Polski](https://github.com/paytchoo/book-pl)\n- [Cebuano](https://github.com/agentzero1/book)\n- [Tagalog](https://github.com/josephace135/book)\n- [Esperanto](https://github.com/psychoslave/Rust-libro)\n- [ελληνική](https://github.com/TChatzigiannakis/rust-book-greek)\n- [Svenska](https://github.com/sebras/book)\n- [Farsi](https://github.com/RustFarsi/book), [Persian (FA)](https://github.com/persian-rust/book)\n- [Deutsch](https://github.com/rust-lang-de/rustbook-de)\n- [हिंदी](https://github.com/venkatarun95/rust-book-hindi)\n- [ไทย](https://github.com/rust-lang-th/book-th)\n- [Danske](https://github.com/DanKHansen/book-dk)"
        }
      ]
    },
    {
      "title": "Appendix G - How Rust is Made and “Nightly Rust”",
      "file": "appendix-07-nightly-rust.md",
      "elements": [
        {
          "kind": "text",
          "content": "This appendix is about how Rust is made and how that affects you as a Rust\ndeveloper."
        },
        {
          "kind": "text",
          "content": "### Stability Without Stagnation"
        },
        {
          "kind": "text",
          "content": "As a language, Rust cares a _lot_ about the stability of your code. We want\nRust to be a rock-solid foundation you can build on, and if things were\nconstantly changing, that would be impossible. At the same time, if we can’t\nexperiment with new features, we may not find out important flaws until after\ntheir release, when we can no longer change things."
        },
        {
          "kind": "text",
          "content": "Our solution to this problem is what we call “stability without stagnation”,\nand our guiding principle is this: you should never have to fear upgrading to a\nnew version of stable Rust. Each upgrade should be painless, but should also\nbring you new features, fewer bugs, and faster compile times."
        },
        {
          "kind": "text",
          "content": "### Choo, Choo! Release Channels and Riding the Trains"
        },
        {
          "kind": "text",
          "content": "Rust development operates on a _train schedule_. That is, all development is\ndone on the `master` branch of the Rust repository. Releases follow a software\nrelease train model, which has been used by Cisco IOS and other software\nprojects. There are three _release channels_ for Rust:"
        },
        {
          "kind": "text",
          "content": "- Nightly\n- Beta\n- Stable"
        },
        {
          "kind": "text",
          "content": "Most Rust developers primarily use the stable channel, but those who want to\ntry out experimental new features may use nightly or beta."
        },
        {
          "kind": "text",
          "content": "Here’s an example of how the development and release process works: let’s\nassume that the Rust team is working on the release of Rust 1.5. That release\nhappened in December of 2015, but it will provide us with realistic version\nnumbers. A new feature is added to Rust: a new commit lands on the `master`\nbranch. Each night, a new nightly version of Rust is produced. Every day is a\nrelease day, and these releases are created by our release infrastructure\nautomatically. So as time passes, our releases look like this, once a night:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "nightly: * - - * - - *"
          }
        },
        {
          "kind": "text",
          "content": "Every six weeks, it’s time to prepare a new release! The `beta` branch of the\nRust repository branches off from the `master` branch used by nightly. Now,\nthere are two releases:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "nightly: * - - * - - *\n                     |\nbeta:                *"
          }
        },
        {
          "kind": "text",
          "content": "Most Rust users do not use beta releases actively, but test against beta in\ntheir CI system to help Rust discover possible regressions. In the meantime,\nthere’s still a nightly release every night:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "nightly: * - - * - - * - - * - - *\n                     |\nbeta:                *"
          }
        },
        {
          "kind": "text",
          "content": "Let’s say a regression is found. Good thing we had some time to test the beta\nrelease before the regression snuck into a stable release! The fix is applied\nto `master`, so that nightly is fixed, and then the fix is backported to the\n`beta` branch, and a new release of beta is produced:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "nightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *"
          }
        },
        {
          "kind": "text",
          "content": "Six weeks after the first beta was created, it’s time for a stable release! The\n`stable` branch is produced from the `beta` branch:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "nightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *"
          }
        },
        {
          "kind": "text",
          "content": "Hooray! Rust 1.5 is done! However, we’ve forgotten one thing: because the six\nweeks have gone by, we also need a new beta of the _next_ version of Rust, 1.6.\nSo after `stable` branches off of `beta`, the next version of `beta` branches\noff of `nightly` again:"
        },
        {
          "kind": "code",
          "content": {
            "language": "text",
            "flags": [],
            "code": "nightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *"
          }
        },
        {
          "kind": "text",
          "content": "This is called the “train model” because every six weeks, a release “leaves the\nstation”, but still has to take a journey through the beta channel before it\narrives as a stable release."
        },
        {
          "kind": "text",
          "content": "Rust releases every six weeks, like clockwork. If you know the date of one Rust\nrelease, you can know the date of the next one: it’s six weeks later. A nice\naspect of having releases scheduled every six weeks is that the next train is\ncoming soon. If a feature happens to miss a particular release, there’s no need\nto worry: another one is happening in a short time! This helps reduce pressure\nto sneak possibly unpolished features in close to the release deadline."
        },
        {
          "kind": "text",
          "content": "Thanks to this process, you can always check out the next build of Rust and\nverify for yourself that it’s easy to upgrade to: if a beta release doesn’t\nwork as expected, you can report it to the team and get it fixed before the\nnext stable release happens! Breakage in a beta release is relatively rare, but\n`rustc` is still a piece of software, and bugs do exist."
        },
        {
          "kind": "text",
          "content": "### Maintenance time"
        },
        {
          "kind": "text",
          "content": "The Rust project supports the most recent stable version. When a new stable\nversion is released, the old version reaches its end of life (EOL). This means\neach version is supported for six weeks."
        },
        {
          "kind": "text",
          "content": "### Unstable Features"
        },
        {
          "kind": "text",
          "content": "There’s one more catch with this release model: unstable features. Rust uses a\ntechnique called “feature flags” to determine what features are enabled in a\ngiven release. If a new feature is under active development, it lands on\n`master`, and therefore, in nightly, but behind a _feature flag_. If you, as a\nuser, wish to try out the work-in-progress feature, you can, but you must be\nusing a nightly release of Rust and annotate your source code with the\nappropriate flag to opt in."
        },
        {
          "kind": "text",
          "content": "If you’re using a beta or stable release of Rust, you can’t use any feature\nflags. This is the key that allows us to get practical use with new features\nbefore we declare them stable forever. Those who wish to opt into the bleeding\nedge can do so, and those who want a rock-solid experience can stick with\nstable and know that their code won’t break. Stability without stagnation."
        },
        {
          "kind": "text",
          "content": "This book only contains information about stable features, as in-progress\nfeatures are still changing, and surely they’ll be different between when this\nbook was written and when they get enabled in stable builds. You can find\ndocumentation for nightly-only features online."
        },
        {
          "kind": "text",
          "content": "### Rustup and the Role of Rust Nightly"
        },
        {
          "kind": "text",
          "content": "Rustup makes it easy to change between different release channels of Rust, on a\nglobal or per-project basis. By default, you’ll have stable Rust installed. To\ninstall nightly, for example:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ rustup toolchain install nightly"
          }
        },
        {
          "kind": "text",
          "content": "You can see all of the _toolchains_ (releases of Rust and associated\ncomponents) you have installed with `rustup` as well. Here’s an example on one\nof your authors’ Windows computer:"
        },
        {
          "kind": "code",
          "content": {
            "language": "powershell",
            "flags": [],
            "code": "> rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc"
          }
        },
        {
          "kind": "text",
          "content": "As you can see, the stable toolchain is the default. Most Rust users use stable\nmost of the time. You might want to use stable most of the time, but use\nnightly on a specific project, because you care about a cutting-edge feature.\nTo do so, you can use `rustup override` in that project’s directory to set the\nnightly toolchain as the one `rustup` should use when you’re in that directory:"
        },
        {
          "kind": "code",
          "content": {
            "language": "console",
            "flags": [],
            "code": "$ cd ~/projects/needs-nightly\n$ rustup override set nightly"
          }
        },
        {
          "kind": "text",
          "content": "Now, every time you call `rustc` or `cargo` inside of\n_~/projects/needs-nightly_, `rustup` will make sure that you are using nightly\nRust, rather than your default of stable Rust. This comes in handy when you\nhave a lot of Rust projects!"
        },
        {
          "kind": "text",
          "content": "### The RFC Process and Teams"
        },
        {
          "kind": "text",
          "content": "So how do you learn about these new features? Rust’s development model follows\na _Request For Comments (RFC) process_. If you’d like an improvement in Rust,\nyou can write up a proposal, called an RFC."
        },
        {
          "kind": "text",
          "content": "Anyone can write RFCs to improve Rust, and the proposals are reviewed and\ndiscussed by the Rust team, which is comprised of many topic subteams. There’s\na full list of the teams [on Rust’s website](https://www.rust-lang.org/governance), which includes teams for\neach area of the project: language design, compiler implementation,\ninfrastructure, documentation, and more. The appropriate team reads the\nproposal and the comments, writes some comments of their own, and eventually,\nthere’s consensus to accept or reject the feature."
        },
        {
          "kind": "text",
          "content": "If the feature is accepted, an issue is opened on the Rust repository, and\nsomeone can implement it. The person who implements it very well may not be the\nperson who proposed the feature in the first place! When the implementation is\nready, it lands on the `master` branch behind a feature gate, as we discussed\nin the [“Unstable Features”](#unstable-features)<!-- ignore --> section."
        },
        {
          "kind": "text",
          "content": "After some time, once Rust developers who use nightly releases have been able\nto try out the new feature, team members will discuss the feature, how it’s\nworked out on nightly, and decide if it should make it into stable Rust or not.\nIf the decision is to move forward, the feature gate is removed, and the\nfeature is now considered stable! It rides the trains into a new stable release\nof Rust."
        }
      ]
    }
  ]
}